project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/distribution/DiscreteDistribution,8,157,        final double randomValue = random.nextDouble();,0.5,0,1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,0.5,0,1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,0.5,0,1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,161,            sum += probabilities[i];,0.5,0,0,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,162,            if (randomValue < sum) {,0.5,0,1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,0.5,0,1,0
org/apache/commons/math3/random/Well19937c,8,86,        final int indexRm1 = iRm1[index];,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,0.5,0,1,0
org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,92,        final int vM3      = v[i3[index]];,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,0.5,0,1,0
org/apache/commons/math3/random/Well19937c,8,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,100,        v[index]     = z3;,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,0.5,0,0,0
org/apache/commons/math3/random/Well19937c,8,103,        index        = indexRm1;,0.5,0,1,0
org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,0.5,0,1,0
org/apache/commons/math3/random/Well19937c,8,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0.5,0,1,0
org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,0.5,0,1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,0.5,0,0,0
org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,0.5,0,1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,0.5,0,1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,66,"        this(new Well19937c(), singletons, probabilities);",0.08333,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,67,    },0.08333,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,87,        super(rng);,0.08333,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,88,        if (singletons.length != probabilities.length) {,0.08333,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,92,"        List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);",0.08333,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,94,        for (int i = 0; i < singletons.length; i++) {,0.08333,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,95,"            samples.add(new Pair<Double, Double>(singletons[i], probabilities[i]));",0.08333,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,98,"        innerDistribution = new DiscreteDistribution<Double>(rng, samples);",0.08333,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,99,    },0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,50,    @Deprecated,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,76,    protected AbstractRealDistribution(RandomGenerator rng) {,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,77,        random = rng;,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,78,    },0.08333,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1249,         if (Double.isInfinite(normalizedSum)) {,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1252,         if (Double.isNaN(normalizedSum)) {,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1255,         double sum = 0d;,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1256,         final int len = values.length;,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1257,         double[] out = new double[len];,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1258,         for (int i = 0; i < len; i++) {,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1259,             if (Double.isInfinite(values[i])) {,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1262,             if (!Double.isNaN(values[i])) {,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1263,                 sum += values[i];,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1266,         if (sum == 0) {,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1269,         for (int i = 0; i < len; i++) {,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1270,             if (Double.isNaN(values[i])) {,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1273,                 out[i] = values[i] * normalizedSum / sum;,0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1276,         return out;,0.04762,0,-1,0
org/apache/commons/math3/util/Pair,8,45,"    public Pair(K k, V v) {",0.04762,0,-1,0
org/apache/commons/math3/util/Pair,8,46,        key = k;,0.04762,0,-1,0
org/apache/commons/math3/util/Pair,8,47,        value = v;,0.04762,0,-1,0
org/apache/commons/math3/util/Pair,8,48,    },0.04762,0,-1,0
org/apache/commons/math3/util/Pair,8,65,        return key;,0.04762,0,-1,0
org/apache/commons/math3/util/Pair,8,74,        return value;,0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,86,"        throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {",0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,87,        random = rng;,0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,89,        singletons = new ArrayList<T>(samples.size());,0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,90,        final double[] probs = new double[samples.size()];,0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,92,        for (int i = 0; i < samples.size(); i++) {,0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,93,"            final Pair<T, Double> sample = samples.get(i);",0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,94,            singletons.add(sample.getKey());,0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,95,            if (sample.getValue() < 0) {,0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,98,            probs[i] = sample.getValue();,0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,101,"        probabilities = MathArrays.normalizeArray(probs, 1.0);",0.04762,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,102,    },0.04762,0,-1,0
org/apache/commons/math3/random/Well19937c,8,57,"        super(K, M1, M2, M3);",0.04762,0,-1,0
org/apache/commons/math3/random/Well19937c,8,58,    },0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,72,"        this(k, m1, m2, m3, null);",0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,73,    },0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,99,        final int w = 32;,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,100,        final int r = (k + w - 1) / w;,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,101,        this.v      = new int[r];,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,102,        this.index  = 0;,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,106,        iRm1 = new int[r];,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,107,        iRm2 = new int[r];,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,108,        i1   = new int[r];,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,109,        i2   = new int[r];,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,110,        i3   = new int[r];,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,111,        for (int j = 0; j < r; ++j) {,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,112,            iRm1[j] = (j + r - 1) % r;,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,113,            iRm2[j] = (j + r - 2) % r;,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,114,            i1[j]   = (j + m1)    % r;,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,115,            i2[j]   = (j + m2)    % r;,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,116,            i3[j]   = (j + m3)    % r;,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,120,        setSeed(seed);,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,122,    },0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,154,        if (seed == null) {,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,156,            return;,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,161,        if (seed.length < v.length) {,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,162,            for (int i = seed.length; i < v.length; ++i) {,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,163,                final long l = v[i - seed.length];,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,168,        index = 0;,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,169,        clear();  // Clear normal deviate cache,0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,170,    },0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0.04762,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,180,    },0.04762,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,40,    public BitsStreamGenerator() {,0.04762,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,41,        nextGaussian = Double.NaN;,0.04762,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,42,    },0.04762,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,170,        nextGaussian = Double.NaN;,0.04762,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,171,    },0.04762,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,131,    public RandomDataGenerator() {,0.04762,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,118,    private RandomGenerator rand = null;,0.04762,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,121,    private SecureRandom secRand = null;,0.04762,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,132,    },0.04762,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,114,    public RandomDataImpl() {,0.04762,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,115,        delegate = new RandomDataGenerator();,0.04762,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,116,    },0.04762,0,-1,0
org/apache/commons/math3/util/MathArrays,8,674,"            = new Comparator<Pair<Double, double[]>>() {",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,678,                switch (dir) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,680,                    val = o1.getKey().compareTo(o2.getKey());,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,681,                break;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,683,                    val = o2.getKey().compareTo(o1.getKey());,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,684,                break;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,687,                    throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,689,                return val;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,51,    private MathArrays() {},0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,88,        if (a.length != b.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,89,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,92,        final double[] result = a.clone();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,93,        for (int i = 0; i < a.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,94,            result[i] += b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,96,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,110,        if (a.length != b.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,111,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,114,        final double[] result = a.clone();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,115,        for (int i = 0; i < a.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,116,            result[i] -= b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,118,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,132,        if (a.length != b.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,133,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,136,        final double[] result = a.clone();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,137,        for (int i = 0; i < a.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,138,            result[i] *= b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,140,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,154,        if (a.length != b.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,155,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,158,        final double[] result = a.clone();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,159,        for (int i = 0; i < a.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,160,            result[i] /= b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,162,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,173,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,174,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,175,            sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,177,        return sum;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,188,      int sum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,189,      for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,190,          sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,192,      return sum;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,203,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,204,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,205,            final double dp = p1[i] - p2[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,206,            sum += dp * dp;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,208,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,219,      double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,220,      for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,221,          final double dp = p1[i] - p2[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,222,          sum += dp * dp;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,224,      return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,235,        double max = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,236,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,237,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,239,        return max;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,250,        int max = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,251,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,252,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,254,        return max;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,279,        T previous = val[0];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,280,        final int max = val.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,281,        for (int i = 1; i < max; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,283,            switch (dir) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,285,                comp = previous.compareTo(val[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,286,                if (strict) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,287,                    if (comp >= 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,288,                        return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,291,                    if (comp > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,292,                        return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,297,                comp = val[i].compareTo(previous);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,298,                if (strict) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,299,                    if (comp >= 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,300,                        return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,303,                    if (comp > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,304,                       return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,310,                throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,313,            previous = val[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,315,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,329,"        return checkOrder(val, dir, strict, false);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,346,        double previous = val[0];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,347,        final int max = val.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,351,        for (index = 1; index < max; index++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,352,            switch (dir) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,354,                if (strict) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,355,                    if (val[index] <= previous) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,356,                        break ITEM;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,359,                    if (val[index] < previous) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,360,                        break ITEM;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,365,                if (strict) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,366,                    if (val[index] >= previous) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,367,                        break ITEM;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,370,                    if (val[index] > previous) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,371,                        break ITEM;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,377,                throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,380,            previous = val[index];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,383,        if (index == max) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,385,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,389,        if (abort) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,390,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,392,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,407,"        checkOrder(val, dir, strict, true);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,408,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,418,"        checkOrder(val, OrderDirection.INCREASING, true);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,419,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,431,        MathUtils.checkNotNull(in);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,432,        for (int i = 1; i < in.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,433,            if (in[i].length != in[0].length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,434,                throw new DimensionMismatchException(,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,439,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,451,        for (int i = 0; i < in.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,452,            if (in[i] <= 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,453,                throw new NotStrictlyPositiveException(in[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,456,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,467,        for (int i = 0; i < in.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,468,            if (in[i] < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,469,                throw new NotPositiveException(in[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,472,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,483,        for (int i = 0; i < in.length; i ++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,484,            for (int j = 0; j < in[i].length; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,485,                if (in[i][j] < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,486,                    throw new NotPositiveException(in[i][j]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,490,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,553,        double rdwarf = 3.834e-20;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,554,        double rgiant = 1.304e+19;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,555,        double s1 = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,556,        double s2 = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,557,        double s3 = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,558,        double x1max = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,559,        double x3max = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,560,        double floatn = v.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,561,        double agiant = rgiant / floatn;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,562,        for (int i = 0; i < v.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,563,            double xabs = Math.abs(v[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,564,            if (xabs < rdwarf || xabs > agiant) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,565,                if (xabs > rdwarf) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,566,                    if (xabs > x1max) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,567,                        double r = x1max / xabs;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,568,                        s1= 1 + s1 * r * r;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,569,                        x1max = xabs;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,570,                    } else {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,571,                        double r = xabs / x1max;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,572,                        s1 += r * r;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,573,                    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,575,                    if (xabs > x3max) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,576,                        double r = x3max / xabs;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,577,                        s3= 1 + s3 * r * r;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,578,                        x3max = xabs;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,579,                    } else {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,580,                        if (xabs != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,581,                            double r = xabs / x3max;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,582,                            s3 += r * r;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,583,                        },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,587,                s2 += xabs * xabs;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,591,        if (s1 != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,592,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,594,            if (s2 == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,595,                norm = x3max * Math.sqrt(s3);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,597,                if (s2 >= x3max) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,598,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,600,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,604,        return norm;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,625,"        sortInPlace(x, OrderDirection.INCREASING, yList);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,626,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,649,        if (x == null) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,650,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,653,        final int len = x.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,654,"        final List<Pair<Double, double[]>> list",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,657,        final int yListLen = yList.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,658,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,659,            final double[] yValues = new double[yListLen];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,660,            for (int j = 0; j < yListLen; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,661,                double[] y = yList[j];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,662,                if (y == null) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,663,                    throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,665,                if (y.length != len) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,666,"                    throw new DimensionMismatchException(y.length, len);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,668,                yValues[j] = y[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,670,"            list.add(new Pair<Double, double[]>(x[i], yValues));",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,673,"        final Comparator<Pair<Double, double[]>> comp",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,693,"        Collections.sort(list, comp);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,695,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,696,"            final Pair<Double, double[]> e = list.get(i);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,697,            x[i] = e.getKey();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,698,            final double[] yValues = e.getValue();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,699,            for (int j = 0; j < yListLen; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,700,                yList[j][i] = yValues[j];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,703,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,712,"         return copyOf(source, source.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,722,"         return copyOf(source, source.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,735,         final int[] output = new int[len];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,736,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,737,         return output;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,750,         final double[] output = new double[len];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,751,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,752,         return output;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,774,        final int len = a.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,775,        if (len != b.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,776,"            throw new DimensionMismatchException(len, b.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,779,        final double[] prodHigh = new double[len];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,780,        double prodLowSum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,782,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,783,            final double ai = a[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,784,            final double ca = SPLIT_FACTOR * ai;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,785,            final double aHigh = ca - (ca - ai);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,786,            final double aLow = ai - aHigh;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,788,            final double bi = b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,789,            final double cb = SPLIT_FACTOR * bi;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,790,            final double bHigh = cb - (cb - bi);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,791,            final double bLow = bi - bHigh;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,792,            prodHigh[i] = ai * bi;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,793,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,797,            prodLowSum += prodLow;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,801,        final double prodHighCur = prodHigh[0];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,802,        double prodHighNext = prodHigh[1];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,803,        double sHighPrev = prodHighCur + prodHighNext;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,804,        double sPrime = sHighPrev - prodHighNext;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,805,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,807,        final int lenMinusOne = len - 1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,808,        for (int i = 1; i < lenMinusOne; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,809,            prodHighNext = prodHigh[i + 1];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,810,            final double sHighCur = sHighPrev + prodHighNext;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,811,            sPrime = sHighCur - prodHighNext;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,812,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,813,            sHighPrev = sHighCur;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,816,        double result = sHighPrev + (prodLowSum + sLowSum);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,818,        if (Double.isNaN(result)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,821,            result = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,822,            for (int i = 0; i < len; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,823,                result += a[i] * b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,827,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,866,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,867,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,868,        final double a1Low      = a1 - a1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,869,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,870,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,871,        final double b1Low      = b1 - b1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,874,        final double prod1High  = a1 * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,875,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,878,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,879,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,880,        final double a2Low      = a2 - a2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,881,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,882,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,883,        final double b2Low      = b2 - b2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,886,        final double prod2High  = a2 * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,887,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,890,        final double s12High    = prod1High + prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,891,        final double s12Prime   = s12High - prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,892,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,896,        double result = s12High + (prod1Low + prod2Low + s12Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,898,        if (Double.isNaN(result)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,901,            result = a1 * b1 + a2 * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,904,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,946,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,947,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,948,        final double a1Low      = a1 - a1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,949,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,950,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,951,        final double b1Low      = b1 - b1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,954,        final double prod1High  = a1 * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,955,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,958,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,959,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,960,        final double a2Low      = a2 - a2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,961,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,962,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,963,        final double b2Low      = b2 - b2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,966,        final double prod2High  = a2 * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,967,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,970,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,971,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,972,        final double a3Low      = a3 - a3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,973,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,974,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,975,        final double b3Low      = b3 - b3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,978,        final double prod3High  = a3 * b3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,979,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,982,        final double s12High    = prod1High + prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,983,        final double s12Prime   = s12High - prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,984,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,987,        final double s123High   = s12High + prod3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,988,        final double s123Prime  = s123High - prod3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,989,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,993,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,995,        if (Double.isNaN(result)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,998,            result = a1 * b1 + a2 * b2 + a3 * b3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1001,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1048,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1049,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1050,        final double a1Low      = a1 - a1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1051,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1052,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1053,        final double b1Low      = b1 - b1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1056,        final double prod1High  = a1 * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1057,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1060,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1061,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1062,        final double a2Low      = a2 - a2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1063,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1064,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1065,        final double b2Low      = b2 - b2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1068,        final double prod2High  = a2 * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1069,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1072,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1073,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1074,        final double a3Low      = a3 - a3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1075,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1076,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1077,        final double b3Low      = b3 - b3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1080,        final double prod3High  = a3 * b3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1081,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1084,        final double ca4        = SPLIT_FACTOR * a4;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1085,        final double a4High     = ca4 - (ca4 - a4);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1086,        final double a4Low      = a4 - a4High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1087,        final double cb4        = SPLIT_FACTOR * b4;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1088,        final double b4High     = cb4 - (cb4 - b4);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1089,        final double b4Low      = b4 - b4High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1092,        final double prod4High  = a4 * b4;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1093,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1096,        final double s12High    = prod1High + prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1097,        final double s12Prime   = s12High - prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1098,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1101,        final double s123High   = s12High + prod3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1102,        final double s123Prime  = s123High - prod3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1103,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1106,        final double s1234High  = s123High + prod4High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1107,        final double s1234Prime = s1234High - prod4High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1108,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1112,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1114,        if (Double.isNaN(result)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1117,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1120,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1134,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1135,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1137,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1138,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1140,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1141,"            if (!Precision.equals(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1142,                return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1145,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1160,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1161,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1163,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1164,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1166,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1167,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1168,                return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1171,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1185,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1186,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1188,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1189,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1191,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1192,"            if (!Precision.equals(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1193,                return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1196,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1211,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1212,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1214,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1215,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1217,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1218,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1219,                return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1222,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1250,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1253,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1260,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1267,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1271,                 out[i] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1290,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1291,"         Arrays.fill(array, field.getZero());",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1292,         return array;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1309,         if (columns < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1310,"             T[] dummyRow = buildArray(field, 0);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1311,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1312,         } else {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1313,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1317,             for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1318,"                 Arrays.fill(array[i], field.getZero());",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,1321,         return array;,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,8,37,    public MathInternalError() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,8,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,8,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,8,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,8,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,8,56,"        super(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,8,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,8,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,56,"        this(entry.getKey(), entry.getValue());",0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,57,    },0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,84,        return key;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,94,        return value;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,106,        if (this == o) {,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,107,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,109,        if (!(o instanceof Pair)) {,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,110,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,112,"            Pair<?, ?> oP = (Pair<?, ?>) o;",0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,113,            return (key == null ?,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,129,        int result = key == null ? 0 : key.hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,131,        final int h = value == null ? 0 : value.hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,132,        result = 37 * result + h ^ (h >>> 16);,0.0,0,-1,0
org/apache/commons/math3/util/Pair,8,134,        return result;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,8,44,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,8,45,        dimension = expected;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,8,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,8,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,8,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,8,63,        return dimension;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,8,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,8,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,8,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,8,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,8,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,8,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,8,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,8,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,8,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,8,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,8,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,59,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,63,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,8,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,8,37,"        super(value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,8,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,8,47,"        super(specific, value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,8,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,8,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,8,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,8,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,8,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,8,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,8,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,8,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,8,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,8,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,8,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,8,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,8,49,    },0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,62,    },0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,89,        this.direction = direction;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,90,        this.strict = strict;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,91,        this.index = index;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,92,        this.previous = previous;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,93,    },0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,99,        return direction;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,105,        return strict;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,113,        return index;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,8,119,        return previous;,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,8,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,8,42,    },0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,8,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,8,51,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,260,    public static enum OrderDirection {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,262,"        INCREASING,",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,264,        DECREASING,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,8,283,            switch (dir) {,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,69,"        this(new Well19937c(), samples);",0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,70,    },0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,96,                throw new NotPositiveException(sample.getValue());,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,110,        random.setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,111,    },0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,123,        double probability = 0;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,125,        for (int i = 0; i < probabilities.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,126,            if ((x == null && singletons.get(i) == null) ||,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,128,                probability += probabilities[i];,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,132,        return probability;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,142,"        final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length);",0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,144,        for (int i = 0; i < probabilities.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,145,"            samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i]));",0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,148,        return samples;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,170,        return singletons.get(singletons.size() - 1);,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,182,        if (sampleSize <= 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,183,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);",0.0,1,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,189,        for (int i = 0; i < sampleSize; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,190,            out[i] = sample();,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteDistribution,8,193,        return out;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,89,"            throw new DimensionMismatchException(probabilities.length, singletons.length);",0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,106,        return innerDistribution.probability(x);,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,119,        return probability(x);,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,126,        double probability = 0;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,128,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,129,            if (sample.getKey() <= x) {,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,130,                probability += sample.getValue();,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,132,        },0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,134,        return probability;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,143,        double mean = 0;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,145,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,146,            mean += sample.getValue() * sample.getKey();,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,147,        },0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,149,        return mean;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,158,        double mean = 0;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,159,        double meanOfSquares = 0;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,161,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,162,            mean += sample.getValue() * sample.getKey();,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,163,            meanOfSquares += sample.getValue() * sample.getKey() * sample.getKey();,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,164,        },0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,166,        return meanOfSquares - mean * mean;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,177,        double min = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,178,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,179,            if (sample.getKey() < min && sample.getValue() > 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,180,                min = sample.getKey();,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,182,        },0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,184,        return min;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,195,        double max = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,196,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,197,            if (sample.getKey() > max && sample.getValue() > 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,198,                max = sample.getKey();,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,200,        },0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,202,        return max;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,213,        return true;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,224,        return true;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,235,        return true;,0.0,0,-1,0
org/apache/commons/math3/distribution/DiscreteRealDistribution,8,243,        return innerDistribution.sample();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,67,    protected AbstractRealDistribution() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,70,        random = null;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,71,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,91,"        return probability(x0, x1);",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,112,        if (x0 > x1) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,113,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,116,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,157,        if (p < 0.0 || p > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,158,"            throw new OutOfRangeException(p, 0, 1);",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,161,        double lowerBound = getSupportLowerBound();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,162,        if (p == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,163,            return lowerBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,166,        double upperBound = getSupportUpperBound();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,167,        if (p == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,168,            return upperBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,171,        final double mu = getNumericalMean();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,172,        final double sig = FastMath.sqrt(getNumericalVariance());,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,174,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,177,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,178,            if (chebyshevApplies) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,179,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,181,                lowerBound = -1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,182,                while (cumulativeProbability(lowerBound) >= p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,183,                    lowerBound *= 2.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,188,        if (upperBound == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,189,            if (chebyshevApplies) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,190,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,192,                upperBound = 1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,193,                while (cumulativeProbability(upperBound) < p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,194,                    upperBound *= 2.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,206,"        double x = UnivariateSolverUtils.solve(toSolve,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,211,        if (!isSupportConnected()) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,213,            final double dx = getSolverAbsoluteAccuracy();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,214,            if (x - dx >= getSupportLowerBound()) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,215,                double px = cumulativeProbability(x);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,216,                if (cumulativeProbability(x - dx) == px) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,217,                    upperBound = x;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,218,                    while (upperBound - lowerBound > dx) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,219,                        final double midPoint = 0.5 * (lowerBound + upperBound);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,220,                        if (cumulativeProbability(midPoint) < px) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,221,                            lowerBound = midPoint;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,223,                            upperBound = midPoint;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,225,                    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,226,                    return upperBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,230,        return x;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,241,        return solverAbsoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,246,        random.setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,247,        randomData.reSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,248,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,259,        return inverseCumulativeProbability(random.nextDouble());,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,269,        if (sampleSize <= 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,270,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,273,        double[] out = new double[sampleSize];,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,274,        for (int i = 0; i < sampleSize; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,275,            out[i] = sample();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,277,        return out;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,287,        return 0d;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,8,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,8,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,8,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,8,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,8,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,8,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,8,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,8,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,8,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,8,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,8,62,"        super(specific, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,8,63,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,8,64,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,8,65,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,8,71,        return lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,8,77,        return hi;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,8,202,                return cumulativeProbability(x) - p;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,8,64,"        super(K, M1, M2, M3, seed);",0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,8,65,    },0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,8,72,"        super(K, M1, M2, M3, seed);",0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,8,73,    },0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,8,79,"        super(K, M1, M2, M3, seed);",0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,8,80,    },0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,83,"        this(k, m1, m2, m3, new int[] { seed });",0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,84,    },0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,133,    },0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,142,        setSeed(new int[] { seed });,0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,8,143,    },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,66,        return next(1) != 0;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,71,        int i = 0;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,72,        final int iEnd = bytes.length - 3;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,73,        while (i < iEnd) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,74,            final int random = next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,75,            bytes[i]     = (byte) (random & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,76,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,77,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,78,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,79,            i += 4;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,80,        },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,81,        int random = next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,82,        while (i < bytes.length) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,83,            bytes[i++] = (byte) (random & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,84,            random     = random >> 8;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,86,    },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,97,        return next(23) * 0x1.0p-23f;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,104,        if (Double.isNaN(nextGaussian)) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,106,            final double x = nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,107,            final double y = nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,108,            final double alpha = 2 * FastMath.PI * x;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,110,            random       = r * FastMath.cos(alpha);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,111,            nextGaussian = r * FastMath.sin(alpha);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,112,        } else {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,114,            random = nextGaussian;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,115,            nextGaussian = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,118,        return random;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,124,        return next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,143,        if (n > 0) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,144,            if ((n & -n) == n) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,145,                return (int) ((n * (long) next(31)) >> 31);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,150,                bits = next(31);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,151,                val = bits % n;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,152,            } while (bits - val + (n - 1) < 0);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,153,            return val;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,155,        throw new NotStrictlyPositiveException(n);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,160,        final long high  = ((long) next(32)) << 32;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,161,        final long  low  = ((long) next(32)) & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,8,162,        return high | low;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,141,    public RandomDataGenerator(RandomGenerator rand) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,142,        this.rand = rand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,143,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,162,        if (len <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,163,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,167,        RandomGenerator ran = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,170,        StringBuilder outBuffer = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,173,        byte[] randomBytes = new byte[(len / 2) + 1];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,174,        ran.nextBytes(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,177,        for (int i = 0; i < randomBytes.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,178,            Integer c = Integer.valueOf(randomBytes[i]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,185,            String hex = Integer.toHexString(c.intValue() + 128);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,188,            if (hex.length() == 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,189,"                hex = ""0"" + hex;",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,191,            outBuffer.append(hex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,193,"        return outBuffer.toString().substring(0, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,198,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,199,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,202,        double r = getRan().nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,203,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,204,        return (int) FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,209,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,210,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,213,        double r = getRan().nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,214,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,215,        return (long)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,236,        if (len <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,237,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,241,        SecureRandom secRan = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,242,        MessageDigest alg = null;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,244,"            alg = MessageDigest.getInstance(""SHA-1"");",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,248,        },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,245,        } catch (NoSuchAlgorithmException ex) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,247,            throw new MathInternalError(ex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,249,        alg.reset();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,252,        int numIter = (len / 40) + 1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,254,        StringBuilder outBuffer = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,255,        for (int iter = 1; iter < numIter + 1; iter++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,256,            byte[] randomBytes = new byte[40];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,257,            secRan.nextBytes(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,258,            alg.update(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,261,            byte[] hash = alg.digest();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,264,            for (int i = 0; i < hash.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,265,                Integer c = Integer.valueOf(hash[i]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,272,                String hex = Integer.toHexString(c.intValue() + 128);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,275,                if (hex.length() == 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,276,"                    hex = ""0"" + hex;",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,278,                outBuffer.append(hex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,281,"        return outBuffer.toString().substring(0, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,286,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,287,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,290,        SecureRandom sec = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,291,        final double r = sec.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,292,        final double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,293,        return (int)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,298,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,299,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,302,        SecureRandom sec = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,303,        final double r = sec.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,304,        final double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,305,        return (long)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,323,"        return new PoissonDistribution(getRan(), mean,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,330,        if (sigma <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,331,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,333,        return sigma * getRan().nextGaussian() + mu;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,348,"        return new ExponentialDistribution(getRan(), mean,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,375,"        return new GammaDistribution(getRan(),shape, scale,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,392,"        return new HypergeometricDistribution(getRan(),populationSize,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,407,"        return new PascalDistribution(getRan(), r, p).sample();",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,418,"        return new TDistribution(getRan(), df,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,432,"        return new WeibullDistribution(getRan(), shape, scale,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,446,"        return new ZipfDistribution(getRan(), numberOfElements, exponent).sample();",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,457,"        return new BetaDistribution(getRan(), alpha, beta,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,469,"        return new BinomialDistribution(getRan(), numberOfTrials, probabilityOfSuccess).sample();",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,480,"        return new CauchyDistribution(getRan(), median, scale,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,491,"        return new ChiSquaredDistribution(getRan(), df,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,505,"        return new FDistribution(getRan(), numeratorDf, denominatorDf,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,524,"        return nextUniform(lower, upper, false);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,545,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,546,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,550,        if (Double.isInfinite(lower)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,551,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, lower);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,553,        if (Double.isInfinite(upper)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,554,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,557,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,558,            throw new NotANumberException();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,561,        final RandomGenerator generator = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,564,        double u = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,565,        while (!lowerInclusive && u <= 0.0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,566,            u = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,569,        return u * upper + (1.0 - u) * lower;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,585,        if (k > n) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,586,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,589,        if (k <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,590,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,594,        int[] index = getNatural(n);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,595,"        shuffle(index, n - k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,596,        int[] result = new int[k];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,597,        for (int i = 0; i < k; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,598,            result[i] = index[n - i - 1];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,601,        return result;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,619,        int len = c.size();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,620,        if (k > len) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,621,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,624,        if (k <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,625,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,628,        Object[] objects = c.toArray();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,629,"        int[] index = nextPermutation(len, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,630,        Object[] result = new Object[k];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,631,        for (int i = 0; i < k; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,632,            result[i] = objects[index[i]];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,634,        return result;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,648,       getRan().setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,649,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,659,        getSecRan().setSeed(System.currentTimeMillis());,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,660,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,671,        getSecRan().setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,672,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,679,        getRan().setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,680,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,700,"        secRand = SecureRandom.getInstance(algorithm, provider);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,701,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,714,        if (rand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,715,            initRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,717,        return rand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,726,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,738,        if (secRand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,739,            secRand = new SecureRandom();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,740,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,742,        return secRand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,753,        int target = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,754,        for (int i = list.length - 1; i >= end; i--) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,755,            if (i == 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,756,                target = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,759,"                target = nextInt(0, i);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,761,            int temp = list[target];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,762,            list[target] = list[i];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,763,            list[i] = temp;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,765,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,774,        int[] natural = new int[n];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,775,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,776,            natural[i] = i;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,8,778,        return natural;,0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,8,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,8,41,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,8,53,"        super(specific, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,8,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotANumberException,8,35,"        super(LocalizedFormats.NAN_NOT_ALLOWED, Double.NaN);",0.0,0,-1,0
org/apache/commons/math3/exception/NotANumberException,8,36,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,126,    public RandomDataImpl(RandomGenerator rand) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,127,        delegate = new RandomDataGenerator(rand);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,128,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,136,        return delegate;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,156,        return delegate.nextHexString(len);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,161,"       return delegate.nextInt(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,166,"        return delegate.nextLong(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,186,        return delegate.nextSecureHexString(len);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,191,"        return delegate.nextSecureInt(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,196,"        return delegate.nextSecureLong(lower,upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,213,        return delegate.nextPoisson(mean);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,218,"        return delegate.nextGaussian(mu,sigma);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,233,        return delegate.nextExponential(mean);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,248,"        return delegate.nextUniform(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,265,"        return delegate.nextUniform(lower, upper, lowerInclusive);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,279,"        return delegate.nextBeta(alpha, beta);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,293,"        return delegate.nextBinomial(numberOfTrials, probabilityOfSuccess);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,307,"        return delegate.nextCauchy(median, scale);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,320,       return delegate.nextChiSquare(df);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,336,"        return delegate.nextF(numeratorDf, denominatorDf);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,363,"        return delegate.nextGamma(shape, scale);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,383,"        return delegate.nextHypergeometric(populationSize, numberOfSuccesses, sampleSize);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,401,"        return delegate.nextPascal(r, p);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,415,        return delegate.nextT(df);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,431,"        return delegate.nextWeibull(shape, scale);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,447,"        return delegate.nextZipf(numberOfElements, exponent);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,461,        delegate.reSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,462,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,472,        delegate.reSeedSecure();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,473,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,485,        delegate.reSeedSecure(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,486,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,493,        delegate.reSeed();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,494,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,518,"       delegate.setSecureAlgorithm(algorithm, provider);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,519,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,532,"        return delegate.nextPermutation(n, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,550,"        return delegate.nextSample(c, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,565,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,8,581,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0.0,0,-1,0
