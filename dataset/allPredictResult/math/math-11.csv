project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,        final int dim = getDimension();,0.5,0,,0,0.6483003372092446,0.3516996627907536
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,0.5,0,,0,0.45977403158565605,0.5402259684143452
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",0.5,1,,0,0.5386033472860351,0.46139665271396596
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,0.5,0,,0,0.7347947149328944,0.26520528506710656
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,0.5,0,,0,0.4537477141290475,0.5462522858709533
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0.5,0,,0,0.788335874740988,0.2116641252590111
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,0.5,0,,0,0.5910068876134781,0.4089931123865222
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,        double sum = 0;,0.5,0,,0,0.24687997466435374,0.7531200253356471
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,0.5,0,,0,0.46301290274946494,0.5369870972505346
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,            sum += preMultiplied[i] * centered[i];,0.5,0,,0,0.7070887096464809,0.2929112903535197
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,0.5,0,,0,0.45006642483855114,0.549933575161448
org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",0.5,0,,0,0.3390991275020831,0.660900872497916
org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,0.5,0,,0,0.46021895350609515,0.539781046493904
org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,0.5,0,,0,0.5443772519470184,0.45562274805298153
org/apache/commons/math3/util/FastMath,11,853,            if (intVal > 746) {,0.5,0,,0,0.38869364059124034,0.6113063594087602
org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,0.5,0,,0,0.38869364059124034,0.6113063594087602
org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,0.5,0,,0,0.3882153916171607,0.6117846083828401
org/apache/commons/math3/util/FastMath,11,881,            intVal++;,0.5,0,,0,0.2592542396756935,0.7407457603243056
org/apache/commons/math3/util/FastMath,11,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.5,0,,0,0.3495222979057328,0.6504777020942665
org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.5,0,,0,0.3495222979057328,0.6504777020942665
org/apache/commons/math3/util/FastMath,11,886,            intVal = -intVal;,0.5,0,,0,0.36088821470761334,0.639111785292386
org/apache/commons/math3/util/FastMath,11,888,            intVal = (int) x;,0.5,0,,0,0.4354432777273537,0.5645567222726464
org/apache/commons/math3/util/FastMath,11,890,            if (intVal > 709) {,0.5,0,,0,0.38869364059124034,0.6113063594087602
org/apache/commons/math3/util/FastMath,11,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.5,0,,0,0.3495222979057328,0.6504777020942665
org/apache/commons/math3/util/FastMath,11,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.5,0,,0,0.3495222979057328,0.6504777020942665
org/apache/commons/math3/util/FastMath,11,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.5,0,,0,0.7730129992321582,0.22698700076784176
org/apache/commons/math3/util/FastMath,11,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.5,0,,0,0.8215711057340177,0.1784288942659808
org/apache/commons/math3/util/FastMath,11,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.5,0,,0,0.8215711057340177,0.1784288942659808
org/apache/commons/math3/util/FastMath,11,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.5,0,,0,0.6169339685330326,0.3830660314669658
org/apache/commons/math3/util/FastMath,11,923,        double z = 0.04168701738764507;,0.5,0,,0,0.24469283981435927,0.7553071601856406
org/apache/commons/math3/util/FastMath,11,924,        z = z * epsilon + 0.1666666505023083;,0.5,0,,0,0.41382210508604816,0.586177894913951
org/apache/commons/math3/util/FastMath,11,925,        z = z * epsilon + 0.5000000000042687;,0.5,0,,0,0.41382210508604816,0.586177894913951
org/apache/commons/math3/util/FastMath,11,926,        z = z * epsilon + 1.0;,0.5,0,,0,0.4078970108669422,0.5921029891330586
org/apache/commons/math3/util/FastMath,11,927,        z = z * epsilon + -3.940510424527919E-20;,0.5,0,,0,0.5281172532847427,0.4718827467152566
org/apache/commons/math3/util/FastMath,11,934,        double tempA = intPartA * fracPartA;,0.5,0,,0,0.31818348667260676,0.6818165133273936
org/apache/commons/math3/util/FastMath,11,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.5,0,,0,0.28914506530163897,0.7108549346983594
org/apache/commons/math3/util/FastMath,11,941,        final double tempC = tempB + tempA;,0.5,0,,0,0.4762120294843177,0.5237879705156822
org/apache/commons/math3/util/FastMath,11,943,        if (extra != 0.0) {,0.5,0,,0,0.4563625914757053,0.543637408524295
org/apache/commons/math3/util/FastMath,11,946,            result = tempC*z + tempB + tempA;,0.5,0,,0,0.27598324095520793,0.7240167590447917
org/apache/commons/math3/util/FastMath,11,949,        if (hiPrec != null) {,0.5,0,,0,0.4554542424544417,0.5445457575455592
org/apache/commons/math3/util/FastMath,11,955,        return result;,0.5,0,,0,0.2710889513347062,0.7289110486652939
org/apache/commons/math3/util/FastMath,11,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.5,0,,0,0.5971565223911747,0.4028434776088243
org/apache/commons/math3/util/FastMath,11,1246,            double tmp = epsilon * HEX_40000000;,0.5,0,,0,0.24860977684368482,0.7513902231563135
org/apache/commons/math3/util/FastMath,11,1247,            double aa = epsilon + tmp - tmp;,0.5,0,,0,0.23103649926105993,0.7689635007389402
org/apache/commons/math3/util/FastMath,11,1248,            double ab = epsilon - aa;,0.5,0,,0,0.24453014137447412,0.755469858625527
org/apache/commons/math3/util/FastMath,11,1249,            double xa = aa;,0.5,0,,0,0.20001042561081994,0.7999895743891795
org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,0.5,0,,0,0.20001042561081994,0.7999895743891795
org/apache/commons/math3/util/FastMath,11,1253,            final double numer = bits & 0x3ffffffffffL;,0.5,0,,0,0.43054445813433845,0.5694555418656614
org/apache/commons/math3/util/FastMath,11,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.5,0,,0,0.5857008974862014,0.4142991025137995
org/apache/commons/math3/util/FastMath,11,1255,            aa = numer - xa*denom - xb * denom;,0.5,0,,0,0.23760483156232495,0.7623951684376753
org/apache/commons/math3/util/FastMath,11,1256,            xb += aa / denom;,0.5,0,,0,0.32401748773247135,0.6759825122675286
org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.5,0,,0,0.8119677418652997,0.18803225813470045
org/apache/commons/math3/util/FastMath,11,1260,            double ya = lnCoef_last[0];,0.5,0,,0,0.5721217326772174,0.42787826732278234
org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,0.5,0,,0,0.5721217326772174,0.42787826732278234
org/apache/commons/math3/util/FastMath,11,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.5,0,,0,0.43449981380595476,0.5655001861940455
org/apache/commons/math3/util/FastMath,11,1265,                aa = ya * xa;,0.5,0,,0,0.244020808529009,0.7559791914709916
org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,0.5,0,,0,0.13556497081808394,0.8644350291819167
org/apache/commons/math3/util/FastMath,11,1268,                tmp = aa * HEX_40000000;,0.5,0,,0,0.23922828363049767,0.760771716369502
org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,0.5,0,,0,0.22515992130735624,0.7748400786926424
org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,0.5,0,,0,0.22592689394774243,0.7740731060522561
org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.5,0,,0,0.649014205222196,0.3509857947778033
org/apache/commons/math3/util/FastMath,11,1274,                aa = ya + lnCoef_i[0];,0.5,0,,0,0.6260378821138742,0.37396211788612543
org/apache/commons/math3/util/FastMath,11,1275,                ab = yb + lnCoef_i[1];,0.5,0,,0,0.6260378821138742,0.37396211788612543
org/apache/commons/math3/util/FastMath,11,1277,                tmp = aa * HEX_40000000;,0.5,0,,0,0.23922828363049767,0.760771716369502
org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,0.5,0,,0,0.22515992130735624,0.7748400786926424
org/apache/commons/math3/util/FastMath,11,1279,                yb = aa - ya + ab;,0.5,0,,0,0.22592689394774243,0.7740731060522561
org/apache/commons/math3/util/FastMath,11,1283,            aa = ya * xa;,0.5,0,,0,0.3272265818278938,0.6727734181721078
org/apache/commons/math3/util/FastMath,11,1284,            ab = ya * xb + yb * xa + yb * xb;,0.5,0,,0,0.1911398707084224,0.8088601292915792
org/apache/commons/math3/util/FastMath,11,1292,            lnza = aa + ab;,0.5,0,,0,0.32545992364095316,0.6745400763590456
org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,0.5,0,,0,0.5038642512616022,0.4961357487383986
org/apache/commons/math3/util/FastMath,11,1294,        } else {,0.5,0,,0,0.2666929641059156,0.7333070358940831
org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,0.5,0,,0,0.6665997547263481,0.33340024527365086
org/apache/commons/math3/util/FastMath,11,1349,            hiPrec[1] = b;,0.5,0,,0,0.6665997547263481,0.33340024527365086
org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,0.5,0,,0,0.7076994396388806,0.2923005603611187
org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,0.5,0,,0,0.45926623385930787,0.540733766140693
org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,0.5,0,,0,0.47287541655879195,0.5271245834412077
org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,0.5,0,,0,0.46126254337267486,0.5387374566273264
org/apache/commons/math3/util/FastMath,11,1479,        if (x == Double.POSITIVE_INFINITY) {,0.5,0,,0,0.4652332722098234,0.5347667277901765
org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,0.5,0,,0,0.4652332722098234,0.5347667277901765
org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,0.5,0,,0,0.4652332722098234,0.5347667277901765
org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,0.5,0,,0,0.4652332722098234,0.5347667277901765
org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,0.5,0,,0,0.46239708392588663,0.537602916074115
org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,0.5,0,,0,0.591322871043305,0.4086771289566957
org/apache/commons/math3/util/FastMath,11,1558,            double tmp1 = y * HEX_40000000;,0.5,0,,0,0.2457349326806078,0.7542650673193934
org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,0.5,0,,0,0.3041760925983044,0.6958239074016945
org/apache/commons/math3/util/FastMath,11,1560,            yb = y - ya;,0.5,0,,0,0.3282323037355581,0.6717676962644431
org/apache/commons/math3/util/FastMath,11,1561,        } else {,0.5,0,,0,0.2666929641059156,0.7333070358940831
org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);",0.5,0,,0,0.5311751976499701,0.4688248023500315
org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.5,0,,0,0.49530520175867987,0.5046947982413202
org/apache/commons/math3/util/FastMath,11,1574,        double lna = lns[0];,0.5,0,,0,0.6543707349012983,0.3456292650987028
org/apache/commons/math3/util/FastMath,11,1575,        double lnb = lns[1];,0.5,0,,0,0.6543707349012983,0.3456292650987028
org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,0.5,0,,0,0.31593946870271744,0.6840605312972821
org/apache/commons/math3/util/FastMath,11,1579,        double tmp2 = lna + tmp1 - tmp1;,0.5,0,,0,0.29764038538253684,0.7023596146174639
org/apache/commons/math3/util/FastMath,11,1580,        lnb += lna - tmp2;,0.5,0,,0,0.38691465471486813,0.6130853452851307
org/apache/commons/math3/util/FastMath,11,1581,        lna = tmp2;,0.5,0,,0,0.32960170047765336,0.6703982995223472
org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,0.5,0,,0,0.4718664404376222,0.5281335595623781
org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.5,0,,0,0.32833963196467364,0.671660368035326
org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,0.5,0,,0,0.3921272714824857,0.6078727285175155
org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,0.5,0,,0,0.5729787901605463,0.42702120983945224
org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,0.5,0,,0,0.3092343489791849,0.690765651020815
org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,0.5,0,,0,0.5708089799104894,0.42919102008951215
org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,0.5,0,,0,0.5706770784365011,0.42932292156350044
org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,0.5,0,,0,0.4096670062593433,0.5903329937406558
org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,0.5,0,,0,0.4096670062593433,0.5903329937406558
org/apache/commons/math3/util/FastMath,11,1595,        z = z * lnb;,0.5,0,,0,0.3921272714824857,0.6078727285175155
org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",0.5,0,,0,0.5384606734297762,0.4615393265702236
org/apache/commons/math3/util/FastMath,11,1599,        return result;,0.5,0,,0,0.2710889513347062,0.7289110486652939
org/apache/commons/math3/util/FastMath,11,1613,        if (e == 0) {,0.5,0,,0,0.46126254337267486,0.5387374566273264
org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,        return EXP_INT_A.clone();,0.5,0,,0,0.30851463291635434,0.6914853670836443
org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,        return EXP_INT_B.clone();,0.5,0,,0,0.30851463291635434,0.6914853670836443
org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,        return EXP_FRAC_A.clone();,0.5,0,,0,0.3085517269928337,0.6914482730071659
org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,0.5,0,,0,0.3085517269928337,0.6914482730071659
org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,0.5,0,,0,0.6989366626483592,0.30106333735164037
org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.5,0,,0,0.39252015912948685,0.6074798408705122
org/apache/commons/math3/util/FastMath,11,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.5,0,,0,0.39252015912948685,0.6074798408705122
org/apache/commons/math3/util/FastMath,11,3773,        },0.5,0,,0,0.21661238710481007,0.7833876128951885
org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,0.5,0,,0,0.6982092595144485,0.3017907404855528
org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.5,0,,0,0.3873215611189274,0.6126784388810721
org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.5,0,,0,0.3873215611189274,0.6126784388810721
org/apache/commons/math3/util/FastMath,11,3740,        },0.5,0,,0,0.21661238710481007,0.7833876128951885
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,0.5,0,,0,0.6518148759052279,0.34818512409477287
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,        final int nCols = getColumnDimension();,0.5,0,,0,0.6549049647831566,0.3450950352168449
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,0.5,0,,0,0.45982138298851305,0.5401786170114884
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,        final double[] out = new double[nCols];,0.5,0,,0,0.9086127630558928,0.09138723694410729
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,0.5,0,,0,0.5237596614093489,0.47624033859065007
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,            double sum = 0;,0.5,0,,0,0.18858503423131498,0.8114149657686844
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,            for (int i = 0; i < nRows; ++i) {,0.5,0,,0,0.4485059622974827,0.5514940377025173
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,0.5,0,,0,0.6085691829174178,0.3914308170825823
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,0.5,0,,0,0.6657467372370813,0.3342532627629203
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,        return out;,0.5,0,,0,0.27380340833907213,0.726196591660927
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,0.33333,0,-1,0
org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1156,        int exp = (int)(bits >> 52)-1023;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1178,        if (exp == -1 || exp == 0) {,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1242,        double lnzb = 0.0;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1321,        double b = 0.0;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1322,        double c = a+lnm[0];,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1323,        double d = -(c-a-lnm[0]);,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1324,        a = c;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1329,        a = c;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1332,        c = a + LN_2_B*exp;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1334,        a = c;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1335,        b = b + d;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1337,        c = a + lnm[1];,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1338,        d = -(c - a - lnm[1]);,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1339,        a = c;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1342,        c = a + lnzb;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1344,        a = c;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,1352,        return a + b;,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.25,0,-1,0
org/apache/commons/math3/util/FastMath,11,3793,        },0.25,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,0.25,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,11,1535,    private static final double[] EXP_INT_B = new double[] {,0.25,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,0.25,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,0.25,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,    private static final double[][] LN_MANT = new double[][] {,0.25,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,11,6174,        return LN_MANT.clone();,0.25,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,53,        return dimension;,0.125,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,76,"        this(new Well19937c(), means, covariances);",0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,77,    },0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,103,"        super(rng, means.length);",0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,105,        final int dim = means.length;,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,107,        if (covariances.length != dim) {,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,111,        for (int i = 0; i < dim; i++) {,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,112,            if (dim != covariances[i].length) {,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,117,        this.means = MathArrays.copyOf(means);,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,119,        covarianceMatrix = new Array2DRowRealMatrix(covariances);,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,122,        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,125,        covarianceMatrixInverse = covMatDec.getSolver().getInverse();,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,127,        covarianceMatrixDeterminant = covMatDec.getDeterminant();,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,130,        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,132,        for (int i = 0; i < covMatEigenvalues.length; i++) {,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,133,            if (covMatEigenvalues[i] < 0) {,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,139,"        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);",0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,140,        for (int v = 0; v < dim; v++) {,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,141,            final double[] evec = covMatDec.getEigenvector(v).toArray();,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,142,"            covMatEigenvectors.setColumn(v, evec);",0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,145,        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,148,        for (int row = 0; row < dim; row++) {,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,149,            final double factor = FastMath.sqrt(covMatEigenvalues[row]);,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,150,            for (int col = 0; col < dim; col++) {,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,151,"                tmpMatrix.multiplyEntry(row, col, factor);",0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,155,        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);,0.11111,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,156,    },0.11111,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,41,                                                   int n) {,0.11111,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,42,        random = rng;,0.11111,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,43,        dimension = n;,0.11111,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,44,    },0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,115,    private static final double LN_QUICK_COEF[][] = {,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,128,    private static final double LN_HI_PREC_COEF[][] = {,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,141,    private static final double SINE_TABLE_A[] =,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,160,    private static final double SINE_TABLE_B[] =,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,179,    private static final double COSINE_TABLE_A[] =,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,198,    private static final double COSINE_TABLE_B[] =,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,218,    private static final double TANGENT_TABLE_A[] =,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,237,    private static final double TANGENT_TABLE_B[] =,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,256,    private static final long RECIP_2PI[] = new long[] {,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,277,    private static final long PI_O_4_BITS[] = new long[] {,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,379,        return Math.sqrt(a);,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,2999,        return (x < 0l) ? -x : x;,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,11,3421,        return (a <= b) ? a : b;,0.11111,0,-1,0
org/apache/commons/math3/util/MathArrays,11,719,"         return copyOf(source, source.length);",0.11111,0,-1,0
org/apache/commons/math3/util/MathArrays,11,747,         final double[] output = new double[len];,0.11111,0,-1,0
org/apache/commons/math3/util/MathArrays,11,748,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.11111,0,-1,0
org/apache/commons/math3/util/MathArrays,11,749,         return output;,0.11111,0,-1,0
org/apache/commons/math3/util/Precision,11,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0.11111,0,-1,0
org/apache/commons/math3/util/Precision,11,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,0.11111,0,-1,0
org/apache/commons/math3/util/Precision,11,78,    },0.11111,0,-1,0
org/apache/commons/math3/util/Precision,11,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.11111,0,-1,0
org/apache/commons/math3/util/Precision,11,331,        long xInt = Double.doubleToLongBits(x);,0.11111,0,-1,0
org/apache/commons/math3/util/Precision,11,332,        long yInt = Double.doubleToLongBits(y);,0.11111,0,-1,0
org/apache/commons/math3/util/Precision,11,335,        if (xInt < 0) {,0.11111,0,-1,0
org/apache/commons/math3/util/Precision,11,338,        if (yInt < 0) {,0.11111,0,-1,0
org/apache/commons/math3/util/Precision,11,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.11111,0,-1,0
org/apache/commons/math3/util/Precision,11,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.11111,0,-1,0
org/apache/commons/math3/util/MathUtils,11,264,        if (o == null) {,0.11111,0,-1,0
org/apache/commons/math3/util/MathUtils,11,267,    },0.11111,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,43,        return getDefaultNumberFormat(Locale.getDefault());,0.11111,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0.11111,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,55,        nf.setMaximumFractionDigits(10);,0.11111,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,56,        return nf;,0.11111,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,40,    public BitsStreamGenerator() {,0.11111,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,41,        nextGaussian = Double.NaN;,0.11111,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,42,    },0.11111,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,170,        nextGaussian = Double.NaN;,0.11111,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,171,    },0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,72,"        this(k, m1, m2, m3, null);",0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,73,    },0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,99,        final int w = 32;,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,100,        final int r = (k + w - 1) / w;,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,101,        this.v      = new int[r];,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,102,        this.index  = 0;,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,106,        iRm1 = new int[r];,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,107,        iRm2 = new int[r];,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,108,        i1   = new int[r];,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,109,        i2   = new int[r];,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,110,        i3   = new int[r];,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,111,        for (int j = 0; j < r; ++j) {,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,112,            iRm1[j] = (j + r - 1) % r;,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,113,            iRm2[j] = (j + r - 2) % r;,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,114,            i1[j]   = (j + m1)    % r;,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,115,            i2[j]   = (j + m2)    % r;,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,116,            i3[j]   = (j + m3)    % r;,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,120,        setSeed(seed);,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,122,    },0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,154,        if (seed == null) {,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,156,            return;,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,161,        if (seed.length < v.length) {,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,162,            for (int i = seed.length; i < v.length; ++i) {,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,163,                final long l = v[i - seed.length];,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,168,        index = 0;,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,169,        clear();  // Clear normal deviate cache,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,170,    },0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,180,    },0.11111,0,-1,0
org/apache/commons/math3/random/Well19937c,11,57,"        super(K, M1, M2, M3);",0.11111,0,-1,0
org/apache/commons/math3/random/Well19937c,11,58,    },0.11111,0,-1,0
org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,0.11111,0,-1,0
org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,34,    },0.11111,0,-1,0
org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,41,        return 0;,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,56,    protected AbstractRealMatrix() {},0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,67,        throws NotStrictlyPositiveException {,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,68,        if (rowDimension < 1) {,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,71,        if (columnDimension < 1) {,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,74,    },0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,51,    },0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,143,        final int nRows = getRowDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,144,        final int nCols = m.getColumnDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,145,        final int nSum  = getColumnDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,146,"        final RealMatrix out = createMatrix(nRows, nCols);",0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,147,        for (int row = 0; row < nRows; ++row) {,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,148,            for (int col = 0; col < nCols; ++col) {,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,149,                double sum = 0;,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,150,                for (int i = 0; i < nSum; ++i) {,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,153,"                out.setEntry(row, col, sum);",0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,157,        return out;,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,572,"        MatrixUtils.checkColumnIndex(this, column);",0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,573,        final int nRows = getRowDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,574,        if (array.length != nRows) {,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,577,        for (int i = 0; i < nRows; ++i) {,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,578,"            setEntry(i, column, array[i]);",0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,580,    },0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,598,        final int nRows = getRowDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,599,        final int nCols = getColumnDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,600,"        final RealMatrix out = createMatrix(nCols, nRows);",0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,611,        return out;,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,616,        return getColumnDimension() == getRowDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,873,        return walkInRowOrder(visitor);,0.11111,0,-1,0
org/apache/commons/math3/linear/RealLinearOperator,11,53,public abstract class RealLinearOperator {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,61,"        super(rowDimension, columnDimension);",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,62,        data = new double[rowDimension][columnDimension];,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,63,    },0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,80,        copyIn(d);,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,81,    },0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,254,        return copyOut();,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,272,        if (data == null) {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,273,            if (row > 0) {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,276,            if (column > 0) {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,279,            MathUtils.checkNotNull(subMatrix);,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,280,            final int nRows = subMatrix.length;,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,281,            if (nRows == 0) {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,285,            final int nCols = subMatrix[0].length;,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,286,            if (nCols == 0) {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,289,            data = new double[subMatrix.length][nCols];,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,290,            for (int i = 0; i < data.length; ++i) {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,291,                if (subMatrix[i].length != nCols) {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,296,        } else {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,300,    },0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,307,        return data[row][column];,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,314,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,315,        data[row][column] = value;,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,316,    },0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,332,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,333,        data[row][column] *= factor;,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,334,    },0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,339,        return (data == null) ? 0 : data.length;,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,410,        final int rows    = getRowDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,411,        final int columns = getColumnDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,413,        for (int i = 0; i < rows; ++i) {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,414,            final double[] rowI = data[i];,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,415,            for (int j = 0; j < columns; ++j) {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,416,"                visitor.visit(i, j, rowI[j]);",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,419,        return visitor.end();,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,528,        final int nRows = this.getRowDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,531,        for (int i = 0; i < nRows; i++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,534,        return out;,0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,547,"        setSubMatrix(in, 0, 0);",0.11111,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,548,    },0.11111,0,-1,0
org/apache/commons/math3/linear/RealVector,11,60,public abstract class RealVector {,0.11111,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1159,    @Deprecated,0.11111,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,85,    public ArrayRealVector(double[] d) {,0.11111,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,86,        data = d.clone();,0.11111,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,87,    },0.11111,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0.11111,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,203,        data = deep ? v.data.clone() : v.data;,0.11111,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,204,    },0.11111,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0.11111,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,289,"        return new ArrayRealVector(this, true);",0.11111,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,450,        return data;,0.11111,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,726,        return data.clone();,0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,83,    },0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,106,"                            final String separator, final NumberFormat format) {",0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,107,        this.prefix      = prefix;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,108,        this.suffix      = suffix;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,109,        this.separator   = separator;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,110,        trimmedPrefix    = prefix.trim();,0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,111,        trimmedSuffix    = suffix.trim();,0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,112,        trimmedSeparator = separator.trim();,0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,113,        this.format      = format;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,114,    },0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,162,        return getInstance(Locale.getDefault());,0.11111,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,606,"                out.setEntry(column, row, value);",0.11111,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,607,            },0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,62,    public TriDiagonalTransformer(RealMatrix matrix) {,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,63,        if (!matrix.isSquare()) {,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,68,        final int m = matrix.getRowDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,69,        householderVectors = matrix.getData();,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,70,        main      = new double[m];,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,71,        secondary = new double[m - 1];,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,72,        cachedQ   = null;,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,73,        cachedQt  = null;,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,74,        cachedT   = null;,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,77,        transform();,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,78,    },0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,86,        if (cachedQ == null) {,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,87,            cachedQ = getQT().transpose();,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,89,        return cachedQ;,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,98,        if (cachedQt == null) {,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,99,            final int m = householderVectors.length;,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,100,            double[][] qta = new double[m][m];,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,103,            for (int k = m - 1; k >= 1; --k) {,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,126,            qta[0][0] = 1;,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,131,        return cachedQt;,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,175,        return main;,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,185,        return secondary;,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,193,        final int m = householderVectors.length;,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,194,        final double[] z = new double[m];,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,195,        for (int k = 0; k < m - 1; k++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,252,        main[m - 1] = householderVectors[m - 1][m - 1];,0.11111,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,253,    },0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,101,    },0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,117,    },0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,133,                            final NumberFormat format) {,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,134,        this.prefix            = prefix;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,135,        this.suffix            = suffix;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,136,        this.rowPrefix         = rowPrefix;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,137,        this.rowSuffix         = rowSuffix;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,138,        this.rowSeparator      = rowSeparator;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,139,        this.columnSeparator   = columnSeparator;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,140,        this.format            = format;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,142,        this.format.setGroupingUsed(false);,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,143,    },0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,207,        return format;,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,215,        return getInstance(Locale.getDefault());,0.11111,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,430,                final ArrayRealVector[] eigenvectors) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,431,            this.realEigenvalues = realEigenvalues;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,432,            this.imagEigenvalues = imagEigenvalues;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,433,            this.eigenvectors = eigenvectors;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,434,        },0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,413,    private static class Solver implements DecompositionSolver {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,516,            for (int i = 0; i < realEigenvalues.length; ++i) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,517,                if (realEigenvalues[i] == 0 &&,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,522,            return true;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,532,            if (!isNonSingular()) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,536,            final int m = realEigenvalues.length;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,537,            final double[][] invData = new double[m][m];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,539,            for (int i = 0; i < m; ++i) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,540,                final double[] invI = invData[i];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,541,                for (int j = 0; j < m; ++j) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,542,                    double invIJ = 0;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,543,                    for (int k = 0; k < m; ++k) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,544,                        final double[] vK = eigenvectors[k].getDataRef();,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,545,                        invIJ += vK[i] * vK[j] / realEigenvalues[k];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,547,                    invI[j] = invIJ;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,550,            return MatrixUtils.createRealMatrix(invData);,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,130,        if (data == null ||,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,134,        return (data.length * data[0].length <= 4096) ?,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,391,        final int rows = matrix.getRowDimension();,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,392,        if (rows != matrix.getColumnDimension()) {,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,399,        for (int i = 0; i < rows; i++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,400,            for (int j = i + 1; j < rows; j++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,413,        return true;,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,440,"        return isSymmetricInternal(matrix, eps, false);",0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,455,"        checkRowIndex(m, row);",0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,456,"        checkColumnIndex(m, column);",0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,457,    },0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,468,        if (row < 0 ||,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,473,    },0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,484,        if (column < 0 || column >= m.getColumnDimension()) {,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,488,    },0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,607,        if (left.getColumnDimension() != right.getRowDimension()) {,0.11111,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,611,    },0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,118,        throws MathArithmeticException {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,81,    private byte maxIter = 30;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,119,        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);",0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,121,        if (isSymmetric) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,122,            transformToTridiagonal(matrix);,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,123,            findEigenVectors(transformer.getQ().getData());,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,128,    },0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,272,        for (int i = 0; i < imagEigenvalues.length; i++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,273,"            if (!Precision.equals(imagEigenvalues[i], 0.0, EPSILON)) {",0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,277,        return false;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,290,        return realEigenvalues.clone();,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,348,        return eigenvectors[i].copy();,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,357,        double determinant = 1;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,358,        for (double lambda : realEigenvalues) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,359,            determinant *= lambda;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,361,        return determinant;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,406,        if (hasComplexEigenvalues()) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,409,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,561,        transformer = new TriDiagonalTransformer(matrix);,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,562,        main = transformer.getMainDiagonalRef();,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,563,        secondary = transformer.getSecondaryDiagonalRef();,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,564,    },0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,573,        final double[][]z = householderMatrix.clone();,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,574,        final int n = main.length;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,575,        realEigenvalues = new double[n];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,576,        imagEigenvalues = new double[n];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,577,        final double[] e = new double[n];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,578,        for (int i = 0; i < n - 1; i++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,582,        realEigenvalues[n - 1] = main[n - 1];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,583,        e[n - 1] = 0;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,586,        double maxAbsoluteValue = 0;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,587,        for (int i = 0; i < n; i++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,588,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,589,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,591,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,596,        if (maxAbsoluteValue != 0) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,597,            for (int i=0; i < n; i++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,598,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,601,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,602,                    e[i]=0;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,607,        for (int j = 0; j < n; j++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,608,            int its = 0;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,611,                for (m = j; m < n - 1; m++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,618,                if (m != j) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,674,            } while (m != j);,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,678,        for (int i = 0; i < n; i++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,679,            int k = i;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,680,            double p = realEigenvalues[i];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,681,            for (int j = i + 1; j < n; j++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,687,            if (k != i) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,699,        maxAbsoluteValue = 0;,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,700,        for (int i = 0; i < n; i++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,701,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,702,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,706,        if (maxAbsoluteValue != 0.0) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,707,            for (int i=0; i < n; i++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,708,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,713,        eigenvectors = new ArrayRealVector[n];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,714,        final double[] tmp = new double[n];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,715,        for (int i = 0; i < n; i++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,716,            for (int j = 0; j < n; j++) {,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,717,                tmp[j] = z[j][i];,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,719,            eigenvectors[i] = new ArrayRealVector(tmp);,0.11111,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,721,    },0.11111,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,202,                return cumulativeProbability(x) - p;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,67,    protected AbstractRealDistribution() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,50,    @Deprecated,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,70,        random = null;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,71,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,76,    protected AbstractRealDistribution(RandomGenerator rng) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,77,        random = rng;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,78,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,91,"        return probability(x0, x1);",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,112,        if (x0 > x1) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,113,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,116,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,157,        if (p < 0.0 || p > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,158,"            throw new OutOfRangeException(p, 0, 1);",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,161,        double lowerBound = getSupportLowerBound();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,162,        if (p == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,163,            return lowerBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,166,        double upperBound = getSupportUpperBound();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,167,        if (p == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,168,            return upperBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,171,        final double mu = getNumericalMean();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,172,        final double sig = FastMath.sqrt(getNumericalVariance());,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,174,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,177,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,178,            if (chebyshevApplies) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,179,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,181,                lowerBound = -1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,182,                while (cumulativeProbability(lowerBound) >= p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,183,                    lowerBound *= 2.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,188,        if (upperBound == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,189,            if (chebyshevApplies) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,190,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,192,                upperBound = 1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,193,                while (cumulativeProbability(upperBound) < p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,194,                    upperBound *= 2.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,206,"        double x = UnivariateSolverUtils.solve(toSolve,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,211,        if (!isSupportConnected()) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,213,            final double dx = getSolverAbsoluteAccuracy();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,214,            if (x - dx >= getSupportLowerBound()) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,215,                double px = cumulativeProbability(x);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,216,                if (cumulativeProbability(x - dx) == px) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,217,                    upperBound = x;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,218,                    while (upperBound - lowerBound > dx) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,219,                        final double midPoint = 0.5 * (lowerBound + upperBound);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,220,                        if (cumulativeProbability(midPoint) < px) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,221,                            lowerBound = midPoint;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,223,                            upperBound = midPoint;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,225,                    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,226,                    return upperBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,230,        return x;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,241,        return solverAbsoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,246,        random.setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,247,        randomData.reSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,248,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,259,        return inverseCumulativeProbability(random.nextDouble());,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,269,        if (sampleSize <= 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,270,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,273,        double[] out = new double[sampleSize];,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,274,        for (int i = 0; i < sampleSize; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,275,            out[i] = sample();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,277,        return out;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,11,287,        return 0d;,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,108,"            throw new DimensionMismatchException(covariances.length, dim);",0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,113,"                throw new DimensionMismatchException(covariances[i].length, dim);",0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,134,"                throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);",0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,173,        return covarianceMatrix.copy();,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,180,"            throw new DimensionMismatchException(vals.length, dim);",0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,195,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,196,        final double[] std = new double[dim];,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,197,        final double[][] s = covarianceMatrix.getData();,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,198,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,199,            std[i] = FastMath.sqrt(s[i][i]);,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,201,        return std;,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,206,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,207,        final double[] normalVals = new double[dim];,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,209,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,210,            normalVals[i] = random.nextGaussian();,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,213,        final double[] vals = samplingMatrix.operate(normalVals);,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,215,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,216,            vals[i] += means[i];,0.0,0,-1,0
org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,219,        return vals;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,48,        random.setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,49,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,61,        if (sampleSize <= 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,62,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,65,        final double[][] out = new double[sampleSize][dimension];,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,66,        for (int i = 0; i < sampleSize; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,67,            out[i] = sample();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,69,        return out;,0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,11,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,11,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,11,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,11,49,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,11,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,11,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,11,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,11,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,11,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,11,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,11,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,11,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,11,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,11,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,11,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,11,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,11,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,11,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,11,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,11,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,11,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,11,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,11,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,11,44,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,11,45,        dimension = expected;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,11,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,11,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,11,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,11,63,        return dimension;,0.0,0,-1,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,47,"        super(wrong, threshold, false);",0.0,0,-1,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,48,        this.index = index;,0.0,0,-1,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,49,        this.threshold = threshold;,0.0,0,-1,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,51,        final ExceptionContext context = getContext();,0.0,0,-1,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,52,        context.addMessage(LocalizedFormats.NOT_POSITIVE_DEFINITE_MATRIX);,0.0,0,-1,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,53,"        context.addMessage(LocalizedFormats.ARRAY_ELEMENT, wrong, index);",0.0,0,-1,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,54,    },0.0,0,-1,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,60,        return index;,0.0,0,-1,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,66,        return index;,0.0,0,-1,0
org/apache/commons/math3/linear/NonPositiveDefiniteMatrixException,11,72,        return threshold;,0.0,0,-1,0
org/apache/commons/math3/linear/SingularMatrixException,11,36,        super(LocalizedFormats.SINGULAR_MATRIX);,0.0,0,-1,0
org/apache/commons/math3/linear/SingularMatrixException,11,37,    },0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,59,"        this(0, 1);",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,60,    },0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,71,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,72,    },0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,86,"        this(new Well19937c(), mean, sd, inverseCumAccuracy);",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,87,    },0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,104,        super(rng);,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,106,        if (sd <= 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,107,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,110,        this.mean = mean;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,111,        standardDeviation = sd;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,112,        solverAbsoluteAccuracy = inverseCumAccuracy;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,113,    },0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,44,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,46,    private static final double SQRT2 = FastMath.sqrt(2.0);,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,121,        return mean;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,130,        return standardDeviation;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,135,        final double x0 = x - mean;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,136,        final double x1 = x0 / standardDeviation;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,137,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,148,        final double dev = x - mean;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,149,        if (FastMath.abs(dev) > 40 * standardDeviation) {,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,150,            return dev < 0 ? 0.0d : 1.0d;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,152,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,163,"        return probability(x0, x1);",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,171,        if (x0 > x1) {,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,172,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,175,        final double denom = standardDeviation * SQRT2;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,176,        final double v0 = (x0 - mean) / denom;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,177,        final double v1 = (x1 - mean) / denom;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,178,"        return 0.5 * Erf.erf(v0, v1);",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,184,        return solverAbsoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,193,        return getMean();,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,202,        final double s = getStandardDeviation();,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,203,        return s * s;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,216,        return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,229,        return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,234,        return false;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,239,        return false;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,250,        return true;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,11,256,        return standardDeviation * random.nextGaussian() + mean;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,11,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,11,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,11,62,"        super(specific, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,11,63,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,11,64,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,11,65,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,11,71,        return lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,11,77,        return hi;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,11,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,11,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,11,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,11,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,11,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,11,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,11,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,11,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,353,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,365,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,366,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,368,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,369,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,370,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,387,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,388,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,396,      if (x > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,397,          if (x >= LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,399,              final double t = exp(0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,400,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,402,              return 0.5 * exp(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,404,      } else if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,405,          if (x <= -LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,407,              final double t = exp(-0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,408,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,410,              return 0.5 * exp(-x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,414,      final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,415,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,416,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,418,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,420,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,421,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,423,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,424,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,425,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,428,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,429,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,430,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,431,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,434,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,436,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,439,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,440,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,441,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,442,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,443,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,444,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,446,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,447,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,448,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,456,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,457,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,458,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,466,      if (x > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,467,          if (x >= LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,469,              final double t = exp(0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,470,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,472,              return 0.5 * exp(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,474,      } else if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,475,          if (x <= -LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,477,              final double t = exp(-0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,478,              return (-0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,480,              return -0.5 * exp(-x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,484,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,485,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,488,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,489,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,490,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,495,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,496,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,497,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,499,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,500,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,502,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,503,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,504,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,507,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,508,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,509,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,510,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,513,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,515,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,517,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,518,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,521,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,522,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,523,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,524,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,525,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,526,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,528,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,529,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,530,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,532,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,533,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,535,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,536,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,539,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,540,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,541,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,542,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,543,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,544,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,545,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,547,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,548,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,549,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,551,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,554,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,555,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,558,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,559,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,560,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,561,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,562,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,563,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,565,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,566,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,569,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,570,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,573,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,581,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,583,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,584,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,593,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,594,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,597,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,598,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,601,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,602,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,605,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,606,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,607,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,611,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,612,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,614,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,616,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,617,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,620,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,621,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,622,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,623,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,624,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,627,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,628,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,629,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,630,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,631,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,633,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,634,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,635,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,638,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,639,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,640,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,641,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,644,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,647,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,649,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,651,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,652,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,654,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,656,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,658,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,659,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,662,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,663,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,666,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,667,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,668,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,669,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,670,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,672,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,673,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,674,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,677,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,678,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,679,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,680,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,683,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,686,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,688,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,690,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,693,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,694,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,697,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,705,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,713,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,714,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,715,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,716,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,720,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,721,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,723,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,724,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,725,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,726,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,727,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,728,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,729,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,735,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,743,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,744,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,745,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,746,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,750,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,751,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,753,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,754,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,755,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,756,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,757,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,758,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,759,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,765,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,774,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,783,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,807,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,854,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,855,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,856,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,858,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,864,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,865,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,866,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,868,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,874,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,875,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,876,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,878,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,891,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,892,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,893,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,895,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,944,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,951,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,952,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,963,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,972,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,973,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,976,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,979,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,980,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,981,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,982,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,984,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,985,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,986,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,987,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,994,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,996,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,997,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,998,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1002,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1003,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1004,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1006,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1007,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1008,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1010,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1011,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1012,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1014,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1019,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1020,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1021,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1022,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1023,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1024,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1026,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1027,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1028,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1029,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1031,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1032,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1033,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1034,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1037,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1039,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1040,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1043,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1044,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1045,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1047,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1048,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1049,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1053,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1054,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1055,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1057,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1059,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1060,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1062,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1064,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1065,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1067,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1069,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1070,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1072,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1074,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1075,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1076,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1077,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1078,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1079,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1080,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1082,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1083,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1084,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1086,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1097,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1098,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1101,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1102,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1105,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1106,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1107,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1110,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1120,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1131,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1137,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1139,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1142,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1148,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1149,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1152,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1160,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1162,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1163,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1166,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1170,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1171,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1172,                --exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1173,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1184,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1185,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1186,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1187,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1188,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1189,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1190,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1193,                double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1194,                double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1198,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1199,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1201,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1202,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1203,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1207,                    aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1208,                    ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1210,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1211,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1212,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1216,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1217,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1219,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1220,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1221,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1223,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1297,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1298,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1299,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1300,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1301,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1302,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1303,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1362,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1363,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1366,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1367,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1370,        if (x > 1e-6 ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1372,            final double xpa = 1 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1373,            final double xpb = -(xpa - 1 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1375,            final double[] hiPrec = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1376,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1377,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1378,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1383,            final double fx1 = xpb / xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1384,            final double epsilon = 0.5 * fx1 + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1385,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1388,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1389,            return y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1398,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1400,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1401,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1402,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1405,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1406,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1407,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1409,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1410,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1412,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1432,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1446,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1450,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1455,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1456,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1458,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1460,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1461,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1464,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1465,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1469,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1470,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1472,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1473,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1476,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1480,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1481,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1483,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1484,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1486,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1491,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1492,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1495,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1496,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1498,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1503,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1504,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1507,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1508,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1509,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1510,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1513,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1516,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1517,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1518,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1519,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1522,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1528,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1529,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1532,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1533,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1535,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1542,            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1543,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1546,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1548,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1550,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1562,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1563,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1564,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1565,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1571,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1614,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1615,        } else if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1616,            e = -e;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1617,            d = 1.0 / d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1622,        final int splitFactor = 0x8000001;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1623,        final double cd       = splitFactor * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1624,        final double d1High   = cd - (cd - d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1625,        final double d1Low    = d - d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1628,        double resultHigh = 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1629,        double resultLow  = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1632,        double d2p     = d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1633,        double d2pHigh = d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1634,        double d2pLow  = d1Low;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1636,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1638,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1641,                final double tmpHigh = resultHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1642,                final double cRH     = splitFactor * resultHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1643,                final double rHH     = cRH - (cRH - resultHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1644,                final double rHL     = resultHigh - rHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1645,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1646,                resultHigh = tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1647,                resultLow  = resultLow * d2p + tmpLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1652,            final double tmpHigh = d2pHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1653,            final double cD2pH   = splitFactor * d2pHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1654,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1655,            final double d2pHL   = d2pHigh - d2pHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1656,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1657,            final double cTmpH   = splitFactor * tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1658,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1659,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1660,            d2p     = d2pHigh + d2pLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1662,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1664,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1666,        return resultHigh + resultLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1678,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1680,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1681,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1682,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1683,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1686,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1688,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1698,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1700,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1701,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1702,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1703,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1704,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1706,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1717,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1718,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1721,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1722,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1723,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1724,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1727,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1728,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1729,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1730,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1733,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1734,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1735,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1736,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1762,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1763,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1765,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1766,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1767,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1768,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1769,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1771,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1772,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1773,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1774,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1775,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1777,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1792,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1819,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1822,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1823,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1824,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1825,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1828,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1830,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1841,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1842,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1844,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1845,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1846,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1848,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1861,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1862,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1865,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1866,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1867,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1868,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1871,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1872,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1873,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1874,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1877,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1878,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1879,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1880,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1905,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1906,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1909,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1910,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1911,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1912,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1913,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1915,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1916,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1917,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1918,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1919,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1921,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1922,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1924,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1925,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1929,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1931,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1932,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1933,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1934,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1935,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1937,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1938,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1939,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1940,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1941,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1943,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1944,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1946,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1947,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1949,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1951,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1952,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1966,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1969,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1970,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1971,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1973,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1974,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1975,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1978,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1979,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1980,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1982,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1985,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1986,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1987,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1990,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,1993,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2010,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2011,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2014,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2015,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2018,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2019,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2025,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2026,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2028,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2029,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2030,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2031,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2032,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2034,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2035,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2036,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2040,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2041,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2043,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2044,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2046,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2047,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2048,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2049,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2051,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2052,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2054,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2055,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2056,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2059,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2061,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2064,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2065,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2067,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2068,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2070,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2073,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2075,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2079,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2080,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2081,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2082,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2083,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2086,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2088,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2089,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2090,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2091,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2093,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2095,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2099,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2100,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2102,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2103,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2104,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2106,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2118,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2121,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2122,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2123,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2126,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2127,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2129,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2130,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2132,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2133,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2134,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2135,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2137,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2138,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2140,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2141,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2142,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2145,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2147,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2150,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2151,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2153,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2154,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2156,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2159,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2161,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2165,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2166,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2167,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2168,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2169,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2172,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2174,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2175,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2176,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2177,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2179,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2181,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2185,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2186,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2187,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2188,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2189,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2190,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2191,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2194,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2196,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2197,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2198,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2199,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2201,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2203,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2207,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2208,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2210,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2211,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2214,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2215,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2216,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2217,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2226,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2227,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2229,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2232,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2233,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2234,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2235,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2239,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2240,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2241,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2242,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2244,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2247,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2248,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2252,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2256,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2257,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2258,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2259,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2260,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2261,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2262,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2263,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2264,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2265,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2268,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2269,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2272,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2274,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2276,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2278,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2280,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2282,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2293,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2296,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2297,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2298,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2302,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2306,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2307,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2311,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2312,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2313,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2314,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2315,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2316,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2317,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2318,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2319,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2320,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2326,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2328,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2330,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2332,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2334,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2336,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2347,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2348,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2351,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2352,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2353,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2354,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2358,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2359,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2360,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2361,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2363,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2366,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2367,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2371,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2372,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2376,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2377,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2378,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2379,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2380,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2381,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2382,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2383,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2384,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2385,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2388,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2390,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2391,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2393,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2394,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2395,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2397,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2398,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2399,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2400,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2404,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2405,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2407,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2410,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2411,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2414,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2423,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2433,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2437,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2440,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2442,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2443,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2444,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2447,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2448,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2452,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2453,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2455,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2460,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2462,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2463,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2464,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2467,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2468,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2469,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2470,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2471,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2474,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2479,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2480,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2481,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2482,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2483,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2484,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2485,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2486,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2487,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2488,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2490,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2491,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2493,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2494,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2495,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2497,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2498,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2499,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2502,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2504,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2505,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2509,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2510,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2513,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2524,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2525,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2526,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2527,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2528,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2529,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2530,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2533,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2535,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2536,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2537,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2540,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2543,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2544,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2545,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2546,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2547,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2549,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2550,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2552,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2554,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2555,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2557,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2558,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2559,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2561,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2562,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2566,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2567,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2570,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2580,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2581,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2584,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2585,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2586,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2587,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2589,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2590,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2591,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2593,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2597,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2598,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2599,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2601,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2604,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2610,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2611,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2612,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2615,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2616,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2619,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2622,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2623,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2624,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2627,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2628,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2631,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2634,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2635,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2636,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2639,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2640,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2644,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2646,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2647,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2650,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2651,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2657,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2658,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2659,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2662,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2663,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2668,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2669,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2670,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2673,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2674,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2677,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2678,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2680,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2682,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2683,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2684,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2686,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2687,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2691,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2693,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2701,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2702,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2705,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2706,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2709,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2710,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2713,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2714,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2717,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2718,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2724,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2725,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2726,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2729,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2730,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2733,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2734,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2736,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2737,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2739,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2740,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2741,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2745,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2746,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2747,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2748,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2751,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2754,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2757,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2758,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2759,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2760,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2762,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2763,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2765,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2766,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2767,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2769,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2777,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2778,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2781,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2782,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2785,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2786,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2789,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2790,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2793,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2794,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2800,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2801,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2802,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2805,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2806,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2809,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2810,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2812,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2813,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2815,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2816,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2817,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2820,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2821,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2822,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2823,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2826,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2829,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2830,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2831,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2834,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2837,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2838,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2841,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2842,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2844,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2845,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2847,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2848,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2849,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2851,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2860,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2861,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2862,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2864,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2865,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2866,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2870,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2871,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2872,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2873,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2876,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2878,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2882,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2885,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2889,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2892,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2893,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2894,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2895,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2896,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2898,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2903,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2904,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2905,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2908,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2909,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2910,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2912,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2913,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2914,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2915,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2916,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2917,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2919,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2920,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2922,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2923,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2924,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2926,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2929,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2931,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2932,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2935,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2945,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2946,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2950,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2951,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2953,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2954,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2956,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2957,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2958,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2960,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2970,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2971,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2975,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2976,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2978,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2979,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,2990,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3008,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3026,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3027,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3029,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3038,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3039,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3041,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3053,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3054,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3058,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3059,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3061,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3062,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3064,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3065,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3069,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3070,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3071,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3072,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3075,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3077,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3079,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3081,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3082,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3086,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3089,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3090,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3091,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3093,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3095,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3099,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3103,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3106,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3107,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3108,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3110,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3111,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3113,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3114,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3116,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3119,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3120,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3122,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3137,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3138,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3142,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3143,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3145,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3146,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3148,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3149,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3153,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3154,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3155,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3156,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3159,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3161,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3163,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3165,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3166,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3170,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3173,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3174,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3175,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3177,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3179,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3183,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3187,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3190,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3191,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3192,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3194,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3195,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3197,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3198,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3200,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3203,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3204,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3206,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3246,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3247,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3248,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3249,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3250,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3251,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3252,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3253,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3258,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3259,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3260,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3261,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3263,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3302,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3303,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3304,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3305,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3306,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3307,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3308,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3309,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3314,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3315,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3316,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3317,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3319,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3331,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3332,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3335,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3336,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3339,        y = (long) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3340,        if (x < 0 && y != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3341,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3344,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3345,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3348,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3358,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3359,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3362,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3363,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3364,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3367,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3369,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3370,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3373,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3381,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3382,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3384,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3385,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3386,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3388,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3390,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3391,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3395,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3396,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3404,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3412,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3430,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3439,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3440,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3442,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3443,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3446,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3447,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3451,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3452,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3453,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3455,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3464,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3465,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3467,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3468,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3471,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3472,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3476,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3477,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3478,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3480,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3489,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3498,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3507,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3508,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3510,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3511,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3514,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3515,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3519,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3520,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3521,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3523,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3532,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3533,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3535,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3536,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3539,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3540,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3544,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3545,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3546,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3548,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3566,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3567,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3568,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3569,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3572,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3573,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3574,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3576,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3577,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3579,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3583,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3586,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3587,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3590,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3593,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3621,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3633,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3634,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3635,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3636,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3638,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3650,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3651,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3652,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3653,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3655,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3668,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3681,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3690,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3691,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3692,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3693,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3694,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3695,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3696,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3697,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3698,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3699,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3700,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3701,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3702,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,48,    private MathArrays() {},0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,85,        if (a.length != b.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,86,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,89,        final double[] result = a.clone();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,90,        for (int i = 0; i < a.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,91,            result[i] += b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,93,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,107,        if (a.length != b.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,108,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,111,        final double[] result = a.clone();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,112,        for (int i = 0; i < a.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,113,            result[i] -= b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,115,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,129,        if (a.length != b.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,130,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,133,        final double[] result = a.clone();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,134,        for (int i = 0; i < a.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,135,            result[i] *= b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,137,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,151,        if (a.length != b.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,152,"            throw new DimensionMismatchException(a.length, b.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,155,        final double[] result = a.clone();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,156,        for (int i = 0; i < a.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,157,            result[i] /= b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,159,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,170,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,171,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,172,            sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,174,        return sum;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,185,      int sum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,186,      for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,187,          sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,189,      return sum;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,200,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,201,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,202,            final double dp = p1[i] - p2[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,203,            sum += dp * dp;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,205,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,216,      double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,217,      for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,218,          final double dp = p1[i] - p2[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,219,          sum += dp * dp;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,221,      return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,232,        double max = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,233,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,234,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,236,        return max;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,247,        int max = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,248,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,249,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,251,        return max;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,276,        T previous = val[0];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,277,        final int max = val.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,278,        for (int i = 1; i < max; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,280,            switch (dir) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,282,                comp = previous.compareTo(val[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,283,                if (strict) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,284,                    if (comp >= 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,285,                        return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,288,                    if (comp > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,289,                        return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,294,                comp = val[i].compareTo(previous);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,295,                if (strict) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,296,                    if (comp >= 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,297,                        return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,300,                    if (comp > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,301,                       return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,307,                throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,310,            previous = val[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,312,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,326,"        return checkOrder(val, dir, strict, false);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,343,        double previous = val[0];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,344,        final int max = val.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,348,        for (index = 1; index < max; index++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,349,            switch (dir) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,351,                if (strict) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,352,                    if (val[index] <= previous) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,353,                        break ITEM;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,356,                    if (val[index] < previous) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,357,                        break ITEM;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,362,                if (strict) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,363,                    if (val[index] >= previous) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,364,                        break ITEM;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,367,                    if (val[index] > previous) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,368,                        break ITEM;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,374,                throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,377,            previous = val[index];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,380,        if (index == max) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,382,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,386,        if (abort) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,387,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,389,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,404,"        checkOrder(val, dir, strict, true);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,405,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,415,"        checkOrder(val, OrderDirection.INCREASING, true);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,416,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,428,        MathUtils.checkNotNull(in);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,429,        for (int i = 1; i < in.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,430,            if (in[i].length != in[0].length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,431,                throw new DimensionMismatchException(,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,436,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,448,        for (int i = 0; i < in.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,449,            if (in[i] <= 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,450,                throw new NotStrictlyPositiveException(in[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,453,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,464,        for (int i = 0; i < in.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,465,            if (in[i] < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,466,                throw new NotPositiveException(in[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,469,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,480,        for (int i = 0; i < in.length; i ++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,481,            for (int j = 0; j < in[i].length; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,482,                if (in[i][j] < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,483,                    throw new NotPositiveException(in[i][j]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,487,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,550,        double rdwarf = 3.834e-20;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,551,        double rgiant = 1.304e+19;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,552,        double s1 = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,553,        double s2 = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,554,        double s3 = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,555,        double x1max = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,556,        double x3max = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,557,        double floatn = v.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,558,        double agiant = rgiant / floatn;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,559,        for (int i = 0; i < v.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,560,            double xabs = Math.abs(v[i]);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,561,            if (xabs < rdwarf || xabs > agiant) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,562,                if (xabs > rdwarf) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,563,                    if (xabs > x1max) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,564,                        double r = x1max / xabs;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,565,                        s1= 1 + s1 * r * r;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,566,                        x1max = xabs;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,567,                    } else {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,568,                        double r = xabs / x1max;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,569,                        s1 += r * r;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,570,                    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,572,                    if (xabs > x3max) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,573,                        double r = x3max / xabs;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,574,                        s3= 1 + s3 * r * r;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,575,                        x3max = xabs;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,576,                    } else {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,577,                        if (xabs != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,578,                            double r = xabs / x3max;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,579,                            s3 += r * r;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,580,                        },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,584,                s2 += xabs * xabs;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,588,        if (s1 != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,589,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,591,            if (s2 == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,592,                norm = x3max * Math.sqrt(s3);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,594,                if (s2 >= x3max) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,595,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,597,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,601,        return norm;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,622,"        sortInPlace(x, OrderDirection.INCREASING, yList);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,623,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,646,        if (x == null) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,647,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,650,        final int len = x.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,651,"        final List<Pair<Double, double[]>> list",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,654,        final int yListLen = yList.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,655,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,656,            final double[] yValues = new double[yListLen];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,657,            for (int j = 0; j < yListLen; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,658,                double[] y = yList[j];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,659,                if (y == null) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,660,                    throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,662,                if (y.length != len) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,663,"                    throw new DimensionMismatchException(y.length, len);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,665,                yValues[j] = y[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,667,"            list.add(new Pair<Double, double[]>(x[i], yValues));",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,670,"        final Comparator<Pair<Double, double[]>> comp",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,690,"        Collections.sort(list, comp);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,692,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,693,"            final Pair<Double, double[]> e = list.get(i);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,694,            x[i] = e.getKey();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,695,            final double[] yValues = e.getValue();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,696,            for (int j = 0; j < yListLen; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,697,                yList[j][i] = yValues[j];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,700,    },0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,709,"         return copyOf(source, source.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,732,         final int[] output = new int[len];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,733,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,734,         return output;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,771,        final int len = a.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,772,        if (len != b.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,773,"            throw new DimensionMismatchException(len, b.length);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,776,        final double[] prodHigh = new double[len];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,777,        double prodLowSum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,779,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,780,            final double ai = a[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,781,            final double ca = SPLIT_FACTOR * ai;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,782,            final double aHigh = ca - (ca - ai);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,783,            final double aLow = ai - aHigh;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,785,            final double bi = b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,786,            final double cb = SPLIT_FACTOR * bi;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,787,            final double bHigh = cb - (cb - bi);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,788,            final double bLow = bi - bHigh;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,789,            prodHigh[i] = ai * bi;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,790,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,794,            prodLowSum += prodLow;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,798,        final double prodHighCur = prodHigh[0];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,799,        double prodHighNext = prodHigh[1];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,800,        double sHighPrev = prodHighCur + prodHighNext;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,801,        double sPrime = sHighPrev - prodHighNext;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,802,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,804,        final int lenMinusOne = len - 1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,805,        for (int i = 1; i < lenMinusOne; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,806,            prodHighNext = prodHigh[i + 1];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,807,            final double sHighCur = sHighPrev + prodHighNext;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,808,            sPrime = sHighCur - prodHighNext;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,809,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,810,            sHighPrev = sHighCur;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,813,        double result = sHighPrev + (prodLowSum + sLowSum);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,815,        if (Double.isNaN(result)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,818,            result = 0;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,819,            for (int i = 0; i < len; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,820,                result += a[i] * b[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,824,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,863,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,864,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,865,        final double a1Low      = a1 - a1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,866,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,867,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,868,        final double b1Low      = b1 - b1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,871,        final double prod1High  = a1 * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,872,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,875,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,876,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,877,        final double a2Low      = a2 - a2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,878,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,879,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,880,        final double b2Low      = b2 - b2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,883,        final double prod2High  = a2 * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,884,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,887,        final double s12High    = prod1High + prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,888,        final double s12Prime   = s12High - prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,889,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,893,        double result = s12High + (prod1Low + prod2Low + s12Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,895,        if (Double.isNaN(result)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,898,            result = a1 * b1 + a2 * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,901,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,943,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,944,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,945,        final double a1Low      = a1 - a1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,946,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,947,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,948,        final double b1Low      = b1 - b1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,951,        final double prod1High  = a1 * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,952,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,955,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,956,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,957,        final double a2Low      = a2 - a2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,958,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,959,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,960,        final double b2Low      = b2 - b2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,963,        final double prod2High  = a2 * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,964,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,967,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,968,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,969,        final double a3Low      = a3 - a3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,970,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,971,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,972,        final double b3Low      = b3 - b3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,975,        final double prod3High  = a3 * b3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,976,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,979,        final double s12High    = prod1High + prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,980,        final double s12Prime   = s12High - prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,981,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,984,        final double s123High   = s12High + prod3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,985,        final double s123Prime  = s123High - prod3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,986,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,990,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,992,        if (Double.isNaN(result)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,995,            result = a1 * b1 + a2 * b2 + a3 * b3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,998,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1045,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1046,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1047,        final double a1Low      = a1 - a1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1048,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1049,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1050,        final double b1Low      = b1 - b1High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1053,        final double prod1High  = a1 * b1;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1054,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1057,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1058,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1059,        final double a2Low      = a2 - a2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1060,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1061,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1062,        final double b2Low      = b2 - b2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1065,        final double prod2High  = a2 * b2;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1066,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1069,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1070,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1071,        final double a3Low      = a3 - a3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1072,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1073,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1074,        final double b3Low      = b3 - b3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1077,        final double prod3High  = a3 * b3;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1078,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1081,        final double ca4        = SPLIT_FACTOR * a4;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1082,        final double a4High     = ca4 - (ca4 - a4);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1083,        final double a4Low      = a4 - a4High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1084,        final double cb4        = SPLIT_FACTOR * b4;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1085,        final double b4High     = cb4 - (cb4 - b4);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1086,        final double b4Low      = b4 - b4High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1089,        final double prod4High  = a4 * b4;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1090,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1093,        final double s12High    = prod1High + prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1094,        final double s12Prime   = s12High - prod2High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1095,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1098,        final double s123High   = s12High + prod3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1099,        final double s123Prime  = s123High - prod3High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1100,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1103,        final double s1234High  = s123High + prod4High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1104,        final double s1234Prime = s1234High - prod4High;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1105,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1109,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1111,        if (Double.isNaN(result)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1114,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1117,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1131,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1132,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1134,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1135,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1137,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1138,"            if (!Precision.equals(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1139,                return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1142,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1157,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1158,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1160,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1161,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1163,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1164,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1165,                return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1168,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1182,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1183,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1185,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1186,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1188,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1189,"            if (!Precision.equals(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1190,                return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1193,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1208,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1209,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1211,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1212,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1214,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1215,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1216,                return false;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1219,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1246,         if (Double.isInfinite(normalizedSum)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1247,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1249,         if (Double.isNaN(normalizedSum)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1250,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1252,         double sum = 0d;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1253,         final int len = values.length;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1254,         double[] out = new double[len];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1255,         for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1256,             if (Double.isInfinite(values[i])) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1257,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1259,             if (!Double.isNaN(values[i])) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1260,                 sum += values[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1263,         if (sum == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1264,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1266,         for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1267,             if (Double.isNaN(values[i])) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1268,                 out[i] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1270,                 out[i] = values[i] * normalizedSum / sum;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,1273,         return out;,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,11,37,    public MathInternalError() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,11,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,11,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,11,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,11,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,11,56,"        super(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,11,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,11,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,11,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,11,42,    },0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,11,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,11,51,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,11,37,"        super(value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,11,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,11,47,"        super(specific, value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,11,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,62,    },0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,89,        this.direction = direction;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,90,        this.strict = strict;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,91,        this.index = index;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,92,        this.previous = previous;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,93,    },0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,99,        return direction;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,105,        return strict;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,113,        return index;,0.0,0,-1,0
org/apache/commons/math3/exception/NonMonotonicSequenceException,11,119,        return previous;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,59,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,63,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,11,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,257,    public static enum OrderDirection {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,259,"        INCREASING,",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,261,        DECREASING,0.0,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,11,6134,    private FastMathLiteralArrays() {},0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,280,            switch (dir) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,83,    private Precision() {},0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,96,"        if (equals(x, y, eps)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,97,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,98,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,99,            return -1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,101,        return 1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,122,"        if (equals(x, y, maxUlps)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,123,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,124,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,125,            return -1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,127,        return 1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,139,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,152,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,166,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,181,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,203,        int xInt = Float.floatToIntBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,204,        int yInt = Float.floatToIntBits(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,207,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,208,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,210,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,211,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,214,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,216,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,232,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,244,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,257,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,288,"        if (equals(x, y, 1)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,289,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,292,"        final double absoluteMax = FastMath.max(FastMath.abs(x), FastMath.abs(y));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,293,        final double relativeDifference = FastMath.abs((x - y) / absoluteMax);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,295,        return relativeDifference <= eps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,310,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,336,            xInt = SGN_MASK - xInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,339,            yInt = SGN_MASK - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,360,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,373,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,395,            return (new BigDecimal,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,399,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,400,            if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,401,                return x;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,403,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,418,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,436,"        final float sign = FastMath.copySign(1f, x);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,437,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,438,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,458,        switch (roundingMethod) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,460,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,461,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,463,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,465,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,467,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,468,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,470,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,471,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,473,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,475,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,477,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,478,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,479,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,480,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,482,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,484,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,487,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,488,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,489,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,490,            } else if (fraction < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,491,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,494,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,496,                    unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,498,                    unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,501,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,504,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,505,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,506,            if (fraction >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,507,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,509,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,511,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,514,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,515,                throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,519,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,520,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,522,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,533,        return unscaled;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,11,553,        return x + originalDelta - x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3808,        CodyWaite(double xa) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3811,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3817,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3818,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3819,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3821,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3822,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3823,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3824,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3826,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3827,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3828,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3829,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3831,                if (remA > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3832,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3838,                --k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3839,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3841,            this.finalK = k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3842,            this.finalRemA = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3843,            this.finalRemB = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3844,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3850,            return finalK;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3856,            return finalRemA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,11,3862,            return finalRemB;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,47,    private MathUtils() {},0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,57,        return new Double(value).hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,68,        return Arrays.hashCode(value);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,113,        final double p = FastMath.abs(period);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,129,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,131,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,132,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,134,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,136,            return (byte) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,152,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,154,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,155,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,157,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,159,            return (short) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,175,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,177,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,178,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,180,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,182,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,198,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,200,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,201,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,203,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,205,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,217,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,218,            throw new NotFiniteNumberException(x);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,220,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,231,        for (int i = 0; i < val.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,232,            final double x = val[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,233,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,234,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,237,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,251,        if (o == null) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,252,"            throw new NullArgumentException(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,254,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,11,265,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,11,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,11,41,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,11,53,"        super(specific, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,11,54,    },0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,34,    private CompositeFormat() {},0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,68,"        parseNextCharacter(source, pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,69,        pos.setIndex(pos.getIndex() - 1);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,70,    },0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,81,         int index = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,82,         final int n = source.length();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,83,         char ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,85,         if (index < n) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,88,                 c = source.charAt(index++);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,89,             } while (Character.isWhitespace(c) && index < n);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,90,             pos.setIndex(index);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,92,             if (index < n) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,93,                 ret = c;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,97,         return ret;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,111,        Number ret = null;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,113,        StringBuilder sb = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,114,        sb.append('(');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,115,        sb.append(value);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,116,        sb.append(')');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,118,        final int n = sb.length();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,119,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,120,        final int endIndex = startIndex + n;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,121,        if (endIndex < source.length()) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,123,                ret = Double.valueOf(value);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,124,                pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,128,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,143,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,144,"        Number number = format.parse(source, pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,145,        final int endIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,148,        if (startIndex == endIndex) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,150,            final double[] special = {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,153,            for (int i = 0; i < special.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,154,"                number = parseNumber(source, special[i], pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,155,                if (number != null) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,156,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,161,        return number;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,175,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,176,        final int endIndex = startIndex + expected.length();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,177,        if ((startIndex >= source.length()) ||,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,181,            pos.setIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,182,            pos.setErrorIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,183,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,187,        pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,188,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,211,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,212,            toAppendTo.append('(');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,213,            toAppendTo.append(value);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,214,            toAppendTo.append(')');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,216,"            format.format(value, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,11,218,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,671,"            = new Comparator<Pair<Double, double[]>>() {",0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,675,                switch (dir) {,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,677,                    val = o1.getKey().compareTo(o2.getKey());,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,678,                break;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,680,                    val = o2.getKey().compareTo(o1.getKey());,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,681,                break;,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,684,                    throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math3/util/MathArrays,11,686,                return val;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,66,        return next(1) != 0;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,71,        int i = 0;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,72,        final int iEnd = bytes.length - 3;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,73,        while (i < iEnd) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,74,            final int random = next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,75,            bytes[i]     = (byte) (random & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,76,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,77,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,78,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,79,            i += 4;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,80,        },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,81,        int random = next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,82,        while (i < bytes.length) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,83,            bytes[i++] = (byte) (random & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,84,            random     = random >> 8;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,86,    },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,90,        final long high = ((long) next(26)) << 26;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,91,        final int  low  = next(26);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,92,        return (high | low) * 0x1.0p-52d;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,97,        return next(23) * 0x1.0p-23f;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,104,        if (Double.isNaN(nextGaussian)) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,106,            final double x = nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,107,            final double y = nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,108,            final double alpha = 2 * FastMath.PI * x;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,110,            random       = r * FastMath.cos(alpha);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,111,            nextGaussian = r * FastMath.sin(alpha);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,112,        } else {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,114,            random = nextGaussian;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,115,            nextGaussian = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,118,        return random;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,124,        return next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,143,        if (n > 0) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,144,            if ((n & -n) == n) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,145,                return (int) ((n * (long) next(31)) >> 31);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,150,                bits = next(31);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,151,                val = bits % n;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,152,            } while (bits - val + (n - 1) < 0);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,153,            return val;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,155,        throw new NotStrictlyPositiveException(n);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,160,        final long high  = ((long) next(32)) << 32;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,161,        final long  low  = ((long) next(32)) & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,11,162,        return high | low;,0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,83,"        this(k, m1, m2, m3, new int[] { seed });",0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,84,    },0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,133,    },0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,142,        setSeed(new int[] { seed });,0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,11,143,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,114,    public RandomDataImpl() {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,115,        delegate = new RandomDataGenerator();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,116,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,126,    public RandomDataImpl(RandomGenerator rand) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,127,        delegate = new RandomDataGenerator(rand);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,128,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,136,        return delegate;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,156,        return delegate.nextHexString(len);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,161,"       return delegate.nextInt(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,166,"        return delegate.nextLong(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,186,        return delegate.nextSecureHexString(len);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,191,"        return delegate.nextSecureInt(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,196,"        return delegate.nextSecureLong(lower,upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,213,        return delegate.nextPoisson(mean);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,218,"        return delegate.nextGaussian(mu,sigma);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,233,        return delegate.nextExponential(mean);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,248,"        return delegate.nextUniform(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,265,"        return delegate.nextUniform(lower, upper, lowerInclusive);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,279,"        return delegate.nextBeta(alpha, beta);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,293,"        return delegate.nextBinomial(numberOfTrials, probabilityOfSuccess);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,307,"        return delegate.nextCauchy(median, scale);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,320,       return delegate.nextChiSquare(df);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,336,"        return delegate.nextF(numeratorDf, denominatorDf);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,363,"        return delegate.nextGamma(shape, scale);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,383,"        return delegate.nextHypergeometric(populationSize, numberOfSuccesses, sampleSize);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,401,"        return delegate.nextPascal(r, p);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,415,        return delegate.nextT(df);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,431,"        return delegate.nextWeibull(shape, scale);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,447,"        return delegate.nextZipf(numberOfElements, exponent);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,461,        delegate.reSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,462,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,472,        delegate.reSeedSecure();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,473,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,485,        delegate.reSeedSecure(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,486,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,493,        delegate.reSeed();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,494,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,518,"       delegate.setSecureAlgorithm(algorithm, provider);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,519,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,532,"        return delegate.nextPermutation(n, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,550,"        return delegate.nextSample(c, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,565,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,11,581,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0.0,0,-1,0
org/apache/commons/math3/exception/NotANumberException,11,35,"        super(LocalizedFormats.NAN_NOT_ALLOWED, Double.NaN);",0.0,0,-1,0
org/apache/commons/math3/exception/NotANumberException,11,36,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,131,    public RandomDataGenerator() {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,118,    private RandomGenerator rand = null;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,121,    private SecureRandom secRand = null;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,132,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,141,    public RandomDataGenerator(RandomGenerator rand) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,142,        this.rand = rand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,143,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,162,        if (len <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,163,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,167,        RandomGenerator ran = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,170,        StringBuilder outBuffer = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,173,        byte[] randomBytes = new byte[(len / 2) + 1];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,174,        ran.nextBytes(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,177,        for (int i = 0; i < randomBytes.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,178,            Integer c = Integer.valueOf(randomBytes[i]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,185,            String hex = Integer.toHexString(c.intValue() + 128);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,188,            if (hex.length() == 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,189,"                hex = ""0"" + hex;",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,191,            outBuffer.append(hex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,193,"        return outBuffer.toString().substring(0, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,198,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,199,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,202,        double r = getRan().nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,203,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,204,        return (int) FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,209,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,210,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,213,        double r = getRan().nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,214,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,215,        return (long)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,236,        if (len <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,237,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,241,        SecureRandom secRan = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,242,        MessageDigest alg = null;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,244,"            alg = MessageDigest.getInstance(""SHA-1"");",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,248,        },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,245,        } catch (NoSuchAlgorithmException ex) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,247,            throw new MathInternalError(ex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,249,        alg.reset();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,252,        int numIter = (len / 40) + 1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,254,        StringBuilder outBuffer = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,255,        for (int iter = 1; iter < numIter + 1; iter++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,256,            byte[] randomBytes = new byte[40];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,257,            secRan.nextBytes(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,258,            alg.update(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,261,            byte[] hash = alg.digest();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,264,            for (int i = 0; i < hash.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,265,                Integer c = Integer.valueOf(hash[i]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,272,                String hex = Integer.toHexString(c.intValue() + 128);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,275,                if (hex.length() == 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,276,"                    hex = ""0"" + hex;",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,278,                outBuffer.append(hex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,281,"        return outBuffer.toString().substring(0, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,286,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,287,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,290,        SecureRandom sec = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,291,        final double r = sec.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,292,        final double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,293,        return (int)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,298,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,299,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,302,        SecureRandom sec = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,303,        final double r = sec.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,304,        final double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,305,        return (long)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,323,"        return new PoissonDistribution(getRan(), mean,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,330,        if (sigma <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,331,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,333,        return sigma * getRan().nextGaussian() + mu;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,348,"        return new ExponentialDistribution(getRan(), mean,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,375,"        return new GammaDistribution(getRan(),shape, scale,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,392,"        return new HypergeometricDistribution(getRan(),populationSize,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,407,"        return new PascalDistribution(getRan(), r, p).sample();",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,418,"        return new TDistribution(getRan(), df,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,432,"        return new WeibullDistribution(getRan(), shape, scale,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,446,"        return new ZipfDistribution(getRan(), numberOfElements, exponent).sample();",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,457,"        return new BetaDistribution(getRan(), alpha, beta,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,469,"        return new BinomialDistribution(getRan(), numberOfTrials, probabilityOfSuccess).sample();",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,480,"        return new CauchyDistribution(getRan(), median, scale,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,491,"        return new ChiSquaredDistribution(getRan(), df,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,505,"        return new FDistribution(getRan(), numeratorDf, denominatorDf,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,524,"        return nextUniform(lower, upper, false);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,545,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,546,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,550,        if (Double.isInfinite(lower)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,551,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, lower);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,553,        if (Double.isInfinite(upper)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,554,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,557,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,558,            throw new NotANumberException();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,561,        final RandomGenerator generator = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,564,        double u = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,565,        while (!lowerInclusive && u <= 0.0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,566,            u = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,569,        return u * upper + (1.0 - u) * lower;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,585,        if (k > n) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,586,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,589,        if (k <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,590,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,594,        int[] index = getNatural(n);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,595,"        shuffle(index, n - k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,596,        int[] result = new int[k];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,597,        for (int i = 0; i < k; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,598,            result[i] = index[n - i - 1];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,601,        return result;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,619,        int len = c.size();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,620,        if (k > len) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,621,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,624,        if (k <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,625,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,628,        Object[] objects = c.toArray();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,629,"        int[] index = nextPermutation(len, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,630,        Object[] result = new Object[k];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,631,        for (int i = 0; i < k; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,632,            result[i] = objects[index[i]];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,634,        return result;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,648,       getRan().setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,649,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,659,        getSecRan().setSeed(System.currentTimeMillis());,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,660,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,671,        getSecRan().setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,672,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,679,        getRan().setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,680,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,700,"        secRand = SecureRandom.getInstance(algorithm, provider);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,701,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,714,        if (rand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,715,            initRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,717,        return rand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,726,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,738,        if (secRand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,739,            secRand = new SecureRandom();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,740,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,742,        return secRand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,753,        int target = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,754,        for (int i = list.length - 1; i >= end; i--) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,755,            if (i == 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,756,                target = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,759,"                target = nextInt(0, i);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,761,            int temp = list[target];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,762,            list[target] = list[i];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,763,            list[i] = temp;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,765,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,774,        int[] natural = new int[n];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,775,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,776,            natural[i] = i;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,11,778,        return natural;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,64,"        super(K, M1, M2, M3, seed);",0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,65,    },0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,72,"        super(K, M1, M2, M3, seed);",0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,73,    },0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,79,"        super(K, M1, M2, M3, seed);",0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,80,    },0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,86,        final int indexRm1 = iRm1[index];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,87,        final int indexRm2 = iRm2[index];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,89,        final int v0       = v[index];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,90,        final int vM1      = v[i1[index]];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,91,        final int vM2      = v[i2[index]];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,92,        final int vM3      = v[i3[index]];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,97,        final int z3 = z1      ^ z2;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,100,        v[index]     = z3;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,101,        v[indexRm1]  = z4;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,102,        v[indexRm2] &= 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,103,        index        = indexRm1;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,11,111,        return z4 >>> (32 - bits);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,675,            super(BigFraction.ZERO);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,676,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,682,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,683,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,688,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,689,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,697,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,670,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,630,            super(Fraction.ZERO);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,631,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,637,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,638,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,643,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,644,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,652,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,625,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,413,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,426,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,427,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,428,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,433,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,434,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,53,    protected AbstractFieldMatrix() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,54,        field = null;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,55,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,61,    protected AbstractFieldMatrix(final Field<T> field) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,62,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,63,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,77,        throws NotStrictlyPositiveException {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,78,        if (rowDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,79,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,82,        if (columnDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,83,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,86,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,87,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,100,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,101,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,103,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,104,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,106,        if (d[0].length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,107,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,109,        return d[0][0].getField();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,122,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,123,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,125,        return d[0].getField();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,143,        if (columns < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,144,"            T[] dummyRow = (T[]) Array.newInstance(field.getRuntimeClass(), 0);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,145,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,147,        T[][] array =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,149,        for (int i = 0; i < array.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,150,"            Arrays.fill(array[i], field.getZero());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,152,        return array;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,167,"        T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,168,"        Arrays.fill(array, field.getZero());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,169,        return array;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,174,        return field;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,189,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,191,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,192,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,193,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,194,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,195,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,196,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,200,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,207,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,209,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,210,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,211,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,212,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,213,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,214,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,218,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,224,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,225,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,226,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,227,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,228,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,229,"                out.setEntry(row, col, getEntry(row, col).add(d));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,233,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,238,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,239,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,240,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,241,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,242,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,243,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,247,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,254,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,256,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,257,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,258,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,259,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,260,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,261,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,262,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,263,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,264,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,266,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,270,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,276,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,282,        if (p < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,283,            throw new NotPositiveException(p);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,286,        if (!isSquare()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,287,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,290,        if (p == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,291,"            return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,294,        if (p == 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,295,            return this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,298,        final int power = p - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,307,        final char[] binaryRepresentation = Integer.toBinaryString(power),0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,309,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,311,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,312,            if (binaryRepresentation[i] == '1') {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,313,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,314,                nonZeroPositions.add(pos);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,318,        ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,321,"        results.add(0, this.copy());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,323,        for (int i = 1; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,324,            final FieldMatrix<T> s = results.get(i - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,325,            final FieldMatrix<T> r = s.multiply(s);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,326,"            results.add(i, r);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,329,        FieldMatrix<T> result = this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,331,        for (Integer i : nonZeroPositions) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,332,            result = result.multiply(results.get(i));,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,333,        },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,335,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,340,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,342,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,343,            final T[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,344,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,345,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,349,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,356,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,358,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,360,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,361,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,362,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,366,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,376,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,379,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,381,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,391,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,402,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,403,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,404,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,405,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,406,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,413,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,438,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,445,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,446,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,448,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,455,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,456,            final T[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,457,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,458,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,462,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,469,        if (subMatrix == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,470,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,472,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,473,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,474,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,477,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,478,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,479,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,482,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,483,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,484,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,488,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,489,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,490,        checkRowIndex(nRows + row - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,491,        checkColumnIndex(nCols + column - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,493,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,494,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,495,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,498,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,502,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,503,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,504,"        final FieldMatrix<T> out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,505,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,506,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,509,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,516,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,517,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,518,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,520,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,524,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,525,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,528,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,534,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,535,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,536,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,537,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,538,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,541,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,548,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,549,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,550,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,552,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,556,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,557,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,560,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,565,"        return new ArrayFieldVector<T>(field, getRow(row), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,571,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,572,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,573,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,574,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,577,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,578,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,581,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,586,"        return new ArrayFieldVector<T>(field, getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,593,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,594,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,595,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,596,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,599,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,600,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,603,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,607,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,608,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,609,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,610,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,611,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,614,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,621,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,622,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,623,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,624,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,626,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,627,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,630,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,634,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,635,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,636,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,637,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,638,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,641,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,648,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,649,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,650,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,651,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,653,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,654,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,656,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,672,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,673,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,674,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,675,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,683,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,688,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,699,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,700,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,701,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,702,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,704,        T trace = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,705,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,706,"            trace = trace.add(getEntry(i, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,708,        return trace;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,714,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,715,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,716,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,717,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,720,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,721,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,722,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,723,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,724,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,726,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,729,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,736,"            return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,737,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,738,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,739,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,740,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,741,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,744,"            final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,745,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,746,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,747,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,748,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,750,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,753,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,760,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,761,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,762,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,763,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,766,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,767,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,768,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,769,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,770,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,772,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,775,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,782,"            return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,783,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,784,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,785,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,786,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,787,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,790,"            final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,791,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,792,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,793,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,794,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,796,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,799,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,805,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,806,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,807,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,808,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,809,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,810,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,811,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,812,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,815,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,820,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,821,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,822,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,823,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,824,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,825,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,828,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,836,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,837,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,839,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,840,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,841,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,842,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,843,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,846,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,854,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,855,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,857,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,858,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,859,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,862,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,867,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,868,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,869,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,870,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,871,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,872,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,873,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,874,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,877,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,882,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,883,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,884,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,885,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,886,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,887,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,890,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,898,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,899,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,901,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,902,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,903,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,904,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,905,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,908,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,916,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,917,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,919,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,920,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,921,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,924,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,929,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,934,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,942,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,950,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,959,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,960,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,961,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,962,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,963,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,964,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,966,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,967,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,968,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,970,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,971,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,972,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,973,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,975,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,977,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,980,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,981,        return res.toString();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,994,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,995,            return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,997,        if (object instanceof FieldMatrix<?> == false) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,998,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1000,        FieldMatrix<?> m = (FieldMatrix<?>) object;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1001,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1002,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1003,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1004,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1006,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1007,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1008,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1009,                    return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1013,        return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1023,        int ret = 322562;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1024,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1025,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1026,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1027,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1028,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1029,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1030,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1033,        return ret;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1043,        if (row < 0 || row >= getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1044,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1047,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1057,        if (column < 0 || column >= getColumnDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1058,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1061,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1078,        checkRowIndex(startRow);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1079,        checkRowIndex(endRow);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1080,        if (endRow < startRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1081,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1085,        checkColumnIndex(startColumn);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1086,        checkColumnIndex(endColumn);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1087,        if (endColumn < startColumn) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1088,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1091,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1105,        if (selectedRows == null ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1107,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1109,        if (selectedRows.length == 0 ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1111,            throw new NoDataException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1114,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1115,            checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1117,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1118,            checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1120,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1131,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1133,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1136,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1147,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1149,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1152,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1163,        if (getColumnDimension() != m.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1164,"            throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,1166,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,356,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,369,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,370,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,371,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,376,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,377,            },0.0,0,-1,0
org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,37,"    public void visit(int row, int column, double value) {}",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,69,            throw new NotStrictlyPositiveException(rowDimension);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,72,            throw new NotStrictlyPositiveException(columnDimension);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,79,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,81,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,82,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,84,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,85,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,90,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,98,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,99,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,101,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,102,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,107,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,112,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,113,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,115,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,116,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,117,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,121,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,126,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,127,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,129,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,130,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,131,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,135,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,163,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,169,        if (p < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,170,"            throw new NotPositiveException(LocalizedFormats.NOT_POSITIVE_EXPONENT, p);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,173,        if (!isSquare()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,174,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,177,        if (p == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,178,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,181,        if (p == 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,182,            return this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,185,        final int power = p - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,194,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,195,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,196,        int maxI = -1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,198,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,199,            if (binaryRepresentation[i] == '1') {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,200,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,201,                nonZeroPositions.add(pos);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,204,                if (maxI == -1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,205,                    maxI = pos;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,210,        RealMatrix[] results = new RealMatrix[maxI + 1];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,211,        results[0] = this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,213,        for (int i = 1; i <= maxI; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,214,            results[i] = results[i-1].multiply(results[i-1]);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,217,        RealMatrix result = this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,219,        for (Integer i : nonZeroPositions) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,220,            result = result.multiply(results[i]);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,221,        },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,223,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,228,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,230,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,231,            final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,232,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,233,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,237,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,242,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,308,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,310,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,312,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,313,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,314,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,318,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,325,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,327,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,329,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,339,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,348,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,349,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,350,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,351,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,352,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,356,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,380,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,387,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,388,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,390,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,394,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,395,            final double[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,396,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,397,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,400,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,406,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,407,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,408,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,409,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,412,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,413,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,414,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,417,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,418,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,419,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,423,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,424,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,425,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,426,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,428,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,429,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,430,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,433,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,437,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,438,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,439,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,440,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,441,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,444,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,450,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,451,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,452,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,454,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,458,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,459,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,461,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,466,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,467,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,468,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,469,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,470,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,473,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,479,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,480,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,481,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,483,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,487,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,488,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,490,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,495,"        return new ArrayRealVector(getRow(row), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,501,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,502,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,503,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,504,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,507,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,508,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,510,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,515,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,521,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,522,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,523,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,524,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,527,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,528,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,530,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,534,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,535,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,536,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,537,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,538,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,541,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,547,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,548,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,549,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,550,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,552,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,553,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,555,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,559,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,560,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,561,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,562,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,563,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,566,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,575,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,585,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,586,"        setEntry(row, column, getEntry(row, column) + increment);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,587,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,592,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,593,"        setEntry(row, column, getEntry(row, column) * factor);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,594,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,637,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,638,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,639,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,640,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,642,        double trace = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,643,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,644,"            trace += getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,646,        return trace;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,652,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,653,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,654,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,655,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,658,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,659,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,660,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,661,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,662,"                sum += getEntry(row, i) * v[i];",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,664,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,667,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,675,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,676,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,677,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,678,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,679,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,680,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,683,            final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,684,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,685,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,686,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,687,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,689,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,692,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,699,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,700,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,701,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,702,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,705,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,706,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,707,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,708,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,709,"                sum += getEntry(i, col) * v[i];",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,711,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,714,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,720,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,721,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,723,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,724,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,725,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,726,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,729,            final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,730,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,731,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,732,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,733,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,735,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,738,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,744,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,745,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,746,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,747,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,748,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,749,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,750,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,751,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,754,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,759,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,760,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,761,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,762,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,763,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,764,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,767,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,775,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,776,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,778,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,779,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,780,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,781,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,782,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,785,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,793,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,794,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,796,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,797,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,798,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,801,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,806,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,807,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,808,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,809,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,810,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,811,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,812,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,813,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,816,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,821,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,822,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,823,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,824,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,825,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,826,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,829,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,837,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,838,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,840,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,841,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,842,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,843,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,844,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,847,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,855,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,856,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,858,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,859,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,860,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,863,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,868,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,882,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,891,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,900,        final StringBuilder res = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,901,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,902,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,903,        res.append(shortClassName);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,904,        res.append(DEFAULT_FORMAT.format(this));,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,905,        return res.toString();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,918,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,919,            return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,921,        if (object instanceof RealMatrix == false) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,922,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,924,        RealMatrix m = (RealMatrix) object;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,925,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,926,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,927,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,928,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,930,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,931,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,932,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,933,                    return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,937,        return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,947,        int ret = 7;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,948,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,949,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,950,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,951,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,952,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,953,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,954,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,958,        return ret;,0.0,0,-1,0
org/apache/commons/math3/linear/RealLinearOperator,11,95,        throw new UnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealLinearOperator,11,108,        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,48,    public Array2DRowRealMatrix() {},0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,101,        NullArgumentException {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,102,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,103,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,105,            if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,106,                throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,108,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,109,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,110,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,112,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,113,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,114,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,116,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,117,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,118,"                    throw new DimensionMismatchException(d[r].length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,121,            data = d;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,123,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,132,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,133,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,134,        data = new double[nRows][1];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,135,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,136,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,138,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,151,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,165,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,167,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,168,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,169,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,170,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,171,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,172,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,173,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,174,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,175,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,179,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,192,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,194,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,195,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,196,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,197,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,198,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,199,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,200,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,201,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,202,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,206,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,219,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,221,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,222,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,223,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,225,        final double[][] outData = new double[nRows][nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,227,        final double[] mCol = new double[nSum];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,228,        final double[][] mData = m.data;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,231,        for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,234,            for (int mRow = 0; mRow < nSum; mRow++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,235,                mCol[mRow] = mData[mRow][col];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,238,            for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,239,                final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,240,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,241,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,242,                    sum += dataRow[i] * mCol[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,244,                outData[row][col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,248,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,263,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,274,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,277,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,282,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,287,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,292,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,297,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,323,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,324,        data[row][column] += increment;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,325,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,352,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,353,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,354,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,355,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,357,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,358,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,359,            final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,360,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,361,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,362,                sum += dataRow[i] * v[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,364,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,366,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,376,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,395,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,396,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,397,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,398,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,399,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,400,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,401,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,404,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,428,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,429,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,431,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,432,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,433,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,434,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,437,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,446,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,447,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,449,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,450,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,451,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,452,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,455,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,461,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,462,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,463,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,464,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,465,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,466,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,467,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,470,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,476,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,477,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,478,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,479,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,480,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,481,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,484,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,493,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,494,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,496,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,497,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,498,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,499,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,502,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,511,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,512,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,514,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,515,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,516,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,11,519,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,48,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,54,        return getWrongDimension(0);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,60,        return getExpectedDimension(0);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,66,        return getWrongDimension(1);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,11,72,        return getExpectedDimension(1);,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,11,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,11,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,11,59,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,11,60,        this.wrong = wrong.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,11,61,        this.expected = expected.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,11,62,    },0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,11,68,        return wrong.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,11,74,        return expected.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,11,82,        return wrong[index];,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,11,89,        return expected[index];,0.0,0,-1,0
org/apache/commons/math3/linear/NonSquareMatrixException,11,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/linear/NonSquareMatrixException,11,41,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,99,"        setEntry(index, getEntry(index) + increment);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,100,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,165,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,166,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,177,        int d = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,178,        if (d != n) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,179,"            throw new DimensionMismatchException(d, n);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,181,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,190,        if (index < 0 ||,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,195,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,208,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,209,        if ((start < 0) || (start >= dim)) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,210,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,213,        if ((end < 0) || (end >= dim)) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,214,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,217,        if (end < start) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,219,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,222,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,234,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,235,        RealVector result = v.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,236,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,237,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,238,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,239,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,240,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,241,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,242,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,255,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,256,        RealVector result = v.mapMultiply(-1d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,257,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,258,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,259,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,260,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,261,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,262,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,263,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,274,        return copy().mapAddToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,285,        if (d != 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,286,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,288,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,307,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,308,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,309,        final int n = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,310,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,311,            d += getEntry(i) * v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,313,        return d;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,329,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,330,        final double vNorm = v.getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,332,        if (norm == 0 ||,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,334,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,336,        return dotProduct(v) / (norm * vNorm);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,396,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,397,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,398,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,399,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,400,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,401,            final double diff = e.getValue() - v.getEntry(e.getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,402,            d += diff * diff;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,403,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,404,        return FastMath.sqrt(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,418,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,419,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,420,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,421,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,422,            final double value = e.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,423,            sum += value * value;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,424,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,425,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,439,        double norm = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,440,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,441,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,442,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,443,            norm += FastMath.abs(e.getValue());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,444,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,445,        return norm;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,459,        double norm = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,460,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,461,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,462,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,463,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,464,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,465,        return norm;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,481,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,482,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,483,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,484,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,485,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,486,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,487,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,488,        return d;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,507,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,508,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,509,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,510,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,511,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,512,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,513,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,514,        return d;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,524,        int minIndex    = -1;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,525,        double minValue = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,526,        Iterator<Entry> iterator = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,527,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,528,            final Entry entry = iterator.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,529,            if (entry.getValue() <= minValue) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,530,                minIndex = entry.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,531,                minValue = entry.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,533,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,534,        return minIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,544,        final int minIndex = getMinIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,545,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,555,        int maxIndex    = -1;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,556,        double maxValue = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,557,        Iterator<Entry> iterator = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,558,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,559,            final Entry entry = iterator.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,560,            if (entry.getValue() >= maxValue) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,561,                maxIndex = entry.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,562,                maxValue = entry.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,564,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,565,        return maxIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,575,        final int maxIndex = getMaxIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,576,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,588,        return copy().mapMultiplyToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,599,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,610,        return copy().mapSubtractToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,621,        return mapAddToSelf(-d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,632,        return copy().mapDivideToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,643,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,653,        final int m = this.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,654,        final int n = v.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,656,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,657,"            product = new OpenMapRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,659,"            product = new Array2DRowRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,661,        for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,662,            for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,663,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,666,        return product;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,681,        final double norm2 = v.dotProduct(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,682,        if (norm2 == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,683,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,685,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,694,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,695,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,696,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,697,            e.setValue(value);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,698,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,699,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,709,        int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,710,        double[] values = new double[dim];,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,711,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,712,            values[i] = getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,714,        return values;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,725,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,726,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,727,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,729,        return mapDivide(norm);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,739,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,740,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,741,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,743,        mapDivideToSelf(getNorm());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,744,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,767,        return new SparseEntryIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,781,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,782,        return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,827,        return copy().mapToSelf(function);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,844,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,845,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,846,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,847,            e.setValue(function.value(e.getValue()));,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,848,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,849,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,867,"        return copy().combineToSelf(a, b, y);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,884,        checkVectorDimensions(y);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,885,        for (int i = 0; i < getDimension(); i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,886,            final double xi = getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,887,            final double yi = y.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,888,"            setEntry(i, a * xi + b * yi);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,890,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,904,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,905,"        visitor.start(dim, 0, dim - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,906,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,907,"            visitor.visit(i, getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,909,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,928,"        checkIndices(start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,929,"        visitor.start(getDimension(), start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,930,        for (int i = start; i <= end; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,931,"            visitor.visit(i, getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,933,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,949,        return walkInDefaultOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,970,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,984,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,985,"        visitor.start(dim, 0, dim - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,986,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,987,"            setEntry(i, visitor.visit(i, getEntry(i)));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,989,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1008,"        checkIndices(start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1009,"        visitor.start(getDimension(), start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1010,        for (int i = start; i <= end; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1011,"            setEntry(i, visitor.visit(i, getEntry(i)));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1013,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1029,        return walkInDefaultOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1050,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1125,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1138,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1249,        return new RealVector() {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,56,    public ArrayRealVector() {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,57,        data = new double[0];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,58,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,65,    public ArrayRealVector(int size) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,66,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,67,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,75,"    public ArrayRealVector(int size, double preset) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,76,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,77,"        Arrays.fill(data, preset);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,78,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,104,        throws NullArgumentException {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,105,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,106,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,108,        data = copyArray ? d.clone() :  d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,109,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,122,"        throws NullArgumentException, NumberIsTooLargeException {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,123,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,124,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,126,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,127,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,129,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,130,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,131,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,138,    public ArrayRealVector(Double[] d) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,139,        data = new double[d.length];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,140,        for (int i = 0; i < d.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,141,            data[i] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,143,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,156,"        throws NullArgumentException, NumberIsTooLargeException {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,157,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,158,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,160,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,161,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,163,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,164,        for (int i = pos; i < pos + size; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,165,            data[i - pos] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,167,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,175,    public ArrayRealVector(RealVector v) throws NullArgumentException {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,176,        if (v == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,177,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,179,        data = new double[v.getDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,180,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,181,            data[i] = v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,183,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,192,"        this(v, true);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,193,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,211,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,212,        data = new double[v1.data.length + v2.data.length];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,213,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,214,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,215,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,222,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,223,        final int l1 = v1.data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,224,        final int l2 = v2.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,225,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,226,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,227,        for (int i = 0; i < l2; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,228,            data[l1 + i] = v2.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,230,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,237,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,238,        final int l1 = v1.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,239,        final int l2 = v2.data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,240,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,241,        for (int i = 0; i < l1; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,242,            data[i] = v1.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,244,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,245,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,252,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,253,        final int l1 = v1.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,254,        final int l2 = v2.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,255,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,256,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,257,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,258,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,265,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,266,        final int l1 = v1.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,267,        final int l2 = v2.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,268,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,269,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,270,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,271,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,278,"    public ArrayRealVector(double[] v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,279,        final int l1 = v1.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,280,        final int l2 = v2.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,281,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,282,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,283,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,284,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,296,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,297,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,298,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,299,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,300,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,301,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,302,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,303,                resultData[i] = data[i] + vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,305,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,307,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,308,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,309,            Iterator<Entry> it = v.iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,310,            while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,311,                final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,312,                out[e.getIndex()] += e.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,313,            },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,314,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,322,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,323,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,324,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,325,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,326,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,327,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,328,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,329,                resultData[i] = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,331,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,333,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,334,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,335,            Iterator<Entry> it = v.iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,336,            while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,337,                final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,338,                out[e.getIndex()] -= e.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,339,            },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,340,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,347,        return copy().mapToSelf(function);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,353,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,354,            data[i] = function.value(data[i]);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,356,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,362,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,363,            data[i] = data[i] + d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,365,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,371,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,372,            data[i] = data[i] - d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,374,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,380,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,381,            data[i] = data[i] * d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,383,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,389,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,390,            data[i] = data[i] / d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,392,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,399,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,400,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,401,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,402,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,403,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,404,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,405,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,406,                resultData[i] = data[i] * vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,408,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,410,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,411,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,412,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,413,                out[i] *= v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,415,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,423,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,424,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,425,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,426,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,427,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,428,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,429,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,430,                resultData[i] = data[i] / vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,432,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,434,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,435,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,436,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,437,                out[i] /= v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,439,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,456,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,457,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,458,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,459,            double dot = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,460,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,461,                dot += data[i] * vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,463,            return dot;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,465,        return super.dotProduct(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,471,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,472,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,473,            sum += a * a;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,475,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,481,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,482,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,483,            sum += FastMath.abs(a);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,485,        return sum;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,491,        double max = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,492,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,493,"            max = FastMath.max(max, FastMath.abs(a));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,495,        return max;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,501,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,502,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,503,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,504,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,505,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,506,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,507,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,509,            return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,511,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,512,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,513,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,514,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,515,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,517,            return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,525,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,526,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,527,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,528,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,529,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,530,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,531,                sum += FastMath.abs(delta);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,533,            return sum;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,535,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,536,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,537,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,538,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,539,                sum += FastMath.abs(delta);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,541,            return sum;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,549,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,550,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,551,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,552,            double max = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,553,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,554,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,555,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,557,            return max;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,559,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,560,            double max = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,561,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,562,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,563,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,565,            return max;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,572,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,573,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,574,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,575,            final int n = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,576,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,577,            for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,578,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,579,"                    out.setEntry(i, j, data[i] * vData[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,582,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,584,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,585,            final int n = v.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,586,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,587,            for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,588,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,589,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,592,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,600,            return data[index];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,601,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,602,"            throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0,",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,610,        return data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,617,"            return new ArrayRealVector(this, (ArrayRealVector) v);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,618,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,619,"            return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,630,"        return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,636,        final double[] out = new double[data.length + 1];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,637,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,638,        out[data.length] = in;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,639,"        return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,646,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,647,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,649,        ArrayRealVector out = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,651,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,655,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,652,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,653,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,654,            checkIndex(index + n - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,656,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,663,            data[index] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,666,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,664,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,665,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,667,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,674,        data[index] += increment;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,678,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,675,        } catch(IndexOutOfBoundsException e){,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,676,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,679,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,685,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,686,"            setSubVector(index, ((ArrayRealVector) v).data);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,689,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,690,                    data[i] = v.getEntry(i - index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,695,            },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,692,            } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,693,                checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,694,                checkIndex(index + v.getDimension() - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,697,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,710,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,714,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,711,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,712,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,713,            checkIndex(index + v.length - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,715,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,720,"        Arrays.fill(data, value);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,721,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,732,        return DEFAULT_FORMAT.format(this);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,745,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,746,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,758,        if (data.length != n) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,759,"            throw new DimensionMismatchException(data.length, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,761,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,771,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,772,            if (Double.isNaN(v)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,773,                return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,776,        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,788,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,789,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,792,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,793,            if (Double.isInfinite(v)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,794,                return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,798,        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,804,        if (this == other) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,805,            return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,808,        if (!(other instanceof RealVector)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,809,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,812,        RealVector rhs = (RealVector) other;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,813,        if (data.length != rhs.getDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,814,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,817,        if (rhs.isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,818,            return this.isNaN();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,821,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,822,            if (data[i] != rhs.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,823,                return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,826,        return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,834,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,835,            return 9;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,837,        return MathUtils.hash(data);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,844,"        return copy().combineToSelf(a, b, y);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,851,        if (y instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,852,            final double[] yData = ((ArrayRealVector) y).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,853,            checkVectorDimensions(yData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,854,            for (int i = 0; i < this.data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,855,                data[i] = a * data[i] + b * yData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,857,        } else {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,858,            checkVectorDimensions(y);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,859,            for (int i = 0; i < this.data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,860,                data[i] = a * data[i] + b * y.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,863,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,869,"        visitor.start(data.length, 0, data.length - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,870,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,871,"            visitor.visit(i, data[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,873,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,881,"        checkIndices(start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,882,"        visitor.start(data.length, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,883,        for (int i = start; i <= end; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,884,"            visitor.visit(i, data[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,886,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,896,        return walkInDefaultOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,908,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,914,"        visitor.start(data.length, 0, data.length - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,915,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,916,"            data[i] = visitor.visit(i, data[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,918,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,926,"        checkIndices(start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,927,"        visitor.start(data.length, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,928,        for (int i = start; i <= end; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,929,"            data[i] = visitor.visit(i, data[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,931,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,941,        return walkInDefaultOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,953,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,11,39,public class ArrayRealVector extends RealVector implements Serializable {,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,11,37,        this(LocalizedFormats.NO_DATA);,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,11,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,11,45,        super(specific);,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,11,46,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,242,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,257,                this.endRow = endRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,258,                columnSum   = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,259,                maxColSum   = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,260,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,264,                columnSum += FastMath.abs(value);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,265,                if (row == endRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,266,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,267,                    columnSum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,269,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,273,                return maxColSum;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1630,            class UnmodifiableEntry extends Entry {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1634,                    return v.getEntry(getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1646,                    throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1059,        public Entry() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1060,            setIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1061,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1069,            return getEntry(getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1078,"            setEntry(getIndex(), value);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1079,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1087,            return index;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1096,            this.index = index;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1097,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1249,        return new RealVector() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1630,            class UnmodifiableEntry extends Entry {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1258,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1264,                return v.map(function);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1270,                final Iterator<Entry> i = v.iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1271,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1301,                final Iterator<Entry> i = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1303,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1334,                return v.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1341,                return v.add(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1348,                return v.subtract(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1354,                return v.mapAdd(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1366,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1372,                return v.mapSubtract(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1384,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1390,                return v.mapMultiply(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1402,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1408,                return v.mapDivide(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1420,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1427,                return v.ebeMultiply(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1434,                return v.ebeDivide(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1441,                return v.dotProduct(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1448,                return v.cosine(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1454,                return v.getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1460,                return v.getL1Norm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1466,                return v.getLInfNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1473,                return v.getDistance(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1480,                return v.getL1Distance(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1487,                return v.getLInfDistance(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1493,                return v.unitVector();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1504,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1510,                return v.outerProduct(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1516,                return v.getEntry(index);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1528,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1540,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1546,                return v.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1552,                return v.append(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1558,                return v.append(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1565,"                return v.getSubVector(index, n);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1577,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1589,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1595,                return v.toArray();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1601,                return v.isNaN();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1607,                return v.isInfinite();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1614,"                return v.combine(a, b, y);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1626,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,11,44,        this(LocalizedFormats.UNSUPPORTED_OPERATION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,11,45,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,11,52,                                             Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,11,53,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,11,54,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,11,55,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,11,59,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,11,65,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,11,71,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,102,"        super(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,103,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,104,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,107,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,108,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,111,"        blocks = createBlocksLayout(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,112,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,129,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,130,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,152,"        super(extractField(blockData), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,153,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,154,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,157,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,158,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,160,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,162,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,165,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,168,        int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,169,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,170,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,171,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,172,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,173,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,176,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,177,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,181,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,210,        final int rows         = rawData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,211,        final int columns      = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,212,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,213,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,216,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,217,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,218,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,219,"                throw new DimensionMismatchException(columns, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,224,        final Field<T> field = extractField(rawData);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,225,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,226,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,227,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,228,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,229,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,230,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,231,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,232,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,233,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,234,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,237,"                final T[] block = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,238,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,241,                int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,242,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,243,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,244,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,247,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,251,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,271,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,272,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,274,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,275,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,276,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,277,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,278,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,279,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,280,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,281,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,282,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,283,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,284,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,285,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,289,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,297,"        return new BlockFieldMatrix<T>(getField(), rowDimension,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,306,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,309,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,310,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,313,        return copied;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,321,            return add((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,322,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,325,            checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,327,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,330,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,331,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,332,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,335,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,336,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,337,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,338,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,339,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,340,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,341,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,342,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,343,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,344,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,345,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,350,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,355,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,371,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,373,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,376,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,377,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,378,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,379,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,380,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,381,                outBlock[k] = tBlock[k].add(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,385,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,393,            return subtract((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,394,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,397,            checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,399,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,402,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,403,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,404,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,407,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,408,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,409,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,410,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,411,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,412,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,413,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,414,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,415,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,416,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,417,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,422,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,427,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,441,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,443,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,446,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,447,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,448,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,449,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,450,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,451,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,455,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,461,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,464,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,465,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,466,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,467,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,468,                outBlock[k] = tBlock[k].add(d);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,472,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,479,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,482,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,483,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,484,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,485,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,486,                outBlock[k] = tBlock[k].multiply(d);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,490,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,498,            return multiply((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,499,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,502,            checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,504,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,505,            final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,508,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,509,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,511,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,512,"                final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,514,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,516,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,517,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,520,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,523,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,524,                        final int kWidth      = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,525,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,526,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,527,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,528,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,529,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,530,                            final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,531,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,532,                                T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,533,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,534,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,535,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,536,                                    ++r;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,538,                                outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,539,                                ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,545,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,550,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,565,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,567,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,568,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,571,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,572,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,574,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,575,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,577,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,578,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,579,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,580,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,581,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,584,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,587,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,588,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,589,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,590,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,591,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,592,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,593,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,594,                        final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,595,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,596,                            T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,597,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,598,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,599,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,600,                                sum = sum.,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,605,                                l += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,606,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,608,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,609,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,610,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,612,                            outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,613,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,619,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,623,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,630,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,631,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,633,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,634,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,635,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,636,            int regularPos   = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,637,            int lastPos      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,638,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,639,                final T[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,640,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,641,                int dataPos    = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,642,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,643,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,644,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,646,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,647,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,648,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,652,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,662,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,665,        final BlockFieldMatrix<T> out =,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,669,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,670,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,671,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,672,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,675,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,676,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,677,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,678,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,679,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,680,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,683,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,684,                final T[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,685,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,686,                final int      width    = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,688,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,689,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,690,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,692,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,694,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,695,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,699,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,703,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,707,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,711,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,713,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,717,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,724,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,726,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,727,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,731,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,735,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,737,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,743,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,745,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,748,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,771,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,772,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,773,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,774,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,775,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,776,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,777,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,779,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,788,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,789,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,790,        if (refLength == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,791,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,793,        final int endRow    = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,794,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,795,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,796,        for (final T[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,797,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,798,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,803,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,804,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,805,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,806,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,809,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,810,            final int iHeight  = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,811,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,812,"            final int iStart   = FastMath.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,813,"            final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,815,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,816,                final int jWidth      = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,817,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,818,"                final int jStart      = FastMath.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,819,"                final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,820,                final int jLength     = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,823,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,824,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,825,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,832,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,838,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,839,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,842,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,843,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,844,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,845,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,846,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,847,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,848,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,849,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,850,            final int available  = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,851,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,852,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,853,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,854,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,855,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,857,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,858,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,862,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,870,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,873,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,871,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,872,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,874,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,889,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,890,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,891,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,893,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,899,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,900,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,901,        int mBlockIndex  = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,902,        int mIndex       = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,903,        T[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,904,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,905,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,906,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,907,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,908,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,909,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,910,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,911,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,912,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,914,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,915,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,918,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,924,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,925,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,928,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,929,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,930,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,931,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,932,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,933,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,934,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,935,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,936,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,937,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,938,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,939,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,940,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,942,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,946,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,954,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,957,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,955,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,956,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,958,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,973,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,974,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,975,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,977,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,983,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,984,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,985,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,986,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,987,        int mIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,988,        T[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,989,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,990,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,991,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,992,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,993,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,994,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,995,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,997,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1000,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1006,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1007,"        final T[] outData = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1010,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1011,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1012,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1013,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1014,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1015,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1016,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1017,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1020,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1028,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1031,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1029,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1030,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1032,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1038,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1039,"        final T[] outData = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1042,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1043,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1044,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1045,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1046,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1047,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1048,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1049,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1050,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1054,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1062,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1065,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1063,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1064,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1066,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1071,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1072,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1075,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1076,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1077,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1078,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1079,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1080,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1081,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1082,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1085,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1092,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1093,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1094,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1095,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1099,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1100,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1101,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1102,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1103,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1104,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1105,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1106,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1108,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1113,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1114,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1117,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1118,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1119,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1120,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1121,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1122,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1123,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1124,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1125,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1129,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1136,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1137,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1138,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1139,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1143,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1144,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1145,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1146,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1147,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1148,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1149,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1150,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1151,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1154,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1160,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1161,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1163,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1164,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1165,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1168,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1175,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1176,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1178,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1179,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1180,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1183,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1184,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1190,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1191,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1193,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1194,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1195,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1197,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1199,        blockIJ[k] = blockIJ[k].add(increment);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1200,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1206,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1207,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1209,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1210,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1211,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1213,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1215,        blockIJ[k] = blockIJ[k].multiply(factor);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1216,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1221,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1222,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1223,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1226,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1227,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1228,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1231,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1232,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1233,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1234,"                final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1235,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1236,"                final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1237,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1238,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1239,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1240,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1241,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1242,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1243,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1244,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1249,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1254,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1260,        return rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1266,        return columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1272,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1273,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1275,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1276,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1279,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1280,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1281,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1282,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1283,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1284,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1285,"                final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1286,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1287,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1288,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1289,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1290,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1291,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1296,                        k += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1297,                        q += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1299,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1300,                        sum = sum.add(block[k++].multiply(v[q++]));,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1302,                    out[p] = out[p].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1307,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1314,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1315,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1317,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1318,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1321,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1322,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1323,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1324,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1325,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1326,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1327,"            final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1328,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1329,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1330,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1331,"                final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1332,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1333,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1334,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1335,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1336,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1337,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1342,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1343,                        p += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1345,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1346,                        sum = sum.add(block[k].multiply(v[p++]));,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1347,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1349,                    out[q] = out[q].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1354,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1360,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1361,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1362,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1363,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1364,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1365,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1366,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1367,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1368,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1369,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1370,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1371,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1372,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1373,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1378,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1384,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1385,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1386,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1387,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1388,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1389,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1390,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1391,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1392,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1393,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1394,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1395,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1396,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1397,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1402,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1411,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1412,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1413,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1414,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1415,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1416,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1417,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1418,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1419,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1420,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1421,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1422,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1423,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1424,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1425,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1426,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1427,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1432,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1441,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1442,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1443,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1444,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1445,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1446,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1447,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1448,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1449,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1450,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1451,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1452,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1453,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1454,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1455,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1456,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1457,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1462,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1468,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1469,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1470,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1471,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1472,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1473,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1474,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1475,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1476,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1477,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1478,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1479,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1480,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1481,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1484,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1487,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1493,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1494,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1495,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1496,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1497,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1498,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1499,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1500,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1501,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1502,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1503,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1504,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1505,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1506,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1509,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1512,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1521,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1522,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1523,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1524,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1525,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1526,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1527,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1528,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1529,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1530,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1531,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1532,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1533,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1534,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1535,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1536,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1537,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1542,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1551,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1552,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1553,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1554,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1555,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1556,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1557,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1558,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1559,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1560,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1561,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1562,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1563,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1564,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1565,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1566,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1567,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1572,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1581,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,11,1590,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,782,        return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,785,            private int i = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,788,            private Entry e = new Entry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,792,                return i < dim;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,797,                if (i < dim) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,798,                    e.setIndex(i++);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,799,                    return e;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,801,                    throw new NoSuchElementException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,811,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,289,                sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,290,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,294,                sum += value * value;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,295,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,299,                return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,73,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,75,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,93,"        this(prefix, suffix, separator,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,95,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,122,        return NumberFormat.getAvailableLocales();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,130,        return prefix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,138,        return suffix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,146,        return separator;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,154,        return format;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,181,"        return format(v, new StringBuffer(), new FieldPosition(0)).toString();",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,195,        pos.setBeginIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,196,        pos.setEndIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,199,        toAppendTo.append(prefix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,202,        for (int i = 0; i < vector.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,203,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,204,                toAppendTo.append(separator);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,206,"            CompositeFormat.formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,210,        toAppendTo.append(suffix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,212,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,224,        final ParsePosition parsePosition = new ParsePosition(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,225,"        final ArrayRealVector result = parse(source, parsePosition);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,226,        if (parsePosition.getIndex() == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,227,"            throw new MathParseException(source,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,231,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,242,        int initialIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,245,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,246,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,247,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,251,        List<Number> components = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,252,        for (boolean loop = true; loop;){,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,254,            if (!components.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,255,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,256,"                if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,257,                    loop = false;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,261,            if (loop) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,262,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,263,"                Number component = CompositeFormat.parseNumber(source, format, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,264,                if (component != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,265,                    components.add(component);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,269,                    pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,270,                    return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,272,            },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,277,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,278,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,279,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,283,        double[] data = new double[components.size()];,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,284,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,285,            data[i] = components.get(i).doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,11,287,"        return new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,11,42,                              Class<?> type) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,11,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,11,45,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,11,53,                              int position) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,11,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,",0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,11,56,    },0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,64,"            throw new NonSquareMatrixException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,104,                final double[] hK = householderVectors[k - 1];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,105,                qta[k][k] = 1;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,106,                if (hK[k] != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,107,                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,108,                    double beta = 1.0 / secondary[k - 1];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,109,                    qta[k][k] = 1 + beta * hK[k];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,110,                    for (int i = k + 1; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,111,                        qta[k][i] = beta * hK[i];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,113,                    for (int j = k + 1; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,114,                        beta = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,115,                        for (int i = k + 1; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,116,                            beta += qta[j][i] * hK[i];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,118,                        beta *= inv;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,119,                        qta[j][k] = beta * hK[k];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,120,                        for (int i = k + 1; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,121,                            qta[j][i] += beta * hK[i];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,139,        if (cachedT == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,140,            final int m = main.length;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,141,            double[][] ta = new double[m][m];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,142,            for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,143,                ta[i][i] = main[i];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,144,                if (i > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,145,                    ta[i][i - 1] = secondary[i - 1];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,147,                if (i < main.length - 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,148,                    ta[i][i + 1] = secondary[i];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,151,            cachedT = MatrixUtils.createRealMatrix(ta);,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,155,        return cachedT;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,165,        return householderVectors;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,198,            final double[] hK = householderVectors[k];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,199,            main[k] = hK[k];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,200,            double xNormSqr = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,201,            for (int j = k + 1; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,202,                final double c = hK[j];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,203,                xNormSqr += c * c;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,205,            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,206,            secondary[k] = a;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,207,            if (a != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,210,                hK[k + 1] -= a;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,211,                final double beta = -1 / (a * hK[k + 1]);,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,217,"                Arrays.fill(z, k + 1, m, 0);",0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,218,                for (int i = k + 1; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,219,                    final double[] hI = householderVectors[i];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,220,                    final double hKI = hK[i];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,221,                    double zI = hI[i] * hKI;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,222,                    for (int j = i + 1; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,223,                        final double hIJ = hI[j];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,224,                        zI   += hIJ * hK[j];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,225,                        z[j] += hIJ * hKI;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,227,                    z[i] = beta * (z[i] + zI);,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,231,                double gamma = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,232,                for (int i = k + 1; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,233,                    gamma += z[i] * hK[i];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,235,                gamma *= beta / 2;,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,238,                for (int i = k + 1; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,239,                    z[i] -= gamma * hK[i];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,244,                for (int i = k + 1; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,245,                    final double[] hI = householderVectors[i];,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,246,                    for (int j = i; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/TriDiagonalTransformer,11,247,                        hI[j] -= hK[i] * z[j] + z[i] * hK[j];,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1169,        protected SparseEntryIterator() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1170,            dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1171,            current = new Entry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1172,            next = new Entry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1173,            if (next.getValue() == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1174,                advance(next);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1176,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1184,            if (e == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1185,                return;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1188,                e.setIndex(e.getIndex() + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1189,            } while (e.getIndex() < dim && e.getValue() == 0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1190,            if (e.getIndex() >= dim) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1191,                e.setIndex(-1);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1193,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1197,            return next.getIndex() >= 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1202,            int index = next.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1203,            if (index < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1204,                throw new NoSuchElementException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1206,            current.setIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1207,            advance(next);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1208,            return current;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1217,            throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1159,    @Deprecated,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,90,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,92,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,151,        return NumberFormat.getAvailableLocales();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,159,        return prefix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,167,        return suffix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,175,        return rowPrefix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,183,        return rowSuffix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,191,        return rowSeparator;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,199,        return columnSeparator;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,234,"        return format(m, new StringBuffer(), new FieldPosition(0)).toString();",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,248,        pos.setBeginIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,249,        pos.setEndIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,252,        toAppendTo.append(prefix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,255,        final int rows = matrix.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,256,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,257,            toAppendTo.append(rowPrefix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,258,            for (int j = 0; j < matrix.getColumnDimension(); ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,259,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,260,                    toAppendTo.append(columnSeparator);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,262,"                CompositeFormat.formatDouble(matrix.getEntry(i, j), format, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,264,            toAppendTo.append(rowSuffix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,265,            if (i < rows - 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,266,                toAppendTo.append(rowSeparator);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,271,        toAppendTo.append(suffix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,273,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,285,        final ParsePosition parsePosition = new ParsePosition(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,286,"        final RealMatrix result = parse(source, parsePosition);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,287,        if (parsePosition.getIndex() == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,288,"            throw new MathParseException(source,",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,292,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,303,        int initialIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,305,        final String trimmedPrefix = prefix.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,306,        final String trimmedSuffix = suffix.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,307,        final String trimmedRowPrefix = rowPrefix.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,308,        final String trimmedRowSuffix = rowSuffix.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,309,        final String trimmedColumnSeparator = columnSeparator.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,310,        final String trimmedRowSeparator = rowSeparator.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,313,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,314,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,315,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,319,        List<List<Number>> matrix = new ArrayList<List<Number>>();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,320,        List<Number> rowComponents = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,321,        for (boolean loop = true; loop;){,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,323,            if (!rowComponents.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,324,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,325,"                if (!CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,326,                    if (trimmedRowSuffix.length() != 0 &&,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,328,                        return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,330,"                        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,331,"                        if (CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,332,                            matrix.add(rowComponents);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,333,                            rowComponents = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,334,                            continue;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,336,                            loop = false;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,341,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,342,                if (trimmedRowPrefix.length() != 0 &&,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,344,                    return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,348,            if (loop) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,349,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,350,"                Number component = CompositeFormat.parseNumber(source, format, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,351,                if (component != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,352,                    rowComponents.add(component);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,354,                    if (rowComponents.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,355,                        loop = false;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,359,                        pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,360,                        return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,363,            },0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,367,        if (!rowComponents.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,368,            matrix.add(rowComponents);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,372,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,373,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,374,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,378,        if (matrix.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,379,            pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,380,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,384,        double[][] data = new double[matrix.size()][];,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,385,        int row = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,386,        for (List<Number> rowList : matrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,387,            data[row] = new double[rowList.size()];,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,388,            for (int i = 0; i < rowList.size(); i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,389,                data[row][i] = rowList.get(i).doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,391,            row++;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,392,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,11,393,        return MatrixUtils.createRealMatrix(data);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1271,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1273,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1277,                        return i.hasNext();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1282,                        e.setIndex(i.next().getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1283,                        return e;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1293,                        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1303,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1305,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1309,                        return i.hasNext();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1314,                        e.setIndex(i.next().getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1315,                        return e;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,11,1326,                        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,675,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,679,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,680,            },0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,450,            if (!isNonSingular()) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,451,                throw new SingularMatrixException();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,454,            final int m = realEigenvalues.length;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,455,            if (b.getDimension() != m) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,456,"                throw new DimensionMismatchException(b.getDimension(), m);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,459,            final double[] bp = new double[m];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,460,            for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,461,                final ArrayRealVector v = eigenvectors[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,462,                final double[] vData = v.getDataRef();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,463,                final double s = v.dotProduct(b) / realEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,464,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,465,                    bp[j] += s * vData[j];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,469,"            return new ArrayRealVector(bp, false);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,475,            if (!isNonSingular()) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,476,                throw new SingularMatrixException();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,479,            final int m = realEigenvalues.length;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,480,            if (b.getRowDimension() != m) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,481,"                throw new DimensionMismatchException(b.getRowDimension(), m);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,484,            final int nColB = b.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,485,            final double[][] bp = new double[m][nColB];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,486,            final double[] tmpCol = new double[m];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,487,            for (int k = 0; k < nColB; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,488,                for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,489,"                    tmpCol[i] = b.getEntry(i, k);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,490,                    bp[i][k]  = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,492,                for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,493,                    final ArrayRealVector v = eigenvectors[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,494,                    final double[] vData = v.getDataRef();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,495,                    double s = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,496,                    for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,497,                        s += v.getEntry(j) * tmpCol[j];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,499,                    s /= realEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,500,                    for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,501,                        bp[j][k] += s * vData[j];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,506,"            return new Array2DRowRealMatrix(bp, false);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,519,                    return false;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,533,                throw new SingularMatrixException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,329,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,11,334,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,64,        super();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,65,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,81,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,103,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,132,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,159,        if (data == null ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,161,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,163,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,176,"        final RealMatrix m = createRealMatrix(dimension, dimension);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,177,        for (int i = 0; i < dimension; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,178,"            m.setEntry(i, i, 1.0);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,180,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,195,        final T zero = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,196,        final T one  = field.getOne();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,198,"        final T[][] d = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { dimension, dimension });",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,199,        for (int row = 0; row < dimension; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,200,            final T[] dRow = d[row];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,201,"            Arrays.fill(dRow, zero);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,202,            dRow[row] = one;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,204,"        return new Array2DRowFieldMatrix<T>(field, d, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,217,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,218,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,220,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,234,        final FieldMatrix<T> m =,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,236,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,237,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,239,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,252,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,253,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,255,"        return new ArrayRealVector(data, true);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,270,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,271,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,273,        if (data.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,274,            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,276,"        return new ArrayFieldVector<T>(data[0].getField(), data, true);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,290,        if (rowData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,291,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,293,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,294,"        final RealMatrix m = createRealMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,295,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,296,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,298,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,314,        if (rowData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,315,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,317,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,318,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,319,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,321,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,322,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,323,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,325,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,339,        if (columnData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,340,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,342,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,343,"        final RealMatrix m = createRealMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,344,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,345,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,347,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,363,        if (columnData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,364,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,366,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,367,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,368,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,370,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,371,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,372,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,374,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,393,            if (raiseException) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,394,"                throw new NonSquareMatrixException(rows, matrix.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,396,                return false;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,401,"                final double mij = matrix.getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,402,"                final double mji = matrix.getEntry(j, i);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,403,                if (FastMath.abs(mij - mji) >,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,405,                    if (raiseException) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,406,"                        throw new NonSymmetricMatrixException(i, j, relativeTolerance);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,408,                        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,427,"        isSymmetricInternal(matrix, eps, true);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,428,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,470,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,485,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,507,"        checkRowIndex(m, startRow);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,508,"        checkRowIndex(m, endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,509,        if (endRow < startRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,510,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,514,"        checkColumnIndex(m, startColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,515,"        checkColumnIndex(m, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,516,        if (endColumn < startColumn) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,517,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,522,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,541,        if (selectedRows == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,542,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,544,        if (selectedColumns == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,545,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,547,        if (selectedRows.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,548,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,550,        if (selectedColumns.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,551,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,554,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,555,"            checkRowIndex(m, row);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,557,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,558,"            checkColumnIndex(m, column);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,560,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,572,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,574,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,577,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,589,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,591,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,594,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,608,"            throw new DimensionMismatchException(left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,619,        final FractionMatrixConverter converter = new FractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,620,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,621,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,664,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,665,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,666,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,744,        final int n = vector.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,745,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,746,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,747,            oos.writeDouble(vector.getEntry(i));,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,749,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,775,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,776,            final double[] data = new double[n];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,777,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,778,                data[i] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,782,"            final RealVector vector = new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,785,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,787,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,788,"            f.set(instance, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,798,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,790,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,791,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,792,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,793,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,794,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,795,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,796,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,797,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,800,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,845,        final int n = matrix.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,846,        final int m = matrix.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,847,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,848,        oos.writeInt(m);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,849,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,850,            for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,851,"                oos.writeDouble(matrix.getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,854,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,880,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,881,            final int m = ois.readInt();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,882,            final double[][] data = new double[n][m];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,883,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,884,                final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,885,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,886,                    dataI[j] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,891,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,894,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,896,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,897,"            f.set(instance, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,907,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,899,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,900,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,901,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,902,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,903,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,904,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,905,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,906,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,908,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,931,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,932,            throw new DimensionMismatchException(,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,936,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,937,"            throw new NonSquareMatrixException(rm.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,940,        int rows = rm.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,941,        for( int i = 0 ; i < rows ; i++ ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,942,"            double diag = rm.getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,943,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,944,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,946,            double bi = b.getEntry(i)/diag;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,947,"            b.setEntry(i,  bi );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,948,            for( int j = i+1; j< rows; j++ ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,949,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,952,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,976,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,977,            throw new DimensionMismatchException(,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,981,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,982,"            throw new NonSquareMatrixException(rm.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,985,        int rows = rm.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,986,        for( int i = rows-1 ; i >-1 ; i-- ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,987,"            double diag = rm.getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,988,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,989,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,991,            double bi = b.getEntry(i)/diag;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,992,"            b.setEntry(i,  bi );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,993,            for( int j = i-1; j>-1; j-- ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,994,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,997,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1013,        final int n = m.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1014,        if (m.getColumnDimension() != n) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1015,"            throw new NonSquareMatrixException(m.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1019,        final int splitIndex1 = splitIndex + 1;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1021,"        final RealMatrix a = m.getSubMatrix(0, splitIndex, 0, splitIndex);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1022,"        final RealMatrix b = m.getSubMatrix(0, splitIndex, splitIndex1, n - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1023,"        final RealMatrix c = m.getSubMatrix(splitIndex1, n - 1, 0, splitIndex);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1024,"        final RealMatrix d = m.getSubMatrix(splitIndex1, n - 1, splitIndex1, n - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1026,        final SingularValueDecomposition aDec = new SingularValueDecomposition(a);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1027,        final RealMatrix aInv = aDec.getSolver().getInverse();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1029,        final SingularValueDecomposition dDec = new SingularValueDecomposition(d);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1030,        final RealMatrix dInv = dDec.getSolver().getInverse();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1032,        final RealMatrix tmp1 = a.subtract(b.multiply(dInv).multiply(c));,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1033,        final SingularValueDecomposition tmp1Dec = new SingularValueDecomposition(tmp1);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1034,        final RealMatrix result00 = tmp1Dec.getSolver().getInverse();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1036,        final RealMatrix tmp2 = d.subtract(c.multiply(aInv).multiply(b));,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1037,        final SingularValueDecomposition tmp2Dec = new SingularValueDecomposition(tmp2);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1038,        final RealMatrix result11 = tmp2Dec.getSolver().getInverse();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1040,        final RealMatrix result01 = aInv.multiply(b).multiply(result11).scalarMultiply(-1);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1041,        final RealMatrix result10 = dInv.multiply(c).multiply(result00).scalarMultiply(-1);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1043,"        final RealMatrix result = new Array2DRowRealMatrix(n, n);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1044,"        result.setSubMatrix(result00.getData(), 0, 0);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1045,"        result.setSubMatrix(result01.getData(), 0, splitIndex1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1046,"        result.setSubMatrix(result10.getData(), splitIndex1, 0);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1047,"        result.setSubMatrix(result11.getData(), splitIndex1, splitIndex1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,11,1049,        return result;,0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,11,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,11,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,11,47,"        super(specific, 0, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,11,48,    },0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,11,48,"        super(LocalizedFormats.NON_SYMMETRIC_MATRIX, row, column, threshold);",0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,11,49,        this.row = row;,0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,11,50,        this.column = column;,0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,11,51,        this.threshold = threshold;,0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,11,52,    },0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,11,58,        return row;,0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,11,64,        return column;,0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,11,70,        return threshold;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,98,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,99,        this.rows = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,100,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,107,"        blocks = createBlocksLayout(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,108,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,127,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,128,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,149,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,150,        this.rows = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,151,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,154,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,155,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,157,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,159,            blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,162,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,165,        int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,166,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,167,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,168,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,169,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,170,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,173,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,174,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,178,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,203,        final int rows = rawData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,204,        final int columns = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,205,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,206,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,209,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,210,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,211,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,212,"                throw new DimensionMismatchException(columns, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,217,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,218,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,219,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,220,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,221,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,222,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,223,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,224,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,225,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,226,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,229,                final double[] block = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,230,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,233,                int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,234,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,235,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,236,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,238,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,242,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,258,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,259,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,261,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,262,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,264,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,266,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,268,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,270,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,271,                blocks[blockIndex] = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,272,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,276,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,284,"        return new BlockRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,291,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,294,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,295,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,298,        return copied;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,306,            return add((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,307,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,309,"            MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,311,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,314,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,315,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,316,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,319,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,320,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,321,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,322,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,323,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,324,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,325,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,326,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,327,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,328,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,329,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,333,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,337,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,352,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,354,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,357,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,358,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,359,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,360,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,361,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,362,                outBlock[k] = tBlock[k] + mBlock[k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,366,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,374,            return subtract((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,375,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,377,"            MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,379,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,382,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,383,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,384,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,387,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,388,                    final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,389,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,390,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,391,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,392,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,393,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,394,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,395,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,396,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,397,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,401,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,405,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,420,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,422,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,425,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,426,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,427,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,428,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,429,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,430,                outBlock[k] = tBlock[k] - mBlock[k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,434,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,441,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,444,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,445,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,446,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,447,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,448,                outBlock[k] = tBlock[k] + d;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,452,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,458,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,461,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,462,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,463,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,464,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,465,                outBlock[k] = tBlock[k] * d;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,469,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,477,            return multiply((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,478,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,480,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,482,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,485,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,486,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,487,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,488,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,490,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,491,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,492,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,495,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,498,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,499,                        final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,500,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,501,                        final int rStart = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,502,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,503,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,504,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,505,                            final int lEnd = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,506,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,507,                                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,508,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,509,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,510,"                                    sum += tBlock[l] * m.getEntry(r, q);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,511,                                    ++r;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,513,                                outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,514,                                ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,519,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,523,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,537,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,539,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,542,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,543,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,545,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,546,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,548,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,549,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,550,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,551,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,552,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,555,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,558,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,559,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,560,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,561,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,562,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,563,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,564,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,565,                        final int lEnd = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,566,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,567,                            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,568,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,569,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,570,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,571,                                sum += tBlock[l] * mBlock[n] +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,575,                                l += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,576,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,578,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,579,                                sum += tBlock[l++] * mBlock[n];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,580,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,582,                            outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,583,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,588,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,592,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,598,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,599,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,601,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,602,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,603,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,604,            int regularPos = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,605,            int lastPos = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,606,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,607,                final double[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,608,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,609,                int dataPos = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,610,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,611,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,612,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,614,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,615,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,616,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,620,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,626,        final double[] colSums = new double[BLOCK_SIZE];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,627,        double maxColSum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,628,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,629,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,630,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,631,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,632,                final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,633,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,634,                for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,635,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,636,                    for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,637,                        sum += FastMath.abs(block[i * jWidth + j]);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,639,                    colSums[j] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,642,            for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,643,"                maxColSum = FastMath.max(maxColSum, colSums[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,646,        return maxColSum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,652,        double sum2 = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,653,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,654,            for (final double entry : blocks[blockIndex]) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,655,                sum2 += entry * entry;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,658,        return FastMath.sqrt(sum2);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,668,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,671,        final BlockRealMatrix out =,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,675,        final int blockStartRow = startRow / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,676,        final int rowsShift = startRow % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,677,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,678,        final int columnsShift = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,681,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,682,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,683,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,684,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,685,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,686,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,689,                final int outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,690,                final double[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,691,                final int index = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,692,                final int width = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,694,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,695,                final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,696,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,698,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,700,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,701,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,705,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,709,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,713,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,717,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,719,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,723,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,730,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,732,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,733,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,737,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,741,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,743,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,749,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,751,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,754,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,777,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,778,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,779,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,780,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,781,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,782,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,783,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,785,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,794,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,795,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,796,        if (refLength == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,797,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,799,        final int endRow = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,800,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,801,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,802,        for (final double[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,803,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,804,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,809,        final int blockStartRow = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,810,        final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,811,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,812,        final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,815,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,816,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,817,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,818,"            final int iStart = FastMath.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,819,"            final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,821,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,822,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,823,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,824,"                final int jStart = FastMath.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,825,"                final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,826,                final int jLength = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,829,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,830,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,831,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,838,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,844,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,845,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,848,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,849,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,850,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,851,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,852,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,853,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,854,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,855,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,856,            final int available = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,857,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,858,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,859,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,860,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,861,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,863,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,864,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,868,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,876,"            setRowMatrix(row, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,879,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,877,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,878,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,880,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,895,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,896,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,897,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,899,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,905,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,906,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,907,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,908,        int mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,909,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,910,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,911,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,912,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,913,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,914,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,915,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,916,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,917,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,918,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,920,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,921,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,924,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,930,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,931,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,934,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,935,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,936,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,937,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,938,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,939,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,940,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,941,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,942,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,943,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,944,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,945,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,946,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,948,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,952,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,960,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,963,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,961,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,962,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,964,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,979,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,980,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,981,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,983,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,989,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,990,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,991,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,992,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,993,        int mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,994,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,995,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,996,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,997,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,998,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,999,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1000,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1001,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1003,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1006,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1012,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1013,        final double[] outData = new double[columns];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1016,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1017,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1018,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1019,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1020,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1021,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1022,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1023,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1026,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1034,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1037,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1035,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1036,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1038,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1044,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1045,        final double[] outData = new double[rows];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1048,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1049,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1050,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1051,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1052,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1053,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1054,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1055,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1056,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1060,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1068,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1071,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1069,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1070,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1072,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1077,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1078,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1081,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1082,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1083,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1084,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1085,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1086,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1087,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1088,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1091,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1098,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1099,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1100,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1101,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1105,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1106,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1107,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1108,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1109,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1110,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1111,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1112,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1114,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1119,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1120,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1123,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1124,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1125,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1126,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1127,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1128,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1129,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1130,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1131,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1135,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1142,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1143,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1144,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1145,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1149,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1150,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1151,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1152,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1153,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1154,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1155,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1156,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1157,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1160,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1166,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1167,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1168,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1169,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1171,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1178,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1179,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1180,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1181,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1183,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1184,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1191,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1192,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1193,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1194,        final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1196,        blocks[iBlock * blockColumns + jBlock][k] += increment;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1197,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1204,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1205,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1206,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1207,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1209,        blocks[iBlock * blockColumns + jBlock][k] *= factor;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1210,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1215,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1216,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1217,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1220,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1221,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1222,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1224,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1225,                final double[] tBlock = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1226,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1227,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1228,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1229,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1230,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1231,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1232,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1233,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1234,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1235,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1236,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1237,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1241,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1245,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1251,        return rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1257,        return columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1264,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1265,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1267,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1270,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1271,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1272,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1273,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1274,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1275,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1276,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1277,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1278,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1279,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1280,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1281,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1282,                        sum += block[k]     * v[q]     +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1286,                        k += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1287,                        q += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1289,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1290,                        sum += block[k++] * v[q++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1292,                    out[p] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1297,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1304,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1305,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1307,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1310,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1311,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1312,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1313,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1314,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1315,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1316,"            final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1317,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1318,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1319,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1320,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1321,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1322,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1323,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1324,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1325,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1326,                        sum += block[k]           * v[p]     +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1330,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1331,                        p += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1333,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1334,                        sum += block[k] * v[p++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1335,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1337,                    out[q] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1342,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1348,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1349,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1350,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1351,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1352,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1353,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1354,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1355,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1356,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1357,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1358,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1359,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1360,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1361,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1366,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1372,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1373,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1374,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1375,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1376,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1377,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1378,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1379,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1380,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1381,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1382,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1383,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1384,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1385,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1390,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1399,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1400,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1401,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1402,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1403,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1404,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1405,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1406,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1407,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1408,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1409,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1410,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1411,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1412,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1413,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1414,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1415,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1420,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1429,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1430,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1431,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1432,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1433,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1434,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1435,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1436,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1437,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1438,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1439,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1440,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1441,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1442,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1443,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1444,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1445,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1450,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1457,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1458,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1459,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1460,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1461,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1462,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1463,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1464,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1465,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1466,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1467,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1468,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1469,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1472,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1475,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1481,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1482,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1483,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1484,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1485,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1486,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1487,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1488,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1489,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1490,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1491,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1492,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1493,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1494,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1497,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1500,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1510,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1511,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1512,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1513,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1514,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1515,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1516,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1517,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1518,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1519,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1520,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1521,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1522,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1523,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1524,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1525,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1526,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1531,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1541,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1542,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1543,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1544,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1545,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1546,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1547,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1548,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1549,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1550,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1551,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1552,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1553,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1554,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1555,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1556,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1557,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1562,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1571,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,1580,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,11,72,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,58,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,59,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,72,"        super(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,73,"        data = buildArray(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,74,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,92,"        this(extractField(d), d);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,93,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,112,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,113,        copyIn(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,114,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,134,"        this(extractField(d), d, copyArray);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,135,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,155,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,156,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,157,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,159,            MathUtils.checkNotNull(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,160,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,161,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,162,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,164,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,165,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,166,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,168,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,169,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,170,"                    throw new DimensionMismatchException(nCols, d[r].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,173,            data = d;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,175,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,186,"        this(extractField(v), v);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,187,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,198,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,199,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,200,"        data = buildArray(getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,201,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,202,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,204,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,211,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,217,"        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,231,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,233,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,234,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,235,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,236,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,237,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,238,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,239,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,240,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,241,                outDataRow[col] = dataRow[col].add(mRow[col]);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,245,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,259,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,261,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,262,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,263,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,264,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,265,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,266,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,267,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,268,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,269,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,273,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,288,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,290,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,291,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,292,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,293,"        final T[][] outData = buildArray(getField(), nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,294,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,295,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,296,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,297,            for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,298,                T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,299,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,300,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,302,                outDataRow[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,306,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,313,        return copyOut();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,323,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,332,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,333,            if (row > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,334,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,336,            if (column > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,337,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,339,            final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,340,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,341,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,344,            final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,345,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,346,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,348,"            data = buildArray(getField(), subMatrix.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,349,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,350,                if (subMatrix[i].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,351,"                    throw new DimensionMismatchException(nCols, subMatrix[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,353,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,355,        } else {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,356,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,359,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,365,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,366,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,368,        return data[row][column];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,375,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,376,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,378,        data[row][column] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,379,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,385,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,386,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,388,        data[row][column] = data[row][column].add(increment);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,389,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,395,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,396,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,398,        data[row][column] = data[row][column].multiply(factor);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,399,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,404,        return (data == null) ? 0 : data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,416,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,417,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,418,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,419,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,421,"        final T[] out = buildArray(getField(), nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,422,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,423,            final T[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,424,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,425,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,426,                sum = sum.add(dataRow[i].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,428,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,430,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,436,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,437,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,438,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,439,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,442,"        final T[] out = buildArray(getField(), nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,443,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,444,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,445,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,446,                sum = sum.add(data[i][col].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,448,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,451,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,457,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,458,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,459,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,460,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,461,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,462,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,463,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,466,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,472,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,473,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,474,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,475,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,476,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,477,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,478,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,481,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,490,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,491,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,493,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,494,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,495,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,496,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,499,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,508,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,509,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,511,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,512,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,513,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,514,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,517,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,523,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,524,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,525,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,526,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,527,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,528,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,529,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,532,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,538,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,539,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,540,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,541,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,542,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,543,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,546,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,555,"    checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,556,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,558,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,559,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,560,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,561,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,564,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,573,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,574,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,576,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,577,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,578,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,581,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,590,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,591,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,593,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,594,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,596,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,610,"        setSubMatrix(in, 0, 0);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,11,611,    },0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,125,            final SchurTransformer t = transformToSchur(matrix);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,126,            findEigenVectorsFromSchur(t);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,145,        this(matrix);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,146,    },0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,157,"    public EigenDecomposition(final double[] main, final double[] secondary) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,158,        isSymmetric = true;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,159,        this.main      = main.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,160,        this.secondary = secondary.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,161,        transformer    = null;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,162,        final int size = main.length;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,163,        final double[][] z = new double[size][size];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,164,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,165,            z[i][i] = 1.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,167,        findEigenVectors(z);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,168,    },0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,184,"        this(main, secondary);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,185,    },0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,199,        if (cachedV == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,200,            final int m = eigenvectors.length;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,201,"            cachedV = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,202,            for (int k = 0; k < m; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,203,"                cachedV.setColumnVector(k, eigenvectors[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,207,        return cachedV;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,223,        if (cachedD == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,225,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,227,            for (int i = 0; i < imagEigenvalues.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,228,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,229,"                    cachedD.setEntry(i, i+1, imagEigenvalues[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,230,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,231,"                    cachedD.setEntry(i, i-1, imagEigenvalues[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,235,        return cachedD;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,250,        if (cachedVt == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,251,            final int m = eigenvectors.length;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,252,"            cachedVt = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,253,            for (int k = 0; k < m; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,254,"                cachedVt.setRowVector(k, eigenvectors[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,259,        return cachedVt;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,274,                return true;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,306,        return realEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,321,        return imagEigenvalues.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,337,        return imagEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,375,        if (!isSymmetric) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,376,            throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,379,        final double[] sqrtEigenValues = new double[realEigenvalues.length];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,380,        for (int i = 0; i < realEigenvalues.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,381,            final double eigen = realEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,382,            if (eigen <= 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,383,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,385,            sqrtEigenValues[i] = FastMath.sqrt(eigen);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,387,        final RealMatrix sqrtEigen = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,388,        final RealMatrix v = getV();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,389,        final RealMatrix vT = getVT();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,391,        return v.multiply(sqrtEigen).multiply(vT);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,407,            throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,579,            realEigenvalues[i] = main[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,580,            e[i] = secondary[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,592,                maxAbsoluteValue = FastMath.abs(e[i]);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,599,                    realEigenvalues[i] = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,612,                    double delta = FastMath.abs(realEigenvalues[m]) +,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,614,                    if (FastMath.abs(e[m]) + delta == delta) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,615,                        break;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,619,                    if (its == maxIter) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,620,"                        throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,623,                    its++;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,624,                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,625,                    double t = FastMath.sqrt(1 + q * q);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,626,                    if (q < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,627,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,629,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,631,                    double u = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,632,                    double s = 1.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,633,                    double c = 1.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,635,                    for (i = m - 1; i >= j; i--) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,636,                        double p = s * e[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,637,                        double h = c * e[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,638,                        if (FastMath.abs(p) >= FastMath.abs(q)) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,639,                            c = q / p;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,640,                            t = FastMath.sqrt(c * c + 1.0);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,641,                            e[i + 1] = p * t;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,642,                            s = 1.0 / t;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,643,                            c = c * s;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,645,                            s = p / q;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,646,                            t = FastMath.sqrt(s * s + 1.0);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,647,                            e[i + 1] = q * t;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,648,                            c = 1.0 / t;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,649,                            s = s * c;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,651,                        if (e[i + 1] == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,652,                            realEigenvalues[i + 1] -= u;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,653,                            e[m] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,654,                            break;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,656,                        q = realEigenvalues[i + 1] - u;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,657,                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,658,                        u = s * t;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,659,                        realEigenvalues[i + 1] = q + u;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,660,                        q = c * t - h;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,661,                        for (int ia = 0; ia < n; ia++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,662,                            p = z[ia][i + 1];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,663,                            z[ia][i + 1] = s * z[ia][i] + c * p;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,664,                            z[ia][i] = c * z[ia][i] - s * p;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,667,                    if (t == 0.0 && i >= j) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,668,                        continue;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,670,                    realEigenvalues[j] -= u;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,671,                    e[j] = q;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,672,                    e[m] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,682,                if (realEigenvalues[j] > p) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,683,                    k = j;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,684,                    p = realEigenvalues[j];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,688,                realEigenvalues[k] = realEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,689,                realEigenvalues[i] = p;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,690,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,691,                    p = z[j][i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,692,                    z[j][i] = z[j][k];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,693,                    z[j][k] = p;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,709,                    realEigenvalues[i] = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,730,        final SchurTransformer schurTransform = new SchurTransformer(matrix);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,731,        final double[][] matT = schurTransform.getT().getData();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,733,        realEigenvalues = new double[matT.length];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,734,        imagEigenvalues = new double[matT.length];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,736,        for (int i = 0; i < realEigenvalues.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,737,            if (i == (realEigenvalues.length - 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,739,                realEigenvalues[i] = matT[i][i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,741,                final double x = matT[i + 1][i + 1];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,742,                final double p = 0.5 * (matT[i][i] - x);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,743,                final double z = FastMath.sqrt(FastMath.abs(p * p + matT[i + 1][i] * matT[i][i + 1]));,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,744,                realEigenvalues[i] = x + p;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,745,                imagEigenvalues[i] = z;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,746,                realEigenvalues[i + 1] = x + p;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,747,                imagEigenvalues[i + 1] = -z;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,748,                i++;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,751,        return schurTransform;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,765,"        return new Complex(xr, xi).divide(new Complex(yr, yi));",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,776,        final double[][] matrixT = schur.getT().getData();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,777,        final double[][] matrixP = schur.getP().getData();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,779,        final int n = matrixT.length;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,782,        double norm = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,783,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,784,"           for (int j = FastMath.max(i - 1, 0); j < n; j++) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,785,              norm = norm + FastMath.abs(matrixT[i][j]);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,790,"        if (Precision.equals(norm, 0.0, EPSILON)) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,791,           throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,796,        double r = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,797,        double s = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,798,        double z = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,800,        for (int idx = n - 1; idx >= 0; idx--) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,801,            double p = realEigenvalues[idx];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,802,            double q = imagEigenvalues[idx];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,804,"            if (Precision.equals(q, 0.0)) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,806,                int l = idx;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,807,                matrixT[idx][idx] = 1.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,808,                for (int i = idx - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,809,                    double w = matrixT[i][i] - p;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,810,                    r = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,811,                    for (int j = l; j <= idx; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,812,                        r = r + matrixT[i][j] * matrixT[j][idx];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,814,"                    if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0.0) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,815,                        z = w;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,816,                        s = r;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,818,                        l = i;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,819,"                        if (Precision.equals(imagEigenvalues[i], 0.0)) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,820,                            if (w != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,821,                                matrixT[i][idx] = -r / w;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,823,                                matrixT[i][idx] = -r / (Precision.EPSILON * norm);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,827,                            double x = matrixT[i][i + 1];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,828,                            double y = matrixT[i + 1][i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,829,                            q = (realEigenvalues[i] - p) * (realEigenvalues[i] - p) +,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,831,                            double t = (x * s - z * r) / q;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,832,                            matrixT[i][idx] = t;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,833,                            if (FastMath.abs(x) > FastMath.abs(z)) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,834,                                matrixT[i + 1][idx] = (-r - w * t) / x;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,836,                                matrixT[i + 1][idx] = (-s - y * t) / z;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,841,                        double t = FastMath.abs(matrixT[i][idx]);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,842,                        if ((Precision.EPSILON * t) * t > 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,843,                            for (int j = i; j <= idx; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,844,                                matrixT[j][idx] = matrixT[j][idx] / t;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,849,            } else if (q < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,851,                int l = idx - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,854,                if (FastMath.abs(matrixT[idx][idx - 1]) > FastMath.abs(matrixT[idx - 1][idx])) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,855,                    matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,856,                    matrixT[idx - 1][idx]     = -(matrixT[idx][idx] - p) / matrixT[idx][idx - 1];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,858,"                    final Complex result = cdiv(0.0, -matrixT[idx - 1][idx],",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,860,                    matrixT[idx - 1][idx - 1] = result.getReal();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,861,                    matrixT[idx - 1][idx]     = result.getImaginary();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,864,                matrixT[idx][idx - 1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,865,                matrixT[idx][idx]     = 1.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,867,                for (int i = idx - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,868,                    double ra = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,869,                    double sa = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,870,                    for (int j = l; j <= idx; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,871,                        ra = ra + matrixT[i][j] * matrixT[j][idx - 1];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,872,                        sa = sa + matrixT[i][j] * matrixT[j][idx];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,874,                    double w = matrixT[i][i] - p;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,876,"                    if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0.0) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,877,                        z = w;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,878,                        r = ra;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,879,                        s = sa;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,881,                        l = i;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,882,"                        if (Precision.equals(imagEigenvalues[i], 0.0)) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,883,"                            final Complex c = cdiv(-ra, -sa, w, q);",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,884,                            matrixT[i][idx - 1] = c.getReal();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,885,                            matrixT[i][idx] = c.getImaginary();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,886,                        } else {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,888,                            double x = matrixT[i][i + 1];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,889,                            double y = matrixT[i + 1][i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,890,                            double vr = (realEigenvalues[i] - p) * (realEigenvalues[i] - p) +,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,892,                            final double vi = (realEigenvalues[i] - p) * 2.0 * q;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,893,"                            if (Precision.equals(vr, 0.0) && Precision.equals(vi, 0.0)) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,894,                                vr = Precision.EPSILON * norm *,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,898,"                            final Complex c     = cdiv(x * r - z * ra + q * sa,",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,900,                            matrixT[i][idx - 1] = c.getReal();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,901,                            matrixT[i][idx]     = c.getImaginary();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,903,                            if (FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs(q))) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,904,                                matrixT[i + 1][idx - 1] = (-ra - w * matrixT[i][idx - 1] +,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,906,                                matrixT[i + 1][idx]     = (-sa - w * matrixT[i][idx] -,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,909,"                                final Complex c2        = cdiv(-r - y * matrixT[i][idx - 1],",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,911,                                matrixT[i + 1][idx - 1] = c2.getReal();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,912,                                matrixT[i + 1][idx]     = c2.getImaginary();,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,917,"                        double t = FastMath.max(FastMath.abs(matrixT[i][idx - 1]),",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,919,                        if ((Precision.EPSILON * t) * t > 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,920,                            for (int j = i; j <= idx; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,921,                                matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,922,                                matrixT[j][idx]     = matrixT[j][idx] / t;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,931,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,932,            if (i < 0 | i > n - 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,933,                for (int j = i; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,934,                    matrixP[i][j] = matrixT[i][j];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,940,        for (int j = n - 1; j >= 0; j--) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,941,            for (int i = 0; i <= n - 1; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,942,                z = 0.0;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,943,"                for (int k = 0; k <= FastMath.min(j, n - 1); k++) {",0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,944,                    z = z + matrixP[i][k] * matrixT[k][j];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,946,                matrixP[i][j] = z;,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,950,        eigenvectors = new ArrayRealVector[n];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,951,        final double[] tmp = new double[n];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,952,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,953,            for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,954,                tmp[j] = matrixP[j][i];,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,956,            eigenvectors[i] = new ArrayRealVector(tmp);,0.0,0,-1,0
org/apache/commons/math3/linear/EigenDecomposition,11,958,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,11,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,11,43,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,11,53,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,11,54,"        getContext().addMessage(specific, max, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,11,55,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,11,56,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,11,62,        return max;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,381,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,11,386,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,63,"        super(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,64,        long lRow = rowDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,65,        long lCol = columnDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,66,        if (lRow * lCol >= Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,67,"            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,69,        this.rows = rowDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,70,        this.columns = columnDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,71,        this.entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,72,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,79,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,80,        this.rows = matrix.rows;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,81,        this.columns = matrix.columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,82,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,83,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,88,        return new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,100,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,106,        return columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,120,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,122,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,123,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,124,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,125,            final int row = iterator.key() / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,126,            final int col = iterator.key() - row * columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,127,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,128,        },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,130,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,139,            return subtract((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,140,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,141,            return (OpenMapRealMatrix) super.subtract(m);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,155,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,157,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,158,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,159,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,160,            final int row = iterator.key() / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,161,            final int col = iterator.key() - row * columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,162,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,163,        },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,165,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,179,            return multiply((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,180,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,182,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,184,            final int outCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,185,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,186,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,187,                iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,188,                final double value = iterator.value();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,189,                final int key      = iterator.key();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,190,                final int i        = key / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,191,                final int k        = key % columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,192,                for (int j = 0; j < outCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,193,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,195,            },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,197,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,214,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,216,        final int outCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,217,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,218,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,219,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,220,            final double value = iterator.value();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,221,            final int key      = iterator.key();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,222,            final int i        = key / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,223,            final int k        = key % columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,224,            for (int j = 0; j < outCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,225,"                final int rightKey = m.computeKey(k, j);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,226,                if (m.entries.containsKey(rightKey)) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,227,"                    final int outKey = out.computeKey(i, j);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,228,                    final double outValue =,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,230,                    if (outValue == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,231,                        out.entries.remove(outKey);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,233,"                        out.entries.put(outKey, outValue);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,237,        },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,239,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,245,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,246,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,247,"        return entries.get(computeKey(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,253,        return rows;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,260,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,261,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,262,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,263,"            entries.remove(computeKey(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,265,"            entries.put(computeKey(row, column), value);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,267,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,273,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,274,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,275,"        final int key = computeKey(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,276,        final double value = entries.get(key) + increment;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,277,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,278,            entries.remove(key);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,280,"            entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,282,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,288,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,289,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,290,"        final int key = computeKey(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,291,        final double value = entries.get(key) * factor;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,292,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,293,            entries.remove(key);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,295,"            entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,297,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,306,        return row * columns + column;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,11,39,@Deprecated,0.0,0,-1,0
