project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",0.125,0,1,0
org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },0.125,0,1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",0.08333,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,0.04762,1,-1,1
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,0.04762,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,0.04762,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,0.04762,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,0.04762,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,0.04762,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,0.04762,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,0.04762,1,-1,1
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,0.04762,1,-1,1
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,0.04762,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",0.04762,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },0.04762,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",0.04762,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,        super(absoluteAccuracy);,0.04167,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,69,        this.allowed = AllowedSolution.ANY_SIDE;,0.04167,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,70,        this.method = method;,0.04167,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,71,    },0.04167,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,        final double ftol = getFunctionValueAccuracy();,0.04,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,        final double atol = getAbsoluteAccuracy();,0.04,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,        final double rtol = getRelativeAccuracy();,0.04,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,155,        boolean inverted = false;,0.04,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,0.04,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,161,            final double fx = computeObjectiveValue(x);,0.04,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,            if (fx == 0.0) {,0.04,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,128,        return absoluteAccuracy;,0.03704,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,134,        return relativeAccuracy;,0.03704,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,140,        return functionValueAccuracy;,0.03704,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,283,    },0.03704,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,380,    },0.03704,0,-1,0
org/apache/commons/math/util/FastMath,51,3410,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.03704,0,-1,0
org/apache/commons/math/util/FastMath,51,3925,        if (a > b) {,0.03704,0,-1,0
org/apache/commons/math/util/FastMath,51,3928,        if (a < b) {,0.03704,0,-1,0
org/apache/commons/math/util/FastMath,51,3929,            return b;,0.03704,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,146,"        verifyBracketing(x0, x1);",0.03571,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,116,        this.allowed = allowedSolution;,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,117,"        return super.solve(maxEval, f, min, max, startValue);",0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,130,        double x0 = getMin();,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,131,        double x1 = getMax();,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,132,        double f0 = computeObjectiveValue(x0);,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,133,        double f1 = computeObjectiveValue(x1);,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,138,        if (f0 == 0.0) {,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,141,        if (f1 == 0.0) {,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);",0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,305,        if (function == null) {,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,308,        final double fLo = function.value(lower);,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,309,        final double fHi = function.value(upper);,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,310,        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,336,        if (lower >= upper) {,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,340,    },0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,371,        if (function == null) {,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,374,"        verifyInterval(lower, upper);",0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,375,"        if (!isBracketing(function, lower, upper)) {",0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/AllowedSolution,51,41,public enum AllowedSolution {,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/AllowedSolution,51,48,"    ANY_SIDE,",0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/AllowedSolution,51,55,"    LEFT_SIDE,",0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/AllowedSolution,51,62,"    RIGHT_SIDE,",0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/AllowedSolution,51,68,"    BELOW_SIDE,",0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/AllowedSolution,51,74,    ABOVE_SIDE;,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,250,    protected enum Method {,0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,256,"        REGULA_FALSI,",0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,259,"        ILLINOIS,",0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,262,        PEGASUS;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,80,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,85,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,90,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,95,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,98,    private static final double FACT[] = new double[20];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,101,    private static final double LN_MANT[][] = new double[1024][];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,110,    private static final double LN_SPLIT_COEF[][] = {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,130,    private static final double LN_QUICK_COEF[][] = {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,143,    private static final double LN_HI_PREC_COEF[][] = {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,153,    private static final double SINE_TABLE_A[] = new double[14];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,156,    private static final double SINE_TABLE_B[] = new double[14];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,159,    private static final double COSINE_TABLE_A[] = new double[14];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,162,    private static final double COSINE_TABLE_B[] = new double[14];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,165,    private static final double TANGENT_TABLE_A[] = new double[14];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,168,    private static final double TANGENT_TABLE_B[] = new double[14];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,171,    private static final long RECIP_2PI[] = new long[] {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,192,    private static final long PI_O_4_BITS[] = new long[] {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,200,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,203,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,233,        FACT[0] = 1.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,234,        for (i = 1; i < FACT.length; i++) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,235,            FACT[i] = FACT[i-1] * i;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,238,        double tmp[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,239,        double recip[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,242,        for (i = 0; i < 750; i++) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,243,"            expint(i, tmp);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,244,            EXP_INT_TABLE_A[i+750] = tmp[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,245,            EXP_INT_TABLE_B[i+750] = tmp[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,247,            if (i != 0) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,249,"                splitReciprocal(tmp, recip);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,250,                EXP_INT_TABLE_A[750-i] = recip[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,251,                EXP_INT_TABLE_B[750-i] = recip[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,256,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,257,"            slowexp(i/1024.0, tmp);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,258,            EXP_FRAC_TABLE_A[i] = tmp[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,259,            EXP_FRAC_TABLE_B[i] = tmp[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,263,        for (i = 0; i < LN_MANT.length; i++) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,264,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,265,            LN_MANT[i] = slowLog(d);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,269,        buildSinCosTables();,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,270,    },0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1012,        final double xs[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1013,        final double ys[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1014,        final double facts[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1015,        final double as[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1016,"        split(x, xs);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1017,        ys[0] = ys[1] = 0.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1019,        for (int i = 19; i >= 0; i--) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1020,"            splitMult(xs, ys, as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1021,            ys[0] = as[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1022,            ys[1] = as[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1024,"            split(FACT[i], as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1025,"            splitReciprocal(as, facts);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1027,"            splitAdd(ys, facts, as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1028,            ys[0] = as[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1029,            ys[1] = as[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1032,        if (result != null) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1033,            result[0] = ys[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1034,            result[1] = ys[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1037,        return ys[0] + ys[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1046,        if (d < 8e298 && d > -8e298) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1047,            final double a = d * HEX_40000000;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1048,            split[0] = (d + a) - a;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1049,            split[1] = d - split[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1050,        } else {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1055,    },0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1062,        final double c = a[0] + a[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1063,        final double d = -(c - a[0] - a[1]);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1065,        if (c < 8e298 && c > -8e298) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1066,            double z = c * HEX_40000000;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1067,            a[0] = (c + z) - z;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1068,            a[1] = c - a[0] + d;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1069,        } else {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1070,            double z = c * 9.31322574615478515625E-10;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1071,            a[0] = (c + z - c) * HEX_40000000;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1072,            a[1] = c - a[0] + d;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1074,    },0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1082,        ans[0] = a[0] * b[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1083,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1086,        resplit(ans);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1087,    },0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1095,        ans[0] = a[0] + b[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1096,        ans[1] = a[1] + b[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1098,        resplit(ans);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1099,    },0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1120,        final double b = 1.0/4194304.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1121,        final double a = 1.0 - b;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1123,        if (in[0] == 0.0) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1128,        result[0] = a / in[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1129,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1131,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1132,            result[1] = 0.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1136,        resplit(result);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1138,        for (int i = 0; i < 2; i++) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1140,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1143,            err = err * (result[0] + result[1]);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1145,            result[1] += err;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1147,    },0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1155,        final double xs[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1156,        final double ys[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1157,        final double zs[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1160,"        split(a[0], xs);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1161,"        split(b[0], ys);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1162,"        splitMult(xs, ys, zs);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1164,        result[0] = zs[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1165,        result[1] = zs[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1168,"        split(b[1], ys);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1169,"        splitMult(xs, ys, zs);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1171,        double tmp = result[0] + zs[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1172,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1173,        result[0] = tmp;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1174,        tmp = result[0] + zs[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1175,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1176,        result[0] = tmp;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1179,"        split(a[1], xs);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1180,"        split(b[0], ys);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1181,"        splitMult(xs, ys, zs);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1183,        tmp = result[0] + zs[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1184,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1185,        result[0] = tmp;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1186,        tmp = result[0] + zs[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1187,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1188,        result[0] = tmp;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1191,"        split(a[1], xs);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1192,"        split(b[1], ys);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1193,"        splitMult(xs, ys, zs);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1195,        tmp = result[0] + zs[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1196,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1197,        result[0] = tmp;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1198,        tmp = result[0] + zs[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1199,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1200,        result[0] = tmp;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1201,    },0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1210,        final double xs[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1211,        final double as[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1212,        final double ys[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1221,        xs[0] = 2.718281828459045;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1222,        xs[1] = 1.4456468917292502E-16;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1224,"        split(1.0, ys);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1226,        while (p > 0) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1227,            if ((p & 1) != 0) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1228,"                quadMult(ys, xs, as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1229,                ys[0] = as[0]; ys[1] = as[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1232,"            quadMult(xs, xs, as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1233,            xs[0] = as[0]; xs[1] = as[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1235,            p >>= 1;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1238,        if (result != null) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1239,            result[0] = ys[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1240,            result[1] = ys[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1242,            resplit(result);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1245,        return ys[0] + ys[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1743,        double x[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1744,        double x2[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1745,        double y[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1746,        double a[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1748,"        split(xi, x);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1751,        x[0] += 1.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1752,        resplit(x);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1753,"        splitReciprocal(x, a);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1754,        x[0] -= 2.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1755,        resplit(x);,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1756,"        splitMult(x, a, y);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1757,        x[0] = y[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1758,        x[1] = y[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1761,"        splitMult(x, x, x2);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1767,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1768,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1770,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1771,"            splitMult(y, x2, a);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1772,            y[0] = a[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1773,            y[1] = a[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1774,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1775,            y[0] = a[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1776,            y[1] = a[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1779,"        splitMult(y, x, a);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1780,        y[0] = a[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1781,        y[1] = a[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1783,        return y;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1793,        final double xs[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1794,        final double ys[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1795,        final double facts[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1796,        final double as[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1797,"        split(x, xs);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1798,        ys[0] = ys[1] = 0.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1800,        for (int i = 19; i >= 0; i--) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1801,"            splitMult(xs, ys, as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1802,            ys[0] = as[0]; ys[1] = as[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1804,            if ( (i & 1) == 0) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1805,                continue;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1808,"            split(FACT[i], as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1809,"            splitReciprocal(as, facts);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1811,            if ( (i & 2) != 0 ) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1812,                facts[0] = -facts[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1813,                facts[1] = -facts[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1816,"            splitAdd(ys, facts, as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1817,            ys[0] = as[0]; ys[1] = as[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1820,        if (result != null) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1821,            result[0] = ys[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1822,            result[1] = ys[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1825,        return ys[0] + ys[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1836,        final double xs[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1837,        final double ys[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1838,        final double facts[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1839,        final double as[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1840,"        split(x, xs);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1841,        ys[0] = ys[1] = 0.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1843,        for (int i = 19; i >= 0; i--) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1844,"            splitMult(xs, ys, as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1845,            ys[0] = as[0]; ys[1] = as[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1847,            if ( (i & 1) != 0) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1848,                continue;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1851,"            split(FACT[i], as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1852,"            splitReciprocal(as, facts);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1854,            if ( (i & 2) != 0 ) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1855,                facts[0] = -facts[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1856,                facts[1] = -facts[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1859,"            splitAdd(ys, facts, as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1860,            ys[0] = as[0]; ys[1] = as[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1863,        if (result != null) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1864,            result[0] = ys[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1865,            result[1] = ys[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1868,        return ys[0] + ys[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1874,        final double result[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1877,        for (int i = 0; i < 7; i++) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1878,            double x = i / 8.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1880,"            slowSin(x, result);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1881,            SINE_TABLE_A[i] = result[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1882,            SINE_TABLE_B[i] = result[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1884,"            slowCos(x, result);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1885,            COSINE_TABLE_A[i] = result[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1886,            COSINE_TABLE_B[i] = result[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1890,        for (int i = 7; i < 14; i++) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1891,            double xs[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1892,            double ys[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1893,            double as[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1894,            double bs[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1895,            double temps[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1897,            if ( (i & 1) == 0) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1899,                xs[0] = SINE_TABLE_A[i/2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1900,                xs[1] = SINE_TABLE_B[i/2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1901,                ys[0] = COSINE_TABLE_A[i/2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1902,                ys[1] = COSINE_TABLE_B[i/2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1905,"                splitMult(xs, ys, result);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1906,                SINE_TABLE_A[i] = result[0] * 2.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1907,                SINE_TABLE_B[i] = result[1] * 2.0;,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1910,"                splitMult(ys, ys, as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1911,"                splitMult(xs, xs, temps);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1912,                temps[0] = -temps[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1913,                temps[1] = -temps[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1914,"                splitAdd(as, temps, result);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1915,                COSINE_TABLE_A[i] = result[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1916,                COSINE_TABLE_B[i] = result[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1918,                xs[0] = SINE_TABLE_A[i/2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1919,                xs[1] = SINE_TABLE_B[i/2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1920,                ys[0] = COSINE_TABLE_A[i/2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1921,                ys[1] = COSINE_TABLE_B[i/2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1922,                as[0] = SINE_TABLE_A[i/2+1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1923,                as[1] = SINE_TABLE_B[i/2+1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1924,                bs[0] = COSINE_TABLE_A[i/2+1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1925,                bs[1] = COSINE_TABLE_B[i/2+1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1928,"                splitMult(xs, bs, temps);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1929,"                splitMult(ys, as, result);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1930,"                splitAdd(result, temps, result);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1931,                SINE_TABLE_A[i] = result[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1932,                SINE_TABLE_B[i] = result[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1935,"                splitMult(ys, bs, result);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1936,"                splitMult(xs, as, temps);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1937,                temps[0] = -temps[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1938,                temps[1] = -temps[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1939,"                splitAdd(result, temps, result);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1940,                COSINE_TABLE_A[i] = result[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1941,                COSINE_TABLE_B[i] = result[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1946,        for (int i = 0; i < 14; i++) {,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1947,            double xs[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1948,            double ys[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1949,            double as[] = new double[2];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1951,            as[0] = COSINE_TABLE_A[i];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1952,            as[1] = COSINE_TABLE_B[i];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1954,"            splitReciprocal(as, ys);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1956,            xs[0] = SINE_TABLE_A[i];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1957,            xs[1] = SINE_TABLE_B[i];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1959,"            splitMult(xs, ys, as);",0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1961,            TANGENT_TABLE_A[i] = as[0];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1962,            TANGENT_TABLE_B[i] = as[1];,0.03226,0,-1,0
org/apache/commons/math/util/FastMath,51,1965,    },0.03226,0,-1,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,51,37,        super(absoluteAccuracy);,0.0303,0,-1,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,51,38,    },0.0303,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,65,"        this(DEFAULT_RELATIVE_ACCURACY,",0.0303,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,68,    },0.0303,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,92,                                               final double functionValueAccuracy) {,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,49,    private final Incrementor evaluations = new Incrementor();,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,93,        this.absoluteAccuracy = absoluteAccuracy;,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,94,        this.relativeAccuracy = relativeAccuracy;,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,95,        this.functionValueAccuracy = functionValueAccuracy;,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,96,    },0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,110,        return searchMin;,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,116,        return searchMax;,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,153,        incrementEvaluationCount();,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,154,        return function.value(point);,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,173,        MathUtils.checkNotNull(f);,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,176,        searchMin = min;,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,177,        searchMax = max;,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,178,        searchStart = startValue;,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,179,        function = f;,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,180,        evaluations.setMaximalCount(maxEval);,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,181,        evaluations.resetCount();,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,182,    },0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,187,"        setup(maxEval, f, min, max, startValue);",0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,190,        return doSolve();,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,294,            evaluations.incrementCount();,0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,297,        },0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,298,    },0.02857,0,-1,0
org/apache/commons/math/util/MathUtils,51,85,    private static final long[] FACTORIALS = new long[] {,0.02857,0,-1,0
org/apache/commons/math/util/MathUtils,51,2334,        if (o == null) {,0.02857,0,-1,0
org/apache/commons/math/util/MathUtils,51,2337,    },0.02857,0,-1,0
org/apache/commons/math/util/Incrementor,51,28,public class Incrementor {,0.02857,0,-1,0
org/apache/commons/math/util/Incrementor,51,44,        maximalCount = max;,0.02857,0,-1,0
org/apache/commons/math/util/Incrementor,51,45,    },0.02857,0,-1,0
org/apache/commons/math/util/Incrementor,51,84,        if (++count > maximalCount) {,0.02857,0,-1,0
org/apache/commons/math/util/Incrementor,51,87,    },0.02857,0,-1,0
org/apache/commons/math/util/Incrementor,51,93,        count = 0;,0.02857,0,-1,0
org/apache/commons/math/util/Incrementor,51,94,    },0.02857,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,83,"        super(relativeAccuracy, absoluteAccuracy);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,84,        this.allowed = AllowedSolution.ANY_SIDE;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,85,        this.method = method;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,86,    },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,100,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,101,        this.allowed = AllowedSolution.ANY_SIDE;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,102,        this.method = method;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,103,    },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,109,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,139,            return x0;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,142,            return x1;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,167,                return x;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,180,                    f0 *= 0.5;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,181,                    break;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,183,                    f0 *= f1 / (f1 + fx);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,184,                    break;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,                switch (allowed) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,201,                    return x1;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,203,                    if (inverted) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,204,                        return x1;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,208,                    if (!inverted) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,209,                        return x1;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,213,                    if (f1 <= 0) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,214,                        return x1;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,218,                    if (f1 >= 0) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,219,                        return x1;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,223,                    throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,231,                switch (allowed) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,233,                    return x1;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,235,                    return inverted ? x1 : x0;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,237,                    return inverted ? x0 : x1;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,239,                    return (f1 <= 0) ? x1 : x0;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,241,                    return (f1 >= 0) ? x1 : x0;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,243,                    throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,51,47,"        super(relativeAccuracy, absoluteAccuracy);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,51,48,    },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,51,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,51,60,    },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,78,"        this(relativeAccuracy,",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,81,    },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,100,        return evaluations.getMaximalCount();,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,104,        return evaluations.getCount();,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,122,        return searchStart;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,200,"        return solve(maxEval, f, Double.NaN, Double.NaN, startValue);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,226,"        return UnivariateRealSolverUtils.isBracketing(function, lower, upper);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,240,"        return UnivariateRealSolverUtils.isSequence(start, mid, end);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,253,"        UnivariateRealSolverUtils.verifyInterval(lower, upper);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,254,    },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,268,"        UnivariateRealSolverUtils.verifySequence(lower, initial, upper);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,269,    },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,295,        } catch (MaxCountExceededException e) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,296,            throw new TooManyEvaluationsException(e.getMax());,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,36,    private UnivariateRealSolverUtils() {},0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,50,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,51,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,53,        final UnivariateRealSolver solver = new BrentSolver();,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,54,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,73,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,74,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,76,        final UnivariateRealSolver solver = new BrentSolver(absoluteAccuracy);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,77,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,99,        if (allowedSolution == AllowedSolution.ANY_SIDE) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,101,            return baseRoot;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,105,"        final double step = FastMath.max(bracketing.getAbsoluteAccuracy(),",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,107,"        double xLo        = FastMath.max(min, baseRoot - step);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,108,        double fLo        = f.value(xLo);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,109,"        double xHi        = FastMath.min(max, baseRoot + step);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,110,        double fHi        = f.value(xHi);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,111,        int remainingEval = maxEval - 2;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,112,        while (remainingEval > 0) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,114,            if ((fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0)) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,116,"                return bracketing.solve(remainingEval, f, xLo, xHi, baseRoot, allowedSolution);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,120,            boolean changeLo = false;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,121,            boolean changeHi = false;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,122,            if (fLo < fHi) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,124,                if (fLo >= 0) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,125,                    changeLo = true;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,127,                    changeHi = true;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,129,            } else if (fLo > fHi) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,131,                if (fLo <= 0) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,132,                    changeLo = true;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,134,                    changeHi = true;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,138,                changeLo = true;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,139,                changeHi = true;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,143,            if (changeLo) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,144,"                xLo = FastMath.max(min, xLo - step);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,145,                fLo  = f.value(xLo);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,146,                remainingEval--;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,150,            if (changeHi) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,151,"                xHi = FastMath.min(max, xHi + step);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,152,                fHi  = f.value(xHi);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,153,                remainingEval--;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,156,        },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,158,"        throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,207,"        return bracket(function, initial, lowerBound, upperBound, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,246,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,247,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,249,        if (maximumIterations <= 0)  {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,250,"            throw new NotStrictlyPositiveException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,252,"        verifySequence(lowerBound, initial, upperBound);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,254,        double a = initial;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,255,        double b = initial;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,258,        int numIterations = 0;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,261,"            a = FastMath.max(a - 1.0, lowerBound);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,262,"            b = FastMath.min(b + 1.0, upperBound);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,263,            fa = function.value(a);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,265,            fb = function.value(b);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,266,            ++numIterations;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,267,        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,270,        if (fa * fb > 0.0) {,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,271,"            throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,277,"        return new double[] {a, b};",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,288,        return (a + b) * 0.5;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,306,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,324,        return (start < mid) && (mid < end);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,337,"            throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,354,"        verifyInterval(lower, initial);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,355,"        verifyInterval(initial, upper);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,356,    },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,372,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,376,"            throw new NoBracketingException(lower, upper,",0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,51,"        this(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS, lo, hi, fLo, fHi);",0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,52,    },0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,68,"        super(specific, lo, hi, fLo, fHi, args);",0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,69,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,70,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,71,        this.fLo = fLo;,0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,72,        this.fHi = fHi;,0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,73,    },0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,81,        return lo;,0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,89,        return hi;,0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,97,        return fLo;,0.0,0,-1,0
org/apache/commons/math/exception/NoBracketingException,51,105,        return fHi;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,51,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,51,37,    private final ExceptionContext context = new ExceptionContext();,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,51,45,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,51,46,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,51,50,        return context;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,51,56,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,51,62,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,51,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,51,42,    },0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,51,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,51,51,    },0.0,0,-1,0
org/apache/commons/math/exception/NotStrictlyPositiveException,51,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math/exception/NotStrictlyPositiveException,51,39,    },0.0,0,-1,0
org/apache/commons/math/exception/NotStrictlyPositiveException,51,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math/exception/NotStrictlyPositiveException,51,49,    },0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,51,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,51,54,    },0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,51,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,51,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,51,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,51,72,    },0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,51,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,51,85,        return min;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,51,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,51,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,51,48,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,51,54,        return argument;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,51,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,51,54,    },0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,51,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,51,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,51,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,51,71,    },0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,51,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,51,84,        return max;,0.0,0,-1,0
org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,52,"        super(absoluteAccuracy, Method.REGULA_FALSI);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,53,    },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,63,"        super(relativeAccuracy, absoluteAccuracy, Method.REGULA_FALSI);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,64,    },0.0,0,-1,0
org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,76,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy, Method.REGULA_FALSI);",0.0,0,-1,0
org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,77,    },0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,51,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,51,43,    },0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,51,53,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,51,54,"        getContext().addMessage(specific, max, args);",0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,51,55,        this.max = max;,0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,51,56,    },0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,51,62,        return max;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,36,    private final ExceptionContext context = new ExceptionContext();,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,47,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,59,        super(cause);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,60,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,61,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,67,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,68,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,72,        return context;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,78,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,51,84,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math/exception/TooManyEvaluationsException,51,37,        super(max);,0.0,0,-1,0
org/apache/commons/math/exception/TooManyEvaluationsException,51,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0.0,0,-1,0
org/apache/commons/math/exception/TooManyEvaluationsException,51,39,    },0.0,0,-1,0
org/apache/commons/math/exception/MathInternalError,51,36,    public MathInternalError() {,0.0,0,-1,0
org/apache/commons/math/exception/MathInternalError,51,37,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math/exception/MathInternalError,51,38,    },0.0,0,-1,0
org/apache/commons/math/exception/MathInternalError,51,45,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math/exception/MathInternalError,51,46,    },0.0,0,-1,0
org/apache/commons/math/exception/NotFiniteNumberException,51,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,-1,0
org/apache/commons/math/exception/NotFiniteNumberException,51,41,    },0.0,0,-1,0
org/apache/commons/math/exception/NotFiniteNumberException,51,53,"        super(specific, wrong, args);",0.0,0,-1,0
org/apache/commons/math/exception/NotFiniteNumberException,51,54,    },0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,51,44,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,51,45,        dimension = expected;,0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,51,46,    },0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,51,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,51,57,    },0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,51,63,        return dimension;,0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,61,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,62,    },0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,80,        super(direction == MathUtils.OrderDirection.INCREASING ?,0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,89,        this.direction = direction;,0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,90,        this.strict = strict;,0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,91,        this.index = index;,0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,92,        this.previous = previous;,0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,93,    },0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,99,        return direction;,0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,105,        return strict;,0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,113,        return index;,0.0,0,-1,0
org/apache/commons/math/exception/NonMonotonousSequenceException,51,119,        return previous;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1946,    public static enum OrderDirection {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1948,"        INCREASING,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1950,        DECREASING,0.0,0,-1,0
org/apache/commons/math/exception/NotPositiveException,51,37,"        super(value, 0, true);",0.0,0,-1,0
org/apache/commons/math/exception/NotPositiveException,51,38,    },0.0,0,-1,0
org/apache/commons/math/exception/NotPositiveException,51,47,"        super(specific, value, 0, true);",0.0,0,-1,0
org/apache/commons/math/exception/NotPositiveException,51,48,    },0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,51,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,51,38,    private final ExceptionContext context = new ExceptionContext();,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,51,44,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,51,45,    },0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,51,55,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,51,56,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,51,57,    },0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,51,61,        return context;,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,51,67,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,51,73,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2229,"            = new Comparator<Pair<Double, double[]>>() {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2233,                switch (dir) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2235,                    val = o1.getKey().compareTo(o2.getKey());,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2236,                break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2238,                    val = o2.getKey().compareTo(o1.getKey());,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2239,                break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2242,                    throw new IllegalArgumentException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2244,                return val;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,101,        super();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,102,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,115,        long s = (long)x + (long)y;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,116,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,117,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,119,        return (int)s;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,133,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,149,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,151,"            ret = addAndCheck(b, a, pattern);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,155,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,156,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,158,                    if (Long.MIN_VALUE - b <= a) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,159,                        ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,161,"                        throw new MathArithmeticException(pattern, a, b);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,165,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,172,                if (a <= Long.MAX_VALUE - b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,173,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,175,"                    throw new MathArithmeticException(pattern, a, b);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,179,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,208,"        checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,209,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,210,            return 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,212,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,213,            return n;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,216,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,217,"            return binomialCoefficient(n, n - k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,225,        long result = 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,226,        if (n <= 61) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,228,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,229,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,230,                result = result * i / j;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,231,                i++;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,233,        } else if (n <= 66) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,236,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,237,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,244,"                final long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,245,                result = (result / (j / d)) * (i / d);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,246,                i++;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,248,        } else {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,252,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,253,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,254,"                final long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,255,"                result = mulAndCheck(result / (j / d), i / d);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,256,                i++;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,259,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,285,"        checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,286,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,287,            return 1d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,289,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,290,            return n;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,292,        if (k > n/2) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,293,"            return binomialCoefficientDouble(n, n - k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,295,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,296,"            return binomialCoefficient(n,k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,299,        double result = 1d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,300,        for (int i = 1; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,301,             result *= (double)(n - k + i) / (double)i;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,304,        return FastMath.floor(result + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,326,"        checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,327,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,328,            return 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,330,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,331,            return FastMath.log(n);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,338,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,339,"            return FastMath.log(binomialCoefficient(n,k));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,346,        if (n < 1030) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,347,"            return FastMath.log(binomialCoefficientDouble(n, k));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,350,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,351,"            return binomialCoefficientLog(n, n - k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,357,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,360,        for (int i = n - k + 1; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,361,            logSum += FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,365,        for (int i = 2; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,366,            logSum -= FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,369,        return logSum;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,381,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,382,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,385,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,386,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,388,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,401,"        if (equals(x, y, eps)) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,402,            return 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,403,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,404,            return -1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,406,        return 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,427,"        if (equals(x, y, maxUlps)) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,428,            return 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,429,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,430,            return -1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,432,        return 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,443,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,455,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,468,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,482,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,497,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,519,        int xInt = Float.floatToIntBits(x);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,520,        int yInt = Float.floatToIntBits(y);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,523,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,524,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,526,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,527,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,530,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,532,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,548,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,562,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,563,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,565,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,566,            return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,568,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,569,"            if (!equals(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,570,                return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,573,        return true;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,588,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,589,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,591,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,592,            return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,594,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,595,"            if (!equalsIncludingNaN(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,596,                return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,599,        return true;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,611,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,624,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,639,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,654,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,675,        long xInt = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,676,        long yInt = Double.doubleToLongBits(y);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,679,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,680,            xInt = SGN_MASK - xInt;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,682,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,683,            yInt = SGN_MASK - yInt;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,686,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,688,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,704,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,718,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,719,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,721,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,722,            return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,724,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,725,"            if (!equals(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,726,                return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,729,        return true;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,744,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,745,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,747,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,748,            return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,750,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,751,"            if (!equalsIncludingNaN(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,752,                return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,755,        return true;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,783,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,784,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,787,        if (n > 20) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,788,            throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,790,        return FACTORIALS[n];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,807,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,811,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,812,            return factorial(n);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,814,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,825,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,826,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,829,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,830,            return FastMath.log(factorial(n));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,832,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,833,        for (int i = 2; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,834,            logSum += FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,836,        return logSum;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,869,        int u = p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,870,        int v = q;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,871,        if ((u == 0) || (v == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,872,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,873,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,876,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,883,        if (u > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,884,            u = -u;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,886,        if (v > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,887,            v = -v;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,890,        int k = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,891,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,893,            u /= 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,894,            v /= 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,895,            k++; // cast out twos.,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,897,        if (k == 31) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,898,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,903,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,909,            while ((t & 1) == 0) { // while t is even..,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,910,                t /= 2; // cast out twos,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,913,            if (t > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,914,                u = -t;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,916,                v = t;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,919,            t = (v - u) / 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,922,        } while (t != 0);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,923,        return -u * (1 << k); // gcd is u*2^k,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,956,        long u = p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,957,        long v = q;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,958,        if ((u == 0) || (v == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,959,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,960,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,963,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,970,        if (u > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,971,            u = -u;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,973,        if (v > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,974,            v = -v;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,977,        int k = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,978,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,980,            u /= 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,981,            v /= 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,982,            k++; // cast out twos.,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,984,        if (k == 63) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,985,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,990,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,996,            while ((t & 1) == 0) { // while t is even..,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,997,                t /= 2; // cast out twos,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1000,            if (t > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1001,                u = -t;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1003,                v = t;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1006,            t = (v - u) / 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1009,        } while (t != 0);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1010,        return -u * (1L << k); // gcd is u*2^k,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1020,        return new Double(value).hashCode();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1031,        return Arrays.hashCode(value);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1042,        return (x >= ZB) ? PB : NB;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1054,        if (Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1055,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1057,        return (x >= 0.0) ? 1.0 : -1.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1068,        if (Float.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1069,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1071,        return (x >= 0.0F) ? 1.0F : -1.0F;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1081,        return (x >= 0) ? 1 : -1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1091,        return (x >= 0L) ? 1L : -1L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1102,        return (x >= ZS) ? PS : NS;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1128,        if (a == 0 || b == 0){,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1129,            return 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1131,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1132,        if (lcm == Integer.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1133,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1136,        return lcm;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1162,        if (a == 0 || b == 0){,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1163,            return 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1165,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1166,        if (lcm == Long.MIN_VALUE){,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1167,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1170,        return lcm;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1190,        return FastMath.log(x)/FastMath.log(base);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1204,        long m = ((long)x) * ((long)y);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1205,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1206,            throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1208,        return (int)m;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1223,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1225,"            ret = mulAndCheck(b, a);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1227,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1228,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1230,                    if (a >= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1231,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1233,                        throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1235,                } else if (b > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1237,                    if (Long.MIN_VALUE / b <= a) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1238,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1240,                        throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1245,                    ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1247,            } else if (a > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1252,                if (a <= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1253,                    ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1255,                    throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1259,                ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1262,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1285,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1307,        final double p = FastMath.abs(period);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1308,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1333,         if (Double.isInfinite(normalizedSum)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1334,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1336,         if (Double.isNaN(normalizedSum)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1337,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1339,         double sum = 0d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1340,         final int len = values.length;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1341,         double[] out = new double[len];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1342,         for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1343,             if (Double.isInfinite(values[i])) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1344,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1346,             if (!Double.isNaN(values[i])) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1347,                 sum += values[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1350,         if (sum == 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1351,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1353,         for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1354,             if (Double.isNaN(values[i])) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1355,                 out[i] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1357,                 out[i] = values[i] * normalizedSum / sum;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1360,         return out;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1373,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1397,            return (new BigDecimal,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1401,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1402,            if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1403,                return x;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1405,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1420,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1436,        float sign = indicator(x);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1437,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1438,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1456,        switch (roundingMethod) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1458,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1459,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1461,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1463,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1465,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1466,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1468,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1469,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1471,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1473,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1475,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1476,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1477,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1478,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1480,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1482,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1485,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1486,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1487,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1488,            } else if (fraction < 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1489,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1492,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1494,                    unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1496,                    unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1499,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1502,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1503,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1504,            if (fraction >= 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1505,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1507,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1509,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1512,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1513,                throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1517,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1518,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1520,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1531,        return unscaled;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1545,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1561,        if (Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1562,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1564,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1579,        if (Float.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1580,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1582,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1596,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1610,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1621,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1632,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1646,        long s = (long)x - (long)y;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1647,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1648,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1650,        return (int)s;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1665,        if (b == Long.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1666,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1667,                ret = a - b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1669,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1673,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1675,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1687,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1688,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1691,        int result = 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1692,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1693,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1694,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1695,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1697,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1698,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1701,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1713,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1714,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1717,        int result = 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1718,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1719,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1720,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1721,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1723,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1724,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1727,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1739,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1740,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1743,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1744,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1745,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1746,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1747,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1749,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1750,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1753,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1765,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1766,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1769,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1770,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1771,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1772,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1773,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1775,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1776,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1779,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1791,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1792,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1795,        return k.pow(e);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1807,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1808,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1811,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1812,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1813,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1814,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1815,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1817,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1818,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1821,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1834,        if (e.compareTo(BigInteger.ZERO) < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1835,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1838,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1839,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1840,        while (!BigInteger.ZERO.equals(e)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1841,            if (e.testBit(0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1842,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1844,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1845,            e = e.shiftRight(1);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1848,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1859,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1860,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1861,            sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1863,        return sum;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1874,      int sum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1875,      for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1876,          sum += FastMath.abs(p1[i] - p2[i]);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1878,      return sum;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1889,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1890,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1891,            final double dp = p1[i] - p2[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1892,            sum += dp * dp;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1894,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1905,      double sum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1906,      for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1907,          final double dp = p1[i] - p2[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1908,          sum += dp * dp;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1910,      return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1921,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1922,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1923,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1925,        return max;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1936,        int max = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1937,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1938,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1940,        return max;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1966,        double previous = val[0];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1967,        boolean ok = true;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1969,        int max = val.length;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1970,        for (int i = 1; i < max; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1971,            switch (dir) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1973,                if (strict) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1974,                    if (val[i] <= previous) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1975,                        ok = false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1978,                    if (val[i] < previous) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1979,                        ok = false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1984,                if (strict) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1985,                    if (val[i] >= previous) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1986,                        ok = false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1989,                    if (val[i] > previous) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1990,                        ok = false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1996,                throw new IllegalArgumentException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1999,            if (!ok &&,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2001,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2003,            previous = val[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2006,        return ok;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2020,"        checkOrder(val, dir, strict, true);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2021,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2031,"        checkOrder(val, OrderDirection.INCREASING, true);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2032,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2042,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2043,            throw new NotFiniteNumberException(x);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2045,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2055,        for (int i = 0; i < val.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2056,            final double x = val[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2057,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2058,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2061,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2124,        double rdwarf = 3.834e-20;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2125,        double rgiant = 1.304e+19;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2126,        double s1 = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2127,        double s2 = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2128,        double s3 = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2129,        double x1max = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2130,        double x3max = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2131,        double floatn = (double) v.length;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2132,        double agiant = rgiant / floatn;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2133,        for (int i = 0; i < v.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2134,            double xabs = Math.abs(v[i]);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2135,            if (xabs < rdwarf || xabs > agiant) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2136,                if (xabs > rdwarf) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2137,                    if (xabs > x1max) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2138,                        double r = x1max / xabs;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2139,                        s1= 1 + s1 * r * r;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2140,                        x1max = xabs;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2141,                    } else {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2142,                        double r = xabs / x1max;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2143,                        s1 += r * r;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2144,                    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2146,                    if (xabs > x3max) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2147,                        double r = x3max / xabs;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2148,                        s3= 1 + s3 * r * r;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2149,                        x3max = xabs;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2150,                    } else {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2151,                        if (xabs != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2152,                            double r = xabs / x3max;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2153,                            s3 += r * r;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2154,                        },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2158,                s2 += xabs * xabs;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2162,        if (s1 != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2163,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2165,            if (s2 == 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2166,                norm = x3max * Math.sqrt(s3);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2168,                if (s2 >= x3max) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2169,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2171,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2175,        return norm;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2190,"        sortInPlace(x, OrderDirection.INCREASING, yList);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2191,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2206,        if (x == null ||,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2208,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2211,        final int len = x.length;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2212,"        final List<Pair<Double, double[]>> list",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2215,        final int yListLen = yList.length;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2216,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2217,            final double[] yValues = new double[yListLen];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2218,            for (int j = 0; j < yListLen; j++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2219,                double[] y = yList[j];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2220,                if (y.length != len) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2221,"                    throw new DimensionMismatchException(y.length, len);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2223,                yValues[j] = y[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2225,"            list.add(new Pair<Double, double[]>(x[i], yValues));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2228,"        final Comparator<Pair<Double, double[]>> comp",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2248,"        Collections.sort(list, comp);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2250,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2251,"            final Pair<Double, double[]> e = list.get(i);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2252,            x[i] = e.getKey();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2253,            final double[] yValues = e.getValue();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2254,            for (int j = 0; j < yListLen; j++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2255,                yList[j][i] = yValues[j];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2258,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2267,"         return copyOf(source, source.length);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2277,"         return copyOf(source, source.length);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2290,         final int[] output = new int[len];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2291,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2292,         return output;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2305,         final double[] output = new double[len];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2306,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2307,         return output;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2321,        if (o == null) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2322,"            throw new NullArgumentException(pattern, args);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2324,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2335,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2375,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2376,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2377,        final double a1Low      = a1 - a1High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2378,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2379,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2380,        final double b1Low      = b1 - b1High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2383,        final double prod1High  = a1 * b1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2384,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2387,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2388,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2389,        final double a2Low      = a2 - a2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2390,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2391,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2392,        final double b2Low      = b2 - b2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2395,        final double prod2High  = a2 * b2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2396,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2399,        final double s12High    = prod1High + prod2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2400,        final double s12Prime   = s12High - prod2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2401,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2405,        return s12High + (prod1Low + prod2Low + s12Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2448,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2449,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2450,        final double a1Low      = a1 - a1High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2451,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2452,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2453,        final double b1Low      = b1 - b1High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2456,        final double prod1High  = a1 * b1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2457,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2460,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2461,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2462,        final double a2Low      = a2 - a2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2463,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2464,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2465,        final double b2Low      = b2 - b2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2468,        final double prod2High  = a2 * b2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2469,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2472,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2473,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2474,        final double a3Low      = a3 - a3High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2475,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2476,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2477,        final double b3Low      = b3 - b3High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2480,        final double prod3High  = a3 * b3;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2481,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2484,        final double s12High    = prod1High + prod2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2485,        final double s12Prime   = s12High - prod2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2486,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2489,        final double s123High   = s12High + prod3High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2490,        final double s123Prime  = s123High - prod3High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2491,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2495,        return s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2543,        final double ca1        = SPLIT_FACTOR * a1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2544,        final double a1High     = ca1 - (ca1 - a1);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2545,        final double a1Low      = a1 - a1High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2546,        final double cb1        = SPLIT_FACTOR * b1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2547,        final double b1High     = cb1 - (cb1 - b1);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2548,        final double b1Low      = b1 - b1High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2551,        final double prod1High  = a1 * b1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2552,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2555,        final double ca2        = SPLIT_FACTOR * a2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2556,        final double a2High     = ca2 - (ca2 - a2);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2557,        final double a2Low      = a2 - a2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2558,        final double cb2        = SPLIT_FACTOR * b2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2559,        final double b2High     = cb2 - (cb2 - b2);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2560,        final double b2Low      = b2 - b2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2563,        final double prod2High  = a2 * b2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2564,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2567,        final double ca3        = SPLIT_FACTOR * a3;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2568,        final double a3High     = ca3 - (ca3 - a3);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2569,        final double a3Low      = a3 - a3High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2570,        final double cb3        = SPLIT_FACTOR * b3;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2571,        final double b3High     = cb3 - (cb3 - b3);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2572,        final double b3Low      = b3 - b3High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2575,        final double prod3High  = a3 * b3;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2576,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2579,        final double ca4        = SPLIT_FACTOR * a4;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2580,        final double a4High     = ca4 - (ca4 - a4);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2581,        final double a4Low      = a4 - a4High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2582,        final double cb4        = SPLIT_FACTOR * b4;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2583,        final double b4High     = cb4 - (cb4 - b4);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2584,        final double b4Low      = b4 - b4High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2587,        final double prod4High  = a4 * b4;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2588,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2591,        final double s12High    = prod1High + prod2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2592,        final double s12Prime   = s12High - prod2High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2593,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2596,        final double s123High   = s12High + prod3High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2597,        final double s123Prime  = s123High - prod3High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2598,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2601,        final double s1234High  = s123High + prod4High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2602,        final double s1234Prime = s1234High - prod4High;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2603,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2607,        return s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2628,        final int len = a.length;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2629,        if (len != b.length) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2630,"            throw new DimensionMismatchException(len, b.length);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2633,        final double[] prodHigh = new double[len];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2634,        double prodLowSum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2636,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2637,            final double ai = a[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2638,            final double ca = SPLIT_FACTOR * ai;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2639,            final double aHigh = ca - (ca - ai);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2640,            final double aLow = ai - aHigh;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2642,            final double bi = b[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2643,            final double cb = SPLIT_FACTOR * bi;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2644,            final double bHigh = cb - (cb - bi);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2645,            final double bLow = bi - bHigh;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2646,            prodHigh[i] = ai * bi;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2647,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2651,            prodLowSum += prodLow;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2655,        final double prodHighCur = prodHigh[0];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2656,        double prodHighNext = prodHigh[1];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2657,        double sHighPrev = prodHighCur + prodHighNext;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2658,        double sPrime = sHighPrev - prodHighNext;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2659,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2661,        final int lenMinusOne = len - 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2662,        for (int i = 1; i < lenMinusOne; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2663,            prodHighNext = prodHigh[i + 1];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2664,            final double sHighCur = sHighPrev + prodHighNext;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2665,            sPrime = sHighCur - prodHighNext;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2666,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2667,            sHighPrev = sHighCur;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,2670,        return sHighPrev + (prodLowSum + sLowSum);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,51,1971,            switch (dir) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,275,    private FastMath() {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,276,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,288,        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,289,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,291,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,292,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,293,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,302,        return Math.sqrt(a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,310,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,311,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,314,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,315,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,318,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,319,          return exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,322,      double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,323,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,324,          x = -x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,326,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,328,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,329,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,331,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,332,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,333,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,336,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,337,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,338,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,339,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,342,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,344,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,347,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,348,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,349,      ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,350,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,351,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,352,      ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,354,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,355,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,356,      return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,364,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,365,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,366,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,369,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,370,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,373,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,374,          return -exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,377,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,378,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,381,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,382,          x = -x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,383,          negate = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,388,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,389,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,390,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,392,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,393,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,395,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,396,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,397,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,400,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,401,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,402,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,403,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,406,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,408,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,410,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,411,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,414,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,415,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,416,          ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,417,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,418,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,419,          ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,421,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,422,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,423,      },0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,425,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,426,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,428,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,429,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,432,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,433,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,434,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,435,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,436,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,437,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,438,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,440,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,441,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,442,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,444,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,447,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,448,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,451,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,452,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,453,          ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,454,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,455,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,456,          ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,458,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,459,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,462,      if (negate) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,463,          result = -result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,466,      return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,474,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,476,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,477,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,480,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,481,          return 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,484,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,485,          return -1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,488,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,489,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,492,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,493,          x = -x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,494,          negate = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,498,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,499,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,501,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,503,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,504,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,507,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,508,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,509,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,510,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,511,          na = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,514,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,515,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,516,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,517,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,518,          da = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,520,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,521,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,522,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,525,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,526,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,527,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,528,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,531,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,534,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,536,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,538,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,539,      },0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,541,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,543,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,545,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,546,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,549,          double na = ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,550,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,553,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,554,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,555,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,556,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,557,          da = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,559,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,560,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,561,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,564,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,565,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,566,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,567,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,570,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,573,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,575,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,577,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,580,      if (negate) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,581,          result = -result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,584,      return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,592,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,601,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,602,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,603,            negative = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,604,            a = -a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,608,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,609,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,611,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,612,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,613,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,614,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,615,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,616,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,617,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,619,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,623,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,633,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,634,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,635,            negative = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,636,            a = -a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,640,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,641,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,643,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,644,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,645,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,646,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,647,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,648,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,649,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,651,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,655,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,665,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,674,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,682,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,690,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,698,        return Math.random();,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,722,"        return exp(x, 0.0, null);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,741,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,742,            intVal = (int) -x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,744,            if (intVal > 746) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,745,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,746,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,747,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,749,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,752,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,754,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,755,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,756,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,757,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,759,                return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,762,            if (intVal == 709) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,764,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,765,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,766,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,767,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,769,                return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,772,            intVal++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,774,            intPartA = EXP_INT_TABLE_A[750-intVal];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,775,            intPartB = EXP_INT_TABLE_B[750-intVal];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,777,            intVal = -intVal;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,779,            intVal = (int) x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,781,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,782,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,783,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,784,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,786,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,789,            intPartA = EXP_INT_TABLE_A[750+intVal];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,790,            intPartB = EXP_INT_TABLE_B[750+intVal];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,797,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,798,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,799,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,805,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,814,        double z = 0.04168701738764507;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,815,        z = z * epsilon + 0.1666666505023083;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,816,        z = z * epsilon + 0.5000000000042687;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,817,        z = z * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,818,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,825,        double tempA = intPartA * fracPartA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,826,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,832,        final double tempC = tempB + tempA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,834,        if (extra != 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,835,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,837,            result = tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,840,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,842,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,843,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,846,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,854,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,863,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,864,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,867,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,870,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,871,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,872,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,873,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,875,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,876,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,877,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,878,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,885,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,887,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,888,            x = -x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,889,            negative = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,893,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,894,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,895,            double tempB = EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,897,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,898,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,899,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,901,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,902,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,903,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,905,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,910,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,911,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,912,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,913,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,914,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,915,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,917,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,918,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,919,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,920,        za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,922,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,923,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,924,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,925,        za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,928,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,930,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,931,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,932,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,934,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,935,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,936,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,938,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,939,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,940,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,944,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,945,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,946,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,948,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,950,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,951,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,953,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,955,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,956,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,958,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,960,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,961,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,963,        if (negative) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,965,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,966,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,967,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,968,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,969,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,970,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,971,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,973,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,974,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,975,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,977,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,988,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,989,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,992,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,993,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,996,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,997,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,998,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1001,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1051,            final double a = d * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1052,            split[0] = (d + a - d) * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1053,            split[1] = d - split[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1124,            in[0] = in[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1125,            in[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1256,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1266,        if (x==0) { // Handle special case of +0/-0,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1267,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1269,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1272,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1273,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1274,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1275,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1278,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1283,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1284,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1285,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1288,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1292,        int exp = (int)(bits >> 52)-1023;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1294,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1296,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1298,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1299,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1302,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1306,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1307,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1308,                exp--;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1309,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1314,        if (exp == -1 || exp == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1315,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1320,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1321,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1322,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1323,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1324,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1325,                xa = aa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1326,                xb = ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1328,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1329,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1331,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1333,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1334,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1336,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1337,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1338,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1341,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1342,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1344,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1345,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1346,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1350,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1351,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1353,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1354,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1355,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1357,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1362,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1373,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1375,        double lnza = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1376,        double lnzb = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1378,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1380,            double tmp = epsilon * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1381,            double aa = epsilon + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1382,            double ab = epsilon - aa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1383,            double xa = aa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1384,            double xb = ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1387,            double numer = bits & 0x3ffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1388,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1389,            aa = numer - xa*denom - xb * denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1390,            xb += aa / denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1393,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1394,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1396,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1398,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1399,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1401,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1402,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1403,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1406,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1407,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1409,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1410,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1411,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1415,            aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1416,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1424,            lnza = aa + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1425,            lnzb = -(lnza - aa - ab);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1426,        } else {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1429,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1430,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1431,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1432,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1433,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1434,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1435,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1452,        double a = LN_2_A*exp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1453,        double b = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1454,        double c = a+lnm[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1455,        double d = -(c-a-lnm[0]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1456,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1457,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1459,        c = a + lnza;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1460,        d = -(c - a - lnza);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1461,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1462,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1464,        c = a + LN_2_B*exp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1465,        d = -(c - a - LN_2_B*exp);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1466,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1467,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1469,        c = a + lnm[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1470,        d = -(c - a - lnm[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1471,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1472,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1474,        c = a + lnzb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1475,        d = -(c - a - lnzb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1476,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1477,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1479,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1480,            hiPrec[0] = a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1481,            hiPrec[1] = b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1484,        return a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1493,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1494,            return x/0.0;   // -Infinity,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1497,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1498,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1501,        if (x>1e-6 || x<-1e-6) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1502,            double xpa = 1.0 + x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1503,            double xpb = -(xpa - 1.0 - x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1505,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1507,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1508,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1509,                return lores;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1514,            double fx1 = xpb/xpa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1516,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1517,            epsilon = epsilon * fx1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1519,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1523,        double y = x * 0.333333333333333 - 0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1524,        y = y * x + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1525,        y = y * x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1527,        return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1535,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1537,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1538,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1539,            return lores;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1542,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1543,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1544,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1546,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1547,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1549,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1560,        final double lns[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1562,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1563,            return 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1566,        if (x != x) { // X is NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1567,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1571,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1572,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1573,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1575,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1577,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1578,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1581,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1582,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1585,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1586,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1590,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1591,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1593,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1594,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1597,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1600,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1601,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1602,                return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1604,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1605,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1607,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1611,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1612,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1613,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1616,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1617,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1619,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1623,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1624,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1625,                return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1628,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1629,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1630,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1631,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1634,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1637,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1638,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1639,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1640,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1643,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1647,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1649,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1650,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1653,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1654,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1656,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1661,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1663,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1664,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1667,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1669,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1671,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1678,        if (y < 8e298 && y > -8e298) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1679,            double tmp1 = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1680,            ya = y + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1681,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1682,        } else {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1683,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1684,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1685,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1686,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1690,"        final double lores = log(x, lns);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1691,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1692,            return lores;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1695,        double lna = lns[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1696,        double lnb = lns[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1699,        double tmp1 = lna * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1700,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1701,        lnb += lna - tmp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1702,        lna = tmp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1705,        final double aa = lna * ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1706,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1708,        lna = aa+ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1709,        lnb = -(lna - aa - ab);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1711,        double z = 1.0 / 120.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1712,        z = z * lnb + (1.0 / 24.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1713,        z = z * lnb + (1.0 / 6.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1714,        z = z * lnb + 0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1715,        z = z * lnb + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1716,        z = z * lnb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1718,"        final double result = exp(lna, z, null);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1720,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1975,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1977,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1978,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1979,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1980,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1983,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1985,        return p;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1995,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1997,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1998,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,1999,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2000,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2001,        p *= x2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2003,        return p;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2014,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2015,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2018,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2019,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2020,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2021,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2024,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2025,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2026,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2027,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2030,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2031,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2032,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2033,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2059,        double a = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2060,        double b = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2062,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2063,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2064,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2065,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2066,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2068,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2069,        c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2070,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2071,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2072,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2074,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2089,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2116,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2117,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2119,            c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2120,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2121,            a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2122,            b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2125,        result = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2127,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2138,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2139,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2141,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2142,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2143,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2145,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2158,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2159,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2162,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2163,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2164,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2165,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2168,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2169,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2170,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2171,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2174,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2175,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2176,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2177,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2202,        double a = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2203,        double b = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2206,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2207,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2208,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2209,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2210,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2212,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2213,        c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2214,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2215,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2216,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2218,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2219,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2221,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2222,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2226,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2228,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2229,        c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2230,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2231,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2232,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2234,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2235,        c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2236,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2237,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2238,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2240,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2241,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2243,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2244,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2246,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2248,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2249,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2263,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2266,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2267,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2268,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2270,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2271,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2272,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2275,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2276,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2277,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2279,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2282,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2283,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2284,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2287,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2290,        return est+err;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2307,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2308,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2311,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2312,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2315,        exponent++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2316,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2322,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2323,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2325,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2326,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2327,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2328,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2329,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2331,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2332,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2333,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2337,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2338,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2340,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2341,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2343,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2344,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2345,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2346,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2348,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2349,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2351,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2352,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2353,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2356,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2358,            prodA++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2361,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2362,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2364,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2365,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2367,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2370,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2372,            prodA++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2376,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2377,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2378,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2379,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2380,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2383,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2385,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2386,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2387,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2388,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2390,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2392,            prodA++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2396,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2397,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2399,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2400,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2401,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2403,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2415,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2418,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2419,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2420,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2423,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2424,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2426,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2427,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2429,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2430,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2431,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2432,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2434,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2435,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2437,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2438,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2439,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2442,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2444,            prod2A++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2447,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2448,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2450,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2451,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2453,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2456,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2458,            prod2A++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2462,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2463,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2464,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2465,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2466,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2469,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2471,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2472,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2473,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2474,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2476,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2478,            prod2A++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2482,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2483,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2484,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2485,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2486,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2487,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2488,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2491,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2493,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2494,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2495,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2496,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2498,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2500,            prod2A++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2504,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2505,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2507,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2508,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2511,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2512,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2513,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2514,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2522,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2523,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2525,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2528,        xa = x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2529,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2530,            negative = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2531,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2535,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2536,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2537,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2538,                return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2540,            return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2543,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2544,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2548,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2552,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2553,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2554,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2555,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2556,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2557,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2562,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2568,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2569,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2570,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2572,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2573,                double b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2574,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2575,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2577,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2578,                b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2579,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2580,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2582,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2583,                    break;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2589,                k--;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2590,            },0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2591,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2592,            xa = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2593,            xb = remB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2596,        if (negative) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2597,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2600,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2602,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2604,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2606,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2608,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2610,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2620,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2623,        double xa = x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2624,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2625,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2628,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2629,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2633,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2634,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2638,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2639,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2640,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2641,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2642,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2643,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2648,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2654,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2655,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2656,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2658,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2659,                double b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2660,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2661,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2663,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2664,                b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2665,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2666,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2668,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2669,                    break;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2675,                k--;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2676,            },0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2677,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2678,            xa = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2679,            xb = remB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2685,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2687,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2689,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2691,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2693,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2695,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2705,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2706,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2709,        double xa = x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2710,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2711,            negative = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2712,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2716,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2717,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2718,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2719,                return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2721,            return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2724,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2725,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2729,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2730,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2734,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2735,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2736,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2737,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2738,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2739,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2744,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2750,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2751,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2752,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2754,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2755,                double b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2756,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2757,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2759,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2760,                b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2761,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2762,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2764,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2765,                    break;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2771,                k--;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2772,            },0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2773,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2774,            xa = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2775,            xb = remB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2778,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2780,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2781,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2783,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2784,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2785,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2787,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2788,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2789,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2790,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2794,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2795,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2797,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2800,        if (negative) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2801,            result = -result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2804,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2813,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2823,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2826,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2827,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2830,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2832,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2833,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2834,            negate = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2837,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2838,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2842,        if (xa < 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2843,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2845,            double temp = 1.0/xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2846,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2848,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2849,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2850,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2852,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2853,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2854,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2857,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2858,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2859,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2860,        xa = ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2861,        xb += yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2864,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2867,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2869,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2870,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2871,        } else {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2872,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2873,            double za = 1.0 + temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2874,            double zb = -(za - 1.0 - temp2);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2875,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2876,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2877,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2878,            za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2880,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2881,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2883,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2884,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2885,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2887,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2888,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2889,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2892,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2894,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2895,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2899,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2900,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2903,        double epsA2 = epsA*epsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2914,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2915,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2916,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2917,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2918,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2919,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2920,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2923,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2925,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2926,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2927,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2930,        yb += epsB / (1.0 + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2936,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2937,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2938,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2939,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2940,        za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2942,        result = za + zb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2943,        resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2945,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2947,            final double pia = 1.5707963267948966*2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2948,            final double pib = 6.123233995736766E-17*2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2950,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2951,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2952,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2954,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2955,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2959,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2960,            result = -result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2963,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2973,        if (x !=x || y != y) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2974,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2977,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2978,            double result = x*y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2979,            double invx = 1.0/x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2980,            double invy = 1.0/y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2982,            if (invx == 0.0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2983,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2984,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2986,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2990,            if (x < 0.0 || invx < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2991,                if (y < 0.0 || invy < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2992,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2994,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,2997,                return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3003,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3004,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3005,                return Math.PI/4.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3008,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3009,                return Math.PI*3.0/4.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3012,            return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3015,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3016,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3017,                return -Math.PI/4.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3020,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3021,                return -Math.PI*3.0/4.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3024,            return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3027,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3028,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3029,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3032,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3033,                return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3037,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3039,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3040,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3043,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3044,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3050,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3051,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3052,                return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3055,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3056,                return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3061,        final double r = y/x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3062,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3063,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3066,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3067,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3070,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3071,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3073,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3075,        double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3076,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3077,        ra = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3079,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3080,"            ra = copySign(0.0, y);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3084,"        double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3086,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3094,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3095,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3098,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3099,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3102,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3103,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3106,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3107,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3110,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3111,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3117,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3118,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3119,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3122,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3123,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3126,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3127,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3129,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3130,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3132,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3133,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3134,      za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3138,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3139,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3140,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3141,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3144,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3147,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3150,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3151,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3152,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3153,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3155,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3156,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3158,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3159,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3160,      ra = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3162,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3170,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3171,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3174,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3175,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3178,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3179,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3182,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3183,          return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3186,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3187,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3193,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3194,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3195,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3198,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3199,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3202,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3203,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3205,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3206,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3208,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3209,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3210,      za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3213,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3214,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3215,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3216,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3219,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3222,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3223,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3224,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3227,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3230,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3231,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3234,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3235,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3237,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3238,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3240,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3241,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3242,      ra = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3244,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3253,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3254,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3255,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3257,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3258,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3259,              return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3263,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3264,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3265,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3266,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3269,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3271,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3275,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3278,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3282,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3285,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3286,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3287,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3288,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3289,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3291,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3296,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3297,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3298,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3301,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3302,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3303,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3305,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3306,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3307,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3308,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3309,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3310,      za = temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3312,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3313,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3315,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3316,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3317,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3319,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3322,      est *= p2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3324,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3325,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3328,      return est;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3338,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3339,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3343,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3344,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3346,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3347,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3349,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3350,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3351,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3353,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3363,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3364,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3368,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3369,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3371,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3372,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3374,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3383,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3392,        return (x < 0l) ? -x : x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3401,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3419,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3420,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3422,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3431,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3432,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3434,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3446,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3447,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3451,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3452,            return d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3454,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3455,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3457,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3458,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3462,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3463,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3464,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3465,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3468,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3470,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3472,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3474,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3475,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3479,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3482,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3483,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3484,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3486,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3488,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3492,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3496,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3499,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3500,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3501,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3503,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3504,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3506,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3507,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3509,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3512,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3513,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3515,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3530,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3531,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3535,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3536,            return f;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3538,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3539,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3541,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3542,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3546,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3547,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3548,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3549,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3552,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3554,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3556,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3558,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3559,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3563,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3566,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3567,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3568,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3570,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3572,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3576,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3580,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3583,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3584,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3585,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3587,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3588,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3590,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3591,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3593,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3596,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3597,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3599,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3639,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3640,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3641,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3642,            return direction;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3643,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3644,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3645,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3646,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3651,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3652,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3653,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3654,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3656,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3695,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3696,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3697,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3698,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3699,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3700,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3701,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3702,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3707,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3708,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3709,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3710,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3712,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3724,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3725,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3728,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3729,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3732,        y = (long) x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3733,        if (x < 0 && y != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3734,            y--;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3737,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3738,            return x*y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3741,        return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3751,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3752,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3755,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3756,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3757,            return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3760,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3762,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3763,            return x*y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3766,        return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3774,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3775,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3777,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3778,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3779,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3781,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3783,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3784,            return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3788,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3789,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3797,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3805,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3814,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3823,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3832,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3833,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3835,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3836,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3839,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3840,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3844,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3845,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3846,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3848,        return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3857,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3858,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3860,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3861,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3864,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3865,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3869,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3870,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3871,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3873,        return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3882,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3891,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3900,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3901,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3903,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3904,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3907,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3908,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3912,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3913,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3914,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3916,        return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3926,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3932,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3933,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3937,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3938,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3939,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3941,        return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3959,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3960,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3961,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3962,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3965,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3966,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3967,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3969,                return abs(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3970,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3972,                return abs(y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3976,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3979,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3980,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3983,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,3986,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4014,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4026,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4027,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4028,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4029,            return magnitude;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4031,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4043,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4044,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4045,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4046,            return magnitude;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4048,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4061,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,51,4074,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,51,53,        return maximalCount;,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,51,62,        return count;,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,51,73,        for (int i = 0; i < value; i++) {,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,51,74,            incrementCount();,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,51,76,    },0.0,0,-1,0
org/apache/commons/math/util/Incrementor,51,85,            throw new MaxCountExceededException(maximalCount);,0.0,0,-1,0
