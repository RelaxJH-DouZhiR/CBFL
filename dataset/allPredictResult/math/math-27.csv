project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,1.0,1,1,0
org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",0.5,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,0.03846,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,272,        if (d > 1) {,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,273,            num /= d;,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,274,            den /= d;,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,278,        if (den < 0) {,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,284,    },0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,126,    private static final double LN_HI_PREC_COEF[][] = {,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,177,    private static final double COSINE_TABLE_A[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,216,    private static final double TANGENT_TABLE_A[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,235,    private static final double TANGENT_TABLE_B[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,275,    private static final long PI_O_4_BITS[] = new long[] {,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,27,2900,        return (x < 0) ? -x : x;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,35,    static final long[] FACTORIALS = new long[] {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,385,        int u = p;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,386,        int v = q;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,387,        if ((u == 0) || (v == 0)) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,392,            return FastMath.abs(u) + FastMath.abs(v);,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,399,        if (u > 0) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,400,            u = -u;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,402,        if (v > 0) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,403,            v = -v;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,406,        int k = 0;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,409,            u /= 2;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,410,            v /= 2;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,411,            k++; // cast out twos.,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,413,        if (k == 31) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,425,            while ((t & 1) == 0) { // while t is even..,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,426,                t /= 2; // cast out twos,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,429,            if (t > 0) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,430,                u = -t;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,432,                v = t;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,435,            t = (v - u) / 2;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,438,        } while (t != 0);,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,439,        return -u * (1 << k); // gcd is u*2^k,0.00488,0,-1,0
org/apache/commons/math3/fraction/FractionConversionException,27,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/fraction/FractionConversionException,27,43,    },0.0,0,-1,0
org/apache/commons/math3/fraction/FractionConversionException,27,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",0.0,0,-1,0
org/apache/commons/math3/fraction/FractionConversionException,27,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,27,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,27,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,27,48,                                Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,27,49,"        getContext().addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,27,50,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,27,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,99,"        this(value, 1.0e-5, 100);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,100,    },0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,122,    },0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,141,"       this(value, 0, maxDenominator, 100);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,142,    },0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,177,    {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,178,        long overflow = Integer.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,179,        double r0 = value;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,180,        long a0 = (long)FastMath.floor(r0);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,181,        if (a0 > overflow) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,182,"            throw new FractionConversionException(value, a0, 1l);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,187,        if (FastMath.abs(a0 - value) < epsilon) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,188,            this.numerator = (int) a0;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,189,            this.denominator = 1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,190,            return;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,193,        long p0 = 1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,194,        long q0 = 0;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,195,        long p1 = a0;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,196,        long q1 = 1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,198,        long p2 = 0;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,199,        long q2 = 1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,201,        int n = 0;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,202,        boolean stop = false;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,204,            ++n;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,205,            double r1 = 1.0 / (r0 - a0);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,206,            long a1 = (long)FastMath.floor(r1);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,207,            p2 = (a1 * p1) + p0;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,208,            q2 = (a1 * q1) + q0;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,209,            if ((p2 > overflow) || (q2 > overflow)) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,210,"                throw new FractionConversionException(value, p2, q2);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,213,            double convergent = (double)p2 / (double)q2;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,215,                p0 = p1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,216,                p1 = p2;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,217,                q0 = q1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,218,                q1 = q2;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,219,                a0 = a1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,220,                r0 = r1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,222,                stop = true;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,224,        } while (!stop);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,226,        if (n >= maxIterations) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,227,"            throw new FractionConversionException(value, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,230,        if (q2 < maxDenominator) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,231,            this.numerator = (int) p2;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,232,            this.denominator = (int) q2;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,234,            this.numerator = (int) p1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,235,            this.denominator = (int) q1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,238,    },0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,246,"        this(num, 1);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,247,    },0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,258,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,262,            if (num == Integer.MIN_VALUE ||,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,264,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,267,            num = -num;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,268,            den = -den;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,279,            num = -num;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,280,            den = -den;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,292,        if (numerator >= 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,293,            ret = this;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,295,            ret = negate();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,297,        return ret;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,307,        long nOd = ((long) numerator) * object.denominator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,308,        long dOn = ((long) denominator) * object.numerator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,309,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,333,        if (this == other) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,334,            return true;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,336,        if (other instanceof Fraction) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,339,            Fraction rhs = (Fraction)other;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,340,            return (numerator == rhs.numerator) &&,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,343,        return false;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,353,        return (float)doubleValue();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,361,        return denominator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,369,        return numerator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,378,        return 37 * (37 * 17 + numerator) + denominator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,388,        return (int)doubleValue();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,398,        return (long)doubleValue();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,406,        if (numerator==Integer.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,407,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,409,"        return new Fraction(-numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,417,"        return new Fraction(denominator, numerator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,431,"        return addSub(fraction, true /* add */);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,440,"        return new Fraction(numerator + i * denominator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,454,"        return addSub(fraction, false /* subtract */);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,463,"        return new Fraction(numerator - i * denominator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,477,        if (fraction == null) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,478,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,481,        if (numerator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,482,            return isAdd ? fraction : fraction.negate();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,484,        if (fraction.numerator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,485,            return this;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,489,"        int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,490,        if (d1==1) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,492,"            int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,493,"            int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,494,            return new Fraction,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,502,        BigInteger uvp = BigInteger.valueOf(numerator),0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,504,        BigInteger upv = BigInteger.valueOf(fraction.numerator),0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,506,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,509,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,510,"        int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,513,        BigInteger w = t.divide(BigInteger.valueOf(d2));,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,514,        if (w.bitLength() > 31) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,515,"            throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,518,"        return new Fraction (w.intValue(),",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,534,        if (fraction == null) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,535,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,537,        if (numerator == 0 || fraction.numerator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,538,            return ZERO;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,542,"        int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,543,"        int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,544,        return getReducedFraction,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,569,        if (fraction == null) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,570,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,572,        if (fraction.numerator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,573,"            throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,576,        return multiply(fraction.reciprocal());,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,585,"        return new Fraction(numerator, denominator * i);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,612,        if (denominator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,613,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,616,        if (numerator==0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,617,            return ZERO; // normalize zero.,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,620,        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,621,            numerator/=2; denominator/=2;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,623,        if (denominator < 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,624,            if (numerator==Integer.MIN_VALUE ||,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,626,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,629,            numerator = -numerator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,630,            denominator = -denominator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,633,"        int gcd = ArithmeticUtils.gcd(numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,634,        numerator /= gcd;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,635,        denominator /= gcd;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,636,"        return new Fraction(numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,650,        String str = null;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,651,        if (denominator == 1) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,652,            str = Integer.toString(numerator);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,653,        } else if (numerator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,654,"            str = ""0"";",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,656,"            str = numerator + "" / "" + denominator;",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,658,        return str;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,663,        return FractionField.getInstance();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,27,37,public class Fraction,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,59,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,63,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,27,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,27,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,27,42,    },0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,27,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,27,51,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,27,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,27,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,27,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,27,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,27,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,27,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,27,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3720,                  double xb) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3723,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3729,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3730,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3731,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3733,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3734,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3735,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3736,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3738,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3739,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3740,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3741,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3743,                if (remA > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3744,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3750,                --k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3751,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3753,            this.finalK = k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3754,            this.finalRemA = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3755,            this.finalRemB = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3756,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3762,            return finalK;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3768,            return finalRemA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3774,            return finalRemB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,349,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,362,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,364,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,366,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,375,        return Math.sqrt(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,383,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,384,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,392,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,393,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,396,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,397,          return exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,400,      double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,401,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,402,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,404,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,409,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,410,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,411,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,414,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,415,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,416,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,417,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,422,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,425,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,426,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,427,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,428,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,429,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,430,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,432,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,433,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,434,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,442,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,443,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,444,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,452,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,453,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,456,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,457,          return -exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,460,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,461,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,464,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,465,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,466,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,471,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,472,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,473,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,478,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,479,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,480,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,483,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,484,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,485,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,486,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,491,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,493,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,494,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,497,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,498,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,499,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,500,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,501,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,502,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,504,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,505,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,506,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,508,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,509,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,515,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,516,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,518,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,519,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,520,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,521,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,523,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,524,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,525,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,530,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,534,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,535,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,536,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,537,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,538,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,539,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,541,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,542,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,545,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,546,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,549,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,557,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,559,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,560,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,569,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,570,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,573,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,574,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,577,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,578,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,581,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,582,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,583,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,587,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,588,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,596,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,597,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,598,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,599,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,600,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,603,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,604,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,605,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,606,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,607,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,609,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,610,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,611,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,614,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,615,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,616,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,617,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,623,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,625,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,627,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,628,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,630,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,632,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,638,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,639,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,642,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,643,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,644,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,645,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,646,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,648,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,649,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,650,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,653,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,654,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,655,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,656,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,662,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,664,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,666,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,669,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,670,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,673,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,689,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,690,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,691,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,692,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,696,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,699,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,700,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,702,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,704,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,711,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,719,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,720,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,721,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,722,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,726,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,729,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,730,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,732,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,734,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,741,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,783,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,807,"        return exp(x, 0.0, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,826,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,827,            intVal = (int) -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,829,            if (intVal > 746) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,830,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,831,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,832,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,834,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,837,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,840,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,844,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,847,            if (intVal == 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,850,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,854,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,857,            intVal++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,862,            intVal = -intVal;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,864,            intVal = (int) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,866,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,867,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,869,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,871,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,899,        double z = 0.04168701738764507;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,900,        z = z * epsilon + 0.1666666505023083;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,901,        z = z * epsilon + 0.5000000000042687;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,902,        z = z * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,903,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,910,        double tempA = intPartA * fracPartA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,917,        final double tempC = tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,919,        if (extra != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,922,            result = tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,925,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,927,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,931,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,939,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,955,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,956,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,957,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,962,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,963,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,970,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,972,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,973,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,974,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,978,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,982,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,983,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,984,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,986,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,987,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,988,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,990,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,995,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,999,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1000,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1002,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1003,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1004,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1005,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1007,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1008,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1009,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1010,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1013,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1015,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1017,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1019,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1021,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1023,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1025,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1029,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1030,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1031,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1033,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1035,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1036,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1038,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1040,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1043,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1045,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1046,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1048,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1050,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1051,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1053,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1054,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1055,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1056,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1058,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1059,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1060,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1073,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1077,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1078,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1081,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1082,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1083,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1086,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1096,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1106,        if (x==0) { // Handle special case of +0/-0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1109,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1113,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1114,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1115,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1118,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1123,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1124,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1128,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1132,        int exp = (int)(bits >> 52)-1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1136,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1146,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1148,                exp--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1149,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1154,        if (exp == -1 || exp == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1160,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1161,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1162,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1163,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1164,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1165,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1166,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1173,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1174,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1176,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1177,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1178,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1184,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1185,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1186,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1190,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1191,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1193,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1194,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1195,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1197,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1215,        double lnza = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1216,        double lnzb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1218,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1220,            double tmp = epsilon * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1221,            double aa = epsilon + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1222,            double ab = epsilon - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1223,            double xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1224,            double xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1227,            double numer = bits & 0x3ffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1229,            aa = numer - xa*denom - xb * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1230,            xb += aa / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1238,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1239,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1241,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1242,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1243,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1249,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1250,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1251,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1255,            aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1256,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1264,            lnza = aa + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1265,            lnzb = -(lnza - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1266,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1269,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1270,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1272,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1273,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1274,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1275,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1292,        double a = LN_2_A*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1293,        double b = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1294,        double c = a+lnm[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1295,        double d = -(c-a-lnm[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1296,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1297,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1299,        c = a + lnza;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1300,        d = -(c - a - lnza);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1301,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1302,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1304,        c = a + LN_2_B*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1305,        d = -(c - a - LN_2_B*exp);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1306,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1307,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1309,        c = a + lnm[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1310,        d = -(c - a - lnm[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1311,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1312,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1314,        c = a + lnzb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1315,        d = -(c - a - lnzb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1316,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1317,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1319,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1320,            hiPrec[0] = a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1321,            hiPrec[1] = b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1324,        return a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1333,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1334,            return x/0.0;   // -Infinity,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1338,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1341,        if (x>1e-6 || x<-1e-6) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1342,            double xpa = 1.0 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1343,            double xpb = -(xpa - 1.0 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1345,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1347,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1349,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1354,            double fx1 = xpb/xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1356,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1357,            epsilon = epsilon * fx1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1359,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1363,        double y = x * F_1_3 - F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1364,        y = y * x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1365,        y = y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1367,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1375,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1377,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1379,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1383,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1386,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1387,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1409,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1420,        final double lns[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1422,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1423,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1426,        if (x != x) { // X is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1427,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1431,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1432,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1433,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1435,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1438,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1442,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1446,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1447,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1449,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1450,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1453,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1456,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1457,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1458,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1460,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1461,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1463,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1467,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1468,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1469,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1472,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1473,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1475,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1479,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1480,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1481,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1484,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1485,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1486,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1487,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1490,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1493,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1494,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1495,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1496,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1499,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1503,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1505,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1506,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1509,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1510,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1512,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1517,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1520,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1523,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1527,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1534,        if (y < 8e298 && y > -8e298) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1535,            double tmp1 = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1536,            ya = y + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1537,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1538,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1542,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1546,"        final double lores = log(x, lns);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1548,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1551,        double lna = lns[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1552,        double lnb = lns[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1555,        double tmp1 = lna * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1556,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1557,        lnb += lna - tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1558,        lna = tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1561,        final double aa = lna * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1564,        lna = aa+ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1565,        lnb = -(lna - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1567,        double z = 1.0 / 120.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1568,        z = z * lnb + (1.0 / 24.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1569,        z = z * lnb + (1.0 / 6.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1570,        z = z * lnb + 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1571,        z = z * lnb + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1572,        z = z * lnb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1574,"        final double result = exp(lna, z, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1576,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1588,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1590,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1591,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1592,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1593,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1596,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1598,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1608,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1610,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1611,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1612,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1613,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1614,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1616,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1627,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1631,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1632,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1633,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1634,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1637,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1638,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1639,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1640,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1643,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1644,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1645,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1646,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1672,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1673,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1675,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1676,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1677,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1678,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1679,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1681,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1682,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1683,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1684,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1685,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1729,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1732,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1733,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1734,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1735,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1738,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1740,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1751,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1752,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1754,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1755,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1756,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1758,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1775,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1776,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1777,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1778,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1781,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1782,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1783,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1784,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1787,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1788,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1789,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1790,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1815,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1816,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1819,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1820,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1821,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1822,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1823,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1825,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1826,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1827,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1828,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1829,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1834,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1835,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1839,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1841,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1842,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1843,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1844,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1845,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1847,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1848,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1849,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1850,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1851,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1856,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1857,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1859,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1861,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1876,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1879,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1880,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1881,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1883,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1884,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1885,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1889,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1892,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1895,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1896,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1897,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1900,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1903,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1920,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1924,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1925,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1928,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1929,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1935,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1936,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1938,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1945,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1946,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1950,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1951,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1953,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1954,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1956,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1957,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1958,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1959,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1961,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1962,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1969,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1971,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1975,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1977,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1978,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1983,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1985,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1989,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1990,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1991,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1992,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1993,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1996,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2000,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2003,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2005,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2009,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2010,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2012,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2013,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2014,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2016,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2028,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2031,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2032,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2033,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2036,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2037,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2039,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2042,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2043,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2044,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2045,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2047,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2048,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2050,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2051,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2055,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2057,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2061,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2063,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2064,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2069,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2071,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2075,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2077,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2078,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2079,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2082,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2086,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2089,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2091,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2095,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2096,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2097,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2099,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2100,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2101,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2104,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2108,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2111,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2113,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2120,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2121,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2124,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2125,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2126,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2127,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2136,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2137,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2139,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2142,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2143,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2144,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2145,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2149,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2150,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2151,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2152,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2154,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2157,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2158,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2162,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2166,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2167,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2168,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2169,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2170,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2171,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2172,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2173,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2174,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2175,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2178,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2179,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2182,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2184,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2186,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2188,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2190,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2192,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2203,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2206,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2207,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2208,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2211,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2212,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2216,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2217,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2221,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2222,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2223,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2224,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2225,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2226,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2227,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2228,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2229,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2230,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2236,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2238,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2240,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2242,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2244,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2246,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2257,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2258,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2261,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2262,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2263,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2264,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2268,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2269,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2270,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2271,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2273,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2276,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2277,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2281,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2282,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2286,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2287,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2288,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2289,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2290,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2291,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2293,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2294,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2295,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2298,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2300,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2301,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2303,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2304,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2305,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2307,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2308,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2309,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2310,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2314,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2315,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2317,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2320,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2321,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2324,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2333,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2343,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2346,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2347,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2350,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2352,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2353,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2354,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2357,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2358,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2362,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2363,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2365,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2366,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2368,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2369,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2370,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2372,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2373,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2374,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2377,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2378,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2379,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2380,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2381,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2384,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2387,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2389,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2390,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2391,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2392,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2393,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2394,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2395,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2396,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2397,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2398,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2400,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2401,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2403,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2404,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2405,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2407,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2408,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2409,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2412,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2414,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2415,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2419,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2420,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2423,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2434,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2435,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2436,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2437,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2438,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2439,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2440,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2443,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2445,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2446,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2447,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2450,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2453,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2454,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2455,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2456,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2457,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2459,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2460,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2462,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2464,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2465,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2467,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2468,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2469,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2471,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2472,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2476,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2477,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2480,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2490,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2491,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2494,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2495,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2496,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2497,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2499,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2500,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2501,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2503,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2507,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2508,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2509,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2511,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2514,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2520,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2521,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2522,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2525,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2526,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2529,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2532,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2533,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2534,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2537,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2538,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2541,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2544,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2545,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2546,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2549,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2550,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2554,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2556,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2557,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2560,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2561,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2567,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2568,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2569,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2572,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2573,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2578,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2579,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2580,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2583,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2584,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2587,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2588,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2590,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2592,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2593,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2594,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2596,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2597,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2601,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2603,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2611,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2612,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2615,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2616,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2619,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2620,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2623,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2624,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2627,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2628,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2634,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2635,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2636,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2639,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2640,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2643,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2644,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2646,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2647,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2649,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2650,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2651,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2655,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2656,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2657,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2658,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2661,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2664,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2667,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2668,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2669,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2670,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2672,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2673,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2675,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2676,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2677,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2679,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2687,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2688,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2691,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2692,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2695,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2696,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2699,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2700,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2703,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2704,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2710,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2711,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2712,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2715,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2716,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2719,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2720,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2722,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2723,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2725,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2726,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2727,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2730,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2731,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2732,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2733,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2736,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2739,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2740,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2741,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2744,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2747,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2748,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2751,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2752,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2754,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2755,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2757,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2758,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2759,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2761,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2770,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2771,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2772,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2774,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2775,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2776,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2780,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2781,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2782,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2783,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2786,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2788,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2792,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2795,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2799,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2802,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2803,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2804,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2805,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2806,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2808,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2813,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2814,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2815,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2818,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2819,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2820,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2822,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2823,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2824,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2825,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2826,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2827,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2829,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2830,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2832,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2833,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2834,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2836,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2839,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2841,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2842,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2845,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2855,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2856,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2860,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2861,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2863,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2864,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2866,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2867,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2868,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2870,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2880,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2881,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2885,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2886,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2888,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2889,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2891,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2909,        return (x < 0l) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2918,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2936,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2937,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2939,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2948,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2949,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2951,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2963,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2964,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2968,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2969,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2971,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2972,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2974,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2975,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2979,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2980,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2981,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2982,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2985,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2987,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2989,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2991,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2992,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2996,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,2999,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3000,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3001,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3003,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3005,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3009,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3013,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3016,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3017,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3018,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3020,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3021,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3023,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3024,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3026,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3029,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3030,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3032,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3047,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3048,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3052,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3053,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3055,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3056,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3058,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3059,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3063,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3064,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3065,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3066,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3069,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3071,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3073,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3075,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3076,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3080,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3083,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3084,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3085,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3087,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3089,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3093,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3097,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3100,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3101,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3102,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3104,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3105,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3107,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3108,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3110,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3113,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3114,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3116,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3156,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3157,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3158,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3159,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3160,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3161,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3162,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3163,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3168,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3169,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3170,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3171,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3173,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3212,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3213,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3214,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3215,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3216,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3217,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3218,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3219,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3224,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3225,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3226,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3227,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3229,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3241,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3242,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3246,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3249,        y = (long) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3250,        if (x < 0 && y != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3251,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3254,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3255,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3258,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3268,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3269,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3272,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3273,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3274,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3277,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3279,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3280,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3283,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3291,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3292,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3294,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3295,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3296,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3298,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3300,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3301,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3305,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3306,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3314,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3322,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3331,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3340,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3349,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3350,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3352,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3353,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3356,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3357,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3361,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3362,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3363,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3365,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3374,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3375,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3377,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3378,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3381,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3382,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3386,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3387,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3388,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3390,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3399,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3408,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3417,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3418,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3420,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3421,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3424,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3425,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3429,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3430,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3431,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3433,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3442,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3443,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3445,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3446,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3449,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3450,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3454,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3455,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3456,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3458,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3476,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3477,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3478,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3479,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3482,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3483,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3484,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3486,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3487,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3489,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3493,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3496,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3497,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3500,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3503,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3531,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3543,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3544,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3545,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3546,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3548,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3560,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3561,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3562,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3563,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3565,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3578,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3591,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3600,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3601,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3602,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3603,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3604,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3605,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3606,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3607,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3608,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3609,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3610,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3611,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3612,    },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,46,        super();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,47,    },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,60,        long s = (long)x + (long)y;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,64,        return (int)s;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,108,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,109,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,110,            return 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,112,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,113,            return n;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,116,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,117,"            return binomialCoefficient(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,125,        long result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,126,        if (n <= 61) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,128,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,129,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,130,                result = result * i / j;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,131,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,133,        } else if (n <= 66) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,136,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,137,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,144,"                final long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,145,                result = (result / (j / d)) * (i / d);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,146,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,148,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,152,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,153,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,154,"                final long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,155,"                result = mulAndCheck(result / (j / d), i / d);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,156,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,159,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,186,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,187,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,188,            return 1d;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,190,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,191,            return n;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,193,        if (k > n/2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,194,"            return binomialCoefficientDouble(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,196,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,197,"            return binomialCoefficient(n,k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,200,        double result = 1d;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,201,        for (int i = 1; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,202,             result *= (double)(n - k + i) / (double)i;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,205,        return FastMath.floor(result + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,228,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,229,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,230,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,232,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,233,            return FastMath.log(n);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,240,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,241,"            return FastMath.log(binomialCoefficient(n,k));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,248,        if (n < 1030) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,252,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,253,"            return binomialCoefficientLog(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,259,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,262,        for (int i = n - k + 1; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,263,            logSum += FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,267,        for (int i = 2; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,268,            logSum -= FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,271,        return logSum;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,299,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,303,        if (n > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,304,            throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,306,        return FACTORIALS[n];,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,323,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,327,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,328,            return factorial(n);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,341,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,345,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,346,            return FastMath.log(factorial(n));,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,348,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,349,        for (int i = 2; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,350,            logSum += FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,352,        return logSum;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,472,        long u = p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,473,        long v = q;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,474,        if ((u == 0) || (v == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,479,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,486,        if (u > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,487,            u = -u;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,489,        if (v > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,490,            v = -v;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,493,        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,496,            u /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,497,            v /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,498,            k++; // cast out twos.,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,500,        if (k == 63) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,512,            while ((t & 1) == 0) { // while t is even..,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,513,                t /= 2; // cast out twos,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,516,            if (t > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,517,                u = -t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,519,                v = t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,522,            t = (v - u) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,525,        } while (t != 0);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,526,        return -u * (1L << k); // gcd is u*2^k,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,552,        if (a == 0 || b == 0){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,553,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,556,        if (lcm == Integer.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,560,        return lcm;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,586,        if (a == 0 || b == 0){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,587,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,590,        if (lcm == Long.MIN_VALUE){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,594,        return lcm;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,608,        long m = ((long)x) * ((long)y);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,610,            throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,612,        return (int)m;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,627,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,629,"            ret = mulAndCheck(b, a);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,631,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,632,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,634,                    if (a >= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,635,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,637,                        throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,639,                } else if (b > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,641,                    if (Long.MIN_VALUE / b <= a) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,642,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,644,                        throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,649,                    ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,651,            } else if (a > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,656,                if (a <= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,657,                    ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,659,                    throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,663,                ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,666,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,680,        long s = (long)x - (long)y;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,684,        return (int)s;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,699,        if (b == Long.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,700,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,701,                ret = a - b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,709,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,721,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,725,        int result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,726,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,727,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,728,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,729,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,731,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,732,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,735,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,747,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,751,        int result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,752,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,753,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,754,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,755,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,757,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,758,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,761,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,773,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,777,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,778,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,779,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,780,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,781,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,783,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,784,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,787,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,799,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,803,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,804,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,805,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,806,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,807,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,809,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,810,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,813,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,825,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,829,        return k.pow(e);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,841,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,845,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,846,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,847,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,848,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,849,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,851,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,852,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,855,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,872,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,873,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,874,        while (!BigInteger.ZERO.equals(e)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,875,            if (e.testBit(0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,876,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,878,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,879,            e = e.shiftRight(1);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,882,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,898,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,900,"            ret = addAndCheck(b, a, pattern);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,904,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,905,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,907,                    if (Long.MIN_VALUE - b <= a) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,908,                        ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,910,"                        throw new MathArithmeticException(pattern, a, b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,914,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,921,                if (a <= Long.MAX_VALUE - b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,922,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,924,"                    throw new MathArithmeticException(pattern, a, b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,928,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,940,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,944,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,947,    },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,27,956,        return (n > 0) && ((n & (n - 1)) == 0);,0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,27,37,"        super(value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,27,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,27,47,"        super(specific, value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,27,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,27,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,27,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,27,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,27,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,27,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,27,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,27,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,27,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,27,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,27,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,27,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,27,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,27,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,27,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,27,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,27,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,27,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,27,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,27,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,27,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3687,    private static class lnMant {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3701,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3703,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3654,    private static class ExpFracTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3680,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3681,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3683,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3615,    private static class ExpIntTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3647,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3648,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,27,3650,        },0.0,0,-1,0
