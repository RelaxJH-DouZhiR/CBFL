project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,1.0,0,1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,0.5,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,            continue;,0.5,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",0.25,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,0.25,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0.25,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0.25,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,226,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",0.08333,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,33,67,        final double[] p = getKey();,0.06667,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,33,68,        return p == null ? null : p.clone();,0.06667,0,-1,0
org/apache/commons/math3/util/Pair,33,63,        return key;,0.06667,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);,0.06667,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,",0.06667,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,",0.06667,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,298,        double sum = 0;,0.06667,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,        for (double coefficient : coefficients.toArray()) {,0.06667,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,300,            sum -= coefficient;,0.06667,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,302,        return sum;,0.06667,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,347,            columnsToDrop.add(col);,0.0625,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,181,    },0.0625,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,224,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack",0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,333,        columnsToDrop.add(0);,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,337,"            final double entry = tableau.getEntry(0, i);",0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0.05882,1,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,345,          int col = i + getArtificialVariableOffset();,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,346,          if (getBasicRow(col) == null) {,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,352,        for (int i = 1; i < getHeight(); i++) {,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,353,          int col = 0;,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,354,          for (int j = 0; j < getWidth(); j++) {,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,355,            if (!columnsToDrop.contains(j)) {,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,362,          columnLabels.remove((int) columnsToDrop.get(i));,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,365,        this.tableau = new Array2DRowRealMatrix(matrix);,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,366,        this.numArtificialVariables = 0;,0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,367,    },0.05882,0,-1,0
org/apache/commons/math3/util/MathUtils,33,257,        if (o == null) {,0.05882,0,-1,0
org/apache/commons/math3/util/MathUtils,33,260,    },0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,75,        copyIn(d);,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,76,    },0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,262,        if (data == null) {,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,263,            if (row > 0) {,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,266,            if (column > 0) {,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,269,            MathUtils.checkNotNull(subMatrix);,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,270,            final int nRows = subMatrix.length;,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,271,            if (nRows == 0) {,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,275,            final int nCols = subMatrix[0].length;,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,276,            if (nCols == 0) {,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,279,            data = new double[subMatrix.length][nCols];,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,280,            for (int i = 0; i < data.length; ++i) {,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,281,                if (subMatrix[i].length != nCols) {,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,286,        } else {,0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,290,    },0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,526,"        setSubMatrix(in, 0, 0);",0.05882,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,527,    },0.05882,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,174,            doIteration(tableau);,0.05556,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,44,    protected AbstractRealMatrix() {},0.05556,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,33,41,"        this(point, value, true);",0.05263,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,33,42,    },0.05263,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,33,55,        super(copyArray ? ((point == null) ? null :,0.05263,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,33,59,    },0.05263,0,-1,0
org/apache/commons/math3/util/Pair,33,42,"    public Pair(K k, V v) {",0.05263,0,-1,0
org/apache/commons/math3/util/Pair,33,43,        key = k;,0.05263,0,-1,0
org/apache/commons/math3/util/Pair,33,44,        value = v;,0.05263,0,-1,0
org/apache/commons/math3/util/Pair,33,45,    },0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,317,                return null;,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,320,        return row;,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,397,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,401,      Set<Integer> basicRows = new HashSet<Integer>();,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,403,      for (int i = 0; i < coefficients.length; i++) {,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,404,"          int colIndex = columnLabels.indexOf(""x"" + i);",0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,405,          if (colIndex < 0) {,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,409,          Integer basicRow = getBasicRow(colIndex);,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,410,          if (basicRow != null && basicRow == 0) {,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,415,          } else if (basicRows.contains(basicRow)) {,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,420,              basicRows.add(basicRow);,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,421,              coefficients[i] =,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,426,"      return new PointValuePair(coefficients, f.getValue(coefficients));",0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",0.05263,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,448,        if (v instanceof ArrayRealVector) {,0.05263,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,449,            final double[] vData = ((ArrayRealVector) v).data;,0.05263,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,450,            checkVectorDimensions(vData.length);,0.05263,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,451,            double dot = 0;,0.05263,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,452,            for (int i = 0; i < data.length; i++) {,0.05263,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,453,                dot += data[i] * vData[i];,0.05263,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,455,            return dot;,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,173,        while (!tableau.isOptimal()) {,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,201,        return tableau.getSolution();,0.05263,0,-1,0
org/apache/commons/math3/util/Precision,33,116,            return 0;,0.05263,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,196,        tableau.dropPhase1Objective();,0.05,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,198,        while (!tableau.isOptimal()) {,0.05,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,311,        Integer row = null;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,312,        for (int i = 0; i < getHeight(); i++) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,313,"            final double entry = getEntry(i, col);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,314,"            if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,315,                row = i;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,316,"            } else if (!Precision.equals(entry, 0d, maxUlps)) {",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,328,        if (getNumObjectiveFunctions() == 1) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,385,                return false;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,439,        for (int j = 0; j < getWidth(); j++) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,440,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,442,    },0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,456,"        tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow)",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,458,    },0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,127,        if (++iterations > maxIterations) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,130,    },0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,70,        double minValue = 0;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,71,        Integer minPos = null;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,72,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,73,"            final double entry = tableau.getEntry(0, i);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,74,"            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,75,                minValue = entry;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,76,                minPos = i;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,79,        return minPos;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,90,        List<Integer> minRatioPositions = new ArrayList<Integer>();,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,91,        double minRatio = Double.MAX_VALUE;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,92,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,93,"            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,94,"            final double entry = tableau.getEntry(i, col);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,96,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,97,                final double ratio = rhs / entry;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,98,"                final int cmp = Precision.compareTo(ratio, minRatio, maxUlps);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,99,                if (cmp == 0) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,101,                } else if (cmp < 0) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,102,                    minRatio = ratio;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,103,                    minRatioPositions = new ArrayList<Integer>();,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,104,                    minRatioPositions.add(i);,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,109,        if (minRatioPositions.size() == 0) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,111,        } else if (minRatioPositions.size() > 1) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,125,        return minRatioPositions.get(0);,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,137,        incrementIterationsCounter();,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,139,        Integer pivotCol = getPivotColumn(tableau);,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,140,"        Integer pivotRow = getPivotRow(tableau, pivotCol);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,141,        if (pivotRow == null) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,146,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,147,"        tableau.divideRow(pivotRow, pivotVal);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,150,        for (int i = 0; i < tableau.getHeight(); i++) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,151,            if (i != pivotRow) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,152,"                double multiplier = tableau.getEntry(i, pivotCol);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,153,"                tableau.subtractRow(i, pivotRow, multiplier);",0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,156,    },0.04762,0,-1,0
org/apache/commons/math3/util/Precision,33,92,            return -1;,0.04762,0,-1,0
org/apache/commons/math3/util/Precision,33,309,            yInt = SGN_MASK - yInt;,0.04762,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,155,"        columnLabels.add(""W"");",0.04545,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,168,"        columnLabels.add(""a"" + i);",0.04545,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,188,"            matrix.setEntry(0, 0, -1);",0.04545,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,225,            } else if (constraint.getRelationship() == Relationship.GEQ) {,0.04545,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,232,"                matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);",0.04545,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,233,"                matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);",0.04545,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,234,"                matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));",0.04545,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,508,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,0.04545,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,516,        return getWidth() - 1;,0.04545,0,-1,0
org/apache/commons/math3/util/Precision,33,115,"        if (equals(x, y, maxUlps)) {",0.04545,0,-1,0
org/apache/commons/math3/util/Precision,33,117,        } else if (x < y) {,0.04545,0,-1,0
org/apache/commons/math3/util/Precision,33,118,            return -1;,0.04545,0,-1,0
org/apache/commons/math3/util/Precision,33,120,        return 1;,0.04545,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,165,"        columnLabels.add(""s"" + i);",0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,382,        for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) {,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,383,"            final double entry = tableau.getEntry(0, i);",0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,384,"            if (Precision.compareTo(entry, 0d, epsilon) < 0) {",0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,388,        return true;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,473,        return tableau.getRowDimension();,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,74,    protected AbstractLinearOptimizer() {,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,75,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,76,    },0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,82,        return nonNegative;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,89,        return goal;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,96,        return function;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,103,        return Collections.unmodifiableCollection(linearConstraints);,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,108,        this.maxIterations = maxIterations;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,109,    },0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,139,        this.function          = f;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,140,        this.linearConstraints = constraints;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,141,        this.goal              = goalType;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,142,        this.nonNegative       = restrictToNonNegative;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,144,        iterations  = 0;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,147,        return doOptimize();,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,51,"        this(DEFAULT_EPSILON, DEFAULT_ULPS);",0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,52,    },0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,59,"    public SimplexSolver(final double epsilon, final int maxUlps) {",0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,60,        this.epsilon = epsilon;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,61,        this.maxUlps = maxUlps;,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,62,    },0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,169,        if (tableau.getNumArtificialVariables() == 0) {,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,187,        final SimplexTableau tableau =,0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,195,        solvePhase1(tableau);,0.04348,0,-1,0
org/apache/commons/math3/util/FastMath,33,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.04348,0,-1,0
org/apache/commons/math3/util/Precision,33,89,"        if (equals(x, y, eps)) {",0.04348,0,-1,0
org/apache/commons/math3/util/Precision,33,90,            return 0;,0.04348,0,-1,0
org/apache/commons/math3/util/Precision,33,91,        } else if (x < y) {,0.04348,0,-1,0
org/apache/commons/math3/util/Precision,33,94,        return 1;,0.04348,0,-1,0
org/apache/commons/math3/util/Precision,33,265,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.04348,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,465,        return tableau.getColumnDimension();,0.04167,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,482,"        return tableau.getEntry(row, column);",0.04167,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,500,        return getNumObjectiveFunctions() + numDecisionVariables;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,113,    private static final double LN_QUICK_COEF[][] = {,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,126,    private static final double LN_HI_PREC_COEF[][] = {,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,139,    private static final double SINE_TABLE_A[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,158,    private static final double SINE_TABLE_B[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,177,    private static final double COSINE_TABLE_A[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,196,    private static final double COSINE_TABLE_B[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,216,    private static final double TANGENT_TABLE_A[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,235,    private static final double TANGENT_TABLE_B[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,254,    private static final long RECIP_2PI[] = new long[] {,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,275,    private static final long PI_O_4_BITS[] = new long[] {,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,33,3002,        return (x < 0l) ? -x : x;,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,33,63,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,33,70,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,33,71,    },0.04167,0,-1,0
org/apache/commons/math3/util/Precision,33,301,        long xInt = Double.doubleToLongBits(x);,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,33,302,        long yInt = Double.doubleToLongBits(y);,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,33,305,        if (xInt < 0) {,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,33,306,            xInt = SGN_MASK - xInt;,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,33,308,        if (yInt < 0) {,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,33,312,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,33,314,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.04167,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,265,"        return new LinearConstraint(constraint.getCoefficients(),",0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,63,    public ArrayRealVector(int size) {,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,64,        data = new double[size];,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,65,    },0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,316,        if (v instanceof ArrayRealVector) {,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,317,            final double[] vData = ((ArrayRealVector) v).data;,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,318,            final int dim = vData.length;,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,319,            checkVectorDimensions(dim);,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,320,            ArrayRealVector result = new ArrayRealVector(dim);,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,321,            double[] resultData = result.data;,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,322,            for (int i = 0; i < dim; i++) {,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,323,                resultData[i] = data[i] - vData[i];,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,325,            return result;,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,623,        return data[index];,0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,478,"        return new ArrayRealVector(getRow(row), false);",0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,483,"        MatrixUtils.checkRowIndex(this, row);",0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,484,        final int nCols = getColumnDimension();,0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,485,        if (vector.getDimension() != nCols) {,0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,489,        for (int i = 0; i < nCols; ++i) {,0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,490,"            setEntry(row, i, vector.getEntry(i));",0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,492,    },0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,514,"        MatrixUtils.checkRowIndex(this, row);",0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,515,        final int nCols = getColumnDimension();,0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,516,        final double[] out = new double[nCols];,0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,517,        for (int i = 0; i < nCols; ++i) {,0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,518,"            out[i] = getEntry(row, i);",0.04,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,521,        return out;,0.04,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,102,"    public ArrayRealVector(double[] d, boolean copyArray) {",0.03846,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,103,        if (d == null) {,0.03846,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,106,        data = copyArray ? d.clone() :  d;,0.03846,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,107,    },0.03846,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,763,        if (data.length != n) {,0.03846,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,766,    },0.03846,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,295,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.03846,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,296,        return data[row][column];,0.03846,0,-1,0
org/apache/commons/math3/optimization/GoalType,33,27,public enum GoalType implements Serializable {,0.03704,0,-1,0
org/apache/commons/math3/optimization/GoalType,33,30,"    MAXIMIZE,",0.03704,0,-1,0
org/apache/commons/math3/optimization/GoalType,33,33,    MINIMIZE,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,134,                   final int maxUlps) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,84,    private final List<String> columnLabels = new ArrayList<String>();,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,135,        this.f                      = f;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,136,        this.constraints            = normalizeConstraints(constraints);,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,137,        this.restrictToNonNegative  = restrictToNonNegative;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,138,        this.epsilon                = epsilon;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,139,        this.maxUlps                = maxUlps;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,140,        this.numDecisionVariables   = f.getCoefficients().getDimension() +,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,142,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,144,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,146,        this.tableau = createTableau(goalType == GoalType.MAXIMIZE);,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,147,        initializeColumnLabels();,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,148,    },0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,154,      if (getNumObjectiveFunctions() == 2) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,157,"      columnLabels.add(""Z"");",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,158,      for (int i = 0; i < getOriginalNumDecisionVariables(); i++) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,159,"        columnLabels.add(""x"" + i);",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,161,      if (!restrictToNonNegative) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,164,      for (int i = 0; i < getNumSlackVariables(); i++) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,167,      for (int i = 0; i < getNumArtificialVariables(); i++) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,170,"      columnLabels.add(""RHS"");",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,171,    },0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,181,        int width = numDecisionVariables + numSlackVariables +,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,183,        int height = constraints.size() + getNumObjectiveFunctions();,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,184,"        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width);",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,187,        if (getNumObjectiveFunctions() == 2) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,190,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,191,"        matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1);",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,192,        RealVector objectiveCoefficients =,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,194,"        copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]);",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,195,"        matrix.setEntry(zIndex, width - 1,",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,198,        if (!restrictToNonNegative) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,204,        int slackVar = 0;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,205,        int artificialVar = 0;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,206,        for (int i = 0; i < constraints.size(); i++) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,207,            LinearConstraint constraint = constraints.get(i);,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,208,            int row = getNumObjectiveFunctions() + i;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,211,"            copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]);",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,214,            if (!restrictToNonNegative) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,220,"            matrix.setEntry(row, width - 1, constraint.getValue());",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,223,            if (constraint.getRelationship() == Relationship.LEQ) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,230,            if ((constraint.getRelationship() == Relationship.EQ) ||,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,238,        return matrix;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,247,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,248,        for (LinearConstraint constraint : originalConstraints) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,249,            normalized.add(normalize(constraint));,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,250,        },0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,251,        return normalized;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,260,        if (constraint.getValue() < 0) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,274,        return this.numArtificialVariables > 0 ? 2 : 1;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,283,        int count = 0;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,284,        for (final LinearConstraint constraint : constraints) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,285,            if (constraint.getRelationship() == relationship) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,286,                ++count;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,288,        },0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,289,        return count;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,374,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,375,    },0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,539,        return f.getCoefficients().getDimension();,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,547,        return numSlackVariables;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,555,        return numArtificialVariables;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,42,    private Relationship(String stringValue) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,43,        this.stringValue = stringValue;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,44,    },0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,28,"    EQ(""=""),",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,31,"    LEQ(""<=""),",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,34,"    GEQ("">="");",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,25,public enum Relationship {,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVector,33,58,public abstract class RealVector {,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVector,33,864,    protected class SparseEntryIterator implements Iterator<Entry> {,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVector,33,527,        return copy().mapMultiplyToSelf(d);,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,82,    },0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,99,                            final double value) {,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,100,        this.coefficients = coefficients;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,101,        this.relationship = relationship;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,102,        this.value        = value;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,103,    },0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,168,        return coefficients;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,176,        return relationship;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,184,        return value;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,58,"        this(new ArrayRealVector(coefficients), constantTerm);",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,59,    },0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,66,        this.coefficients = coefficients;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,67,        this.constantTerm = constantTerm;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,68,    },0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,75,        return coefficients;,0.03704,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,83,        return constantTerm;,0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,84,    public ArrayRealVector(double[] d) {,0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,85,        data = d.clone();,0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,86,    },0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,198,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,199,        data = deep ? v.data.clone() : v.data;,0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,200,    },0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,285,"        return new ArrayRealVector(this, true);",0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,374,        for (int i = 0; i < data.length; i++) {,0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,375,            data[i] = data[i] * d;,0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,377,        return this;,0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,629,        return data.length;,0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,733,        return data.clone();,0.03704,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,37,public class ArrayRealVector extends RealVector implements Serializable {,0.03704,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0.03704,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,55,        nf.setMaximumFractionDigits(2);,0.03704,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,56,        return nf;,0.03704,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0.03704,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,54,        if (rowDimension < 1) {,0.03704,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,57,        if (columnDimension < 1) {,0.03704,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,60,    },0.03704,0,-1,0
org/apache/commons/math3/linear/RealLinearOperator,33,53,public abstract class RealLinearOperator {,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,83,    },0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,106,"                            final String separator, final NumberFormat format) {",0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,107,        this.prefix      = prefix;,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,108,        this.suffix      = suffix;,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,109,        this.separator   = separator;,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,110,        trimmedPrefix    = prefix.trim();,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,111,        trimmedSuffix    = suffix.trim();,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,112,        trimmedSeparator = separator.trim();,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,113,        this.format      = format;,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,114,    },0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,162,        return getInstance(Locale.getDefault());,0.03704,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0.03704,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,56,"        super(rowDimension, columnDimension);",0.03704,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,57,        data = new double[rowDimension][columnDimension];,0.03704,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,58,    },0.03704,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,255,        return data;,0.03704,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,302,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.03704,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,303,        data[row][column] = value;,0.03704,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,304,    },0.03704,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,323,        return (data == null) ? 0 : data.length;,0.03704,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,329,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.03704,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,367,"        checkRowIndex(m, row);",0.03704,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,368,"        checkColumnIndex(m, column);",0.03704,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,369,    },0.03704,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,379,        if (row < 0 ||,0.03704,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,384,    },0.03704,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,394,        if (column < 0 || column >= m.getColumnDimension()) {,0.03704,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,398,    },0.03704,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,33,77,        return getKey();,0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,52,"    public Pair(Pair<? extends K, ? extends V> entry) {",0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,53,        key = entry.getKey();,0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,54,        value = entry.getValue();,0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,55,    },0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,72,        return value;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,84,        if (o == null) {,0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,85,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,87,        if (!(o instanceof Pair)) {,0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,88,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,90,"            Pair<?, ?> oP = (Pair<?, ?>) o;",0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,91,            return (key == null ?,0.0,0,-1,0
org/apache/commons/math3/util/Pair,33,107,        return (key == null ? 0 : key.hashCode()) ^,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,117,"        this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS);",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,118,    },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,329,            return;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,414,              coefficients[i] = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,418,              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,492,"        tableau.setEntry(row, column, value);",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,493,    },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,530,        return numDecisionVariables;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,563,        return tableau.getData();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,570,      if (this == other) {,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,571,        return true;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,574,      if (other instanceof SimplexTableau) {,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,575,          SimplexTableau rhs = (SimplexTableau) other;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,576,          return (restrictToNonNegative  == rhs.restrictToNonNegative) &&,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,586,      return false;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,592,        return Boolean.valueOf(restrictToNonNegative).hashCode() ^,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,609,        oos.defaultWriteObject();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,610,"        MatrixUtils.serializeRealMatrix(tableau, oos);",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,611,    },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,620,        ois.defaultReadObject();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,621,"        MatrixUtils.deserializeRealMatrix(this, ""tableau"", ois);",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexTableau,33,622,    },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,49,        return stringValue;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,61,            return LEQ;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/Relationship,33,63,            return EQ;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,98,"        setEntry(index, getEntry(index) + increment);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,99,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,162,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,163,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,173,        int d = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,174,        if (d != n) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,175,"            throw new DimensionMismatchException(d, n);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,177,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,186,        if (index < 0 ||,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,188,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,191,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,203,        RealVector result = v.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,204,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,206,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,207,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,208,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,209,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,210,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,223,        RealVector result = v.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,224,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,226,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,227,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,228,"            result.setEntry(index, e.getValue() - result.getEntry(index));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,229,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,230,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,241,        return copy().mapAddToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,252,        if (d != 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,253,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,255,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,274,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,275,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,276,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,278,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,279,            d += e.getValue() * v.getEntry(e.getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,281,        return d;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,292,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,293,        final double vNorm = v.getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,295,        if (norm == 0 ||,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,297,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,299,        return dotProduct(v) / (norm * vNorm);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,337,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,338,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,339,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,341,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,342,            final double diff = e.getValue() - v.getEntry(e.getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,343,            d += diff * diff;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,344,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,345,        return FastMath.sqrt(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,359,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,360,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,362,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,363,            final double value = e.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,364,            sum += value * value;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,365,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,366,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,380,        double norm = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,381,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,383,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,384,            norm += FastMath.abs(e.getValue());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,386,        return norm;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,400,        double norm = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,401,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,403,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,404,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,406,        return norm;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,421,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,422,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,423,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,425,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,426,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,428,        return d;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,446,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,447,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,448,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,450,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,451,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,453,        return d;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,463,        int minIndex    = -1;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,464,        double minValue = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,465,        Iterator<Entry> iterator = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,466,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,467,            final Entry entry = iterator.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,468,            if (entry.getValue() <= minValue) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,469,                minIndex = entry.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,470,                minValue = entry.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,472,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,473,        return minIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,483,        final int minIndex = getMinIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,484,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,494,        int maxIndex    = -1;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,495,        double maxValue = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,496,        Iterator<Entry> iterator = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,497,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,498,            final Entry entry = iterator.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,499,            if (entry.getValue() >= maxValue) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,500,                maxIndex = entry.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,501,                maxValue = entry.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,503,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,504,        return maxIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,514,        final int maxIndex = getMaxIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,515,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,538,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,549,        return copy().mapSubtractToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,560,        return mapAddToSelf(-d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,571,        return copy().mapDivideToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,582,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,593,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,594,"            product = new OpenMapRealMatrix(this.getDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,597,"            product = new Array2DRowRealMatrix(this.getDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,600,        Iterator<Entry> thisIt = sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,601,        Entry thisE = null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,602,        while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,603,            Iterator<Entry> otherIt = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,604,            Entry otherE = null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,605,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,606,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,609,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,611,        return product;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,631,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,632,        Entry e = null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,633,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,634,            e.setValue(value);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,636,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,646,        int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,647,        double[] values = new double[dim];,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,648,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,649,            values[i] = getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,651,        return values;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,662,        RealVector copy = copy();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,663,        copy.unitize();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,664,        return copy;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,675,        mapDivideToSelf(getNorm());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,676,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,690,        return new SparseEntryIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,700,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,701,        return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,738,        return copy().mapToSelf(function);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,755,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,757,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,758,            e.setValue(function.value(e.getValue()));,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,760,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,777,"        return copy().combineToSelf(a, b, y);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,793,        checkVectorDimensions(y);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,794,        for (int i = 0; i < getDimension(); i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,795,            final double xi = getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,796,            final double yi = y.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,797,"            setEntry(i, a * xi + b * yi);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,799,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,949,        return new RealVector() {,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,126,"                            final double[] rhsCoefficients, final double rhsConstant) {",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,127,        double[] sub = new double[lhsCoefficients.length];,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,128,        for (int i = 0; i < sub.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,129,            sub[i] = lhsCoefficients[i] - rhsCoefficients[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,131,"        this.coefficients = new ArrayRealVector(sub, false);",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,132,        this.relationship = relationship;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,133,        this.value        = rhsConstant - lhsConstant;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,134,    },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,157,"                            final RealVector rhsCoefficients, final double rhsConstant) {",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,158,        this.coefficients = lhsCoefficients.subtract(rhsCoefficients);,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,159,        this.relationship = relationship;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,160,        this.value        = rhsConstant - lhsConstant;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,161,    },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,191,      if (this == other) {,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,192,        return true;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,195,      if (other instanceof LinearConstraint) {,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,196,          LinearConstraint rhs = (LinearConstraint) other;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,197,          return (relationship == rhs.relationship) &&,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,201,      return false;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,207,        return relationship.hashCode() ^,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,218,        oos.defaultWriteObject();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,219,"        MatrixUtils.serializeRealVector(coefficients, oos);",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,220,    },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,229,        ois.defaultReadObject();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,230,"        MatrixUtils.deserializeRealVector(this, ""coefficients"", ois);",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearConstraint,33,231,    },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,101,        return coefficients.dotProduct(point) + constantTerm;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,108,      if (this == other) {,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,109,        return true;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,112,      if (other instanceof LinearObjectiveFunction) {,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,113,          LinearObjectiveFunction rhs = (LinearObjectiveFunction) other;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,114,          return (constantTerm == rhs.constantTerm) && coefficients.equals(rhs.coefficients);,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,117,      return false;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,123,        return Double.valueOf(constantTerm).hashCode() ^ coefficients.hashCode();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,132,        oos.defaultWriteObject();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,133,"        MatrixUtils.serializeRealVector(coefficients, oos);",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,134,    },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,143,        ois.defaultReadObject();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,144,"        MatrixUtils.deserializeRealVector(this, ""coefficients"", ois);",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/LinearObjectiveFunction,33,145,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,54,    public ArrayRealVector() {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,55,        data = new double[0];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,56,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,73,"    public ArrayRealVector(int size, double preset) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,74,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,75,"        Arrays.fill(data, preset);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,76,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,104,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,119,"    public ArrayRealVector(double[] d, int pos, int size) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,120,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,121,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,123,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,124,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,126,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,127,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,128,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,135,    public ArrayRealVector(Double[] d) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,136,        data = new double[d.length];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,137,        for (int i = 0; i < d.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,138,            data[i] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,140,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,152,"    public ArrayRealVector(Double[] d, int pos, int size) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,153,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,154,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,156,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,157,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,159,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,160,        for (int i = pos; i < pos + size; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,161,            data[i - pos] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,163,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,171,    public ArrayRealVector(RealVector v) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,172,        if (v == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,173,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,175,        data = new double[v.getDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,176,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,177,            data[i] = v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,179,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,188,"        this(v, true);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,189,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,207,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,208,        data = new double[v1.data.length + v2.data.length];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,209,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,210,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,211,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,218,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,219,        final int l1 = v1.data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,220,        final int l2 = v2.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,221,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,222,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,223,        for (int i = 0; i < l2; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,224,            data[l1 + i] = v2.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,226,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,233,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,234,        final int l1 = v1.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,235,        final int l2 = v2.data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,236,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,237,        for (int i = 0; i < l1; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,238,            data[i] = v1.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,240,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,241,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,248,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,249,        final int l1 = v1.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,250,        final int l2 = v2.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,251,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,252,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,253,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,254,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,261,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,262,        final int l1 = v1.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,263,        final int l2 = v2.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,264,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,265,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,266,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,267,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,274,"    public ArrayRealVector(double[] v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,275,        final int l1 = v1.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,276,        final int l2 = v2.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,277,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,278,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,279,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,280,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,291,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,292,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,293,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,294,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,295,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,296,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,297,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,298,                resultData[i] = data[i] + vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,300,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,302,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,303,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,304,            Iterator<Entry> it = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,306,            while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,307,                out[e.getIndex()] += e.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,309,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,327,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,328,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,329,            Iterator<Entry> it = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,331,            while(it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,332,                out[e.getIndex()] -= e.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,334,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,341,        return copy().mapToSelf(function);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,347,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,348,            data[i] = function.value(data[i]);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,350,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,356,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,357,            data[i] = data[i] + d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,359,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,365,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,366,            data[i] = data[i] - d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,368,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,383,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,384,            data[i] = data[i] / d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,386,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,392,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,393,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,394,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,395,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,396,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,397,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,398,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,399,                resultData[i] = data[i] * vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,401,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,403,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,404,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,405,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,406,                out[i] *= v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,408,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,415,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,416,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,417,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,418,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,419,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,420,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,421,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,422,                resultData[i] = data[i] / vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,424,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,426,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,427,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,428,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,429,                out[i] /= v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,431,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,442,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,457,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,458,            double dot = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,459,            Iterator<Entry> it = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,461,            while(it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,462,                dot += data[e.getIndex()] * e.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,464,            return dot;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,471,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,472,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,473,            sum += a * a;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,475,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,481,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,482,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,483,            sum += FastMath.abs(a);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,485,        return sum;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,491,        double max = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,492,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,493,"            max = FastMath.max(max, FastMath.abs(a));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,495,        return max;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,501,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,502,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,503,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,504,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,505,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,506,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,507,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,509,            return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,511,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,512,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,513,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,514,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,515,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,517,            return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,524,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,525,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,526,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,527,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,528,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,529,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,530,                sum += FastMath.abs(delta);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,532,            return sum;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,534,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,535,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,536,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,537,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,538,                sum += FastMath.abs(delta);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,540,            return sum;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,547,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,548,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,549,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,550,            double max = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,551,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,552,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,553,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,555,            return max;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,557,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,558,            double max = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,559,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,560,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,561,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,563,            return max;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,570,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,571,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,572,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,574,        return mapDivide(norm);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,580,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,581,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,582,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,584,        mapDivideToSelf(norm);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,585,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,590,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,596,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,597,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,598,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,599,            final int n = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,600,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,601,            for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,602,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,603,"                    out.setEntry(i, j, data[i] * vData[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,606,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,608,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,609,            final int n = v.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,610,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,611,            for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,612,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,613,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,616,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,636,"            return new ArrayRealVector(this, (ArrayRealVector) v);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,637,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,638,"            return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,649,"        return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,655,        final double[] out = new double[data.length + 1];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,656,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,657,        out[data.length] = in;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,658,"        return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,664,        ArrayRealVector out = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,666,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,670,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,667,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,668,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,669,            checkIndex(index + n - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,671,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,678,            data[index] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,681,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,679,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,680,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,682,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,687,        data[index] += increment;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,688,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,693,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,694,"            setSubVector(index, ((ArrayRealVector) v).data);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,697,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,698,                    data[i] = v.getEntry(i - index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,703,            },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,700,            } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,701,                checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,702,                checkIndex(index + v.getDimension() - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,705,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,717,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,721,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,718,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,719,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,720,            checkIndex(index + v.length - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,722,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,727,"        Arrays.fill(data, value);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,728,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,739,        return DEFAULT_FORMAT.format(this);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,751,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,752,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,764,"            throw new DimensionMismatchException(data.length, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,776,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,777,            if (Double.isNaN(v)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,778,                return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,781,        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,793,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,794,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,797,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,798,            if (Double.isInfinite(v)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,799,                return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,803,        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,822,        if (this == other) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,823,            return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,826,        if (other == null || !(other instanceof RealVector)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,827,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,830,        RealVector rhs = (RealVector) other;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,831,        if (data.length != rhs.getDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,832,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,835,        if (rhs.isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,836,            return this.isNaN();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,839,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,840,            if (data[i] != rhs.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,841,                return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,844,        return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,855,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,856,            return 9;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,858,        return MathUtils.hash(data);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,864,"        return copy().combineToSelf(a, b, y);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,870,        if (y instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,871,            final double[] yData = ((ArrayRealVector) y).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,872,            checkVectorDimensions(yData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,873,            for (int i = 0; i < this.data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,874,                data[i] = a * data[i] + b * yData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,876,        } else {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,877,            checkVectorDimensions(y);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,878,            for (int i = 0; i < this.data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,879,                data[i] = a * data[i] + b * y.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,33,882,        return this;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/NoFeasibleSolutionException,33,38,        super(LocalizedFormats.NO_FEASIBLE_SOLUTION);,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/NoFeasibleSolutionException,33,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,33,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,113,        return maxIterations;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,118,        return iterations;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/AbstractLinearOptimizer,33,128,            throw new MaxCountExceededException(maxIterations);,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/UnboundedSolutionException,33,38,        super(LocalizedFormats.UNBOUNDED_SOLUTION);,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/UnboundedSolutionException,33,39,    },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,100,                    minRatioPositions.add(i);,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,110,          return null;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,114,          for (Integer row : minRatioPositions) {,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,115,            for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,116,              int column = i + tableau.getArtificialVariableOffset();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,117,"              final double entry = tableau.getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,118,"              if (Precision.equals(entry, 1d, maxUlps) &&",0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,120,                return row;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,123,          },0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,142,            throw new UnboundedSolutionException();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,170,            return;,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,179,            throw new NoFeasibleSolutionException();,0.0,0,-1,0
org/apache/commons/math3/optimization/linear/SimplexSolver,33,199,            doIteration(tableau);,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,33,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,33,43,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,33,53,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,33,54,"        getContext().addMessage(specific, max, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,33,55,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,33,56,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,33,62,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,33,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,33,42,    },0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,33,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,33,51,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,33,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,33,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,33,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,33,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,33,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,33,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,33,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,33,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,33,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,33,59,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,33,60,        this.wrong = wrong.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,33,61,        this.expected = expected.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,33,62,    },0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,33,68,        return wrong.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,33,74,        return expected.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,33,82,        return wrong[index];,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,33,89,        return expected[index];,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,33,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,33,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,33,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,33,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,33,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,33,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,33,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,33,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,33,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,33,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,33,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,33,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,33,44,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,33,45,        dimension = expected;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,33,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,33,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,33,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,33,63,        return dimension;,0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,33,42,                              Class<?> type) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,33,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,33,45,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,33,53,                              int position) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,33,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,",0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,33,56,    },0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,33,37,        this(LocalizedFormats.NO_DATA);,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,33,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,33,45,        super(specific);,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,33,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,59,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,63,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,33,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,33,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,33,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,33,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,33,49,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,33,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,33,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,33,62,"        super(specific, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,33,63,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,33,64,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,33,65,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,33,71,        return lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,33,77,        return hi;,0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,33,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,33,41,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,33,53,"        super(specific, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,33,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,33,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,33,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,33,47,"        super(specific, 0, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,33,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,33,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,33,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,33,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,33,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,33,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,33,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,33,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,33,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3780,    private static class lnMant {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3794,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3796,        },0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,34,    private CompositeFormat() {},0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,43,        return getDefaultNumberFormat(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,68,"        parseNextCharacter(source, pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,69,        pos.setIndex(pos.getIndex() - 1);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,70,    },0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,81,         int index = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,82,         final int n = source.length();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,83,         char ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,85,         if (index < n) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,88,                 c = source.charAt(index++);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,89,             } while (Character.isWhitespace(c) && index < n);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,90,             pos.setIndex(index);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,92,             if (index < n) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,93,                 ret = c;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,97,         return ret;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,111,        Number ret = null;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,113,        StringBuilder sb = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,114,        sb.append('(');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,115,        sb.append(value);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,116,        sb.append(')');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,118,        final int n = sb.length();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,119,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,120,        final int endIndex = startIndex + n;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,121,        if (endIndex < source.length()) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,123,                ret = Double.valueOf(value);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,124,                pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,128,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,143,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,144,"        Number number = format.parse(source, pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,145,        final int endIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,148,        if (startIndex == endIndex) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,150,            final double[] special = {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,153,            for (int i = 0; i < special.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,154,"                number = parseNumber(source, special[i], pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,155,                if (number != null) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,156,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,161,        return number;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,175,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,176,        final int endIndex = startIndex + expected.length();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,177,        if ((startIndex >= source.length()) ||,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,181,            pos.setIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,182,            pos.setErrorIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,183,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,187,        pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,188,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,211,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,212,            toAppendTo.append('(');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,213,            toAppendTo.append(value);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,214,            toAppendTo.append(')');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,216,"            format.format(value, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,33,218,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,349,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,362,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,364,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,366,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,375,        return Math.sqrt(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,383,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,384,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,392,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,393,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,396,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,397,          return exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,400,      double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,401,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,402,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,404,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,409,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,410,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,411,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,414,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,415,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,416,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,417,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,422,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,425,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,426,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,427,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,428,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,429,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,430,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,432,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,433,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,434,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,442,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,443,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,444,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,452,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,453,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,456,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,457,          return -exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,460,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,461,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,464,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,465,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,466,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,471,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,472,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,473,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,478,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,479,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,480,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,483,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,484,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,485,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,486,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,491,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,493,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,494,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,497,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,498,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,499,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,500,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,501,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,502,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,504,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,505,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,506,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,508,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,509,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,515,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,516,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,518,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,519,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,520,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,521,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,523,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,524,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,525,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,530,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,534,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,535,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,536,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,537,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,538,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,539,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,541,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,542,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,545,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,546,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,549,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,557,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,559,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,560,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,569,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,570,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,573,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,574,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,577,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,578,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,581,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,582,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,583,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,587,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,588,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,596,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,597,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,598,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,599,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,600,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,603,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,604,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,605,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,606,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,607,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,609,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,610,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,611,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,614,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,615,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,616,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,617,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,623,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,625,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,627,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,628,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,630,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,632,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,638,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,639,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,642,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,643,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,644,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,645,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,646,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,648,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,649,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,650,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,653,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,654,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,655,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,656,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,662,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,664,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,666,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,669,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,670,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,673,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,689,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,690,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,691,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,692,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,696,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,699,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,700,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,702,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,704,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,711,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,719,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,720,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,721,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,722,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,726,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,729,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,730,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,732,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,734,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,741,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,783,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,807,"        return exp(x, 0.0, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,826,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,827,            intVal = (int) -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,829,            if (intVal > 746) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,830,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,831,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,832,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,834,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,837,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,840,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,844,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,847,            if (intVal == 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,850,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,854,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,857,            intVal++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,862,            intVal = -intVal;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,864,            intVal = (int) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,866,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,867,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,869,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,871,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,899,        double z = 0.04168701738764507;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,900,        z = z * epsilon + 0.1666666505023083;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,901,        z = z * epsilon + 0.5000000000042687;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,902,        z = z * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,903,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,910,        double tempA = intPartA * fracPartA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,917,        final double tempC = tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,919,        if (extra != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,922,            result = tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,925,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,927,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,931,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,939,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,955,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,956,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,957,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,962,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,963,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,970,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,972,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,973,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,974,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,978,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,982,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,983,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,984,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,986,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,987,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,988,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,990,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,995,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,999,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1000,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1002,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1003,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1004,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1005,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1007,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1008,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1009,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1010,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1013,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1015,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1017,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1019,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1021,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1023,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1025,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1029,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1030,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1031,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1033,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1035,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1036,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1038,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1040,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1043,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1045,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1046,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1048,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1050,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1051,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1053,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1054,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1055,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1056,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1058,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1059,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1060,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1073,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1077,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1078,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1081,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1082,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1083,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1086,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1096,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1106,        if (x==0) { // Handle special case of +0/-0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1109,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1113,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1114,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1115,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1118,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1123,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1124,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1128,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1132,        int exp = (int)(bits >> 52)-1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1136,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1146,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1148,                exp--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1149,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1154,        if (exp == -1 || exp == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1160,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1161,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1162,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1163,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1164,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1165,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1166,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1173,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1174,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1176,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1177,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1178,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1184,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1185,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1186,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1190,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1191,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1193,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1194,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1195,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1197,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1215,        double lnza = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1216,        double lnzb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1218,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1220,            double tmp = epsilon * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1221,            double aa = epsilon + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1222,            double ab = epsilon - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1223,            double xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1224,            double xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1227,            double numer = bits & 0x3ffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1229,            aa = numer - xa*denom - xb * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1230,            xb += aa / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1238,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1239,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1241,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1242,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1243,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1249,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1250,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1251,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1255,            aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1256,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1264,            lnza = aa + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1265,            lnzb = -(lnza - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1266,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1269,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1270,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1272,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1273,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1274,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1275,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1292,        double a = LN_2_A*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1293,        double b = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1294,        double c = a+lnm[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1295,        double d = -(c-a-lnm[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1296,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1297,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1299,        c = a + lnza;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1300,        d = -(c - a - lnza);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1301,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1302,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1304,        c = a + LN_2_B*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1305,        d = -(c - a - LN_2_B*exp);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1306,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1307,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1309,        c = a + lnm[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1310,        d = -(c - a - lnm[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1311,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1312,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1314,        c = a + lnzb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1315,        d = -(c - a - lnzb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1316,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1317,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1319,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1320,            hiPrec[0] = a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1321,            hiPrec[1] = b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1324,        return a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1333,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1334,            return x/0.0;   // -Infinity,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1338,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1341,        if (x>1e-6 || x<-1e-6) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1342,            double xpa = 1.0 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1343,            double xpb = -(xpa - 1.0 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1345,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1347,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1349,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1354,            double fx1 = xpb/xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1356,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1357,            epsilon = epsilon * fx1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1359,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1363,        double y = x * F_1_3 - F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1364,        y = y * x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1365,        y = y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1367,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1375,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1377,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1379,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1383,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1386,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1387,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1409,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1420,        final double lns[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1422,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1423,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1426,        if (x != x) { // X is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1427,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1431,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1432,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1433,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1435,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1438,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1442,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1446,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1447,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1449,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1450,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1453,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1456,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1457,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1458,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1460,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1461,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1463,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1467,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1468,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1469,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1472,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1473,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1475,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1479,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1480,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1481,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1484,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1485,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1486,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1487,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1490,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1493,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1494,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1495,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1496,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1499,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1503,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1505,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1506,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1509,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1510,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1512,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1517,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1520,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1523,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1527,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1534,        if (y < 8e298 && y > -8e298) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1535,            double tmp1 = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1536,            ya = y + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1537,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1538,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1542,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1546,"        final double lores = log(x, lns);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1548,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1551,        double lna = lns[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1552,        double lnb = lns[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1555,        double tmp1 = lna * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1556,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1557,        lnb += lna - tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1558,        lna = tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1561,        final double aa = lna * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1564,        lna = aa+ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1565,        lnb = -(lna - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1567,        double z = 1.0 / 120.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1568,        z = z * lnb + (1.0 / 24.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1569,        z = z * lnb + (1.0 / 6.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1570,        z = z * lnb + 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1571,        z = z * lnb + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1572,        z = z * lnb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1574,"        final double result = exp(lna, z, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1576,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1588,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1590,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1591,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1592,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1593,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1596,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1598,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1608,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1610,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1611,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1612,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1613,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1614,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1616,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1627,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1631,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1632,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1633,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1634,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1637,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1638,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1639,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1640,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1643,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1644,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1645,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1646,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1672,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1673,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1675,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1676,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1677,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1678,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1679,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1681,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1682,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1683,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1684,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1685,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1729,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1732,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1733,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1734,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1735,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1738,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1740,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1751,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1752,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1754,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1755,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1756,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1758,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1775,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1776,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1777,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1778,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1781,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1782,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1783,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1784,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1787,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1788,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1789,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1790,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1815,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1816,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1819,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1820,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1821,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1822,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1823,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1825,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1826,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1827,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1828,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1829,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1834,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1835,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1839,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1841,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1842,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1843,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1844,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1845,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1847,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1848,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1849,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1850,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1851,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1856,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1857,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1859,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1861,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1876,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1879,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1880,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1881,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1883,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1884,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1885,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1889,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1892,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1895,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1896,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1897,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1900,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1903,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1920,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1924,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1925,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1928,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1929,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1935,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1936,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1938,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1945,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1946,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1950,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1951,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1953,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1954,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1956,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1957,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1958,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1959,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1961,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1962,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1969,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1971,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1975,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1977,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1978,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1983,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1985,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1989,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1990,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1991,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1992,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1993,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1996,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2000,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2003,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2005,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2009,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2010,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2012,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2013,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2014,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2016,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2028,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2031,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2032,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2033,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2036,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2037,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2039,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2042,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2043,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2044,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2045,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2047,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2048,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2050,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2051,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2055,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2057,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2061,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2063,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2064,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2069,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2071,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2075,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2077,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2078,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2079,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2082,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2086,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2089,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2091,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2095,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2096,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2097,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2099,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2100,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2101,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2104,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2108,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2111,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2113,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2120,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2121,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2124,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2125,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2126,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2127,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2135,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2136,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2138,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2141,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2142,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2143,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2144,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2148,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2149,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2150,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2151,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2153,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2157,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2161,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2165,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2166,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2167,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2168,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2169,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2170,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2175,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2181,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2182,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2183,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2185,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2186,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2187,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2188,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2190,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2191,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2192,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2193,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2195,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2196,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2202,                k--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2203,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2204,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2205,            xa = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2206,            xb = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2209,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2210,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2213,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2215,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2217,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2219,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2221,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2223,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2233,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2236,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2237,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2238,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2242,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2246,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2247,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2251,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2252,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2253,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2254,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2255,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2256,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2261,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2267,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2268,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2269,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2271,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2272,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2273,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2274,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2276,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2277,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2278,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2279,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2281,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2282,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2288,                k--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2289,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2290,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2291,            xa = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2292,            xb = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2298,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2300,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2302,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2304,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2306,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2308,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2318,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2319,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2322,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2323,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2324,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2325,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2329,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2330,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2331,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2332,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2334,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2338,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2342,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2343,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2347,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2348,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2349,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2350,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2351,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2352,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2357,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2363,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2364,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2365,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2367,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2368,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2369,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2370,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2372,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2373,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2374,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2375,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2377,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2378,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2384,                k--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2385,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2386,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2387,            xa = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2388,            xb = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2391,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2393,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2394,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2396,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2397,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2398,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2400,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2401,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2402,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2403,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2407,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2408,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2410,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2413,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2414,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2417,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2426,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2436,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2443,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2445,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2446,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2447,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2450,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2451,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2455,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2458,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2463,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2465,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2466,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2467,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2470,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2471,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2472,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2473,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2474,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2477,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2482,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2483,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2484,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2486,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2487,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2489,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2490,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2491,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2493,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2494,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2496,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2497,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2498,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2500,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2501,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2502,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2507,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2508,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2512,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2513,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2516,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2527,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2528,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2529,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2530,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2531,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2532,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2533,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2536,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2538,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2539,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2540,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2543,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2546,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2547,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2548,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2549,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2550,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2552,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2553,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2555,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2557,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2558,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2560,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2561,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2562,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2564,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2565,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2569,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2570,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2573,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2583,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2584,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2587,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2588,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2589,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2590,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2592,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2593,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2594,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2596,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2600,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2601,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2602,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2604,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2607,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2613,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2614,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2615,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2618,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2619,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2622,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2625,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2626,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2627,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2630,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2631,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2634,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2637,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2638,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2639,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2642,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2643,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2647,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2649,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2650,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2653,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2654,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2660,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2661,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2662,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2665,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2666,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2671,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2672,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2673,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2676,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2677,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2680,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2681,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2685,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2686,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2687,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2689,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2690,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2694,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2696,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2704,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2705,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2708,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2709,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2712,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2713,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2716,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2717,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2720,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2721,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2727,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2728,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2729,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2732,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2733,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2736,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2737,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2739,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2740,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2742,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2743,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2744,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2748,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2749,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2750,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2751,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2754,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2757,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2760,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2761,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2762,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2763,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2765,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2766,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2768,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2769,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2770,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2772,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2780,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2781,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2784,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2785,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2788,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2789,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2792,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2793,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2796,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2797,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2803,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2804,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2805,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2808,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2809,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2812,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2813,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2815,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2816,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2818,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2819,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2820,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2823,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2824,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2825,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2826,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2832,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2833,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2834,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2837,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2840,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2841,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2844,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2845,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2847,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2850,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2851,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2852,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2854,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2863,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2864,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2865,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2867,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2868,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2869,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2873,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2874,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2875,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2876,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2879,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2881,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2885,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2888,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2892,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2895,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2896,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2897,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2898,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2899,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2901,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2906,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2907,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2908,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2911,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2912,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2913,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2915,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2916,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2917,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2918,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2919,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2920,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2922,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2923,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2925,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2926,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2927,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2929,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2932,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2934,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2935,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2938,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2953,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2954,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2956,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2957,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2959,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2960,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2961,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2963,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2973,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2974,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2978,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2979,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2981,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2982,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2984,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,2993,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3029,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3030,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3032,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3041,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3042,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3056,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3062,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3064,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3065,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3067,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3068,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3072,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3073,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3075,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3078,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3080,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3082,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3084,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3085,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3089,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3092,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3093,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3094,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3096,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3098,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3102,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3106,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3109,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3110,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3111,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3113,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3114,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3116,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3117,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3122,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3140,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3145,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3146,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3148,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3149,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3151,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3156,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3157,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3158,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3159,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3162,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3164,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3166,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3168,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3169,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3173,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3177,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3178,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3180,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3182,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3186,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3190,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3193,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3194,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3195,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3197,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3198,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3200,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3201,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3206,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3207,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3209,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3249,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3250,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3251,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3252,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3253,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3255,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3261,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3262,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3263,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3264,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3306,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3307,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3308,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3309,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3310,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3311,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3317,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3318,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3319,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3322,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3334,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3335,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3339,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3342,        y = (long) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3343,        if (x < 0 && y != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3344,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3347,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3348,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3351,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3361,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3362,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3365,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3366,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3367,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3370,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3372,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3373,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3376,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3384,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3385,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3387,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3388,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3389,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3391,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3393,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3394,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3398,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3399,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3407,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3415,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3424,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3433,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3442,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3443,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3445,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3446,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3449,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3450,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3454,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3455,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3456,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3458,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3467,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3468,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3470,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3471,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3474,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3475,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3479,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3480,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3481,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3483,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3492,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3501,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3510,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3511,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3513,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3514,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3517,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3518,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3522,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3523,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3524,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3526,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3535,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3536,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3538,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3539,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3542,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3543,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3547,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3548,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3549,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3551,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3570,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3572,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3575,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3576,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3577,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3579,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3580,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3582,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3586,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3589,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3590,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3596,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3636,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3637,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3639,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3641,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3653,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3654,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3655,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3656,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3658,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3671,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3684,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3693,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3701,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3702,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3703,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3705,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3708,    private static class ExpIntTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3740,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3741,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3743,        },0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,76,    private Precision() {},0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,132,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,145,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,159,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,174,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,196,        int xInt = Float.floatToIntBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,197,        int yInt = Float.floatToIntBits(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,200,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,201,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,203,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,204,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,207,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,209,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,225,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,237,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,250,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,280,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,330,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,343,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,365,            return (new BigDecimal,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,369,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,370,            if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,371,                return x;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,373,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,388,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,403,"        final float sign = FastMath.copySign(1f, x);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,404,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,405,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,423,        switch (roundingMethod) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,425,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,426,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,428,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,430,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,432,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,433,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,435,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,436,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,438,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,440,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,442,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,443,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,444,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,445,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,447,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,449,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,452,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,453,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,454,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,455,            } else if (fraction < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,456,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,459,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,461,                    unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,463,                    unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,466,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,469,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,470,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,471,            if (fraction >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,472,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,474,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,476,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,479,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,480,                throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,484,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,485,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,487,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,498,        return unscaled;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,33,518,        return x + originalDelta - x;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,47,    private MathUtils() {},0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,57,        return new Double(value).hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,68,        return Arrays.hashCode(value);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,113,        final double p = FastMath.abs(period);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,128,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,130,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,131,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,133,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,135,            return (byte) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,150,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,152,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,153,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,155,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,157,            return (short) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,172,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,174,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,175,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,177,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,179,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,194,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,196,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,197,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,199,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,201,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,212,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,213,            throw new NotFiniteNumberException(x);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,215,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,225,        for (int i = 0; i < val.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,226,            final double x = val[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,227,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,231,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,244,        if (o == null) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,245,"            throw new NullArgumentException(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,247,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,33,258,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3747,    private static class ExpFracTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,33,3776,        },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,55,            throw new NotStrictlyPositiveException(rowDimension);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,58,            throw new NotStrictlyPositiveException(columnDimension);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,71,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,73,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,74,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,76,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,77,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,82,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,88,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,90,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,91,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,93,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,94,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,95,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,99,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,104,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,105,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,107,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,108,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,109,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,113,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,118,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,119,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,121,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,122,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,123,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,127,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,133,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,135,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,136,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,137,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,138,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,139,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,140,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,141,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,142,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,145,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,149,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,154,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,159,        if (p < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,160,"            throw new IllegalArgumentException(""p must be >= 0"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,163,        if (!isSquare()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,167,        if (p == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,171,        if (p == 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,172,            return this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,175,        final int power = p - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,184,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,185,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,186,        int maxI = -1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,189,            if (binaryRepresentation[i] == '1') {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,190,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,191,                nonZeroPositions.add(pos);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,194,                if (maxI == -1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,195,                    maxI = pos;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,200,        RealMatrix[] results = new RealMatrix[maxI + 1];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,201,        results[0] = this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,203,        for (int i = 1; i <= maxI; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,204,            results[i] = results[i-1].multiply(results[i-1]);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,207,        RealMatrix result = this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,209,        for (Integer i : nonZeroPositions) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,210,            result = result.multiply(results[i]);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,211,        },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,213,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,218,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,220,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,221,            final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,222,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,223,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,227,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,297,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,299,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,301,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,302,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,303,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,307,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,313,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,316,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,328,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,336,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,337,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,338,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,340,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,369,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,374,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,375,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,377,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,382,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,383,            final double[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,384,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,385,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,388,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,393,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,394,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,395,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,396,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,399,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,400,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,401,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,404,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,405,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,406,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,410,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,411,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,412,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,413,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,415,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,416,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,417,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,420,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,424,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,425,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,426,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,427,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,428,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,431,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,436,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,437,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,438,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,440,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,444,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,445,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,447,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,451,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,452,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,453,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,454,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,455,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,458,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,463,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,464,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,465,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,467,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,471,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,472,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,474,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,486,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,496,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,501,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,502,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,503,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,504,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,507,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,508,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,510,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,526,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,527,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,528,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,529,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,531,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,532,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,534,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,538,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,539,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,540,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,541,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,542,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,545,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,550,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,551,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,552,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,553,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,555,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,556,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,558,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,568,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,569,"        setEntry(row, column, getEntry(row, column) + increment);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,570,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,574,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,575,"        setEntry(row, column, getEntry(row, column) * factor);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,576,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,580,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,581,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,582,"        final RealMatrix out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,583,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,593,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,598,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,621,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,622,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,623,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,624,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,626,        double trace = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,627,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,628,"            trace += getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,630,        return trace;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,635,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,636,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,637,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,638,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,641,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,642,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,643,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,644,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,645,"                sum += getEntry(row, i) * v[i];",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,647,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,650,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,657,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,658,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,659,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,660,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,661,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,662,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,665,            final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,666,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,667,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,668,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,669,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,671,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,674,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,681,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,682,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,683,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,684,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,687,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,688,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,689,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,690,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,691,"                sum += getEntry(i, col) * v[i];",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,693,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,696,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,702,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,703,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,705,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,706,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,707,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,708,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,711,            final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,712,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,713,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,714,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,715,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,717,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,720,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,726,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,727,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,728,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,729,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,730,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,731,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,732,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,733,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,736,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,741,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,742,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,743,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,744,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,745,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,746,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,749,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,756,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,757,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,759,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,760,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,761,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,762,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,763,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,766,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,773,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,774,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,776,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,777,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,778,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,781,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,786,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,787,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,788,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,789,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,790,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,791,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,792,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,793,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,796,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,801,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,802,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,803,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,804,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,805,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,806,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,809,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,816,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,817,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,819,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,820,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,821,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,822,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,823,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,826,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,833,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,834,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,836,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,837,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,838,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,841,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,846,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,851,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,858,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,865,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,874,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,875,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,876,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,877,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,878,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,879,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,881,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,882,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,883,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,885,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,886,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,887,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,888,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,890,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,892,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,895,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,896,        return res.toString();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,909,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,910,            return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,912,        if (object instanceof RealMatrix == false) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,913,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,915,        RealMatrix m = (RealMatrix) object;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,916,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,917,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,918,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,919,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,921,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,922,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,923,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,924,                    return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,928,        return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,938,        int ret = 7;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,939,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,940,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,941,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,942,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,943,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,944,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,945,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,949,        return ret;,0.0,0,-1,0
org/apache/commons/math3/linear/RealLinearOperator,33,94,        throw new UnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealLinearOperator,33,107,        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,358,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,359,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,360,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,365,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,366,            },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,810,        public Entry() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,811,            setIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,812,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,820,            return getEntry(getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,829,"            setEntry(getIndex(), value);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,830,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,838,            return index;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,847,            this.index = index;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,848,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,873,        protected SparseEntryIterator() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,874,            dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,875,            current = new Entry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,876,            next = new Entry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,877,            if (next.getValue() == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,878,                advance(next);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,880,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,888,            if (e == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,889,                return;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,892,                e.setIndex(e.getIndex() + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,893,            } while (e.getIndex() < dim && e.getValue() == 0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,894,            if (e.getIndex() >= dim) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,895,                e.setIndex(-1);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,897,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,901,            return next.getIndex() >= 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,906,            int index = next.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,907,            if (index < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,908,                throw new NoSuchElementException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,910,            current.setIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,911,            advance(next);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,912,            return current;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,917,            throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,864,    protected class SparseEntryIterator implements Iterator<Entry> {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,531,            super(Fraction.ZERO);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,532,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,538,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,539,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,544,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,545,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,553,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,526,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,96,"        super(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,97,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,98,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,101,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,102,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,105,"        blocks = createBlocksLayout(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,106,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,122,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,123,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,142,"        super(extractField(blockData), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,143,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,144,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,147,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,148,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,150,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,152,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,155,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,158,        int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,159,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,160,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,161,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,162,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,163,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,166,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,167,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,171,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,199,        final int rows         = rawData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,200,        final int columns      = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,201,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,202,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,205,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,206,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,207,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,208,"                throw new DimensionMismatchException(columns, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,213,        final Field<T> field = extractField(rawData);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,214,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,215,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,216,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,217,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,218,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,219,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,220,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,221,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,222,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,223,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,226,"                final T[] block = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,227,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,230,                int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,231,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,232,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,233,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,236,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,240,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,260,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,261,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,263,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,264,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,265,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,266,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,267,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,268,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,269,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,270,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,271,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,272,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,273,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,274,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,278,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,284,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,292,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,295,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,296,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,299,        return copied;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,306,            return add((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,307,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,310,            checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,312,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,315,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,316,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,317,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,320,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,321,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,322,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,323,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,324,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,325,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,326,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,327,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,328,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,329,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,330,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,335,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,340,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,354,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,356,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,359,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,360,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,361,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,362,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,363,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,364,                outBlock[k] = tBlock[k].add(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,368,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,375,            return subtract((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,376,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,379,            checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,381,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,384,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,385,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,386,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,389,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,390,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,391,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,392,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,393,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,394,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,395,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,396,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,397,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,398,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,399,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,404,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,409,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,422,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,424,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,427,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,428,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,429,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,430,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,431,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,432,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,436,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,442,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,445,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,446,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,447,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,448,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,449,                outBlock[k] = tBlock[k].add(d);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,453,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,460,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,463,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,464,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,465,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,466,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,467,                outBlock[k] = tBlock[k].multiply(d);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,471,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,478,            return multiply((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,479,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,482,            checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,484,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,485,            final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,488,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,489,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,491,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,492,"                final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,494,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,496,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,497,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,500,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,503,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,504,                        final int kWidth      = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,505,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,506,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,507,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,508,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,509,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,510,                            final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,511,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,512,                                T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,513,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,514,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,515,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,516,                                    ++r;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,518,                                outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,519,                                ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,525,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,530,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,545,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,547,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,548,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,551,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,552,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,554,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,555,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,557,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,558,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,559,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,560,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,561,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,564,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,567,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,568,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,569,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,570,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,571,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,572,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,573,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,574,                        final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,575,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,576,                            T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,577,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,578,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,579,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,580,                                sum = sum.,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,585,                                l += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,586,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,588,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,589,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,590,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,592,                            outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,593,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,599,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,603,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,610,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,611,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,613,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,614,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,615,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,616,            int regularPos   = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,617,            int lastPos      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,618,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,619,                final T[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,620,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,621,                int dataPos    = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,622,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,623,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,624,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,626,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,627,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,628,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,632,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,640,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,643,        final BlockFieldMatrix<T> out =,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,647,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,648,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,649,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,650,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,653,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,654,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,655,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,656,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,657,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,658,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,661,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,662,                final T[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,663,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,664,                final int      width    = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,666,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,667,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,668,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,670,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,672,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,673,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,677,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,681,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,685,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,689,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,691,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,695,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,702,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,704,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,705,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,709,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,713,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,715,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,721,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,723,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,726,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,749,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,750,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,751,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,752,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,753,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,754,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,755,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,757,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,763,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,764,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,765,        if (refLength == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,766,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,768,        final int endRow    = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,769,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,770,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,771,        for (final T[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,772,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,773,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,778,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,779,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,780,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,781,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,784,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,785,            final int iHeight  = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,786,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,787,"            final int iStart   = FastMath.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,788,"            final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,790,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,791,                final int jWidth      = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,792,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,793,"                final int jStart      = FastMath.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,794,"                final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,795,                final int jLength     = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,798,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,799,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,800,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,807,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,812,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,813,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,816,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,817,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,818,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,819,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,820,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,821,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,822,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,823,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,824,            final int available  = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,825,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,826,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,827,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,828,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,829,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,831,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,832,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,836,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,843,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,846,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,844,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,845,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,847,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,862,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,863,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,864,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,866,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,872,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,873,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,874,        int mBlockIndex  = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,875,        int mIndex       = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,876,        T[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,877,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,878,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,879,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,880,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,881,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,882,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,883,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,884,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,885,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,887,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,888,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,891,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,896,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,897,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,900,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,901,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,902,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,903,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,904,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,905,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,906,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,907,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,908,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,909,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,910,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,911,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,912,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,914,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,918,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,925,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,928,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,926,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,927,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,929,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,944,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,945,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,946,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,948,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,954,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,955,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,956,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,957,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,958,        int mIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,959,        T[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,960,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,961,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,962,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,963,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,964,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,965,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,966,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,968,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,971,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,976,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,977,"        final T[] outData = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,980,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,981,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,982,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,983,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,984,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,985,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,986,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,987,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,990,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,997,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1000,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,998,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,999,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1001,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1006,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1007,"        final T[] outData = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1010,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1011,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1012,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1013,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1014,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1015,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1016,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1017,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1018,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1022,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1029,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1032,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1030,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1031,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1033,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1038,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1039,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1042,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1043,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1044,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1045,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1046,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1047,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1048,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1049,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1052,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1058,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1059,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1060,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1061,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1065,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1066,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1067,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1068,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1069,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1070,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1071,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1072,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1074,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1079,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1080,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1083,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1084,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1085,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1086,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1087,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1088,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1089,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1090,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1091,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1095,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1101,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1102,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1103,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1104,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1108,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1109,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1110,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1111,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1112,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1113,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1114,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1115,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1116,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1119,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1124,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1125,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1127,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1128,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1129,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1132,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1138,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1139,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1141,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1142,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1143,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1146,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1147,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1152,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1153,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1155,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1156,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1157,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1159,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1161,        blockIJ[k] = blockIJ[k].add(increment);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1162,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1167,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1168,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1170,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1171,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1172,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1174,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1176,        blockIJ[k] = blockIJ[k].multiply(factor);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1177,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1182,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1183,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1184,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1187,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1188,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1189,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1192,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1193,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1194,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1195,"                final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1196,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1197,"                final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1198,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1199,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1200,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1201,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1202,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1203,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1204,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1205,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1210,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1215,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1221,        return rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1227,        return columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1233,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1234,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1236,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1237,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1240,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1241,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1242,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1243,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1244,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1245,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1246,"                final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1247,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1248,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1249,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1250,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1251,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1252,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1257,                        k += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1258,                        q += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1260,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1261,                        sum = sum.add(block[k++].multiply(v[q++]));,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1263,                    out[p] = out[p].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1268,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1275,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1276,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1278,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1279,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1282,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1283,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1284,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1285,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1286,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1287,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1288,"            final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1289,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1290,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1291,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1292,"                final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1293,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1294,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1295,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1296,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1297,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1298,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1303,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1304,                        p += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1306,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1307,                        sum = sum.add(block[k].multiply(v[p++]));,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1308,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1310,                    out[q] = out[q].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1315,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1321,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1322,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1323,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1324,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1325,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1326,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1327,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1328,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1329,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1330,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1331,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1332,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1333,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1334,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1339,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1345,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1346,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1347,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1348,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1349,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1350,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1351,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1352,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1353,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1354,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1355,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1356,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1357,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1358,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1363,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1371,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1372,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1373,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1374,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1375,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1376,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1377,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1378,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1379,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1380,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1381,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1382,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1383,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1384,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1385,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1386,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1387,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1392,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1400,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1401,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1402,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1403,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1404,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1405,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1406,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1407,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1408,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1409,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1410,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1411,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1412,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1413,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1414,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1415,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1416,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1421,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1427,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1428,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1429,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1430,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1431,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1432,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1433,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1434,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1435,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1436,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1437,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1438,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1439,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1440,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1443,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1446,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1452,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1453,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1454,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1455,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1456,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1457,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1458,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1459,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1460,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1461,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1462,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1463,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1464,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1465,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1468,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1471,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1479,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1480,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1481,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1482,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1483,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1484,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1485,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1486,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1487,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1488,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1489,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1490,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1491,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1492,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1493,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1494,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1495,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1500,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1508,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1509,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1510,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1511,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1512,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1513,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1514,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1515,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1516,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1517,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1518,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1519,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1520,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1521,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1522,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1523,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1524,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1529,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1538,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,33,1547,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,52,    protected AbstractFieldMatrix() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,53,        field = null;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,54,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,60,    protected AbstractFieldMatrix(final Field<T> field) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,61,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,62,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,75,                                  final int columnDimension) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,76,        if (rowDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,80,        if (columnDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,81,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,84,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,85,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,97,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,98,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,100,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,101,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,103,        if (d[0].length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,104,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,106,        return d[0][0].getField();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,118,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,119,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,121,        return d[0].getField();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,139,        if (columns < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,140,"            T[] dummyRow = (T[]) Array.newInstance(field.getRuntimeClass(), 0);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,141,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,143,        T[][] array =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,145,        for (int i = 0; i < array.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,146,"            Arrays.fill(array[i], field.getZero());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,148,        return array;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,163,"        T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,164,"        Arrays.fill(array, field.getZero());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,165,        return array;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,170,        return field;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,182,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,184,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,185,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,186,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,187,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,188,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,189,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,193,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,199,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,201,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,202,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,203,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,204,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,205,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,206,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,210,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,216,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,217,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,218,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,219,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,220,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,221,"                out.setEntry(row, col, getEntry(row, col).add(d));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,225,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,230,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,231,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,232,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,233,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,234,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,235,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,239,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,245,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,247,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,248,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,249,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,250,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,251,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,252,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,253,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,254,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,255,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,257,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,261,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,266,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,271,        if (p < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,272,"            throw new IllegalArgumentException(""p must be >= 0"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,275,        if (!isSquare()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,276,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,279,        if (p == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,280,"            return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,283,        if (p == 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,284,            return this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,287,        final int power = p - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,296,        final char[] binaryRepresentation = Integer.toBinaryString(power),0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,298,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,300,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,301,            if (binaryRepresentation[i] == '1') {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,302,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,303,                nonZeroPositions.add(pos);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,307,        ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,310,"        results.add(0, this.copy());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,312,        for (int i = 1; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,313,            final FieldMatrix<T> s = results.get(i - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,314,            final FieldMatrix<T> r = s.multiply(s);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,315,"            results.add(i, r);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,318,        FieldMatrix<T> result = this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,320,        for (Integer i : nonZeroPositions) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,321,            result = result.multiply(results.get(i));,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,322,        },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,324,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,329,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,331,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,332,            final T[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,333,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,334,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,338,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,344,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,346,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,348,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,349,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,350,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,354,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,363,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,366,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,368,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,378,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,387,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,388,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,389,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,390,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,391,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,398,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,423,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,428,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,429,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,431,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,438,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,439,            final T[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,440,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,441,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,445,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,449,        if (subMatrix == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,450,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,452,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,453,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,454,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,457,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,458,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,459,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,462,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,463,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,464,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,468,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,469,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,470,        checkRowIndex(nRows + row - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,471,        checkColumnIndex(nCols + column - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,473,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,474,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,475,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,478,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,482,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,483,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,484,"        final FieldMatrix<T> out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,485,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,486,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,489,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,495,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,496,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,497,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,499,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,503,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,504,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,507,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,512,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,513,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,514,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,515,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,516,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,519,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,525,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,526,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,527,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,529,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,533,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,534,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,537,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,541,"        return new ArrayFieldVector<T>(field, getRow(row), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,546,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,547,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,548,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,549,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,552,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,553,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,556,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,560,"        return new ArrayFieldVector<T>(field, getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,565,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,566,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,567,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,568,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,571,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,572,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,575,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,579,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,580,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,581,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,582,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,583,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,586,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,592,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,593,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,594,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,595,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,597,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,598,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,601,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,605,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,606,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,607,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,608,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,609,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,612,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,618,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,619,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,620,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,621,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,623,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,624,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,626,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,642,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,643,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,644,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,645,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,653,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,658,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,669,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,670,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,671,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,672,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,674,        T trace = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,675,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,676,"            trace = trace.add(getEntry(i, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,678,        return trace;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,684,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,685,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,686,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,687,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,690,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,691,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,692,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,693,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,694,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,696,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,699,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,705,"            return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,706,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,707,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,708,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,709,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,710,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,713,"            final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,714,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,715,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,716,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,717,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,719,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,722,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,729,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,730,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,731,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,732,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,735,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,736,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,737,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,738,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,739,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,741,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,744,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,750,"            return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,751,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,752,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,753,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,754,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,755,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,758,"            final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,759,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,760,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,761,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,762,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,764,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,767,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,773,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,774,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,775,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,776,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,777,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,778,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,779,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,780,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,783,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,788,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,789,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,790,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,791,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,792,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,793,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,796,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,803,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,804,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,806,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,807,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,808,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,809,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,810,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,813,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,820,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,821,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,823,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,824,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,825,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,828,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,833,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,834,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,835,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,836,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,837,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,838,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,839,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,840,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,843,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,848,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,849,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,850,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,851,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,852,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,853,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,856,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,863,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,864,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,866,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,867,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,868,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,869,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,870,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,873,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,880,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,881,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,883,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,884,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,885,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,888,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,893,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,898,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,905,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,912,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,921,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,922,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,923,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,924,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,925,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,926,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,928,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,929,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,930,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,932,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,933,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,934,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,935,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,937,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,939,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,942,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,943,        return res.toString();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,956,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,957,            return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,959,        if (object instanceof FieldMatrix<?> == false) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,960,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,962,        FieldMatrix<?> m = (FieldMatrix<?>) object;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,963,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,964,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,965,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,966,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,968,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,969,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,970,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,971,                    return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,975,        return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,985,        int ret = 322562;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,986,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,987,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,988,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,989,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,990,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,991,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,992,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,995,        return ret;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1005,        if (row < 0 || row >= getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1006,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1009,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1018,        if (column < 0 || column >= getColumnDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1019,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1022,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1038,        checkRowIndex(startRow);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1039,        checkRowIndex(endRow);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1040,        if (endRow < startRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1041,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1045,        checkColumnIndex(startColumn);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1046,        checkColumnIndex(endColumn);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1047,        if (endColumn < startColumn) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1048,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1051,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1064,        if (selectedRows == null ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1066,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1068,        if (selectedRows.length == 0 ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1070,            throw new NoDataException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1073,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1074,            checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1076,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1077,            checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1079,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1089,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1091,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1094,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1104,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1106,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1109,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1119,        if (getColumnDimension() != m.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1120,"            throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,1122,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,33,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,33,48,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,33,54,        return getWrongDimension(0);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,33,60,        return getExpectedDimension(0);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,33,66,        return getWrongDimension(1);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,33,72,        return getExpectedDimension(1);,0.0,0,-1,0
org/apache/commons/math3/linear/NonSquareMatrixException,33,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/linear/NonSquareMatrixException,33,41,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,73,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,75,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,93,"        this(prefix, suffix, separator,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,95,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,122,        return NumberFormat.getAvailableLocales();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,130,        return prefix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,138,        return suffix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,146,        return separator;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,154,        return format;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,181,"        return format(v, new StringBuffer(), new FieldPosition(0)).toString();",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,195,        pos.setBeginIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,196,        pos.setEndIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,199,        toAppendTo.append(prefix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,202,        for (int i = 0; i < vector.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,203,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,204,                toAppendTo.append(separator);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,206,"            CompositeFormat.formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,210,        toAppendTo.append(suffix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,212,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,224,        final ParsePosition parsePosition = new ParsePosition(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,225,"        final ArrayRealVector result = parse(source, parsePosition);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,226,        if (parsePosition.getIndex() == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,227,"            throw new MathParseException(source,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,231,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,242,        int initialIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,245,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,246,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,247,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,251,        List<Number> components = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,252,        for (boolean loop = true; loop;){,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,254,            if (!components.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,255,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,256,"                if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,257,                    loop = false;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,261,            if (loop) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,262,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,263,"                Number component = CompositeFormat.parseNumber(source, format, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,264,                if (component != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,265,                    components.add(component);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,269,                    pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,270,                    return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,272,            },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,277,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,278,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,279,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,283,        double[] data = new double[components.size()];,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,284,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,285,            data[i] = components.get(i).doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,33,287,"        return new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,49,"        super(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,50,        long lRow = rowDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,51,        long lCol = columnDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,52,        if (lRow * lCol >= Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,53,"            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,55,        this.rows = rowDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,56,        this.columns = columnDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,57,        this.entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,58,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,65,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,66,        this.rows = matrix.rows;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,67,        this.columns = matrix.columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,68,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,69,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,74,        return new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,80,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,86,        return columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,100,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,102,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,103,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,104,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,105,            final int row = iterator.key() / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,106,            final int col = iterator.key() - row * columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,107,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,108,        },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,110,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,118,            return subtract((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,119,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,120,            return (OpenMapRealMatrix) super.subtract(m);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,134,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,136,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,137,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,138,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,139,            final int row = iterator.key() / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,140,            final int col = iterator.key() - row * columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,141,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,142,        },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,144,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,151,            return multiply((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,152,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,155,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,157,            final int outCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,158,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,159,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,160,                iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,161,                final double value = iterator.value();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,162,                final int key      = iterator.key();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,163,                final int i        = key / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,164,                final int k        = key % columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,165,                for (int j = 0; j < outCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,166,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,168,            },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,170,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,185,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,187,        final int outCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,188,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,189,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,190,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,191,            final double value = iterator.value();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,192,            final int key      = iterator.key();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,193,            final int i        = key / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,194,            final int k        = key % columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,195,            for (int j = 0; j < outCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,196,"                final int rightKey = m.computeKey(k, j);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,197,                if (m.entries.containsKey(rightKey)) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,198,"                    final int outKey = out.computeKey(i, j);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,199,                    final double outValue =,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,201,                    if (outValue == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,202,                        out.entries.remove(outKey);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,204,"                        out.entries.put(outKey, outValue);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,208,        },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,210,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,216,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,217,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,218,"        return entries.get(computeKey(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,224,        return rows;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,230,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,231,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,232,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,233,"            entries.remove(computeKey(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,235,"            entries.put(computeKey(row, column), value);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,237,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,242,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,243,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,244,"        final int key = computeKey(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,245,        final double value = entries.get(key) + increment;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,246,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,247,            entries.remove(key);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,249,"            entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,251,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,256,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,257,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,258,"        final int key = computeKey(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,259,        final double value = entries.get(key) * factor;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,260,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,261,            entries.remove(key);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,263,"            entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,265,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,274,        return row * columns + column;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,33,31,public class OpenMapRealMatrix extends AbstractRealMatrix,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,45,    public Array2DRowRealMatrix() {},0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,95,"    public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) {",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,96,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,97,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,99,            if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,100,                throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,102,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,103,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,104,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,106,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,107,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,108,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,110,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,111,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,112,"                    throw new DimensionMismatchException(d[r].length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,115,            data = d;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,117,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,126,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,127,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,128,        data = new double[nRows][1];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,129,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,130,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,132,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,138,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,144,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,157,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,159,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,160,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,161,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,162,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,163,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,164,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,165,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,166,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,167,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,171,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,184,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,186,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,187,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,188,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,189,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,190,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,191,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,192,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,193,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,194,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,198,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,211,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,213,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,214,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,215,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,217,        final double[][] outData = new double[nRows][nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,219,        final double[] mCol = new double[nSum];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,220,        final double[][] mData = m.data;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,223,        for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,226,            for (int mRow = 0; mRow < nSum; mRow++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,227,                mCol[mRow] = mData[mRow][col];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,230,            for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,231,                final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,232,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,233,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,234,                    sum += dataRow[i] * mCol[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,236,                outData[row][col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,240,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,246,        return copyOut();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,264,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,267,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,272,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,277,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,282,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,287,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,309,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,310,        data[row][column] += increment;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,311,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,316,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,317,        data[row][column] *= factor;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,318,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,335,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,336,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,337,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,338,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,340,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,341,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,342,            final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,343,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,344,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,345,                sum += dataRow[i] * v[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,347,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,349,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,355,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,356,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,357,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,358,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,361,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,362,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,363,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,364,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,365,                sum += data[i][col] * v[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,367,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,370,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,377,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,378,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,379,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,380,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,381,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,382,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,383,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,386,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,392,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,393,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,395,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,396,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,397,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,398,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,401,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,409,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,410,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,412,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,413,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,414,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,415,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,418,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,426,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,427,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,429,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,430,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,431,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,432,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,435,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,441,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,442,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,443,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,444,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,445,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,446,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,447,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,450,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,456,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,457,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,459,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,460,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,461,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,464,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,472,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,473,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,475,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,476,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,477,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,478,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,481,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,489,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,490,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,492,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,493,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,494,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,497,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,506,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,507,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,509,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,510,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,33,512,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,949,        return new RealVector() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1250,            class UnmodifiableEntry extends Entry {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,953,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,959,                return v.map(function);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,965,                final Iterator<Entry> i = v.iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,966,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,991,                final Iterator<Entry> i = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,993,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1018,                return v.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1024,                return v.add(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1030,                return v.subtract(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1036,                return v.mapAdd(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1042,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1048,                return v.mapSubtract(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1054,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1060,                return v.mapMultiply(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1066,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1072,                return v.mapDivide(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1078,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1084,                return v.ebeMultiply(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1090,                return v.ebeDivide(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1096,                return v.dotProduct(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1102,                return v.cosine(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1108,                return v.getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1114,                return v.getL1Norm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1120,                return v.getLInfNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1126,                return v.getDistance(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1132,                return v.getL1Distance(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1138,                return v.getLInfDistance(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1144,                return v.unitVector();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1150,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1156,                return v.projection(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1162,                return v.outerProduct(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1168,                return v.getEntry(index);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1174,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1180,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1186,                return v.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1192,                return v.append(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1198,                return v.append(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1204,"                return v.getSubVector(index, n);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1210,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1216,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1222,                return v.toArray();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1228,                return v.isNaN();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1234,                return v.isInfinite();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1240,"                return v.combine(a, b, y);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1246,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,701,        return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,704,            private int i = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,707,            private Entry e = new Entry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,711,                return i < dim;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,716,                e.setIndex(i++);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,717,                return e;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,722,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,55,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,56,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,70,"        super(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,71,"        data = buildArray(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,72,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,89,"        this(extractField(d), d);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,90,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,108,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,109,        copyIn(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,110,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,129,"        this(extractField(d), d, copyArray);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,130,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,150,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,151,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,152,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,154,            MathUtils.checkNotNull(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,155,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,156,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,157,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,159,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,160,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,161,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,163,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,164,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,165,"                    throw new DimensionMismatchException(nCols, d[r].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,168,            data = d;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,170,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,180,"        this(extractField(v), v);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,181,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,192,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,193,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,194,"        data = buildArray(getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,195,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,196,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,198,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,203,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,209,"        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,222,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,224,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,225,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,226,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,227,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,228,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,229,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,230,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,231,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,232,                outDataRow[col] = dataRow[col].add(mRow[col]);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,236,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,249,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,251,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,252,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,253,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,254,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,255,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,256,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,257,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,258,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,259,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,263,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,277,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,279,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,280,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,281,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,282,"        final T[][] outData = buildArray(getField(), nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,283,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,284,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,285,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,286,            for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,287,                T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,288,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,289,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,291,                outDataRow[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,295,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,302,        return copyOut();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,312,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,318,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,319,            if (row > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,320,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,322,            if (column > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,323,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,325,            final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,326,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,327,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,330,            final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,331,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,332,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,334,"            data = buildArray(getField(), subMatrix.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,335,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,336,                if (subMatrix[i].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,337,"                    throw new DimensionMismatchException(nCols, subMatrix[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,339,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,341,        } else {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,342,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,345,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,350,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,351,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,353,        return data[row][column];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,359,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,360,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,362,        data[row][column] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,363,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,368,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,369,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,371,        data[row][column] = data[row][column].add(increment);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,372,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,377,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,378,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,380,        data[row][column] = data[row][column].multiply(factor);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,381,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,386,        return (data == null) ? 0 : data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,392,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,398,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,399,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,400,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,401,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,403,"        final T[] out = buildArray(getField(), nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,404,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,405,            final T[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,406,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,407,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,408,                sum = sum.add(dataRow[i].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,410,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,412,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,418,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,419,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,420,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,421,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,424,"        final T[] out = buildArray(getField(), nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,425,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,426,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,427,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,428,                sum = sum.add(data[i][col].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,430,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,433,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,439,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,440,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,441,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,442,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,443,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,444,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,445,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,448,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,454,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,455,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,457,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,458,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,459,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,460,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,463,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,471,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,472,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,474,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,475,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,476,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,477,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,480,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,488,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,489,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,491,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,492,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,493,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,494,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,497,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,503,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,504,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,505,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,506,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,507,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,508,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,509,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,512,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,518,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,519,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,520,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,521,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,522,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,523,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,526,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,534,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,535,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,537,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,538,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,539,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,540,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,543,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,551,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,552,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,554,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,555,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,556,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,559,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,568,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,569,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,571,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,572,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,574,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,587,"        setSubMatrix(in, 0, 0);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,33,588,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,576,            super(BigFraction.ZERO);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,577,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,583,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,584,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,589,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,590,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,598,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,571,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,398,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,411,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,412,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,413,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,418,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,419,            },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,94,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,95,        this.rows = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,96,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,99,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,100,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,103,"        blocks = createBlocksLayout(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,104,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,120,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,121,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,139,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,140,        this.rows = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,141,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,144,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,145,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,147,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,149,            blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,152,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,155,        int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,156,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,157,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,158,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,159,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,160,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,163,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,164,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,168,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,192,        final int rows = rawData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,193,        final int columns = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,194,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,195,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,198,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,199,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,200,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,201,"                throw new DimensionMismatchException(columns, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,206,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,207,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,208,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,209,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,210,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,211,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,212,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,213,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,214,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,215,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,218,                final double[] block = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,219,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,222,                int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,223,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,224,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,225,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,227,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,231,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,247,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,248,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,250,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,251,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,252,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,253,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,254,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,255,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,256,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,257,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,258,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,259,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,260,                blocks[blockIndex] = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,261,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,265,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,271,"        return new BlockRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,278,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,281,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,282,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,285,        return copied;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,292,            return add((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,293,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,295,"            MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,297,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,300,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,301,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,302,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,305,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,306,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,307,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,308,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,309,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,310,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,311,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,312,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,313,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,314,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,315,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,319,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,323,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,337,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,339,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,342,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,343,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,344,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,345,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,346,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,347,                outBlock[k] = tBlock[k] + mBlock[k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,351,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,358,            return subtract((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,359,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,361,"            MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,363,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,366,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,367,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,368,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,371,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,372,                    final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,373,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,374,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,375,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,376,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,377,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,378,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,379,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,380,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,381,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,385,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,389,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,403,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,405,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,408,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,409,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,410,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,411,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,412,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,413,                outBlock[k] = tBlock[k] - mBlock[k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,417,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,424,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,427,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,428,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,429,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,430,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,431,                outBlock[k] = tBlock[k] + d;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,435,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,441,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,444,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,445,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,446,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,447,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,448,                outBlock[k] = tBlock[k] * d;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,452,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,459,            return multiply((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,460,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,462,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,464,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,467,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,468,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,469,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,470,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,472,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,473,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,474,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,477,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,480,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,481,                        final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,482,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,483,                        final int rStart = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,484,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,485,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,486,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,487,                            final int lEnd = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,488,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,489,                                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,490,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,491,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,492,"                                    sum += tBlock[l] * m.getEntry(r, q);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,493,                                    ++r;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,495,                                outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,496,                                ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,501,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,505,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,519,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,521,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,524,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,525,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,527,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,528,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,530,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,531,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,532,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,533,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,534,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,537,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,540,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,541,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,542,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,543,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,544,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,545,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,546,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,547,                        final int lEnd = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,548,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,549,                            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,550,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,551,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,552,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,553,                                sum += tBlock[l] * mBlock[n] +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,557,                                l += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,558,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,560,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,561,                                sum += tBlock[l++] * mBlock[n];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,562,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,564,                            outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,565,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,570,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,574,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,580,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,581,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,583,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,584,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,585,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,586,            int regularPos = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,587,            int lastPos = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,588,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,589,                final double[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,590,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,591,                int dataPos = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,592,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,593,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,594,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,596,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,597,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,598,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,602,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,608,        final double[] colSums = new double[BLOCK_SIZE];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,609,        double maxColSum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,610,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,611,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,612,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,613,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,614,                final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,615,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,616,                for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,617,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,618,                    for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,619,                        sum += FastMath.abs(block[i * jWidth + j]);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,621,                    colSums[j] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,624,            for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,625,"                maxColSum = FastMath.max(maxColSum, colSums[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,628,        return maxColSum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,634,        double sum2 = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,635,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,636,            for (final double entry : blocks[blockIndex]) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,637,                sum2 += entry * entry;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,640,        return FastMath.sqrt(sum2);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,648,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,651,        final BlockRealMatrix out =,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,655,        final int blockStartRow = startRow / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,656,        final int rowsShift = startRow % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,657,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,658,        final int columnsShift = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,661,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,662,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,663,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,664,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,665,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,666,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,669,                final int outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,670,                final double[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,671,                final int index = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,672,                final int width = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,674,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,675,                final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,676,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,678,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,680,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,681,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,685,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,689,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,693,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,697,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,699,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,703,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,710,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,712,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,713,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,717,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,721,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,723,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,729,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,731,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,734,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,757,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,758,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,759,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,760,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,761,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,762,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,763,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,765,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,772,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,773,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,774,        if (refLength == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,775,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,777,        final int endRow = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,778,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,779,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,780,        for (final double[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,781,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,782,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,787,        final int blockStartRow = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,788,        final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,789,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,790,        final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,793,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,794,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,795,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,796,"            final int iStart = FastMath.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,797,"            final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,799,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,800,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,801,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,802,"                final int jStart = FastMath.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,803,"                final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,804,                final int jLength = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,807,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,808,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,809,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,816,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,821,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,822,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,825,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,826,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,827,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,828,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,829,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,830,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,831,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,832,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,833,            final int available = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,834,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,835,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,836,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,837,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,838,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,840,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,841,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,845,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,852,"            setRowMatrix(row, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,855,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,853,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,854,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,856,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,871,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,872,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,873,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,875,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,881,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,882,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,883,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,884,        int mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,885,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,886,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,887,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,888,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,889,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,890,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,891,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,892,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,893,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,894,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,896,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,897,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,900,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,905,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,906,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,909,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,910,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,911,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,912,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,913,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,914,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,915,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,916,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,917,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,918,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,919,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,920,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,921,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,923,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,927,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,934,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,937,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,935,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,936,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,938,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,953,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,954,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,955,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,957,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,963,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,964,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,965,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,966,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,967,        int mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,968,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,969,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,970,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,971,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,972,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,973,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,974,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,975,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,977,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,980,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,985,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,986,        final double[] outData = new double[columns];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,989,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,990,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,991,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,992,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,993,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,994,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,995,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,996,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,999,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1006,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1009,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1007,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1008,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1010,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1015,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1016,        final double[] outData = new double[rows];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1019,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1020,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1021,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1022,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1023,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1024,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1025,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1026,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1027,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1031,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1038,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1041,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1039,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1040,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1042,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1047,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1048,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1051,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1052,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1053,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1054,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1055,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1056,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1057,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1058,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1061,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1067,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1068,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1069,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1070,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1074,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1075,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1076,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1077,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1078,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1079,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1080,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1081,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1083,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1088,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1089,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1092,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1093,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1094,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1095,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1096,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1097,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1098,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1099,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1100,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1104,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1110,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1111,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1112,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1113,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1117,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1118,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1119,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1120,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1121,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1122,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1123,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1124,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1125,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1128,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1133,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1134,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1135,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1136,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1138,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1144,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1145,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1146,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1147,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1149,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1150,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1155,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1156,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1157,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1158,        final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1160,        blocks[iBlock * blockColumns + jBlock][k] += increment;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1161,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1166,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1167,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1168,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1169,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1171,        blocks[iBlock * blockColumns + jBlock][k] *= factor;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1172,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1177,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1178,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1179,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1182,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1183,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1184,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1186,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1187,                final double[] tBlock = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1188,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1189,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1190,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1191,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1192,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1193,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1194,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1195,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1196,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1197,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1198,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1199,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1203,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1207,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1213,        return rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1219,        return columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1225,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1226,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1228,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1231,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1232,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1233,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1234,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1235,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1236,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1237,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1238,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1239,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1240,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1241,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1242,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1243,                        sum += block[k]     * v[q]     +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1247,                        k += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1248,                        q += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1250,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1251,                        sum += block[k++] * v[q++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1253,                    out[p] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1258,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1264,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1265,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1267,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1270,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1271,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1272,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1273,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1274,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1275,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1276,"            final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1277,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1278,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1279,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1280,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1281,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1282,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1283,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1284,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1285,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1286,                        sum += block[k]           * v[p]     +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1290,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1291,                        p += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1293,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1294,                        sum += block[k] * v[p++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1295,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1297,                    out[q] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1302,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1308,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1309,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1310,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1311,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1312,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1313,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1314,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1315,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1316,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1317,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1318,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1319,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1320,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1321,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1326,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1332,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1333,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1334,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1335,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1336,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1337,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1338,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1339,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1340,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1341,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1342,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1343,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1344,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1345,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1350,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1358,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1359,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1360,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1361,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1362,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1363,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1364,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1365,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1366,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1367,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1368,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1369,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1370,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1371,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1372,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1373,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1374,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1379,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1387,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1388,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1389,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1390,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1391,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1392,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1393,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1394,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1395,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1396,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1397,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1398,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1399,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1400,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1401,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1402,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1403,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1408,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1414,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1415,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1416,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1417,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1418,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1419,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1420,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1421,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1422,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1423,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1424,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1425,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1426,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1427,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1430,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1433,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1439,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1440,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1441,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1442,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1443,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1444,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1445,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1446,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1447,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1448,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1449,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1450,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1451,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1452,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1455,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1458,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1466,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1467,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1468,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1469,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1470,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1471,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1472,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1473,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1474,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1475,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1476,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1477,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1478,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1479,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1480,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1481,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1482,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1487,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1495,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1496,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1497,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1498,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1499,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1500,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1501,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1502,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1503,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1504,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1505,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1506,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1507,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1508,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1509,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1510,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1511,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1516,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1525,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,1534,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,33,69,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,966,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,968,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,972,                        return i.hasNext();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,977,                        e.setIndex(i.next().getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,978,                        return e;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,983,                        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1250,            class UnmodifiableEntry extends Entry {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1254,                    return v.getEntry(getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1260,                    throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,247,                this.endRow = endRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,248,                columnSum   = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,249,                maxColSum   = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,250,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,254,                columnSum += FastMath.abs(value);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,255,                if (row == endRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,256,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,257,                    columnSum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,259,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,263,                return maxColSum;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,993,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,995,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,999,                        return i.hasNext();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1004,                        e.setIndex(i.next().getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1005,                        return e;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,33,1010,                        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,583,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,588,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,589,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,279,                sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,280,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,284,                sum += value * value;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,285,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,289,                return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,645,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,649,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,650,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,368,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,33,373,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,53,        super();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,54,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,70,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,92,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,116,        if (data == null ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,118,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,120,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,144,        if (data == null ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,146,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,148,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,161,"        final RealMatrix m = createRealMatrix(dimension, dimension);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,162,        for (int i = 0; i < dimension; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,163,"            m.setEntry(i, i, 1.0);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,165,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,180,        final T zero = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,181,        final T one  = field.getOne();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,183,"        final T[][] d = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { dimension, dimension });",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,184,        for (int row = 0; row < dimension; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,185,            final T[] dRow = d[row];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,186,"            Arrays.fill(dRow, zero);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,187,            dRow[row] = one;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,189,"        return new Array2DRowFieldMatrix<T>(field, d, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,201,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,202,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,203,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,205,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,219,        final FieldMatrix<T> m =,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,221,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,222,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,224,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,236,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,237,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,239,"        return new ArrayRealVector(data, true);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,253,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,254,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,256,        if (data.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,257,            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,259,"        return new ArrayFieldVector<T>(data[0].getField(), data, true);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,272,        if (rowData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,273,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,275,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,276,"        final RealMatrix m = createRealMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,277,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,278,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,280,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,295,        if (rowData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,296,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,298,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,299,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,300,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,302,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,303,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,304,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,306,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,319,        if (columnData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,320,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,322,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,323,"        final RealMatrix m = createRealMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,324,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,325,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,327,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,342,        if (columnData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,343,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,345,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,346,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,347,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,349,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,350,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,351,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,353,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,381,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,395,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,416,"        checkRowIndex(m, startRow);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,417,"        checkRowIndex(m, endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,418,        if (endRow < startRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,419,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,423,"        checkColumnIndex(m, startColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,424,"        checkColumnIndex(m, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,425,        if (endColumn < startColumn) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,426,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,431,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,449,        if (selectedRows == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,450,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,452,        if (selectedColumns == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,453,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,455,        if (selectedRows.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,456,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,458,        if (selectedColumns.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,459,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,462,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,463,"            checkRowIndex(m, row);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,465,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,466,"            checkColumnIndex(m, column);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,468,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,478,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,480,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,483,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,493,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,495,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,498,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,508,        if (left.getColumnDimension() != right.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,509,"            throw new DimensionMismatchException(left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,512,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,520,        final FractionMatrixConverter converter = new FractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,521,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,522,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,565,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,566,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,567,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,645,        final int n = vector.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,646,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,647,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,648,            oos.writeDouble(vector.getEntry(i));,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,650,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,676,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,677,            final double[] data = new double[n];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,678,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,679,                data[i] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,683,"            final RealVector vector = new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,686,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,688,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,689,"            f.set(instance, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,699,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,691,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,692,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,693,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,694,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,695,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,696,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,697,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,698,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,701,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,746,        final int n = matrix.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,747,        final int m = matrix.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,748,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,749,        oos.writeInt(m);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,750,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,751,            for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,752,"                oos.writeDouble(matrix.getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,755,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,781,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,782,            final int m = ois.readInt();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,783,            final double[][] data = new double[n][m];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,784,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,785,                final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,786,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,787,                    dataI[j] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,792,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,795,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,797,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,798,"            f.set(instance, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,808,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,800,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,801,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,802,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,803,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,804,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,805,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,806,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,807,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,809,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,827,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,828,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,832,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,833,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,837,        int rows = rm.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,838,        for( int i = 0 ; i < rows ; i++ ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,839,"            double diag = rm.getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,840,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,841,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,843,            double bi = b.getEntry(i)/diag;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,844,"            b.setEntry(i,  bi );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,845,            for( int j = i+1; j< rows; j++ ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,846,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,849,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,867,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,868,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,872,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,873,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,877,        int rows = rm.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,878,        for( int i = rows-1 ; i >-1 ; i-- ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,879,"            double diag = rm.getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,880,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,881,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,883,            double bi = b.getEntry(i)/diag;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,884,"            b.setEntry(i,  bi );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,885,            for( int j = i-1; j>-1; j-- ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,886,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,33,889,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,33,323,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
