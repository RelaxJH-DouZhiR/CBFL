project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,0.5,0,1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,0.5,0,1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,0.5,0,1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,0.33333,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,0.33333,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,0.33333,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,0.33333,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,0.33333,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,0.33333,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,0.33333,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,0.33333,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,0.33333,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,0.25,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {",0.08333,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,45,        this.point = (point == null) ? null : point.clone();,0.08333,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,46,        this.value = value;,0.08333,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,47,    },0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,                    stepb = -initialTrustRegionRadius;,0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,                    if (lowerDifference.getEntry(nfxm) == ZERO) {,0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,                    if (upperDifference.getEntry(nfxm) == ZERO) {,0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,                    final int ih = nfx * (nfx + 1) / 2 - 1;,0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,                    final double tmp = (f - fbeg) / stepb;,0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,                    final double diff = stepb - stepa;,0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,                    if (stepa * stepb < ZERO) {,0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {,0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,                            if (trustRegionCenterInterpolationPointIndex == nfm) {,0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1731,"                    bMatrix.setEntry(nfm - n, nfxm,",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,",0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,                },0.08333,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,        return evaluations.getCount();,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,94,            evaluations.incrementCount();,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,97,        },0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,98,        return function.value(point);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,        return goal;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,241,        isMinimize = (getGoalType() == GoalType.MINIMIZE);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,242,        currentBest = new ArrayRealVector(getStartPoint());,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,244,"        final double value = bobyqa(lowerBound, upperBound);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,287,        printMethod(); // XXX,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,289,        final int n = currentBest.getDimension();,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,298,        for (int j = 0; j < n; j++) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,            final double boundDiff = boundDifference[j];,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,301,"            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,302,            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,332,"        return bobyqb(lowerBound, upperBound);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,        printMethod(); // XXX,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,        final int n = currentBest.getDimension();,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,379,        final int npt = numberOfInterpolationPoints;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,        final int np = n + 1;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,381,        final int nptm = npt - np;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,        final int nh = n * np / 2;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,384,        final ArrayRealVector work1 = new ArrayRealVector(n);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,        final ArrayRealVector work2 = new ArrayRealVector(npt);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,386,        final ArrayRealVector work3 = new ArrayRealVector(npt);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,388,        double cauchy = Double.NaN;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,        double alpha = Double.NaN;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,390,        double dsq = Double.NaN;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,        double crvmin = Double.NaN;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,405,        trustRegionCenterInterpolationPointIndex = 0;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,        printMethod(); // XXX,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,        final int n = currentBest.getDimension();,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,        final int npt = numberOfInterpolationPoints;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1588,        final int ndim = bMatrix.getRowDimension();,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,        final double recip = 1d / rhosq;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1592,        final int np = n + 1;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,        for (int j = 0; j < n; j++) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1598,"            originShift.setEntry(j, currentBest.getEntry(j));",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1599,            for (int k = 0; k < npt; k++) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1600,"                interpolationPoints.setEntry(k, j, ZERO);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1602,            for (int i = 0; i < ndim; i++) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1603,"                bMatrix.setEntry(i, j, ZERO);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1606,"        for (int i = 0, max = n * np / 2; i < max; i++) {",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1607,"            modelSecondDerivativesValues.setEntry(i, ZERO);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1609,        for (int k = 0; k < npt; k++) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1610,"            modelSecondDerivativesParameters.setEntry(k, ZERO);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1612,"                zMatrix.setEntry(k, j, ZERO);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,        int ipt = 0;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1621,        int jpt = 0;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,        double fbeg = Double.NaN;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1624,            final int nfm = getEvaluations();,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1625,            final int nfx = nfm - n;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1626,            final int nfmm = nfm - 1;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1627,            final int nfxm = nfx - 1;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,            double stepa = 0;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,            double stepb = 0;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1633,                    stepa = initialTrustRegionRadius;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1638,"                    interpolationPoints.setEntry(nfm, nfmm, stepa);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1639,                } else if (nfm > n) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1672,"                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1675,"                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1684,            final double f = isMinimize ? objectiveValue : -objectiveValue;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1686,"            fAtInterpolationPoints.setEntry(nfm, f);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1702,                if (numEval >= 2 &&,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1704,"                    gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1754,        } while (getEvaluations() < npt);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2395,        if (numberOfInterpolationPoints < nPointsInterval[0] ||,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2404,        boundDifference = new double[dimension];,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2406,        double requiredMinDiff = 2 * initialTrustRegionRadius;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2407,        double minDiff = Double.POSITIVE_INFINITY;,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2408,        for (int i = 0; i < dimension; i++) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2412,        if (minDiff < requiredMinDiff) {,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2421,"        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,",0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2423,        originShift = new ArrayRealVector(dimension);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2424,        fAtInterpolationPoints = new ArrayRealVector(numberOfInterpolationPoints);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2425,        trustRegionCenterOffset = new ArrayRealVector(dimension);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2426,        gradientAtTrustRegionCenter = new ArrayRealVector(dimension);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2428,        upperDifference = new ArrayRealVector(dimension);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2432,        trialStepPoint = new ArrayRealVector(dimension);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2435,    },0.07692,0,-1,0
org/apache/commons/math/linear/RealVector,38,58,public abstract class RealVector {,0.07692,0,-1,0
org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,63,        data = new double[size];,0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,64,    },0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,83,    public ArrayRealVector(double[] d) {,0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,84,        data = d.clone();,0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,85,    },0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,622,        return data[index];,0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,628,        return data.length;,0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,677,            data[index] = value;,0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,680,        },0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,681,    },0.07692,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,732,        return data.clone();,0.07692,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0.07692,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,55,        nf.setMaximumFractionDigits(2);,0.07692,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,56,        return nf;,0.07692,0,-1,0
org/apache/commons/math/util/Incrementor,38,109,        return count;,0.07692,0,-1,0
org/apache/commons/math/util/Incrementor,38,150,        if (++count > maximalCount) {,0.07692,0,-1,0
org/apache/commons/math/util/Incrementor,38,153,    },0.07692,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",0.07692,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,54,        if (rowDimension < 1) {,0.07692,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,57,        if (columnDimension < 1) {,0.07692,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,60,    },0.07692,0,-1,0
org/apache/commons/math/linear/RealLinearOperator,38,52,public abstract class RealLinearOperator {,0.07692,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,55,"        super(rowDimension, columnDimension);",0.07692,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,56,        data = new double[rowDimension][columnDimension];,0.07692,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,57,    },0.07692,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,294,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.07692,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,295,        return data[row][column];,0.07692,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.07692,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,302,        data[row][column] = value;,0.07692,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,303,    },0.07692,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,322,        return (data == null) ? 0 : data.length;,0.07692,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,83,    },0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,106,"                            final String separator, final NumberFormat format) {",0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,107,        this.prefix      = prefix;,0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,108,        this.suffix      = suffix;,0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,109,        this.separator   = separator;,0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,110,        trimmedPrefix    = prefix.trim();,0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,111,        trimmedSuffix    = suffix.trim();,0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,112,        trimmedSeparator = separator.trim();,0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,113,        this.format      = format;,0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,114,    },0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,162,        return getInstance(Locale.getDefault());,0.07692,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0.07692,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,367,"        checkRowIndex(m, row);",0.07692,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,368,"        checkColumnIndex(m, column);",0.07692,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,369,    },0.07692,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,379,        if (row < 0 ||,0.07692,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,384,    },0.07692,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,394,        if (column < 0 || column >= m.getColumnDimension()) {,0.07692,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,398,    },0.07692,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,105,        if (f == null) {,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,108,        if (goalType == null) {,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,111,        if (startPoint == null) {,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,116,        evaluations.setMaximalCount(maxEval);,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,117,        evaluations.resetCount();,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,120,        function = f;,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,121,        goal = goalType;,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,122,        start = startPoint.clone();,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,125,        return doOptimize();,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,139,        return start.clone();,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,235,        final double[] lowerBound = getLowerBound();,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,236,        final double[] upperBound = getUpperBound();,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,239,"        setup(lowerBound, upperBound);",0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2384,        printMethod(); // XXX,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2386,        double[] init = getStartPoint();,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2387,        final int dimension = init.length;,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2390,        if (dimension < MINIMUM_PROBLEM_DIMENSION) {,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2466,    },0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,72,        return lowerBound.clone();,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,79,        return upperBound.clone();,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,120,        if (lower == null) {,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,128,        if (upper == null) {,0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,138,"        return super.optimize(maxEval, f, goalType, startPoint);",0.07143,0,-1,0
org/apache/commons/math/util/Incrementor,38,91,        maximalCount = max;,0.07143,0,-1,0
org/apache/commons/math/util/Incrementor,38,92,    },0.07143,0,-1,0
org/apache/commons/math/util/Incrementor,38,159,        count = 0;,0.07143,0,-1,0
org/apache/commons/math/util/Incrementor,38,160,    },0.07143,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,106,        if (upper != null) {,0.06667,0,-1,0
org/apache/commons/math/optimization/SimpleScalarValueChecker,38,39,    public SimpleScalarValueChecker() {},0.0625,0,-1,0
org/apache/commons/math/optimization/AbstractConvergenceChecker,38,52,    public AbstractConvergenceChecker() {,0.0625,0,-1,0
org/apache/commons/math/optimization/AbstractConvergenceChecker,38,53,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,0.0625,0,-1,0
org/apache/commons/math/optimization/AbstractConvergenceChecker,38,54,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,0.0625,0,-1,0
org/apache/commons/math/optimization/AbstractConvergenceChecker,38,55,    },0.0625,0,-1,0
org/apache/commons/math/optimization/GoalType,38,27,public enum GoalType implements Serializable {,0.0625,0,-1,0
org/apache/commons/math/optimization/GoalType,38,30,"    MAXIMIZE,",0.0625,0,-1,0
org/apache/commons/math/optimization/GoalType,38,33,    MINIMIZE,0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,60,        this(new SimpleScalarValueChecker());,0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,61,    },0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,65,    protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<RealPointValuePair> checker) {,0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,44,    protected final Incrementor evaluations = new Incrementor();,0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,66,        this.checker = checker;,0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,67,    },0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,211,"        this(numberOfInterpolationPoints,",0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,214,    },0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,226,                           double stoppingTrustRegionRadius) {,0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,227,        this.numberOfInterpolationPoints = numberOfInterpolationPoints;,0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,228,        this.initialTrustRegionRadius = initialTrustRegionRadius;,0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,229,        this.stoppingTrustRegionRadius = stoppingTrustRegionRadius;,0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,230,    },0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,59,    protected BaseAbstractMultivariateSimpleBoundsOptimizer() {},0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,93,        final int dim = startPoint.length;,0.0625,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,94,        if (lower != null) {,0.0625,0,-1,0
org/apache/commons/math/util/Incrementor,38,52,        this(0);,0.0625,0,-1,0
org/apache/commons/math/util/Incrementor,38,53,    },0.0625,0,-1,0
org/apache/commons/math/util/Incrementor,38,61,"        this(max,",0.0625,0,-1,0
org/apache/commons/math/util/Incrementor,38,68,    },0.0625,0,-1,0
org/apache/commons/math/util/Incrementor,38,78,                       MaxCountExceededCallback cb) {,0.0625,0,-1,0
org/apache/commons/math/util/Incrementor,38,40,    private int count = 0;,0.0625,0,-1,0
org/apache/commons/math/util/Incrementor,38,79,        maximalCount = max;,0.0625,0,-1,0
org/apache/commons/math/util/Incrementor,38,80,        maxCountCallback = cb;,0.0625,0,-1,0
org/apache/commons/math/util/Incrementor,38,81,    },0.0625,0,-1,0
org/apache/commons/math/util/Incrementor,38,62,             new MaxCountExceededCallback() {,0.0625,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,57,                              final boolean copyArray) {,0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,58,        this.point = copyArray ?,0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,61,        this.value = value;,0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,62,    },0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,68,        return (point == null) ? null : point.clone();,0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,77,        return point;,0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,38,84,        return value;,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleScalarValueChecker,38,52,"        super(relativeThreshold, absoluteThreshold);",0.0,0,-1,0
org/apache/commons/math/optimization/SimpleScalarValueChecker,38,53,    },0.0,0,-1,0
org/apache/commons/math/optimization/SimpleScalarValueChecker,38,75,        final double p = previous.getValue();,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleScalarValueChecker,38,76,        final double c = current.getValue();,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleScalarValueChecker,38,77,        final double difference = FastMath.abs(p - c);,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleScalarValueChecker,38,78,"        final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));",0.0,0,-1,0
org/apache/commons/math/optimization/SimpleScalarValueChecker,38,79,        return difference <= size * getRelativeThreshold() ||,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleScalarValueChecker,38,34,public class SimpleScalarValueChecker,0.0,0,-1,0
org/apache/commons/math/optimization/AbstractConvergenceChecker,38,64,                                      final double absoluteThreshold) {,0.0,0,-1,0
org/apache/commons/math/optimization/AbstractConvergenceChecker,38,65,        this.relativeThreshold = relativeThreshold;,0.0,0,-1,0
org/apache/commons/math/optimization/AbstractConvergenceChecker,38,66,        this.absoluteThreshold = absoluteThreshold;,0.0,0,-1,0
org/apache/commons/math/optimization/AbstractConvergenceChecker,38,67,    },0.0,0,-1,0
org/apache/commons/math/optimization/AbstractConvergenceChecker,38,73,        return relativeThreshold;,0.0,0,-1,0
org/apache/commons/math/optimization/AbstractConvergenceChecker,38,80,        return absoluteThreshold;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,71,        return evaluations.getMaximalCount();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,81,        return checker;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,95,        } catch (MaxCountExceededException e) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,96,            throw new TooManyEvaluationsException(e.getMax());,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,106,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,109,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,112,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2479,"            super(PATH_IS_EXPLORED + "" "" + BOBYQAOptimizer.caller(3));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2480,        },0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,246,"        return new RealPointValuePair(currentBest.getDataRef(),",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,303,                if (lowerDifference.getEntry(j) >= ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,304,"                    currentBest.setEntry(j, lowerBound[j]);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,305,"                    lowerDifference.setEntry(j, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,306,"                    upperDifference.setEntry(j, boundDiff);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,308,"                    currentBest.setEntry(j, lowerBound[j] + initialTrustRegionRadius);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,309,"                    lowerDifference.setEntry(j, -initialTrustRegionRadius);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,311,                    final double deltaOne = upperBound[j] - currentBest.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,312,"                    upperDifference.setEntry(j, Math.max(deltaOne, initialTrustRegionRadius));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,313,                },0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,315,                if (upperDifference.getEntry(j) <= ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,316,"                    currentBest.setEntry(j, upperBound[j]);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,317,"                    lowerDifference.setEntry(j, -boundDiff);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,318,"                    upperDifference.setEntry(j, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,320,"                    currentBest.setEntry(j, upperBound[j] - initialTrustRegionRadius);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,322,                    final double deltaOne = lowerBound[j] - currentBest.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,323,                    final double deltaTwo = -initialTrustRegionRadius;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,324,"                    lowerDifference.setEntry(j, Math.min(deltaOne, deltaTwo));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,325,"                    upperDifference.setEntry(j, initialTrustRegionRadius);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,408,        double xoptsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,409,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,410,"            trustRegionCenterOffset.setEntry(i, interpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex, i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,412,            final double deltaOne = trustRegionCenterOffset.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,413,            xoptsq += deltaOne * deltaOne;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,415,        double fsave = fAtInterpolationPoints.getEntry(0);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,416,        final int kbase = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,420,        int ntrits = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,421,        int itest = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,422,        int knew = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,423,        int nfsav = getEvaluations();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,424,        double rho = initialTrustRegionRadius;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,425,        double delta = rho;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,426,        double diffa = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,427,        double diffb = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,428,        double diffc = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,429,        double f = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,430,        double beta = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,431,        double adelt = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,432,        double denom = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,433,        double ratio = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,434,        double dnorm = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,435,        double scaden = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,436,        double biglsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,437,        double distsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,442,        int state = 20;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,443,        for(;;) switch (state) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,445,            printState(20); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,446,            if (trustRegionCenterInterpolationPointIndex != kbase) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,447,                int ih = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,448,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,449,                    for (int i = 0; i <= j; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,450,                        if (i < j) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,451,"                            gradientAtTrustRegionCenter.setEntry(j,  gradientAtTrustRegionCenter.getEntry(j) + modelSecondDerivativesValues.getEntry(ih) * trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,453,"                        gradientAtTrustRegionCenter.setEntry(i,  gradientAtTrustRegionCenter.getEntry(i) + modelSecondDerivativesValues.getEntry(ih) * trustRegionCenterOffset.getEntry(j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,454,                        ih++;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,457,                if (getEvaluations() > npt) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,458,                    for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,459,                        double temp = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,460,                        for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,461,"                            temp += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,463,                        temp *= modelSecondDerivativesParameters.getEntry(k);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,464,                        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,465,"                            gradientAtTrustRegionCenter.setEntry(i, gradientAtTrustRegionCenter.getEntry(i) + temp * interpolationPoints.getEntry(k, i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,468,                    throw new PathIsExploredException(); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,481,            printState(60); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,482,            final ArrayRealVector gnew = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,483,            final ArrayRealVector xbdi = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,484,            final ArrayRealVector s = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,485,            final ArrayRealVector hs = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,486,            final ArrayRealVector hred = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,488,"            final double[] dsqCrvmin = trsbox(delta, gnew, xbdi, s,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,490,            dsq = dsqCrvmin[0];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,491,            crvmin = dsqCrvmin[1];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,494,            double deltaOne = delta;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,495,            double deltaTwo = Math.sqrt(dsq);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,496,"            dnorm = Math.min(deltaOne, deltaTwo);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,497,            if (dnorm < HALF * rho) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,498,                ntrits = -1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,500,                deltaOne = TEN * rho;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,501,                distsq = deltaOne * deltaOne;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,502,                if (getEvaluations() <= nfsav + 2) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,503,                    state = 650; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,513,"                deltaOne = Math.max(diffa, diffb);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,514,"                final double errbig = Math.max(deltaOne, diffc);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,515,                final double frhosq = rho * ONE_OVER_EIGHT * rho;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,516,                if (crvmin > ZERO &&,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,518,                    state = 650; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,520,                final double bdtol = errbig / rho;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,521,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,522,                    double bdtest = bdtol;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,523,                    if (newPoint.getEntry(j) == lowerDifference.getEntry(j)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,524,                        bdtest = work1.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,526,                    if (newPoint.getEntry(j) == upperDifference.getEntry(j)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,527,                        bdtest = -work1.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,529,                    if (bdtest < bdtol) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,530,                        double curv = modelSecondDerivativesValues.getEntry((j + j * j) / 2);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,531,                        for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,533,"                            final double d1 = interpolationPoints.getEntry(k, j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,534,                            curv += modelSecondDerivativesParameters.getEntry(k) * (d1 * d1);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,536,                        bdtest += HALF * curv * rho;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,537,                        if (bdtest < bdtol) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,538,                            state = 650; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,540,                        throw new PathIsExploredException(); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,543,                state = 680; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,545,            ++ntrits;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,555,            printState(90); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,556,            if (dsq <= xoptsq * ONE_OVER_A_THOUSAND) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,557,                final double fracsq = xoptsq * ONE_OVER_FOUR;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,558,                double sumpq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,561,                for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,562,                    sumpq += modelSecondDerivativesParameters.getEntry(k);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,563,                    double sum = -HALF * xoptsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,564,                    for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,565,"                        sum += interpolationPoints.getEntry(k, i) * trustRegionCenterOffset.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,568,"                    work2.setEntry(k, sum);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,569,                    final double temp = fracsq - HALF * sum;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,570,                    for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,571,"                        work1.setEntry(i, bMatrix.getEntry(k, i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,572,"                        lagrangeValuesAtNewPoint.setEntry(i, sum * interpolationPoints.getEntry(k, i) + temp * trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,573,                        final int ip = npt + i;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,574,                        for (int j = 0; j <= i; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,575,"                            bMatrix.setEntry(ip, j,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,585,                for (int m = 0; m < nptm; m++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,586,                    double sumz = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,587,                    double sumw = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,588,                    for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,589,"                        sumz += zMatrix.getEntry(k, m);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,590,"                        lagrangeValuesAtNewPoint.setEntry(k, work2.getEntry(k) * zMatrix.getEntry(k, m));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,591,                        sumw += lagrangeValuesAtNewPoint.getEntry(k);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,593,                    for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,594,                        double sum = (fracsq * sumz - HALF * sumw) * trustRegionCenterOffset.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,595,                        for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,596,"                            sum += lagrangeValuesAtNewPoint.getEntry(k) * interpolationPoints.getEntry(k, j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,598,"                        work1.setEntry(j, sum);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,599,                        for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,600,"                            bMatrix.setEntry(k, j,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,605,                    for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,606,                        final int ip = i + npt;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,607,                        final double temp = work1.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,608,                        for (int j = 0; j <= i; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,609,"                            bMatrix.setEntry(ip, j,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,619,                int ih = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,620,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,621,"                    work1.setEntry(j, -HALF * sumpq * trustRegionCenterOffset.getEntry(j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,622,                    for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,623,"                        work1.setEntry(j, work1.getEntry(j) + modelSecondDerivativesParameters.getEntry(k) * interpolationPoints.getEntry(k, j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,624,"                        interpolationPoints.setEntry(k, j, interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,626,                    for (int i = 0; i <= j; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,627,"                         modelSecondDerivativesValues.setEntry(ih,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,631,"                        bMatrix.setEntry(npt + i, j, bMatrix.getEntry(npt + j, i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,632,                        ih++;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,635,                for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,636,"                    originShift.setEntry(i, originShift.getEntry(i) + trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,637,"                    newPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,638,"                    lowerDifference.setEntry(i, lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,639,"                    upperDifference.setEntry(i, upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,640,"                    trustRegionCenterOffset.setEntry(i, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,642,                xoptsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,644,            if (ntrits == 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,645,                state = 210; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,647,            state = 230; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,660,            printState(210); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,672,"            final double[] alphaCauchy = altmov(knew, adelt);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,673,            alpha = alphaCauchy[0];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,674,            cauchy = alphaCauchy[1];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,676,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,677,"                trialStepPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,686,            printState(230); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,687,            for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,688,                double suma = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,689,                double sumb = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,690,                double sum = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,691,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,692,"                    suma += interpolationPoints.getEntry(k, j) * trialStepPoint.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,693,"                    sumb += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,694,"                    sum += bMatrix.getEntry(k, j) * trialStepPoint.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,696,"                work3.setEntry(k, suma * (HALF * suma + sumb));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,697,"                lagrangeValuesAtNewPoint.setEntry(k, sum);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,698,"                work2.setEntry(k, suma);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,700,            beta = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,701,            for (int m = 0; m < nptm; m++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,702,                double sum = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,703,                for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,704,"                    sum += zMatrix.getEntry(k, m) * work3.getEntry(k);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,706,                beta -= sum * sum;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,707,                for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,708,"                    lagrangeValuesAtNewPoint.setEntry(k, lagrangeValuesAtNewPoint.getEntry(k) + sum * zMatrix.getEntry(k, m));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,711,            dsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,712,            double bsum = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,713,            double dx = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,714,            for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,716,                final double d1 = trialStepPoint.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,717,                dsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,718,                double sum = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,719,                for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,720,"                    sum += work3.getEntry(k) * bMatrix.getEntry(k, j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,722,                bsum += sum * trialStepPoint.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,723,                final int jp = npt + j;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,724,                for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,725,"                    sum += bMatrix.getEntry(jp, i) * trialStepPoint.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,727,"                lagrangeValuesAtNewPoint.setEntry(jp, sum);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,728,                bsum += sum * trialStepPoint.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,729,                dx += trialStepPoint.getEntry(j) * trustRegionCenterOffset.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,732,            beta = dx * dx + dsq * (xoptsq + dx + dx + HALF * dsq) + beta - bsum; // Original,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,736,"            lagrangeValuesAtNewPoint.setEntry(trustRegionCenterInterpolationPointIndex,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,743,            if (ntrits == 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,745,                final double d1 = lagrangeValuesAtNewPoint.getEntry(knew);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,746,                denom = d1 * d1 + alpha * beta;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,747,                if (denom < cauchy && cauchy > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,748,                    for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,749,"                        newPoint.setEntry(i, alternativeNewPoint.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,750,"                        trialStepPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,752,                    cauchy = ZERO; // XXX Useful statement?,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,753,                    state = 230; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,761,            } else {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,762,                final double delsq = delta * delta;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,763,                scaden = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,764,                biglsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,765,                knew = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,766,                for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,767,                    if (k == trustRegionCenterInterpolationPointIndex) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,768,                        continue;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,770,                    double hdiag = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,771,                    for (int m = 0; m < nptm; m++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,773,"                        final double d1 = zMatrix.getEntry(k, m);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,774,                        hdiag += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,777,                    final double d2 = lagrangeValuesAtNewPoint.getEntry(k);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,778,                    final double den = beta * hdiag + d2 * d2;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,779,                    distsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,780,                    for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,782,"                        final double d3 = interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,783,                        distsq += d3 * d3;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,787,                    final double d4 = distsq / delsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,788,"                    final double temp = Math.max(ONE, d4 * d4);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,789,                    if (temp * den > scaden) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,790,                        scaden = temp * den;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,791,                        knew = k;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,792,                        denom = den;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,796,                    final double d5 = lagrangeValuesAtNewPoint.getEntry(k);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,797,"                    biglsq = Math.max(biglsq, temp * (d5 * d5));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,809,            printState(360); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,810,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,813,                final double d3 = lowerBound[i];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,814,                final double d4 = originShift.getEntry(i) + newPoint.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,815,"                final double d1 = Math.max(d3, d4);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,816,                final double d2 = upperBound[i];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,817,"                currentBest.setEntry(i, Math.min(d1, d2));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,818,                if (newPoint.getEntry(i) == lowerDifference.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,819,"                    currentBest.setEntry(i, lowerBound[i]);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,821,                if (newPoint.getEntry(i) == upperDifference.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,822,"                    currentBest.setEntry(i, upperBound[i]);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,826,            f = computeObjectiveValue(currentBest.toArray());,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,828,            if (!isMinimize),0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,829,                f = -f;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,830,            if (ntrits == -1) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,831,                fsave = f;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,832,                state = 720; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,838,            final double fopt = fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,839,            double vquad = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,840,            int ih = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,841,            for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,842,                vquad += trialStepPoint.getEntry(j) * gradientAtTrustRegionCenter.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,843,                for (int i = 0; i <= j; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,844,                    double temp = trialStepPoint.getEntry(i) * trialStepPoint.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,845,                    if (i == j) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,846,                        temp *= HALF;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,848,                    vquad += modelSecondDerivativesValues.getEntry(ih) * temp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,849,                    ih++;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,852,            for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,854,                final double d1 = work2.getEntry(k);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,855,"                final double d2 = d1 * d1; // ""d1"" must be squared first to prevent test failures.",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,856,                vquad += HALF * modelSecondDerivativesParameters.getEntry(k) * d2;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,858,            final double diff = f - fopt - vquad;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,859,            diffc = diffb;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,860,            diffb = diffa;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,861,            diffa = Math.abs(diff);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,862,            if (dnorm > rho) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,863,                nfsav = getEvaluations();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,868,            if (ntrits > 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,869,                if (vquad >= ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,870,"                    throw new MathIllegalStateException(LocalizedFormats.TRUST_REGION_STEP_FAILED, vquad);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,872,                ratio = (f - fopt) / vquad;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,873,                final double hDelta = HALF * delta;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,874,                if (ratio <= ONE_OVER_TEN) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,876,"                    delta = Math.min(hDelta, dnorm);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,877,                } else if (ratio <= .7) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,879,"                    delta = Math.max(hDelta, dnorm);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,882,"                    delta = Math.max(hDelta, 2 * dnorm);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,884,                if (delta <= rho * 1.5) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,885,                    delta = rho;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,890,                if (f < fopt) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,891,                    final int ksav = knew;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,892,                    final double densav = denom;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,893,                    final double delsq = delta * delta;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,894,                    scaden = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,895,                    biglsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,896,                    knew = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,897,                    for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,898,                        double hdiag = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,899,                        for (int m = 0; m < nptm; m++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,901,"                            final double d1 = zMatrix.getEntry(k, m);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,902,                            hdiag += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,905,                        final double d1 = lagrangeValuesAtNewPoint.getEntry(k);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,906,                        final double den = beta * hdiag + d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,907,                        distsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,908,                        for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,910,"                            final double d2 = interpolationPoints.getEntry(k, j) - newPoint.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,911,                            distsq += d2 * d2;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,915,                        final double d3 = distsq / delsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,916,"                        final double temp = Math.max(ONE, d3 * d3);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,917,                        if (temp * den > scaden) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,918,                            scaden = temp * den;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,919,                            knew = k;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,920,                            denom = den;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,924,                        final double d4 = lagrangeValuesAtNewPoint.getEntry(k);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,925,                        final double d5 = temp * (d4 * d4);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,926,"                        biglsq = Math.max(biglsq, d5);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,928,                    if (scaden <= HALF * biglsq) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,929,                        knew = ksav;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,930,                        denom = densav;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,938,"            update(beta, denom, knew);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,940,            ih = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,941,            final double pqold = modelSecondDerivativesParameters.getEntry(knew);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,942,"            modelSecondDerivativesParameters.setEntry(knew, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,943,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,944,"                final double temp = pqold * interpolationPoints.getEntry(knew, i);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,945,                for (int j = 0; j <= i; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,946,"                    modelSecondDerivativesValues.setEntry(ih, modelSecondDerivativesValues.getEntry(ih) + temp * interpolationPoints.getEntry(knew, j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,947,                    ih++;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,950,            for (int m = 0; m < nptm; m++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,951,"                final double temp = diff * zMatrix.getEntry(knew, m);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,952,                for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,953,"                    modelSecondDerivativesParameters.setEntry(k, modelSecondDerivativesParameters.getEntry(k) + temp * zMatrix.getEntry(k, m));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,960,"            fAtInterpolationPoints.setEntry(knew,  f);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,961,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,962,"                interpolationPoints.setEntry(knew, i, newPoint.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,963,"                work1.setEntry(i, bMatrix.getEntry(knew, i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,965,            for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,966,                double suma = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,967,                for (int m = 0; m < nptm; m++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,968,"                    suma += zMatrix.getEntry(knew, m) * zMatrix.getEntry(k, m);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,970,                double sumb = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,971,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,972,"                    sumb += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,974,                final double temp = suma * sumb;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,975,                for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,976,"                    work1.setEntry(i, work1.getEntry(i) + temp * interpolationPoints.getEntry(k, i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,979,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,980,"                gradientAtTrustRegionCenter.setEntry(i, gradientAtTrustRegionCenter.getEntry(i) + diff * work1.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,985,            if (f < fopt) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,986,                trustRegionCenterInterpolationPointIndex = knew;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,987,                xoptsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,988,                ih = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,989,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,990,"                    trustRegionCenterOffset.setEntry(j, newPoint.getEntry(j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,992,                    final double d1 = trustRegionCenterOffset.getEntry(j);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,993,                    xoptsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,994,                    for (int i = 0; i <= j; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,995,                        if (i < j) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,996,"                            gradientAtTrustRegionCenter.setEntry(j, gradientAtTrustRegionCenter.getEntry(j) + modelSecondDerivativesValues.getEntry(ih) * trialStepPoint.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,998,"                        gradientAtTrustRegionCenter.setEntry(i, gradientAtTrustRegionCenter.getEntry(i) + modelSecondDerivativesValues.getEntry(ih) * trialStepPoint.getEntry(j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,999,                        ih++;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1002,                for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1003,                    double temp = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1004,                    for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1005,"                        temp += interpolationPoints.getEntry(k, j) * trialStepPoint.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1007,                    temp *= modelSecondDerivativesParameters.getEntry(k);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1008,                    for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1009,"                        gradientAtTrustRegionCenter.setEntry(i, gradientAtTrustRegionCenter.getEntry(i) + temp * interpolationPoints.getEntry(k, i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1018,            if (ntrits > 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1019,                for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1020,"                    lagrangeValuesAtNewPoint.setEntry(k, fAtInterpolationPoints.getEntry(k) - fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1021,"                    work3.setEntry(k, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1023,                for (int j = 0; j < nptm; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1024,                    double sum = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1025,                    for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1026,"                        sum += zMatrix.getEntry(k, j) * lagrangeValuesAtNewPoint.getEntry(k);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1028,                    for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1029,"                        work3.setEntry(k, work3.getEntry(k) + sum * zMatrix.getEntry(k, j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1032,                for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1033,                    double sum = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1034,                    for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1035,"                        sum += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1037,"                    work2.setEntry(k, work3.getEntry(k));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1038,"                    work3.setEntry(k, sum * work3.getEntry(k));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1040,                double gqsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1041,                double gisq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1042,                for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1043,                    double sum = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1044,                    for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1045,"                        sum += bMatrix.getEntry(k, i) *",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1048,                    if (trustRegionCenterOffset.getEntry(i) == lowerDifference.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1051,"                        final double d1 = Math.min(ZERO, gradientAtTrustRegionCenter.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1052,                        gqsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1054,"                        final double d2 = Math.min(ZERO, sum);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1055,                        gisq += d2 * d2;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1056,                    } else if (trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1059,"                        final double d1 = Math.max(ZERO, gradientAtTrustRegionCenter.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1060,                        gqsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1062,"                        final double d2 = Math.max(ZERO, sum);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1063,                        gisq += d2 * d2;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1064,                    } else {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1066,                        final double d1 = gradientAtTrustRegionCenter.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1067,                        gqsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1068,                        gisq += sum * sum;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1070,"                    lagrangeValuesAtNewPoint.setEntry(npt + i, sum);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1076,                ++itest;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1077,                if (gqsq < TEN * gisq) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1078,                    itest = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1080,                if (itest >= 3) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1081,"                    for (int i = 0, max = Math.max(npt, nh); i < max; i++) {",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1082,                        if (i < n) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1083,"                            gradientAtTrustRegionCenter.setEntry(i, lagrangeValuesAtNewPoint.getEntry(npt + i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1085,                        if (i < npt) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1086,"                            modelSecondDerivativesParameters.setEntry(i, work2.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1088,                        if (i < nh) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1089,"                            modelSecondDerivativesValues.setEntry(i, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1091,                        itest = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1100,            if (ntrits == 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1101,                state = 60; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1103,            if (f <= fopt + ONE_OVER_TEN * vquad) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1104,                state = 60; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1112,            final double d1 = TWO * delta;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1114,            final double d2 = TEN * rho;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1115,"            distsq = Math.max(d1 * d1, d2 * d2);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1118,            printState(650); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1119,            knew = -1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1120,            for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1121,                double sum = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1122,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1124,"                    final double d1 = interpolationPoints.getEntry(k, j) - trustRegionCenterOffset.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1125,                    sum += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1127,                if (sum > distsq) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1128,                    knew = k;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1129,                    distsq = sum;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1139,            if (knew >= 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1140,                final double dist = Math.sqrt(distsq);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1141,                if (ntrits == -1) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1143,"                    delta = Math.min(ONE_OVER_TEN * delta, HALF * dist);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1144,                    if (delta <= rho * 1.5) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1145,                        delta = rho;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1148,                ntrits = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1151,"                final double d1 = Math.min(ONE_OVER_TEN * dist, delta);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1152,"                adelt = Math.max(d1, rho);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1153,                dsq = adelt * adelt;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1154,                state = 90; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1156,            if (ntrits == -1) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1157,                state = 680; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1159,            if (ratio > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1160,                state = 60; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1162,"            if (Math.max(delta, dnorm) > rho) {",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1163,                state = 60; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1170,            printState(680); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1171,            if (rho > stoppingTrustRegionRadius) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1172,                delta = HALF * rho;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1173,                ratio = rho / stoppingTrustRegionRadius;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1174,                if (ratio <= SIXTEEN) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1175,                    rho = stoppingTrustRegionRadius;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1176,                } else if (ratio <= TWO_HUNDRED_FIFTY) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1177,                    rho = Math.sqrt(ratio) * stoppingTrustRegionRadius;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1179,                    rho *= ONE_OVER_TEN;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1181,"                delta = Math.max(delta, rho);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1182,                ntrits = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1183,                nfsav = getEvaluations();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1184,                state = 60; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1190,            if (ntrits == -1) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1191,                state = 360; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1195,            printState(720); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1196,            if (fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex) <= fsave) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1197,                for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1200,                    final double d3 = lowerBound[i];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1201,                    final double d4 = originShift.getEntry(i) + trustRegionCenterOffset.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1202,"                    final double d1 = Math.max(d3, d4);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1203,                    final double d2 = upperBound[i];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1204,"                    currentBest.setEntry(i, Math.min(d1, d2));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1205,                    if (trustRegionCenterOffset.getEntry(i) == lowerDifference.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1206,"                        currentBest.setEntry(i, lowerBound[i]);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1208,                    if (trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1209,"                        currentBest.setEntry(i, upperBound[i]);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1212,                f = fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1214,            return f;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1217,"            throw new MathIllegalStateException(LocalizedFormats.SIMPLE_MESSAGE, ""bobyqb"");",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1260,        printMethod(); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1262,        final int n = currentBest.getDimension();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1263,        final int npt = numberOfInterpolationPoints;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1265,        final ArrayRealVector glag = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1266,        final ArrayRealVector hcol = new ArrayRealVector(npt);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1268,        final ArrayRealVector work1 = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1269,        final ArrayRealVector work2 = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1271,        for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1272,"            hcol.setEntry(k, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1274,"        for (int j = 0, max = npt - n - 1; j < max; j++) {",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1275,"            final double tmp = zMatrix.getEntry(knew, j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1276,            for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1277,"                hcol.setEntry(k, hcol.getEntry(k) + tmp * zMatrix.getEntry(k, j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1280,        final double alpha = hcol.getEntry(knew);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1281,        final double ha = HALF * alpha;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1285,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1286,"            glag.setEntry(i, bMatrix.getEntry(knew, i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1288,        for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1289,            double tmp = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1290,            for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1291,"                tmp += interpolationPoints.getEntry(k, j) * trustRegionCenterOffset.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1293,            tmp *= hcol.getEntry(k);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1294,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1295,"                glag.setEntry(i, glag.getEntry(i) + tmp * interpolationPoints.getEntry(k, i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1305,        double presav = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1306,        double step = Double.NaN;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1307,        int ksav = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1308,        int ibdsav = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1309,        double stpsav = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1310,        for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1311,            if (k == trustRegionCenterInterpolationPointIndex) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1312,                continue;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1314,            double dderiv = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1315,            double distsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1316,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1317,"                final double tmp = interpolationPoints.getEntry(k, i) - trustRegionCenterOffset.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1318,                dderiv += glag.getEntry(i) * tmp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1319,                distsq += tmp * tmp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1321,            double subd = adelt / Math.sqrt(distsq);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1322,            double slbd = -subd;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1323,            int ilbd = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1324,            int iubd = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1325,"            final double sumin = Math.min(ONE, subd);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1329,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1330,"                final double tmp = interpolationPoints.getEntry(k, i) - trustRegionCenterOffset.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1331,                if (tmp > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1332,                    if (slbd * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1333,                        slbd = (lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) / tmp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1334,                        ilbd = -i - 1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1336,                    if (subd * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1338,"                        subd = Math.max(sumin,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1340,                        iubd = i + 1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1342,                } else if (tmp < ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1343,                    if (slbd * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1344,                        slbd = (upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) / tmp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1345,                        ilbd = i + 1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1347,                    if (subd * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1349,"                        subd = Math.max(sumin,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1351,                        iubd = -i - 1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1359,            step = slbd;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1360,            int isbd = ilbd;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1361,            double vlag = Double.NaN;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1362,            if (k == knew) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1363,                final double diff = dderiv - ONE;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1364,                vlag = slbd * (dderiv - slbd * diff);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1365,                final double d1 = subd * (dderiv - subd * diff);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1366,                if (Math.abs(d1) > Math.abs(vlag)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1367,                    step = subd;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1368,                    vlag = d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1369,                    isbd = iubd;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1371,                final double d2 = HALF * dderiv;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1372,                final double d3 = d2 - diff * slbd;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1373,                final double d4 = d2 - diff * subd;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1374,                if (d3 * d4 < ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1375,                    final double d5 = d2 * d2 / diff;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1376,                    if (Math.abs(d5) > Math.abs(vlag)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1377,                        step = d2 / diff;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1378,                        vlag = d5;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1379,                        isbd = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1385,            } else {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1386,                vlag = slbd * (ONE - slbd);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1387,                final double tmp = subd * (ONE - subd);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1388,                if (Math.abs(tmp) > Math.abs(vlag)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1389,                    step = subd;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1390,                    vlag = tmp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1391,                    isbd = iubd;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1393,                if (subd > HALF) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1394,                    if (Math.abs(vlag) < ONE_OVER_FOUR) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1395,                        step = HALF;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1396,                        vlag = ONE_OVER_FOUR;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1397,                        isbd = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1400,                vlag *= dderiv;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1405,            final double tmp = step * (ONE - step) * distsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1406,            final double predsq = vlag * vlag * (vlag * vlag + ha * tmp * tmp);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1407,            if (predsq > presav) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1408,                presav = predsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1409,                ksav = k;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1410,                stpsav = step;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1411,                ibdsav = isbd;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1417,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1418,"            final double tmp = trustRegionCenterOffset.getEntry(i) + stpsav * (interpolationPoints.getEntry(ksav, i) - trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1419,"            newPoint.setEntry(i, Math.max(lowerDifference.getEntry(i),",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1422,        if (ibdsav < 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1423,"            newPoint.setEntry(-ibdsav - 1, lowerDifference.getEntry(-ibdsav - 1));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1425,        if (ibdsav > 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1426,"            newPoint.setEntry(ibdsav - 1, upperDifference.getEntry(ibdsav - 1));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1433,        final double bigstp = adelt + adelt;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1434,        int iflag = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1435,        double cauchy = Double.NaN;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1436,        double csave = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1438,            double wfixsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1439,            double ggfree = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1440,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1441,                final double glagValue = glag.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1442,"                work1.setEntry(i, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1443,"                if (Math.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i), glagValue) > ZERO ||",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1445,"                    work1.setEntry(i, bigstp);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1447,                    ggfree += glagValue * glagValue;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1450,            if (ggfree == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1451,"                return new double[] { alpha, ZERO };",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1455,            final double tmp1 = adelt * adelt - wfixsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1456,            if (tmp1 > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1457,                step = Math.sqrt(tmp1 / ggfree);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1458,                ggfree = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1459,                for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1460,                    if (work1.getEntry(i) == bigstp) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1461,                        final double tmp2 = trustRegionCenterOffset.getEntry(i) - step * glag.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1462,                        if (tmp2 <= lowerDifference.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1463,"                            work1.setEntry(i, lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1465,                            final double d1 = work1.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1466,                            wfixsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1467,                        } else if (tmp2 >= upperDifference.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1468,"                            work1.setEntry(i, upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1470,                            final double d1 = work1.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1471,                            wfixsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1472,                        } else {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1474,                            final double d1 = glag.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1475,                            ggfree += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1484,            double gw = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1485,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1486,                final double glagValue = glag.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1487,                if (work1.getEntry(i) == bigstp) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1488,"                    work1.setEntry(i, -step * glagValue);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1489,"                    final double min = Math.min(upperDifference.getEntry(i),",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1491,"                    alternativeNewPoint.setEntry(i, Math.max(lowerDifference.getEntry(i), min));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1492,                } else if (work1.getEntry(i) == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1493,"                    alternativeNewPoint.setEntry(i, trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1494,                } else if (glagValue > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1495,"                    alternativeNewPoint.setEntry(i, lowerDifference.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1497,"                    alternativeNewPoint.setEntry(i, upperDifference.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1499,                gw += glagValue * work1.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1507,            double curv = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1508,            for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1509,                double tmp = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1510,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1511,"                    tmp += interpolationPoints.getEntry(k, j) * work1.getEntry(j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1513,                curv += hcol.getEntry(k) * tmp * tmp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1515,            if (iflag == 1) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1516,                curv = -curv;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1518,            if (curv > -gw &&,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1520,                final double scale = -gw / curv;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1521,                for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1522,                    final double tmp = trustRegionCenterOffset.getEntry(i) + scale * work1.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1523,"                    alternativeNewPoint.setEntry(i, Math.max(lowerDifference.getEntry(i),",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1527,                final double d1 = HALF * gw * scale;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1528,                cauchy = d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1529,            } else {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1531,                final double d1 = gw + HALF * curv;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1532,                cauchy = d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1539,            if (iflag == 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1540,                for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1541,"                    glag.setEntry(i, -glag.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1542,"                    work2.setEntry(i, alternativeNewPoint.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1544,                csave = cauchy;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1545,                iflag = 1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1549,        },0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1550,        if (csave > cauchy) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1551,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1552,"                alternativeNewPoint.setEntry(i, work2.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1554,            cauchy = csave;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1557,"        return new double[] { alpha, cauchy };",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1635,                        stepa = -stepa;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1636,                        throw new PathIsExploredException(); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1643,"                        stepb = Math.min(TWO * initialTrustRegionRadius, upperDifference.getEntry(nfxm));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1644,                        throw new PathIsExploredException(); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1647,"                        stepb = Math.max(-TWO * initialTrustRegionRadius, lowerDifference.getEntry(nfxm));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1648,                        throw new PathIsExploredException(); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1653,                final int tmp1 = (nfm - np) / n;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1654,                jpt = nfm - tmp1 * n - n;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1655,                ipt = jpt + tmp1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1656,                if (ipt > n) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1657,                    final int tmp2 = jpt;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1658,                    jpt = ipt - n;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1659,                    ipt = tmp2;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1660,                    throw new PathIsExploredException(); // XXX,0.0,1,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1662,                final int iptMinus1 = ipt;,0.0,1,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1663,                final int jptMinus1 = jpt;,0.0,1,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1664,"                interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1665,"                interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1676,"                    currentBest.setEntry(j, lowerBound[j]);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1679,"                    currentBest.setEntry(j, upperBound[j]);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1692,                trustRegionCenterInterpolationPointIndex = nfm;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1706,                        final double oneOverStepA = ONE / stepa;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1707,"                        bMatrix.setEntry(0, nfmm, -oneOverStepA);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1708,"                        bMatrix.setEntry(nfm, nfmm, oneOverStepA);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1709,"                        bMatrix.setEntry(npt + nfmm, nfmm, -HALF * rhosq);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1710,                        throw new PathIsExploredException(); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1723,                                trustRegionCenterInterpolationPointIndex = nfm - n;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1744,"                zMatrix.setEntry(0, nfxm, recip);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1745,"                zMatrix.setEntry(nfm, nfxm, recip);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1746,"                zMatrix.setEntry(ipt, nfxm, -recip);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1747,"                zMatrix.setEntry(jpt, nfxm, -recip);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1749,                final int ih = ipt * (ipt - 1) / 2 + jpt - 1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1750,"                final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1751,"                modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1752,                throw new PathIsExploredException(); // XXX,0.0,1,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1755,    } // prelim,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1812,        printMethod(); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1814,        final int n = currentBest.getDimension();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1815,        final int npt = numberOfInterpolationPoints;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1817,        double dsq = Double.NaN;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1818,        double crvmin = Double.NaN;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1823,"        double dhd, dhs, cth, shs, sth, ssq, beta=0, sdec, blen;",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1824,        int iact = -1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1825,        int nact = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1826,"        double angt = 0, qred;",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1828,"        double temp = 0, xsav = 0, xsum = 0, angbd = 0, dredg = 0, sredg = 0;",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1830,"        double resid = 0, delsq = 0, ggsav = 0, tempa = 0, tempb = 0,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1831,"        redmax = 0, dredsq = 0, redsav = 0, gredsq = 0, rednew = 0;",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1832,        int itcsav = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1833,"        double rdprev = 0, rdnext = 0, stplen = 0, stepsq = 0;",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1834,        int itermax = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1847,        iterc = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1848,        nact = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1849,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1850,"            xbdi.setEntry(i, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1851,            if (trustRegionCenterOffset.getEntry(i) <= lowerDifference.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1852,                if (gradientAtTrustRegionCenter.getEntry(i) >= ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1853,"                    xbdi.setEntry(i, MINUS_ONE);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1855,            } else if (trustRegionCenterOffset.getEntry(i) >= upperDifference.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1856,                if (gradientAtTrustRegionCenter.getEntry(i) <= ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1857,"                    xbdi.setEntry(i, ONE);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1860,            if (xbdi.getEntry(i) != ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1861,                ++nact;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1863,"            trialStepPoint.setEntry(i, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1864,"            gnew.setEntry(i, gradientAtTrustRegionCenter.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1866,        delsq = delta * delta;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1867,        qred = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1868,        crvmin = MINUS_ONE;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1876,        int state = 20;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1878,            switch (state) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1880,            printState(20); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1881,            beta = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1884,            printState(30); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1885,            stepsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1886,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1887,                if (xbdi.getEntry(i) != ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1888,"                    s.setEntry(i, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1889,                } else if (beta == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1890,"                    s.setEntry(i, -gnew.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1892,"                    s.setEntry(i, beta * s.getEntry(i) - gnew.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1895,                final double d1 = s.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1896,                stepsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1898,            if (stepsq == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1899,                state = 190; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1901,            if (beta == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1902,                gredsq = stepsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1903,                itermax = iterc + n - nact;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1905,            if (gredsq * delsq <= qred * 1e-4 * qred) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1906,                state = 190; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1914,            state = 210; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1917,            printState(50); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1918,            resid = delsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1919,            ds = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1920,            shs = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1921,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1922,                if (xbdi.getEntry(i) == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1924,                    final double d1 = trialStepPoint.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1925,                    resid -= d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1926,                    ds += s.getEntry(i) * trialStepPoint.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1927,                    shs += s.getEntry(i) * hs.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1930,            if (resid <= ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1931,                state = 90; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1933,            temp = Math.sqrt(stepsq * resid + ds * ds);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1934,            if (ds < ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1935,                blen = (temp - ds) / stepsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1937,                blen = resid / (temp + ds);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1939,            stplen = blen;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1940,            if (shs > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1942,"                stplen = Math.min(blen, gredsq / shs);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1948,            iact = -1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1949,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1950,                if (s.getEntry(i) != ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1951,                    xsum = trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1952,                    if (s.getEntry(i) > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1953,                        temp = (upperDifference.getEntry(i) - xsum) / s.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1955,                        temp = (lowerDifference.getEntry(i) - xsum) / s.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1957,                    if (temp < stplen) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1958,                        stplen = temp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1959,                        iact = i;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1966,            sdec = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1967,            if (stplen > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1968,                ++iterc;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1969,                temp = shs / stepsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1970,                if (iact == -1 && temp > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1971,"                    crvmin = Math.min(crvmin,temp);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1972,                    if (crvmin == MINUS_ONE) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1973,                        crvmin = temp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1976,                ggsav = gredsq;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1977,                gredsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1978,                for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1979,"                    gnew.setEntry(i, gnew.getEntry(i) + stplen * hs.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1980,                    if (xbdi.getEntry(i) == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1982,                        final double d1 = gnew.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1983,                        gredsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1985,"                    trialStepPoint.setEntry(i, trialStepPoint.getEntry(i) + stplen * s.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1988,                final double d1 = stplen * (ggsav - HALF * stplen * shs);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1989,"                sdec = Math.max(d1, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1990,                qred += sdec;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1995,            if (iact >= 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1996,                ++nact;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1997,"                xbdi.setEntry(iact, ONE);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1998,                if (s.getEntry(iact) < ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1999,"                    xbdi.setEntry(iact, MINUS_ONE);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2002,                final double d1 = trialStepPoint.getEntry(iact);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2003,                delsq -= d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2004,                if (delsq <= ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2005,                    state = 190; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2007,                state = 20; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2013,            if (stplen < blen) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2014,                if (iterc == itermax) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2015,                    state = 190; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2017,                if (sdec <= qred * .01) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2018,                    state = 190; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2020,                beta = gredsq / ggsav;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2021,                state = 30; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2025,            printState(90); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2026,            crvmin = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2034,            printState(100); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2035,            if (nact >= n - 1) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2036,                state = 190; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2038,            dredsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2039,            dredg = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2040,            gredsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2041,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2042,                if (xbdi.getEntry(i) == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2044,                    double d1 = trialStepPoint.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2045,                    dredsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2046,                    dredg += trialStepPoint.getEntry(i) * gnew.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2048,                    d1 = gnew.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2049,                    gredsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2050,"                    s.setEntry(i, trialStepPoint.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2051,                } else {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2052,"                    s.setEntry(i, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2055,            itcsav = iterc;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2056,            state = 210; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2061,            printState(120); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2062,            ++iterc;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2063,            temp = gredsq * dredsq - dredg * dredg;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2064,            if (temp <= qred * 1e-4 * qred) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2065,                state = 190; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2067,            temp = Math.sqrt(temp);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2068,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2069,                if (xbdi.getEntry(i) == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2070,"                    s.setEntry(i, (dredg * trialStepPoint.getEntry(i) - dredsq * gnew.getEntry(i)) / temp);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2072,"                    s.setEntry(i, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2075,            sredg = -temp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2082,            angbd = ONE;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2083,            iact = -1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2084,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2085,                if (xbdi.getEntry(i) == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2086,                    tempa = trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i) - lowerDifference.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2087,                    tempb = upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i) - trialStepPoint.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2088,                    if (tempa <= ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2089,                        ++nact;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2090,"                        xbdi.setEntry(i, MINUS_ONE);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2091,                        state = 100; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2092,                    } else if (tempb <= ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2093,                        ++nact;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2094,"                        xbdi.setEntry(i, ONE);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2095,                        state = 100; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2098,                    double d1 = trialStepPoint.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2100,                    double d2 = s.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2101,                    ssq = d1 * d1 + d2 * d2;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2103,                    d1 = trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2104,                    temp = ssq - d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2105,                    if (temp > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2106,                        temp = Math.sqrt(temp) - s.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2107,                        if (angbd * temp > tempa) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2108,                            angbd = tempa / temp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2109,                            iact = i;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2110,                            xsav = MINUS_ONE;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2114,                    d1 = upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2115,                    temp = ssq - d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2116,                    if (temp > ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2117,                        temp = Math.sqrt(temp) + s.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2118,                        if (angbd * temp > tempb) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2119,                            angbd = tempb / temp;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2120,                            iact = i;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2121,                            xsav = ONE;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2129,            state = 210; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2132,            printState(150); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2133,            shs = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2134,            dhs = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2135,            dhd = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2136,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2137,                if (xbdi.getEntry(i) == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2138,                    shs += s.getEntry(i) * hs.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2139,                    dhs += trialStepPoint.getEntry(i) * hs.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2140,                    dhd += trialStepPoint.getEntry(i) * hred.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2148,            redmax = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2149,            isav = -1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2150,            redsav = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2151,            iu = (int) (angbd * 17. + 3.1);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2152,            for (int i = 0; i < iu; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2153,                angt = angbd * i / iu;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2154,                sth = (angt + angt) / (ONE + angt * angt);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2155,                temp = shs + angt * (angt * dhd - dhs - dhs);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2156,                rednew = sth * (angt * dredg - sredg - HALF * sth * temp);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2157,                if (rednew > redmax) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2158,                    redmax = rednew;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2159,                    isav = i;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2160,                    rdprev = redsav;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2161,                } else if (i == isav + 1) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2162,                    rdnext = rednew;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2164,                redsav = rednew;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2170,            if (isav < 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2171,                state = 190; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2173,            if (isav < iu) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2174,                temp = (rdnext - rdprev) / (redmax + redmax - rdprev - rdnext);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2175,                angt = angbd * (isav + HALF * temp) / iu;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2177,            cth = (ONE - angt * angt) / (ONE + angt * angt);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2178,            sth = (angt + angt) / (ONE + angt * angt);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2179,            temp = shs + angt * (angt * dhd - dhs - dhs);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2180,            sdec = sth * (angt * dredg - sredg - HALF * sth * temp);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2181,            if (sdec <= ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2182,                state = 190; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2189,            dredg = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2190,            gredsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2191,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2192,"                gnew.setEntry(i, gnew.getEntry(i) + (cth - ONE) * hred.getEntry(i) + sth * hs.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2193,                if (xbdi.getEntry(i) == ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2194,"                    trialStepPoint.setEntry(i, cth * trialStepPoint.getEntry(i) + sth * s.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2195,                    dredg += trialStepPoint.getEntry(i) * gnew.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2197,                    final double d1 = gnew.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2198,                    gredsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2200,"                hred.setEntry(i, cth * hred.getEntry(i) + sth * hs.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2202,            qred += sdec;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2203,            if (iact >= 0 && isav == iu) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2204,                ++nact;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2205,"                xbdi.setEntry(iact, xsav);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2206,                state = 100; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2212,            if (sdec > qred * .01) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2213,                state = 120; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2217,            printState(190); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2218,            dsq = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2219,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2222,"                final double min = Math.min(trustRegionCenterOffset.getEntry(i) + trialStepPoint.getEntry(i),",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2224,"                newPoint.setEntry(i, Math.max(min, lowerDifference.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2225,                if (xbdi.getEntry(i) == MINUS_ONE) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2226,"                    newPoint.setEntry(i, lowerDifference.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2228,                if (xbdi.getEntry(i) == ONE) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2229,"                    newPoint.setEntry(i, upperDifference.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2231,"                trialStepPoint.setEntry(i, newPoint.getEntry(i) - trustRegionCenterOffset.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2233,                final double d1 = trialStepPoint.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2234,                dsq += d1 * d1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2236,"            return new double[] { dsq, crvmin };",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2243,            printState(210); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2244,            int ih = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2245,            for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2246,"                hs.setEntry(j, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2247,                for (int i = 0; i <= j; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2248,                    if (i < j) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2249,"                        hs.setEntry(j, hs.getEntry(j) + modelSecondDerivativesValues.getEntry(ih) * s.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2251,"                    hs.setEntry(i, hs.getEntry(i) + modelSecondDerivativesValues.getEntry(ih) * s.getEntry(j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2252,                    ih++;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2255,            final RealVector tmp = interpolationPoints.operate(s).ebeMultiply(modelSecondDerivativesParameters);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2256,            for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2257,                if (modelSecondDerivativesParameters.getEntry(k) != ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2258,                    for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2259,"                        hs.setEntry(i, hs.getEntry(i) + tmp.getEntry(k) * interpolationPoints.getEntry(k, i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2263,            if (crvmin != ZERO) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2264,                state = 50; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2266,            if (iterc > itcsav) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2267,                state = 150; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2269,            for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2270,"                hred.setEntry(i, hs.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2272,            state = 120; break;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2275,"            throw new MathIllegalStateException(LocalizedFormats.SIMPLE_MESSAGE, ""trsbox"");",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2300,        printMethod(); // XXX,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2302,        final int n = currentBest.getDimension();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2303,        final int npt = numberOfInterpolationPoints;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2304,        final int nptm = npt - n - 1;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2307,        final ArrayRealVector work = new ArrayRealVector(npt + n);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2309,        double ztest = ZERO;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2310,        for (int k = 0; k < npt; k++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2311,            for (int j = 0; j < nptm; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2313,"                ztest = Math.max(ztest, Math.abs(zMatrix.getEntry(k, j)));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2316,        ztest *= 1e-20;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2320,        for (int j = 1; j < nptm; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2321,"            final double d1 = zMatrix.getEntry(knew, j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2322,            if (Math.abs(d1) > ztest) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2324,"                final double d2 = zMatrix.getEntry(knew, 0);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2326,"                final double d3 = zMatrix.getEntry(knew, j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2327,                final double d4 = Math.sqrt(d2 * d2 + d3 * d3);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2328,"                final double d5 = zMatrix.getEntry(knew, 0) / d4;",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2329,"                final double d6 = zMatrix.getEntry(knew, j) / d4;",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2330,                for (int i = 0; i < npt; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2331,"                    final double d7 = d5 * zMatrix.getEntry(i, 0) + d6 * zMatrix.getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2332,"                    zMatrix.setEntry(i, j, d5 * zMatrix.getEntry(i, j) - d6 * zMatrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2333,"                    zMatrix.setEntry(i, 0, d7);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2336,"            zMatrix.setEntry(knew, j, ZERO);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2342,        for (int i = 0; i < npt; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2343,"            work.setEntry(i, zMatrix.getEntry(knew, 0) * zMatrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2345,        final double alpha = work.getEntry(knew);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2346,        final double tau = lagrangeValuesAtNewPoint.getEntry(knew);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2347,"        lagrangeValuesAtNewPoint.setEntry(knew, lagrangeValuesAtNewPoint.getEntry(knew) - ONE);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2351,        final double sqrtDenom = Math.sqrt(denom);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2352,        final double d1 = tau / sqrtDenom;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2353,"        final double d2 = zMatrix.getEntry(knew, 0) / sqrtDenom;",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2354,        for (int i = 0; i < npt; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2355,"            zMatrix.setEntry(i, 0,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2361,        for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2362,            final int jp = npt + j;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2363,"            work.setEntry(jp, bMatrix.getEntry(knew, j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2364,            final double d3 = (alpha * lagrangeValuesAtNewPoint.getEntry(jp) - tau * work.getEntry(jp)) / denom;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2365,            final double d4 = (-beta * work.getEntry(jp) - tau * lagrangeValuesAtNewPoint.getEntry(jp)) / denom;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2366,            for (int i = 0; i <= jp; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2367,"                bMatrix.setEntry(i, j,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2369,                if (i >= npt) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2370,"                    bMatrix.setEntry(jp, (i - npt), bMatrix.getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2374,    } // update,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2391,"            throw new NumberIsTooSmallException(dimension, MINIMUM_PROBLEM_DIMENSION, true);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2397,"            throw new OutOfRangeException(LocalizedFormats.NUMBER_OF_INTERPOLATION_POINTS,",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2447,        double[] ds = new double[n];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2448,"        Arrays.fill(ds, value);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2449,        return ds;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2454,        final Throwable t = new Throwable();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2455,        final StackTraceElement[] elements = t.getStackTrace();,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2456,        final StackTraceElement e = elements[n];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2457,"        return e.getMethodName() + "" (at line "" + e.getLineNumber() + "")"";",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2462,    },0.0,0,-1,0
org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,52,public class BOBYQAOptimizer,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,65,        super(checker);,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,66,    },0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,85,"        return optimize(maxEval, f, goalType, startPoint, null, null);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,96,"                throw new DimensionMismatchException(lower.length, dim);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,102,"                    throw new NumberIsTooSmallException(v, lo, true);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,108,"                throw new DimensionMismatchException(upper.length, dim);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,114,"                    throw new NumberIsTooLargeException(v, hi, true);",0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,121,            lowerBound = new double[dim];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,122,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,123,                lowerBound[i] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,129,            upperBound = new double[dim];,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,130,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,131,                upperBound[i] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,38,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,38,42,    },0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,38,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,38,51,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,38,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,38,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,38,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,38,47,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,38,51,        return context;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,38,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,38,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,38,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,38,43,    },0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,38,53,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,38,54,"        getContext().addMessage(specific, max, args);",0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,38,55,        this.max = max;,0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,38,56,    },0.0,0,-1,0
org/apache/commons/math/exception/MaxCountExceededException,38,62,        return max;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,48,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,63,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,70,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,74,        return context;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,38,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math/exception/TooManyEvaluationsException,38,37,        super(max);,0.0,0,-1,0
org/apache/commons/math/exception/TooManyEvaluationsException,38,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0.0,0,-1,0
org/apache/commons/math/exception/TooManyEvaluationsException,38,39,    },0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,38,44,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,38,45,        dimension = expected;,0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,38,46,    },0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,38,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,38,57,    },0.0,0,-1,0
org/apache/commons/math/exception/DimensionMismatchException,38,63,        return dimension;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,38,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,38,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,38,48,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,38,54,        return argument;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,38,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,38,54,    },0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,38,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,38,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,38,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,38,72,    },0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,38,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooSmallException,38,85,        return min;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,38,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,38,54,    },0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,38,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,38,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,38,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,38,71,    },0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,38,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math/exception/NumberIsTooLargeException,38,84,        return max;,0.0,0,-1,0
org/apache/commons/math/exception/OutOfRangeException,38,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math/exception/OutOfRangeException,38,47,    },0.0,0,-1,0
org/apache/commons/math/exception/OutOfRangeException,38,62,"        super(specific, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math/exception/OutOfRangeException,38,63,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math/exception/OutOfRangeException,38,64,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math/exception/OutOfRangeException,38,65,    },0.0,0,-1,0
org/apache/commons/math/exception/OutOfRangeException,38,71,        return lo;,0.0,0,-1,0
org/apache/commons/math/exception/OutOfRangeException,38,77,        return hi;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,98,"        setEntry(index, getEntry(index) + increment);",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,99,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,162,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,163,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,173,        int d = getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,174,        if (d != n) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,175,"            throw new DimensionMismatchException(d, n);",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,177,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,186,        if (index < 0 ||,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,188,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,191,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,203,        RealVector result = v.copy();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,204,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,206,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,207,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,208,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,209,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,210,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,223,        RealVector result = v.copy();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,224,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,226,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,227,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,228,"            result.setEntry(index, e.getValue() - result.getEntry(index));",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,229,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,230,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,241,        return copy().mapAddToSelf(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,252,        if (d != 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,253,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,255,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,274,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,275,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,276,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,278,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,279,            d += e.getValue() * v.getEntry(e.getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,281,        return d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,292,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,293,        final double vNorm = v.getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,295,        if (norm == 0 ||,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,297,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,299,        return dotProduct(v) / (norm * vNorm);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,337,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,338,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,339,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,341,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,342,            final double diff = e.getValue() - v.getEntry(e.getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,343,            d += diff * diff;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,344,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,345,        return FastMath.sqrt(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,359,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,360,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,362,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,363,            final double value = e.getValue();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,364,            sum += value * value;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,365,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,366,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,380,        double norm = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,381,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,383,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,384,            norm += FastMath.abs(e.getValue());,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,386,        return norm;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,400,        double norm = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,401,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,403,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,404,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,406,        return norm;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,421,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,422,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,423,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,425,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,426,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,428,        return d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,446,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,447,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,448,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,450,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,451,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,453,        return d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,463,        int minIndex    = -1;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,464,        double minValue = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,465,        Iterator<Entry> iterator = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,466,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,467,            final Entry entry = iterator.next();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,468,            if (entry.getValue() <= minValue) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,469,                minIndex = entry.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,470,                minValue = entry.getValue();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,472,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,473,        return minIndex;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,483,        final int minIndex = getMinIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,484,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,494,        int maxIndex    = -1;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,495,        double maxValue = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,496,        Iterator<Entry> iterator = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,497,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,498,            final Entry entry = iterator.next();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,499,            if (entry.getValue() >= maxValue) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,500,                maxIndex = entry.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,501,                maxValue = entry.getValue();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,503,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,504,        return maxIndex;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,514,        final int maxIndex = getMaxIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,515,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,527,        return copy().mapMultiplyToSelf(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,538,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,549,        return copy().mapSubtractToSelf(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,560,        return mapAddToSelf(-d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,571,        return copy().mapDivideToSelf(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,582,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,593,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,594,"            product = new OpenMapRealMatrix(this.getDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,597,"            product = new Array2DRowRealMatrix(this.getDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,600,        Iterator<Entry> thisIt = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,601,        Entry thisE = null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,602,        while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,603,            Iterator<Entry> otherIt = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,604,            Entry otherE = null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,605,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,606,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,609,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,611,        return product;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,631,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,632,        Entry e = null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,633,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,634,            e.setValue(value);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,636,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,646,        int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,647,        double[] values = new double[dim];,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,648,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,649,            values[i] = getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,651,        return values;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,662,        RealVector copy = copy();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,663,        copy.unitize();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,664,        return copy;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,675,        mapDivideToSelf(getNorm());,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,676,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,690,        return new SparseEntryIterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,700,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,701,        return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,738,        return copy().mapToSelf(function);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,755,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,757,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,758,            e.setValue(function.value(e.getValue()));,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,760,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,777,"        return copy().combineToSelf(a, b, y);",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,793,        checkVectorDimensions(y);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,794,        for (int i = 0; i < getDimension(); i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,795,            final double xi = getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,796,            final double yi = y.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,797,"            setEntry(i, a * xi + b * yi);",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,799,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,949,        return new RealVector() {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,53,    public ArrayRealVector() {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,54,        data = new double[0];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,55,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,72,"    public ArrayRealVector(int size, double preset) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,73,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,74,"        Arrays.fill(data, preset);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,75,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,101,"    public ArrayRealVector(double[] d, boolean copyArray) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,102,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,103,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,105,        data = copyArray ? d.clone() :  d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,106,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,118,"    public ArrayRealVector(double[] d, int pos, int size) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,119,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,120,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,122,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,123,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,125,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,126,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,127,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,134,    public ArrayRealVector(Double[] d) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,135,        data = new double[d.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,136,        for (int i = 0; i < d.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,137,            data[i] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,139,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,151,"    public ArrayRealVector(Double[] d, int pos, int size) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,152,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,153,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,155,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,156,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,158,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,159,        for (int i = pos; i < pos + size; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,160,            data[i - pos] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,162,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,170,    public ArrayRealVector(RealVector v) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,171,        if (v == null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,172,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,174,        data = new double[v.getDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,175,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,176,            data[i] = v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,178,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,187,"        this(v, true);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,188,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,197,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,198,        data = deep ? v.data.clone() : v.data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,199,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,206,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,207,        data = new double[v1.data.length + v2.data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,208,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,209,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,210,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,217,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,218,        final int l1 = v1.data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,219,        final int l2 = v2.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,220,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,221,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,222,        for (int i = 0; i < l2; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,223,            data[l1 + i] = v2.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,225,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,232,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,233,        final int l1 = v1.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,234,        final int l2 = v2.data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,235,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,236,        for (int i = 0; i < l1; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,237,            data[i] = v1.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,239,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,240,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,247,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,248,        final int l1 = v1.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,249,        final int l2 = v2.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,250,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,251,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,252,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,253,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,260,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,261,        final int l1 = v1.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,262,        final int l2 = v2.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,263,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,264,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,265,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,266,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,273,"    public ArrayRealVector(double[] v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,274,        final int l1 = v1.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,275,        final int l2 = v2.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,276,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,277,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,278,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,279,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,284,"        return new ArrayRealVector(this, true);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,290,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,291,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,292,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,293,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,294,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,295,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,296,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,297,                resultData[i] = data[i] + vData[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,299,            return result;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,301,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,302,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,303,            Iterator<Entry> it = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,305,            while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,306,                out[e.getIndex()] += e.getValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,308,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,315,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,316,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,317,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,318,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,319,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,320,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,321,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,322,                resultData[i] = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,324,            return result;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,326,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,327,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,328,            Iterator<Entry> it = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,330,            while(it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,331,                out[e.getIndex()] -= e.getValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,333,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,340,        return copy().mapToSelf(function);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,346,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,347,            data[i] = function.value(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,349,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,355,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,356,            data[i] = data[i] + d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,358,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,364,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,365,            data[i] = data[i] - d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,367,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,373,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,374,            data[i] = data[i] * d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,376,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,382,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,383,            data[i] = data[i] / d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,385,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,391,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,392,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,393,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,394,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,395,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,396,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,397,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,398,                resultData[i] = data[i] * vData[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,400,            return result;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,402,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,403,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,404,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,405,                out[i] *= v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,407,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,414,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,415,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,416,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,417,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,418,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,419,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,420,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,421,                resultData[i] = data[i] / vData[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,423,            return result;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,425,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,426,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,427,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,428,                out[i] /= v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,430,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,441,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,447,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,448,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,449,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,450,            double dot = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,451,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,452,                dot += data[i] * vData[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,454,            return dot;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,456,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,457,            double dot = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,458,            Iterator<Entry> it = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,460,            while(it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,461,                dot += data[e.getIndex()] * e.getValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,463,            return dot;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,470,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,471,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,472,            sum += a * a;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,474,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,480,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,481,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,482,            sum += FastMath.abs(a);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,484,        return sum;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,490,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,491,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,492,"            max = FastMath.max(max, FastMath.abs(a));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,494,        return max;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,500,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,501,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,502,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,503,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,504,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,505,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,506,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,508,            return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,510,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,511,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,512,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,513,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,514,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,516,            return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,523,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,524,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,525,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,526,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,527,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,528,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,529,                sum += FastMath.abs(delta);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,531,            return sum;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,533,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,534,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,535,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,536,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,537,                sum += FastMath.abs(delta);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,539,            return sum;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,546,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,547,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,548,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,549,            double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,550,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,551,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,552,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,554,            return max;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,556,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,557,            double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,558,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,559,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,560,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,562,            return max;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,569,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,570,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,571,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,573,        return mapDivide(norm);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,579,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,580,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,581,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,583,        mapDivideToSelf(norm);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,584,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,589,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,595,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,596,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,597,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,598,            final int n = vData.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,599,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,600,            for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,601,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,602,"                    out.setEntry(i, j, data[i] * vData[j]);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,605,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,607,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,608,            final int n = v.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,609,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,610,            for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,611,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,612,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,615,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,635,"            return new ArrayRealVector(this, (ArrayRealVector) v);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,636,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,637,"            return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,648,"        return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,654,        final double[] out = new double[data.length + 1];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,655,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,656,        out[data.length] = in;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,657,"        return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,663,        ArrayRealVector out = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,665,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,669,        },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,666,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,667,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,668,            checkIndex(index + n - 1);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,670,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,678,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,679,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,686,        data[index] += increment;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,687,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,692,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,693,"            setSubVector(index, ((ArrayRealVector) v).data);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,696,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,697,                    data[i] = v.getEntry(i - index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,702,            },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,699,            } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,700,                checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,701,                checkIndex(index + v.getDimension() - 1);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,704,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,716,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,720,        },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,717,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,718,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,719,            checkIndex(index + v.length - 1);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,721,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,726,"        Arrays.fill(data, value);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,727,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,738,        return DEFAULT_FORMAT.format(this);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,750,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,751,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,762,        if (data.length != n) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,763,"            throw new DimensionMismatchException(data.length, n);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,765,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,775,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,776,            if (Double.isNaN(v)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,777,                return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,780,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,792,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,793,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,796,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,797,            if (Double.isInfinite(v)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,798,                return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,802,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,821,        if (this == other) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,822,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,825,        if (other == null || !(other instanceof RealVector)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,826,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,829,        RealVector rhs = (RealVector) other;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,830,        if (data.length != rhs.getDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,831,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,834,        if (rhs.isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,835,            return this.isNaN();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,838,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,839,            if (data[i] != rhs.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,840,                return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,843,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,854,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,855,            return 9;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,857,        return MathUtils.hash(data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,863,"        return copy().combineToSelf(a, b, y);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,869,        if (y instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,870,            final double[] yData = ((ArrayRealVector) y).data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,871,            checkVectorDimensions(yData.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,872,            for (int i = 0; i < this.data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,873,                data[i] = a * data[i] + b * yData[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,875,        } else {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,876,            checkVectorDimensions(y);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,877,            for (int i = 0; i < this.data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,878,                data[i] = a * data[i] + b * y.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,881,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,38,37,public class ArrayRealVector extends RealVector implements Serializable {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,34,    private CompositeFormat() {},0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,43,        return getDefaultNumberFormat(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,68,"        parseNextCharacter(source, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,69,        pos.setIndex(pos.getIndex() - 1);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,70,    },0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,81,         int index = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,82,         final int n = source.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,83,         char ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,85,         if (index < n) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,88,                 c = source.charAt(index++);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,89,             } while (Character.isWhitespace(c) && index < n);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,90,             pos.setIndex(index);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,92,             if (index < n) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,93,                 ret = c;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,97,         return ret;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,111,        Number ret = null;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,113,        StringBuilder sb = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,114,        sb.append('(');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,115,        sb.append(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,116,        sb.append(')');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,118,        final int n = sb.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,119,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,120,        final int endIndex = startIndex + n;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,121,        if (endIndex < source.length()) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,123,                ret = Double.valueOf(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,124,                pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,128,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,143,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,144,"        Number number = format.parse(source, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,145,        final int endIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,148,        if (startIndex == endIndex) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,150,            final double[] special = {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,153,            for (int i = 0; i < special.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,154,"                number = parseNumber(source, special[i], pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,155,                if (number != null) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,156,                    break;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,161,        return number;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,175,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,176,        final int endIndex = startIndex + expected.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,177,        if ((startIndex >= source.length()) ||,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,181,            pos.setIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,182,            pos.setErrorIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,183,            return false;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,187,        pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,188,        return true;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,211,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,212,            toAppendTo.append('(');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,213,            toAppendTo.append(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,214,            toAppendTo.append(')');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,216,"            format.format(value, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,38,218,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,38,100,        return maximalCount;,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,38,120,        return count < maximalCount;,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,38,131,        for (int i = 0; i < value; i++) {,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,38,132,            incrementCount();,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,38,134,    },0.0,0,-1,0
org/apache/commons/math/util/Incrementor,38,151,            maxCountCallback.trigger(maximalCount);,0.0,0,-1,0
org/apache/commons/math/util/Incrementor,38,65,                     throw new MaxCountExceededException(max);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,701,        return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,704,            private int i = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,707,            private Entry e = new Entry();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,711,                return i < dim;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,716,                e.setIndex(i++);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,717,                return e;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,722,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,810,        public Entry() {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,811,            setIndex(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,812,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,820,            return getEntry(getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,829,"            setEntry(getIndex(), value);",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,830,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,838,            return index;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,847,            this.index = index;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,848,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,645,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,649,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,650,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,52,    protected AbstractFieldMatrix() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,53,        field = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,54,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,60,    protected AbstractFieldMatrix(final Field<T> field) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,61,        this.field = field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,62,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,75,                                  final int columnDimension) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,76,        if (rowDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,80,        if (columnDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,81,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,84,        this.field = field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,85,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,97,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,98,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,100,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,101,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,103,        if (d[0].length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,104,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,106,        return d[0][0].getField();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,118,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,119,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,121,        return d[0].getField();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,139,        if (columns < 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,140,"            T[] dummyRow = (T[]) Array.newInstance(field.getRuntimeClass(), 0);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,141,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,143,        T[][] array =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,145,        for (int i = 0; i < array.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,146,"            Arrays.fill(array[i], field.getZero());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,148,        return array;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,163,"        T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,164,"        Arrays.fill(array, field.getZero());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,165,        return array;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,170,        return field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,182,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,184,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,185,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,186,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,187,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,188,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,189,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,193,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,199,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,201,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,202,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,203,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,204,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,205,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,206,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,210,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,216,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,217,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,218,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,219,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,220,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,221,"                out.setEntry(row, col, getEntry(row, col).add(d));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,225,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,230,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,231,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,232,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,233,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,234,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,235,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,239,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,245,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,247,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,248,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,249,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,250,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,251,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,252,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,253,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,254,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,255,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,257,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,261,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,266,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,271,        if (p < 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,272,"            throw new IllegalArgumentException(""p must be >= 0"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,275,        if (!isSquare()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,276,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,279,        if (p == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,280,"            return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,283,        if (p == 1) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,284,            return this.copy();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,287,        final int power = p - 1;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,296,        final char[] binaryRepresentation = Integer.toBinaryString(power),0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,298,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,300,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,301,            if (binaryRepresentation[i] == '1') {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,302,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,303,                nonZeroPositions.add(pos);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,307,        ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,310,"        results.add(0, this.copy());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,312,        for (int i = 1; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,313,            final FieldMatrix<T> s = results.get(i - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,314,            final FieldMatrix<T> r = s.multiply(s);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,315,"            results.add(i, r);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,318,        FieldMatrix<T> result = this.copy();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,320,        for (Integer i : nonZeroPositions) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,321,            result = result.multiply(results.get(i));,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,322,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,324,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,329,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,331,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,332,            final T[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,333,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,334,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,338,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,344,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,346,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,348,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,349,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,350,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,354,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,363,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,366,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,368,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,378,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,387,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,388,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,389,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,390,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,391,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,398,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,423,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,428,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,429,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,431,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,438,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,439,            final T[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,440,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,441,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,445,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,449,        if (subMatrix == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,450,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,452,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,453,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,454,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,457,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,458,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,459,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,462,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,463,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,464,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,468,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,469,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,470,        checkRowIndex(nRows + row - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,471,        checkColumnIndex(nCols + column - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,473,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,474,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,475,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,478,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,482,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,483,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,484,"        final FieldMatrix<T> out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,485,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,486,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,489,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,495,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,496,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,497,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,499,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,503,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,504,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,507,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,512,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,513,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,514,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,515,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,516,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,519,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,525,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,526,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,527,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,529,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,533,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,534,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,537,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,541,"        return new ArrayFieldVector<T>(field, getRow(row), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,546,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,547,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,548,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,549,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,552,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,553,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,556,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,560,"        return new ArrayFieldVector<T>(field, getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,565,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,566,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,567,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,568,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,571,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,572,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,575,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,579,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,580,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,581,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,582,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,583,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,586,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,592,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,593,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,594,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,595,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,597,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,598,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,601,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,605,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,606,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,607,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,608,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,609,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,612,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,618,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,619,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,620,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,621,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,623,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,624,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,626,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,642,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,643,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,644,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,645,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,653,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,658,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,669,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,670,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,671,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,672,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,674,        T trace = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,675,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,676,"            trace = trace.add(getEntry(i, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,678,        return trace;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,684,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,685,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,686,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,687,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,690,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,691,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,692,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,693,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,694,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,696,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,699,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,705,"            return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,706,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,707,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,708,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,709,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,710,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,713,"            final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,714,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,715,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,716,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,717,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,719,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,722,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,729,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,730,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,731,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,732,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,735,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,736,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,737,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,738,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,739,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,741,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,744,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,750,"            return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,751,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,752,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,753,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,754,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,755,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,758,"            final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,759,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,760,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,761,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,762,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,764,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,767,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,773,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,774,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,775,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,776,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,777,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,778,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,779,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,780,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,783,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,788,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,789,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,790,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,791,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,792,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,793,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,796,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,803,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,804,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,806,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,807,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,808,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,809,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,810,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,813,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,820,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,821,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,823,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,824,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,825,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,828,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,833,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,834,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,835,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,836,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,837,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,838,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,839,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,840,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,843,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,848,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,849,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,850,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,851,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,852,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,853,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,856,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,863,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,864,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,866,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,867,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,868,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,869,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,870,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,873,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,880,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,881,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,883,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,884,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,885,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,888,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,893,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,898,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,905,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,912,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,921,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,922,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,923,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,924,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,925,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,926,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,928,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,929,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,930,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,932,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,933,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,934,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,935,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,937,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,939,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,942,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,943,        return res.toString();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,956,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,957,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,959,        if (object instanceof FieldMatrix<?> == false) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,960,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,962,        FieldMatrix<?> m = (FieldMatrix<?>) object;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,963,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,964,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,965,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,966,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,968,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,969,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,970,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,971,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,975,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,985,        int ret = 322562;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,986,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,987,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,988,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,989,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,990,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,991,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,992,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,995,        return ret;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1005,        if (row < 0 || row >= getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1006,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1009,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1018,        if (column < 0 || column >= getColumnDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1019,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1022,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1038,        checkRowIndex(startRow);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1039,        checkRowIndex(endRow);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1040,        if (endRow < startRow) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1041,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1045,        checkColumnIndex(startColumn);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1046,        checkColumnIndex(endColumn);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1047,        if (endColumn < startColumn) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1048,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1051,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1064,        if (selectedRows == null ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1066,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1068,        if (selectedRows.length == 0 ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1070,            throw new NoDataException();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1073,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1074,            checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1076,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1077,            checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1079,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1089,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1091,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1094,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1104,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1106,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1109,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1119,        if (getColumnDimension() != m.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1120,"            throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,1122,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,96,"        super(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,97,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,98,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,101,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,102,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,105,"        blocks = createBlocksLayout(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,106,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,122,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,123,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,142,"        super(extractField(blockData), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,143,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,144,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,147,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,148,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,150,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,152,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,155,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,158,        int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,159,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,160,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,161,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,162,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,163,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,166,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,167,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,171,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,199,        final int rows         = rawData.length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,200,        final int columns      = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,201,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,202,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,205,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,206,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,207,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,208,"                throw new DimensionMismatchException(columns, length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,213,        final Field<T> field = extractField(rawData);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,214,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,215,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,216,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,217,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,218,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,219,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,220,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,221,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,222,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,223,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,226,"                final T[] block = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,227,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,230,                int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,231,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,232,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,233,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,236,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,240,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,260,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,261,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,263,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,264,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,265,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,266,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,267,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,268,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,269,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,270,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,271,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,272,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,273,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,274,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,278,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,284,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,292,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,295,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,296,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,299,        return copied;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,306,            return add((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,307,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,310,            checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,312,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,315,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,316,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,317,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,320,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,321,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,322,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,323,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,324,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,325,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,326,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,327,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,328,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,329,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,330,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,335,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,340,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,354,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,356,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,359,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,360,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,361,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,362,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,363,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,364,                outBlock[k] = tBlock[k].add(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,368,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,375,            return subtract((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,376,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,379,            checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,381,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,384,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,385,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,386,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,389,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,390,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,391,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,392,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,393,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,394,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,395,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,396,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,397,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,398,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,399,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,404,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,409,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,422,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,424,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,427,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,428,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,429,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,430,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,431,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,432,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,436,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,442,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,445,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,446,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,447,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,448,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,449,                outBlock[k] = tBlock[k].add(d);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,453,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,460,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,463,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,464,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,465,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,466,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,467,                outBlock[k] = tBlock[k].multiply(d);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,471,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,478,            return multiply((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,479,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,482,            checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,484,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,485,            final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,488,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,489,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,491,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,492,"                final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,494,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,496,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,497,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,500,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,503,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,504,                        final int kWidth      = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,505,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,506,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,507,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,508,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,509,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,510,                            final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,511,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,512,                                T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,513,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,514,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,515,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,516,                                    ++r;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,518,                                outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,519,                                ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,525,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,530,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,545,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,547,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,548,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,551,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,552,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,554,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,555,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,557,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,558,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,559,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,560,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,561,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,564,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,567,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,568,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,569,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,570,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,571,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,572,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,573,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,574,                        final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,575,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,576,                            T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,577,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,578,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,579,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,580,                                sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,585,                                l += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,586,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,588,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,589,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,590,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,592,                            outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,593,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,599,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,603,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,610,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,611,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,613,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,614,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,615,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,616,            int regularPos   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,617,            int lastPos      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,618,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,619,                final T[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,620,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,621,                int dataPos    = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,622,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,623,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,624,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,626,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,627,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,628,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,632,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,640,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,643,        final BlockFieldMatrix<T> out =,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,647,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,648,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,649,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,650,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,653,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,654,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,655,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,656,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,657,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,658,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,661,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,662,                final T[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,663,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,664,                final int      width    = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,666,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,667,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,668,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,670,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,672,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,673,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,677,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,681,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,685,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,689,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,691,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,695,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,702,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,704,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,705,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,709,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,713,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,715,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,721,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,723,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,726,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,749,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,750,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,751,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,752,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,753,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,754,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,755,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,757,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,763,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,764,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,765,        if (refLength == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,766,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,768,        final int endRow    = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,769,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,770,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,771,        for (final T[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,772,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,773,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,778,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,779,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,780,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,781,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,784,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,785,            final int iHeight  = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,786,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,787,"            final int iStart   = FastMath.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,788,"            final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,790,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,791,                final int jWidth      = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,792,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,793,"                final int jStart      = FastMath.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,794,"                final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,795,                final int jLength     = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,798,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,799,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,800,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,807,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,812,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,813,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,816,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,817,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,818,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,819,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,820,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,821,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,822,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,823,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,824,            final int available  = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,825,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,826,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,827,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,828,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,829,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,831,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,832,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,836,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,843,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,846,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,844,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,845,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,847,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,862,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,863,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,864,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,866,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,872,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,873,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,874,        int mBlockIndex  = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,875,        int mIndex       = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,876,        T[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,877,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,878,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,879,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,880,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,881,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,882,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,883,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,884,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,885,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,887,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,888,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,891,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,896,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,897,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,900,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,901,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,902,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,903,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,904,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,905,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,906,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,907,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,908,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,909,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,910,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,911,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,912,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,914,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,918,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,925,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,928,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,926,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,927,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,929,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,944,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,945,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,946,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,948,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,954,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,955,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,956,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,957,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,958,        int mIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,959,        T[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,960,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,961,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,962,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,963,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,964,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,965,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,966,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,968,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,971,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,976,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,977,"        final T[] outData = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,980,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,981,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,982,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,983,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,984,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,985,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,986,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,987,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,990,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,997,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1000,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,998,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,999,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1001,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1006,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1007,"        final T[] outData = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1010,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1011,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1012,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1013,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1014,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1015,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1016,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1017,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1018,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1022,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1029,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1032,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1030,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1031,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1033,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1038,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1039,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1042,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1043,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1044,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1045,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1046,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1047,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1048,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1049,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1052,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1058,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1059,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1060,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1061,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1065,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1066,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1067,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1068,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1069,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1070,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1071,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1072,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1074,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1079,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1080,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1083,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1084,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1085,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1086,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1087,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1088,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1089,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1090,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1091,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1095,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1101,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1102,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1103,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1104,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1108,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1109,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1110,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1111,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1112,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1113,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1114,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1115,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1116,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1119,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1124,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1125,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1127,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1128,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1129,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1132,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1138,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1139,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1141,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1142,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1143,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1146,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1147,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1152,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1153,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1155,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1156,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1157,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1159,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1161,        blockIJ[k] = blockIJ[k].add(increment);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1162,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1167,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1168,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1170,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1171,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1172,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1174,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1176,        blockIJ[k] = blockIJ[k].multiply(factor);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1177,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1182,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1183,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1184,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1187,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1188,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1189,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1192,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1193,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1194,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1195,"                final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1196,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1197,"                final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1198,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1199,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1200,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1201,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1202,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1203,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1204,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1205,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1210,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1215,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1221,        return rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1227,        return columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1233,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1234,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1236,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1237,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1240,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1241,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1242,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1243,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1244,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1245,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1246,"                final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1247,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1248,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1249,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1250,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1251,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1252,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1257,                        k += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1258,                        q += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1260,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1261,                        sum = sum.add(block[k++].multiply(v[q++]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1263,                    out[p] = out[p].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1268,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1275,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1276,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1278,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1279,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1282,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1283,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1284,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1285,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1286,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1287,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1288,"            final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1289,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1290,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1291,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1292,"                final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1293,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1294,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1295,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1296,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1297,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1298,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1303,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1304,                        p += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1306,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1307,                        sum = sum.add(block[k].multiply(v[p++]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1308,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1310,                    out[q] = out[q].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1315,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1321,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1322,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1323,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1324,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1325,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1326,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1327,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1328,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1329,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1330,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1331,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1332,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1333,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1334,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1339,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1345,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1346,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1347,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1348,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1349,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1350,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1351,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1352,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1353,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1354,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1355,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1356,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1357,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1358,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1363,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1371,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1372,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1373,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1374,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1375,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1376,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1377,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1378,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1379,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1380,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1381,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1382,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1383,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1384,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1385,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1386,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1387,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1392,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1400,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1401,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1402,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1403,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1404,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1405,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1406,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1407,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1408,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1409,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1410,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1411,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1412,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1413,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1414,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1415,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1416,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1421,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1427,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1428,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1429,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1430,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1431,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1432,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1433,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1434,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1435,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1436,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1437,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1438,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1439,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1440,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1443,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1446,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1452,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1453,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1454,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1455,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1456,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1457,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1458,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1459,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1460,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1461,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1462,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1463,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1464,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1465,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1468,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1471,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1479,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1480,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1481,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1482,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1483,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1484,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1485,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1486,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1487,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1488,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1489,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1490,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1491,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1492,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1493,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1494,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1495,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1500,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1508,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1509,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1510,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1511,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1512,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1513,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1514,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1515,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1516,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1517,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1518,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1519,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1520,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1521,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1522,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1523,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1524,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1529,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1538,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,38,1547,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/exception/NotStrictlyPositiveException,38,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math/exception/NotStrictlyPositiveException,38,39,    },0.0,0,-1,0
org/apache/commons/math/exception/NotStrictlyPositiveException,38,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math/exception/NotStrictlyPositiveException,38,49,    },0.0,0,-1,0
org/apache/commons/math/exception/NoDataException,38,37,        this(LocalizedFormats.NO_DATA);,0.0,0,-1,0
org/apache/commons/math/exception/NoDataException,38,38,    },0.0,0,-1,0
org/apache/commons/math/exception/NoDataException,38,45,        super(specific);,0.0,0,-1,0
org/apache/commons/math/exception/NoDataException,38,46,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixDimensionMismatchException,38,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixDimensionMismatchException,38,48,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixDimensionMismatchException,38,54,        return getWrongDimension(0);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixDimensionMismatchException,38,60,        return getExpectedDimension(0);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixDimensionMismatchException,38,66,        return getWrongDimension(1);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixDimensionMismatchException,38,72,        return getExpectedDimension(1);,0.0,0,-1,0
org/apache/commons/math/exception/MultiDimensionMismatchException,38,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0.0,0,-1,0
org/apache/commons/math/exception/MultiDimensionMismatchException,38,46,    },0.0,0,-1,0
org/apache/commons/math/exception/MultiDimensionMismatchException,38,59,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math/exception/MultiDimensionMismatchException,38,60,        this.wrong = wrong.clone();,0.0,0,-1,0
org/apache/commons/math/exception/MultiDimensionMismatchException,38,61,        this.expected = expected.clone();,0.0,0,-1,0
org/apache/commons/math/exception/MultiDimensionMismatchException,38,62,    },0.0,0,-1,0
org/apache/commons/math/exception/MultiDimensionMismatchException,38,68,        return wrong.clone();,0.0,0,-1,0
org/apache/commons/math/exception/MultiDimensionMismatchException,38,74,        return expected.clone();,0.0,0,-1,0
org/apache/commons/math/exception/MultiDimensionMismatchException,38,82,        return wrong[index];,0.0,0,-1,0
org/apache/commons/math/exception/MultiDimensionMismatchException,38,89,        return expected[index];,0.0,0,-1,0
org/apache/commons/math/linear/NonSquareMatrixException,38,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",0.0,0,-1,0
org/apache/commons/math/linear/NonSquareMatrixException,38,41,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,531,            super(Fraction.ZERO);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,532,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,538,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,539,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,544,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,545,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,553,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,526,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,949,        return new RealVector() {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1250,            class UnmodifiableEntry extends Entry {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,953,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,959,                return v.map(function);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,965,                final Iterator<Entry> i = v.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,966,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,991,                final Iterator<Entry> i = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,993,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1018,                return v.copy();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1024,                return v.add(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1030,                return v.subtract(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1036,                return v.mapAdd(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1042,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1048,                return v.mapSubtract(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1054,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1060,                return v.mapMultiply(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1066,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1072,                return v.mapDivide(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1078,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1084,                return v.ebeMultiply(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1090,                return v.ebeDivide(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1096,                return v.dotProduct(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1102,                return v.cosine(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1108,                return v.getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1114,                return v.getL1Norm();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1120,                return v.getLInfNorm();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1126,                return v.getDistance(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1132,                return v.getL1Distance(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1138,                return v.getLInfDistance(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1144,                return v.unitVector();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1150,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1156,                return v.projection(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1162,                return v.outerProduct(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1168,                return v.getEntry(index);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1174,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1180,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1186,                return v.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1192,                return v.append(w);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1198,                return v.append(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1204,"                return v.getSubVector(index, n);",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1210,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1216,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1222,                return v.toArray();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1228,                return v.isNaN();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1234,                return v.isInfinite();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1240,"                return v.combine(a, b, y);",0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1246,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,49,"        super(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,50,        long lRow = rowDimension;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,51,        long lCol = columnDimension;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,52,        if (lRow * lCol >= Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,53,"            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,55,        this.rows = rowDimension;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,56,        this.columns = columnDimension;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,57,        this.entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,58,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,65,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,66,        this.rows = matrix.rows;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,67,        this.columns = matrix.columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,68,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,69,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,74,        return new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,80,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,86,        return columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,100,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,102,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,103,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,104,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,105,            final int row = iterator.key() / columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,106,            final int col = iterator.key() - row * columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,107,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,108,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,110,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,118,            return subtract((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,119,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,120,            return (OpenMapRealMatrix) super.subtract(m);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,134,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,136,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,137,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,138,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,139,            final int row = iterator.key() / columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,140,            final int col = iterator.key() - row * columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,141,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,142,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,144,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,151,            return multiply((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,152,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,155,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,157,            final int outCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,158,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,159,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,160,                iterator.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,161,                final double value = iterator.value();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,162,                final int key      = iterator.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,163,                final int i        = key / columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,164,                final int k        = key % columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,165,                for (int j = 0; j < outCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,166,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,168,            },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,170,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,185,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,187,        final int outCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,188,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,189,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,190,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,191,            final double value = iterator.value();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,192,            final int key      = iterator.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,193,            final int i        = key / columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,194,            final int k        = key % columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,195,            for (int j = 0; j < outCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,196,"                final int rightKey = m.computeKey(k, j);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,197,                if (m.entries.containsKey(rightKey)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,198,"                    final int outKey = out.computeKey(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,199,                    final double outValue =,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,201,                    if (outValue == 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,202,                        out.entries.remove(outKey);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,204,"                        out.entries.put(outKey, outValue);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,208,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,210,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,216,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,217,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,218,"        return entries.get(computeKey(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,224,        return rows;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,230,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,231,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,232,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,233,"            entries.remove(computeKey(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,235,"            entries.put(computeKey(row, column), value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,237,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,242,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,243,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,244,"        final int key = computeKey(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,245,        final double value = entries.get(key) + increment;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,246,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,247,            entries.remove(key);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,249,"            entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,251,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,256,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,257,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,258,"        final int key = computeKey(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,259,        final double value = entries.get(key) * factor;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,260,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,261,            entries.remove(key);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,263,"            entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,265,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,274,        return row * columns + column;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,38,31,public class OpenMapRealMatrix extends AbstractRealMatrix,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,44,    protected AbstractRealMatrix() {},0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,55,            throw new NotStrictlyPositiveException(rowDimension);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,58,            throw new NotStrictlyPositiveException(columnDimension);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,71,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,73,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,74,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,76,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,77,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,82,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,88,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,90,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,91,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,93,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,94,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,95,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,99,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,104,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,105,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,107,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,108,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,109,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,113,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,118,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,119,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,121,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,122,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,123,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,127,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,133,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,135,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,136,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,137,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,138,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,139,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,140,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,141,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,142,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,145,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,149,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,154,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,159,        if (p < 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,160,"            throw new IllegalArgumentException(""p must be >= 0"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,163,        if (!isSquare()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,167,        if (p == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,171,        if (p == 1) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,172,            return this.copy();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,175,        final int power = p - 1;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,184,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,185,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,186,        int maxI = -1;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,189,            if (binaryRepresentation[i] == '1') {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,190,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,191,                nonZeroPositions.add(pos);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,194,                if (maxI == -1) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,195,                    maxI = pos;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,200,        RealMatrix[] results = new RealMatrix[maxI + 1];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,201,        results[0] = this.copy();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,203,        for (int i = 1; i <= maxI; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,204,            results[i] = results[i-1].multiply(results[i-1]);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,207,        RealMatrix result = this.copy();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,209,        for (Integer i : nonZeroPositions) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,210,            result = result.multiply(results[i]);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,211,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,213,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,218,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,220,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,221,            final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,222,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,223,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,227,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,297,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,299,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,301,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,302,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,303,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,307,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,313,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,316,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,328,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,336,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,337,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,338,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,340,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,369,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,374,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,375,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,377,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,382,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,383,            final double[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,384,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,385,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,388,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,393,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,394,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,395,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,396,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,399,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,400,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,401,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,404,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,405,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,406,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,410,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,411,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,412,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,413,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,415,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,416,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,417,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,420,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,424,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,425,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,426,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,427,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,428,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,431,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,436,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,437,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,438,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,440,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,444,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,445,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,447,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,451,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,452,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,453,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,454,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,455,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,458,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,463,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,464,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,465,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,467,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,471,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,472,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,474,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,478,"        return new ArrayRealVector(getRow(row), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,483,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,484,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,485,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,486,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,489,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,490,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,492,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,496,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,501,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,502,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,503,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,504,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,507,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,508,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,510,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,514,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,515,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,516,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,517,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,518,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,521,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,526,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,527,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,528,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,529,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,531,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,532,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,534,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,538,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,539,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,540,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,541,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,542,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,545,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,550,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,551,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,552,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,553,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,555,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,556,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,558,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,568,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,569,"        setEntry(row, column, getEntry(row, column) + increment);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,570,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,574,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,575,"        setEntry(row, column, getEntry(row, column) * factor);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,576,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,580,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,581,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,582,"        final RealMatrix out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,583,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,593,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,598,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,621,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,622,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,623,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,624,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,626,        double trace = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,627,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,628,"            trace += getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,630,        return trace;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,635,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,636,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,637,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,638,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,641,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,642,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,643,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,644,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,645,"                sum += getEntry(row, i) * v[i];",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,647,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,650,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,657,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,658,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,659,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,660,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,661,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,662,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,665,            final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,666,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,667,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,668,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,669,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,671,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,674,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,681,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,682,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,683,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,684,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,687,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,688,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,689,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,690,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,691,"                sum += getEntry(i, col) * v[i];",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,693,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,696,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,702,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,703,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,705,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,706,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,707,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,708,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,711,            final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,712,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,713,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,714,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,715,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,717,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,720,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,726,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,727,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,728,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,729,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,730,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,731,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,732,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,733,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,736,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,741,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,742,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,743,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,744,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,745,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,746,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,749,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,756,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,757,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,759,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,760,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,761,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,762,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,763,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,766,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,773,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,774,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,776,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,777,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,778,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,781,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,786,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,787,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,788,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,789,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,790,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,791,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,792,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,793,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,796,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,801,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,802,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,803,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,804,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,805,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,806,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,809,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,816,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,817,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,819,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,820,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,821,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,822,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,823,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,826,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,833,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,834,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,836,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,837,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,838,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,841,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,846,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,851,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,858,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,865,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,874,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,875,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,876,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,877,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,878,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,879,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,881,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,882,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,883,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,885,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,886,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,887,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,888,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,890,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,892,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,895,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,896,        return res.toString();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,909,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,910,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,912,        if (object instanceof RealMatrix == false) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,913,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,915,        RealMatrix m = (RealMatrix) object;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,916,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,917,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,918,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,919,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,921,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,922,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,923,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,924,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,928,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,938,        int ret = 7;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,939,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,940,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,941,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,942,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,943,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,944,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,945,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,949,        return ret;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,44,    public Array2DRowRealMatrix() {},0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,74,        copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,75,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,94,"    public Array2DRowRealMatrix(final double[][] d, final boolean copyArray) {",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,95,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,96,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,98,            if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,99,                throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,101,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,102,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,103,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,105,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,106,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,107,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,109,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,110,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,111,"                    throw new DimensionMismatchException(d[r].length, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,114,            data = d;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,116,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,125,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,126,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,127,        data = new double[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,128,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,129,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,131,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,137,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,143,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,156,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,158,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,159,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,160,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,161,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,162,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,163,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,164,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,165,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,166,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,170,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,183,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,185,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,186,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,187,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,188,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,189,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,190,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,191,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,192,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,193,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,197,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,210,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,212,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,213,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,214,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,216,        final double[][] outData = new double[nRows][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,218,        final double[] mCol = new double[nSum];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,219,        final double[][] mData = m.data;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,222,        for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,225,            for (int mRow = 0; mRow < nSum; mRow++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,226,                mCol[mRow] = mData[mRow][col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,229,            for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,230,                final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,231,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,232,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,233,                    sum += dataRow[i] * mCol[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,235,                outData[row][col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,239,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,245,        return copyOut();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,254,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,261,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,262,            if (row > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,263,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,265,            if (column > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,266,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,268,            MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,269,            final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,270,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,271,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,274,            final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,275,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,276,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,278,            data = new double[subMatrix.length][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,279,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,280,                if (subMatrix[i].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,281,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,285,        } else {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,286,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,289,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,308,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,309,        data[row][column] += increment;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,310,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,315,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,316,        data[row][column] *= factor;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,317,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,334,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,335,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,336,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,337,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,339,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,340,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,341,            final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,342,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,343,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,344,                sum += dataRow[i] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,346,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,348,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,354,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,355,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,356,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,357,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,360,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,361,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,362,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,363,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,364,                sum += data[i][col] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,366,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,369,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,376,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,377,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,378,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,379,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,380,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,381,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,382,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,385,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,391,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,392,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,393,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,394,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,395,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,396,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,397,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,400,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,408,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,409,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,411,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,412,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,413,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,414,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,417,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,425,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,426,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,428,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,429,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,430,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,431,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,434,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,440,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,441,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,442,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,443,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,444,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,445,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,446,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,449,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,455,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,456,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,457,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,458,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,459,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,460,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,463,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,471,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,472,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,474,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,475,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,476,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,477,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,480,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,488,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,489,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,491,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,492,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,493,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,496,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,505,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,506,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,508,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,509,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,511,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,525,"        setSubMatrix(in, 0, 0);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,38,526,    },0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,46,    },0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,59,    },0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,63,        return context;,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,38,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,993,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,995,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,999,                        return i.hasNext();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1004,                        e.setIndex(i.next().getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1005,                        return e;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1010,                        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1250,            class UnmodifiableEntry extends Entry {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1254,                    return v.getEntry(getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,1260,                    throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,368,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,373,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,358,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,359,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,360,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,365,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,366,            },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,873,        protected SparseEntryIterator() {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,874,            dim = getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,875,            current = new Entry();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,876,            next = new Entry();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,877,            if (next.getValue() == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,878,                advance(next);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,880,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,888,            if (e == null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,889,                return;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,892,                e.setIndex(e.getIndex() + 1);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,893,            } while (e.getIndex() < dim && e.getValue() == 0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,894,            if (e.getIndex() >= dim) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,895,                e.setIndex(-1);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,897,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,901,            return next.getIndex() >= 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,906,            int index = next.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,907,            if (index < 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,908,                throw new NoSuchElementException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,910,            current.setIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,911,            advance(next);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,912,            return current;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,917,            throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,0.0,0,-1,0
org/apache/commons/math/exception/ZeroException,38,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math/exception/ZeroException,38,38,    },0.0,0,-1,0
org/apache/commons/math/exception/ZeroException,38,47,"        super(specific, 0, arguments);",0.0,0,-1,0
org/apache/commons/math/exception/ZeroException,38,48,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,73,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,75,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,93,"        this(prefix, suffix, separator,",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,95,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,122,        return NumberFormat.getAvailableLocales();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,130,        return prefix;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,138,        return suffix;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,146,        return separator;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,154,        return format;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,181,"        return format(v, new StringBuffer(), new FieldPosition(0)).toString();",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,195,        pos.setBeginIndex(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,196,        pos.setEndIndex(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,199,        toAppendTo.append(prefix);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,202,        for (int i = 0; i < vector.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,203,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,204,                toAppendTo.append(separator);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,206,"            CompositeFormat.formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,210,        toAppendTo.append(suffix);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,212,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,224,        final ParsePosition parsePosition = new ParsePosition(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,225,"        final ArrayRealVector result = parse(source, parsePosition);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,226,        if (parsePosition.getIndex() == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,227,"            throw new MathParseException(source,",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,231,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,242,        int initialIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,245,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,246,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,247,            return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,251,        List<Number> components = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,252,        for (boolean loop = true; loop;){,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,254,            if (!components.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,255,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,256,"                if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,257,                    loop = false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,261,            if (loop) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,262,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,263,"                Number component = CompositeFormat.parseNumber(source, format, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,264,                if (component != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,265,                    components.add(component);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,269,                    pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,270,                    return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,272,            },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,277,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,278,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,279,            return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,283,        double[] data = new double[components.size()];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,284,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,285,            data[i] = components.get(i).doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,38,287,"        return new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math/exception/MathParseException,38,42,                              Class<?> type) {,0.0,0,-1,0
org/apache/commons/math/exception/MathParseException,38,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",0.0,0,-1,0
org/apache/commons/math/exception/MathParseException,38,45,    },0.0,0,-1,0
org/apache/commons/math/exception/MathParseException,38,53,                              int position) {,0.0,0,-1,0
org/apache/commons/math/exception/MathParseException,38,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,",0.0,0,-1,0
org/apache/commons/math/exception/MathParseException,38,56,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,279,                sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,280,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,284,                sum += value * value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,285,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,289,                return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,966,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,968,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,972,                        return i.hasNext();,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,977,                        e.setIndex(i.next().getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,978,                        return e;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,38,983,                        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,583,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,588,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,589,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,247,                this.endRow = endRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,248,                columnSum   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,249,                maxColSum   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,250,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,254,                columnSum += FastMath.abs(value);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,255,                if (row == endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,256,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,257,                    columnSum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,259,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,263,                return maxColSum;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,53,        super();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,54,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,70,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,92,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,116,        if (data == null ||,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,118,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,120,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,144,        if (data == null ||,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,146,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,148,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,161,"        final RealMatrix m = createRealMatrix(dimension, dimension);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,162,        for (int i = 0; i < dimension; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,163,"            m.setEntry(i, i, 1.0);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,165,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,180,        final T zero = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,181,        final T one  = field.getOne();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,183,"        final T[][] d = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { dimension, dimension });",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,184,        for (int row = 0; row < dimension; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,185,            final T[] dRow = d[row];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,186,"            Arrays.fill(dRow, zero);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,187,            dRow[row] = one;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,189,"        return new Array2DRowFieldMatrix<T>(field, d, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,201,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,202,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,203,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,205,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,219,        final FieldMatrix<T> m =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,221,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,222,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,224,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,236,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,237,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,239,"        return new ArrayRealVector(data, true);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,253,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,254,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,256,        if (data.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,257,            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,259,"        return new ArrayFieldVector<T>(data[0].getField(), data, true);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,272,        if (rowData == null) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,273,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,275,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,276,"        final RealMatrix m = createRealMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,277,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,278,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,280,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,295,        if (rowData == null) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,296,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,298,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,299,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,300,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,302,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,303,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,304,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,306,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,319,        if (columnData == null) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,320,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,322,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,323,"        final RealMatrix m = createRealMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,324,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,325,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,327,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,342,        if (columnData == null) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,343,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,345,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,346,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,347,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,349,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,350,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,351,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,353,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,381,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,395,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,416,"        checkRowIndex(m, startRow);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,417,"        checkRowIndex(m, endRow);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,418,        if (endRow < startRow) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,419,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,423,"        checkColumnIndex(m, startColumn);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,424,"        checkColumnIndex(m, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,425,        if (endColumn < startColumn) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,426,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,431,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,449,        if (selectedRows == null) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,450,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,452,        if (selectedColumns == null) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,453,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,455,        if (selectedRows.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,456,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,458,        if (selectedColumns.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,459,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,462,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,463,"            checkRowIndex(m, row);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,465,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,466,"            checkColumnIndex(m, column);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,468,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,478,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,480,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,483,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,493,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,495,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,498,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,508,        if (left.getColumnDimension() != right.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,509,"            throw new DimensionMismatchException(left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,512,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,520,        final FractionMatrixConverter converter = new FractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,521,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,522,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,565,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,566,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,567,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,645,        final int n = vector.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,646,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,647,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,648,            oos.writeDouble(vector.getEntry(i));,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,650,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,676,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,677,            final double[] data = new double[n];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,678,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,679,                data[i] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,683,"            final RealVector vector = new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,686,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,688,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,689,"            f.set(instance, vector);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,699,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,691,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,692,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,693,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,694,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,695,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,696,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,697,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,698,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,701,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,746,        final int n = matrix.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,747,        final int m = matrix.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,748,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,749,        oos.writeInt(m);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,750,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,751,            for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,752,"                oos.writeDouble(matrix.getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,755,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,781,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,782,            final int m = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,783,            final double[][] data = new double[n][m];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,784,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,785,                final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,786,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,787,                    dataI[j] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,792,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,795,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,797,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,798,"            f.set(instance, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,808,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,800,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,801,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,802,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,803,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,804,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,805,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,806,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,807,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,809,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,827,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,828,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,832,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,833,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,837,        int rows = rm.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,838,        for( int i = 0 ; i < rows ; i++ ){,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,839,"            double diag = rm.getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,840,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,841,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,843,            double bi = b.getEntry(i)/diag;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,844,"            b.setEntry(i,  bi );",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,845,            for( int j = i+1; j< rows; j++ ){,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,846,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,849,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,867,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,868,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,872,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,873,"            throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,877,        int rows = rm.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,878,        for( int i = rows-1 ; i >-1 ; i-- ){,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,879,"            double diag = rm.getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,880,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,881,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,883,            double bi = b.getEntry(i)/diag;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,884,"            b.setEntry(i,  bi );",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,885,            for( int j = i-1; j>-1; j-- ){,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,886,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,889,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,94,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,95,        this.rows = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,96,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,99,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,100,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,103,"        blocks = createBlocksLayout(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,104,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,120,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,121,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,139,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,140,        this.rows = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,141,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,144,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,145,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,147,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,149,            blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,152,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,155,        int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,156,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,157,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,158,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,159,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,160,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,163,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,164,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,168,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,192,        final int rows = rawData.length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,193,        final int columns = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,194,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,195,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,198,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,199,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,200,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,201,"                throw new DimensionMismatchException(columns, length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,206,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,207,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,208,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,209,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,210,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,211,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,212,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,213,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,214,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,215,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,218,                final double[] block = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,219,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,222,                int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,223,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,224,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,225,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,227,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,231,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,247,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,248,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,250,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,251,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,252,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,253,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,254,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,255,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,256,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,257,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,258,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,259,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,260,                blocks[blockIndex] = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,261,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,265,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,271,"        return new BlockRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,278,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,281,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,282,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,285,        return copied;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,292,            return add((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,293,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,295,"            MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,297,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,300,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,301,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,302,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,305,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,306,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,307,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,308,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,309,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,310,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,311,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,312,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,313,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,314,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,315,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,319,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,323,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,337,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,339,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,342,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,343,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,344,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,345,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,346,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,347,                outBlock[k] = tBlock[k] + mBlock[k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,351,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,358,            return subtract((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,359,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,361,"            MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,363,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,366,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,367,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,368,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,371,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,372,                    final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,373,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,374,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,375,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,376,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,377,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,378,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,379,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,380,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,381,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,385,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,389,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,403,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,405,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,408,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,409,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,410,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,411,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,412,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,413,                outBlock[k] = tBlock[k] - mBlock[k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,417,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,424,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,427,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,428,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,429,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,430,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,431,                outBlock[k] = tBlock[k] + d;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,435,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,441,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,444,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,445,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,446,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,447,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,448,                outBlock[k] = tBlock[k] * d;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,452,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,459,            return multiply((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,460,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,462,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,464,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,467,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,468,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,469,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,470,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,472,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,473,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,474,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,477,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,480,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,481,                        final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,482,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,483,                        final int rStart = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,484,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,485,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,486,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,487,                            final int lEnd = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,488,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,489,                                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,490,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,491,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,492,"                                    sum += tBlock[l] * m.getEntry(r, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,493,                                    ++r;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,495,                                outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,496,                                ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,501,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,505,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,519,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,521,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,524,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,525,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,527,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,528,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,530,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,531,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,532,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,533,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,534,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,537,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,540,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,541,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,542,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,543,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,544,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,545,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,546,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,547,                        final int lEnd = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,548,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,549,                            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,550,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,551,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,552,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,553,                                sum += tBlock[l] * mBlock[n] +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,557,                                l += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,558,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,560,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,561,                                sum += tBlock[l++] * mBlock[n];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,562,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,564,                            outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,565,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,570,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,574,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,580,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,581,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,583,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,584,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,585,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,586,            int regularPos = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,587,            int lastPos = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,588,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,589,                final double[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,590,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,591,                int dataPos = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,592,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,593,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,594,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,596,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,597,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,598,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,602,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,608,        final double[] colSums = new double[BLOCK_SIZE];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,609,        double maxColSum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,610,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,611,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,612,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,613,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,614,                final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,615,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,616,                for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,617,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,618,                    for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,619,                        sum += FastMath.abs(block[i * jWidth + j]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,621,                    colSums[j] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,624,            for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,625,"                maxColSum = FastMath.max(maxColSum, colSums[j]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,628,        return maxColSum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,634,        double sum2 = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,635,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,636,            for (final double entry : blocks[blockIndex]) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,637,                sum2 += entry * entry;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,640,        return FastMath.sqrt(sum2);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,648,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,651,        final BlockRealMatrix out =,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,655,        final int blockStartRow = startRow / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,656,        final int rowsShift = startRow % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,657,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,658,        final int columnsShift = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,661,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,662,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,663,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,664,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,665,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,666,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,669,                final int outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,670,                final double[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,671,                final int index = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,672,                final int width = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,674,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,675,                final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,676,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,678,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,680,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,681,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,685,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,689,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,693,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,697,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,699,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,703,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,710,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,712,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,713,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,717,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,721,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,723,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,729,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,731,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,734,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,757,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,758,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,759,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,760,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,761,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,762,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,763,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,765,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,772,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,773,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,774,        if (refLength == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,775,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,777,        final int endRow = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,778,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,779,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,780,        for (final double[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,781,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,782,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,787,        final int blockStartRow = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,788,        final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,789,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,790,        final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,793,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,794,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,795,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,796,"            final int iStart = FastMath.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,797,"            final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,799,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,800,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,801,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,802,"                final int jStart = FastMath.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,803,"                final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,804,                final int jLength = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,807,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,808,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,809,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,816,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,821,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,822,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,825,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,826,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,827,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,828,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,829,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,830,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,831,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,832,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,833,            final int available = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,834,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,835,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,836,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,837,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,838,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,840,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,841,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,845,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,852,"            setRowMatrix(row, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,855,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,853,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,854,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,856,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,871,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,872,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,873,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,875,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,881,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,882,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,883,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,884,        int mIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,885,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,886,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,887,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,888,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,889,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,890,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,891,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,892,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,893,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,894,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,896,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,897,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,900,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,905,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,906,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,909,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,910,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,911,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,912,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,913,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,914,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,915,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,916,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,917,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,918,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,919,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,920,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,921,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,923,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,927,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,934,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,937,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,935,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,936,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,938,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,953,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,954,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,955,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,957,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,963,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,964,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,965,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,966,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,967,        int mIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,968,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,969,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,970,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,971,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,972,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,973,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,974,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,975,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,977,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,980,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,985,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,986,        final double[] outData = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,989,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,990,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,991,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,992,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,993,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,994,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,995,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,996,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,999,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1006,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1009,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1007,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1008,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1010,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1015,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1016,        final double[] outData = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1019,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1020,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1021,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1022,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1023,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1024,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1025,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1026,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1027,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1031,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1038,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1041,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1039,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1040,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1042,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1047,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1048,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1051,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1052,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1053,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1054,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1055,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1056,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1057,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1058,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1061,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1067,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1068,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1069,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1070,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1074,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1075,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1076,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1077,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1078,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1079,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1080,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1081,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1083,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1088,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1089,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1092,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1093,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1094,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1095,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1096,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1097,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1098,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1099,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1100,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1104,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1110,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1111,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1112,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1113,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1117,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1118,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1119,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1120,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1121,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1122,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1123,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1124,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1125,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1128,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1133,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1134,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1135,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1136,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1138,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1144,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1145,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1146,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1147,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1149,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1150,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1155,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1156,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1157,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1158,        final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1160,        blocks[iBlock * blockColumns + jBlock][k] += increment;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1161,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1166,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1167,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1168,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1169,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1171,        blocks[iBlock * blockColumns + jBlock][k] *= factor;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1172,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1177,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1178,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1179,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1182,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1183,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1184,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1186,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1187,                final double[] tBlock = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1188,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1189,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1190,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1191,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1192,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1193,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1194,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1195,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1196,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1197,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1198,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1199,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1203,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1207,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1213,        return rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1219,        return columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1225,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1226,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1228,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1231,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1232,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1233,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1234,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1235,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1236,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1237,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1238,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1239,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1240,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1241,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1242,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1243,                        sum += block[k]     * v[q]     +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1247,                        k += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1248,                        q += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1250,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1251,                        sum += block[k++] * v[q++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1253,                    out[p] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1258,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1264,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1265,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1267,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1270,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1271,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1272,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1273,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1274,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1275,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1276,"            final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1277,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1278,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1279,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1280,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1281,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1282,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1283,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1284,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1285,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1286,                        sum += block[k]           * v[p]     +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1290,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1291,                        p += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1293,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1294,                        sum += block[k] * v[p++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1295,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1297,                    out[q] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1302,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1308,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1309,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1310,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1311,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1312,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1313,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1314,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1315,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1316,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1317,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1318,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1319,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1320,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1321,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1326,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1332,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1333,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1334,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1335,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1336,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1337,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1338,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1339,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1340,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1341,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1342,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1343,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1344,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1345,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1350,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1358,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1359,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1360,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1361,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1362,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1363,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1364,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1365,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1366,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1367,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1368,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1369,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1370,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1371,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1372,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1373,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1374,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1379,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1387,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1388,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1389,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1390,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1391,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1392,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1393,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1394,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1395,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1396,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1397,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1398,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1399,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1400,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1401,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1402,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1403,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1408,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1414,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1415,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1416,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1417,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1418,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1419,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1420,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1421,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1422,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1423,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1424,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1425,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1426,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1427,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1430,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1433,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1439,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1440,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1441,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1442,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1443,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1444,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1445,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1446,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1447,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1448,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1449,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1450,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1451,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1452,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1455,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1458,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1466,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1467,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1468,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1469,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1470,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1471,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1472,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1473,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1474,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1475,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1476,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1477,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1478,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1479,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1480,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1481,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1482,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1487,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1495,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1496,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1497,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1498,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1499,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1500,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1501,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1502,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1503,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1504,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1505,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1506,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1507,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1508,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1509,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1510,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1511,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1516,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1525,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,1534,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,38,69,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,55,        super(field);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,56,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,70,"        super(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,71,"        data = buildArray(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,72,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,89,"        this(extractField(d), d);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,90,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,108,        super(field);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,109,        copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,110,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,129,"        this(extractField(d), d, copyArray);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,130,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,150,        super(field);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,151,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,152,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,154,            MathUtils.checkNotNull(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,155,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,156,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,157,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,159,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,160,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,161,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,163,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,164,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,165,"                    throw new DimensionMismatchException(nCols, d[r].length);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,168,            data = d;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,170,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,180,"        this(extractField(v), v);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,181,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,192,        super(field);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,193,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,194,"        data = buildArray(getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,195,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,196,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,198,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,203,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,209,"        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,222,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,224,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,225,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,226,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,227,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,228,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,229,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,230,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,231,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,232,                outDataRow[col] = dataRow[col].add(mRow[col]);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,236,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,249,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,251,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,252,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,253,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,254,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,255,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,256,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,257,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,258,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,259,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,263,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,277,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,279,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,280,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,281,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,282,"        final T[][] outData = buildArray(getField(), nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,283,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,284,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,285,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,286,            for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,287,                T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,288,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,289,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,291,                outDataRow[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,295,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,302,        return copyOut();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,312,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,318,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,319,            if (row > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,320,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,322,            if (column > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,323,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,325,            final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,326,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,327,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,330,            final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,331,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,332,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,334,"            data = buildArray(getField(), subMatrix.length, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,335,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,336,                if (subMatrix[i].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,337,"                    throw new DimensionMismatchException(nCols, subMatrix[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,339,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,341,        } else {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,342,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,345,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,350,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,351,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,353,        return data[row][column];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,359,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,360,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,362,        data[row][column] = value;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,363,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,368,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,369,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,371,        data[row][column] = data[row][column].add(increment);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,372,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,377,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,378,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,380,        data[row][column] = data[row][column].multiply(factor);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,381,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,386,        return (data == null) ? 0 : data.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,392,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,398,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,399,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,400,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,401,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,403,"        final T[] out = buildArray(getField(), nRows);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,404,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,405,            final T[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,406,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,407,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,408,                sum = sum.add(dataRow[i].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,410,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,412,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,418,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,419,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,420,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,421,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,424,"        final T[] out = buildArray(getField(), nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,425,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,426,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,427,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,428,                sum = sum.add(data[i][col].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,430,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,433,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,439,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,440,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,441,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,442,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,443,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,444,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,445,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,448,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,454,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,455,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,457,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,458,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,459,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,460,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,463,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,471,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,472,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,474,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,475,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,476,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,477,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,480,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,488,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,489,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,491,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,492,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,493,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,494,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,497,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,503,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,504,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,505,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,506,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,507,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,508,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,509,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,512,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,518,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,519,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,520,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,521,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,522,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,523,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,526,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,534,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,535,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,537,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,538,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,539,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,540,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,543,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,551,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,552,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,554,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,555,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,556,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,559,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,568,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,569,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,571,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,572,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,574,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,587,"        setSubMatrix(in, 0, 0);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,38,588,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,576,            super(BigFraction.ZERO);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,577,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,583,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,584,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,589,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,590,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,598,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,38,571,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,398,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,411,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,412,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,413,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,418,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,38,419,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,38,323,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
