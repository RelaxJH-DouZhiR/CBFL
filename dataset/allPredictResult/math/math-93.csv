project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,1.0,1,1,0
org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,1.0,1,1,0
org/apache/commons/math/util/MathUtils,93,374,        if (n < 0) {,0.5,0,-1,0
org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0.5,1,-1,1
org/apache/commons/math/util/MathUtils,93,394,        if (n < 0) {,0.5,0,-1,0
org/apache/commons/math/util/MathUtils,93,397,        double logSum = 0;,0.5,1,-1,1
org/apache/commons/math/util/MathUtils,93,398,        for (int i = 2; i <= n; i++) {,0.5,0,-1,0
org/apache/commons/math/util/MathUtils,93,399,            logSum += Math.log((double)i);,0.5,0,-1,0
org/apache/commons/math/util/MathUtils,93,401,        return logSum;,0.5,0,-1,0
org/apache/commons/math/util/MathUtils,93,316,    private static final long[] factorials = new long[] ,0.00498,0,-1,0
org/apache/commons/math/util/MathUtils,93,63,        super();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,64,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,77,        long s = (long)x + (long)y;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,78,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,79,"            throw new ArithmeticException(""overflow: add"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,81,        return (int)s;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,95,"        return addAndCheck(a, b, ""overflow: add"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,111,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,113,"            ret = addAndCheck(b, a, msg);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,117,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,118,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,120,                    if (Long.MIN_VALUE - b <= a) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,121,                        ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,123,                        throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,127,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,134,                if (a <= Long.MAX_VALUE - b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,135,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,137,                    throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,141,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,170,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,171,            throw new IllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,174,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,175,            throw new IllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,178,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,179,            return 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,181,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,182,            return n;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,185,"        long result = Math.round(binomialCoefficientDouble(n, k));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,186,        if (result == Long.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,187,            throw new ArithmeticException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,190,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,216,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,238,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,239,            throw new IllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,242,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,243,            throw new IllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,246,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,247,            return 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,249,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,250,            return Math.log((double)n);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,252,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,255,        for (int i = k + 1; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,256,            logSum += Math.log((double)i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,260,        for (int i = 2; i <= n - k; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,261,            logSum -= Math.log((double)i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,264,        return logSum;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,275,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,287,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,301,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,302,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,304,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,305,            return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,307,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,308,"            if (!equals(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,309,                return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,312,        return true;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,347,            throw new ArithmeticException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,350,        return factorials[n];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,375,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,395,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,418,        if ((u == 0) || (v == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,419,            return (Math.abs(u) + Math.abs(v));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,426,        if (u > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,427,            u = -u;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,429,        if (v > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,430,            v = -v;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,433,        int k = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,434,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,436,            u /= 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,437,            v /= 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,438,            k++; // cast out twos.,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,440,        if (k == 31) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,441,"            throw new ArithmeticException(""overflow: gcd is 2^31"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,445,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,451,            while ((t & 1) == 0) { // while t is even..,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,452,                t /= 2; // cast out twos,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,455,            if (t > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,456,                u = -t;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,458,                v = t;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,461,            t = (v - u) / 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,464,        } while (t != 0);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,465,        return -u * (1 << k); // gcd is u*2^k,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,475,        return new Double(value).hashCode();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,486,        return Arrays.hashCode(value);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,497,        return (x >= ZB) ? PB : NB;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,509,        if (Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,510,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,512,        return (x >= 0.0) ? 1.0 : -1.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,523,        if (Float.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,524,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,526,        return (x >= 0.0F) ? 1.0F : -1.0F;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,536,        return (x >= 0) ? 1 : -1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,546,        return (x >= 0L) ? 1L : -1L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,557,        return (x >= ZS) ? PS : NS;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,570,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,590,        return Math.log(x)/Math.log(base);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,604,        long m = ((long)x) * ((long)y);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,605,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,606,"            throw new ArithmeticException(""overflow: mul"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,608,        return (int)m;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,623,"        String msg = ""overflow: multiply"";",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,624,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,626,"            ret = mulAndCheck(b, a);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,628,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,629,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,631,                    if (a >= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,632,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,634,                        throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,636,                } else if (b > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,638,                    if (Long.MIN_VALUE / b <= a) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,639,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,641,                        throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,646,                    ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,648,            } else if (a > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,653,                if (a <= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,654,                    ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,656,                    throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,660,                ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,663,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,686,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,687,                return d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,688,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,689,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,695,        long bits     = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,696,        long sign     = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,697,        long exponent = bits & 0x7ff0000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,698,        long mantissa = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,700,        if (d * (direction - d) >= 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,702,                if (mantissa == 0x000fffffffffffffL) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,703,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,706,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,711,                if (mantissa == 0L) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,712,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,716,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,735,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,736,            return d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,740,        final long bits     = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,741,        final long exponent = bits & 0x7ff0000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,742,        final long rest     = bits & 0x800fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,745,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,746,        return Double.longBitsToDouble(newBits);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,770,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,783,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,800,            return (new BigDecimal,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,804,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,805,            if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,806,                return x;          ,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,808,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,823,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,839,        float sign = indicator(x);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,840,"        float factor = (float)Math.pow(10.0f, scale) * sign;",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,841,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,858,        switch (roundingMethod) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,860,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,861,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,863,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,865,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,867,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,868,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,870,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,871,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,873,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,875,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,877,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,878,            double fraction = unscaled - Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,879,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,880,                unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,882,                unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,884,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,887,            double fraction = unscaled - Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,888,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,889,                unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,890,            } else if (fraction < 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,891,                unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,894,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,896,                    unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,898,                    unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,901,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,904,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,905,            double fraction = unscaled - Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,906,            if (fraction >= 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,907,                unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,909,                unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,911,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,914,            if (unscaled != Math.floor(unscaled)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,915,"                throw new ArithmeticException(""Inexact result from rounding"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,919,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,920,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,922,"            throw new IllegalArgumentException(""Invalid rounding method."");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,924,        return unscaled;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,938,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,954,        if (Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,955,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,957,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,972,        if (Float.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,973,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,975,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,989,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1003,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1018,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1029,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1043,        long s = (long)x - (long)y;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1044,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1045,"            throw new ArithmeticException(""overflow: subtract"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1047,        return (int)s;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1062,"        String msg = ""overflow: subtract"";",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1063,        if (b == Long.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1064,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1065,                ret = a - b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1067,                throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1071,"            ret = addAndCheck(a, -b, msg);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,93,1073,        return ret;,0.0,0,-1,0
