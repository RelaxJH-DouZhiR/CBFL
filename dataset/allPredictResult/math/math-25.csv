project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,0.33333,1,1,1
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,0.33333,1,1,1
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,            guessAOmega();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,            for (int j = 1; j < observations.length; ++j) {,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,230,                WeightedObservedPoint prec = curr;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,232,                if (curr.getX() < prec.getX()) {,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,265,            double currentX = observations[0].getX();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,266,            double currentY = observations[0].getY();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,267,            double f2Integral = 0;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,269,            final double startX = currentX;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,272,                final double previousX = currentX;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,273,                final double previousY = currentY;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,275,                currentY = observations[i].getY();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,279,                final double dx = currentX - previousX;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,280,                final double dy = currentY - previousY;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,281,                final double f2StepIntegral =,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,283,                final double fPrime2StepIntegral = dy * dy / dx;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,285,                final double x = currentX - startX;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,286,                f2Integral += f2StepIntegral;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,287,                fPrime2Integral += fPrime2StepIntegral;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,289,                sx2 += x * x;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,290,                sy2 += f2Integral * f2Integral;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,291,                sxy += x * f2Integral;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,292,                sxz += x * fPrime2Integral;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,293,                syz += f2Integral * fPrime2Integral;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,297,            double c1 = sy2 * sxz - sxy * syz;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,298,            double c2 = sxy * sxz - sx2 * syz;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,299,            double c3 = sx2 * sy2 - sxy * sxy;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,300,            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,329,        },0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,336,            double fcMean = 0;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,337,            double fsMean = 0;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,339,            double currentX = observations[0].getX();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,340,            double currentY = observations[0].getY();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,341,            for (int i = 1; i < observations.length; ++i) {,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,343,                final double previousX = currentX;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,344,                final double previousY = currentY;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,345,                currentX = observations[i].getX();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,346,                currentY = observations[i].getY();,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,347,                final double currentYPrime = (currentY - previousY) / (currentX - previousX);,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,349,                double omegaX = omega * currentX;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,350,                double cosine = FastMath.cos(omegaX);,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,351,                double sine = FastMath.sin(omegaX);,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,352,                fcMean += omega * currentY * cosine - currentYPrime * sine;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,353,                fsMean += omega * currentY * sine + currentYPrime * cosine;,0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,356,"            phi = FastMath.atan2(-fsMean, fcMean);",0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,357,        },0.25,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,195,        public ParameterGuesser(WeightedObservedPoint[] observations) {,0.2,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,196,            if (observations.length < 4) {,0.2,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,47,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",0.2,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,48,        this.weight = weight;,0.2,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,49,        this.x      = x;,0.2,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,50,        this.y      = y;,0.2,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,51,    },0.2,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,64,        return x;,0.2,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,71,        return y;,0.2,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,197,"                throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,234,                    int i = j - 1;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,235,                    WeightedObservedPoint mI = observations[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,236,                    while ((i >= 0) && (curr.getX() < mI.getX())) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,237,                        observations[i + 1] = mI;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,238,                        if (i-- != 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,239,                            mI = observations[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,242,                    observations[i + 1] = curr;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,243,                    curr = observations[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,301,                final int last = observations.length - 1;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,304,                final double xRange = observations[last].getX() - observations[0].getX();,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,305,                if (xRange == 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,306,                    throw new ZeroException();,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,308,                omega = 2 * Math.PI / xRange;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,310,                double yMin = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,311,                double yMax = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,312,                for (int i = 1; i < observations.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,313,                    final double y = observations[i].getY();,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,314,                    if (y < yMin) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,315,                        yMin = y;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,317,                    if (y > yMax) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,318,                        yMax = y;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,321,                a = 0.5 * (yMax - yMin);,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,322,            } else {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,46,        super(optimizer);,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,47,    },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,62,"        return fit(new HarmonicOscillator.Parametric(), initialGuess);",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,77,        return fit((new ParameterGuesser(getObservations())).guess());,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,25,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,25,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,25,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,25,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,25,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,25,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,25,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,25,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,25,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,25,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,25,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,25,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,25,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,25,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,25,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,25,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,25,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,25,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,25,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,25,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,25,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,25,47,"        super(specific, 0, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,25,48,    },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,57,        return weight;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,64,    public ExceptionContext(final Throwable throwable) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,65,        this.throwable = throwable;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,66,        msgPatterns    = new ArrayList<Localizable>();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,67,        msgArguments   = new ArrayList<Object[]>();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,68,"        context        = new HashMap<String, Object>();",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,69,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,75,        return throwable;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,87,        msgPatterns.add(pattern);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,88,        msgArguments.add(ArgUtils.flatten(arguments));,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,89,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,100,"        context.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,101,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,110,        return context.get(key);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,119,        return context.keySet();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,128,        return getMessage(Locale.US);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,137,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,147,"        return buildMessage(locale, "": "");",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,159,"        return buildMessage(locale, separator);",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,171,        final StringBuilder sb = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,172,        int count = 0;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,173,        final int len = msgPatterns.size();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,174,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,175,            final Localizable pat = msgPatterns.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,176,            final Object[] args = msgArguments.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,179,            sb.append(fmt.format(args));,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,180,            if (++count < len) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,182,                sb.append(separator);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,186,        return sb.toString();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,197,        out.writeObject(throwable);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,198,        serializeMessages(out);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,199,        serializeContext(out);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,200,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,211,        throwable = (Throwable) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,212,        deSerializeMessages(in);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,213,        deSerializeContext(in);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,214,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,225,        final int len = msgPatterns.size();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,226,        out.writeInt(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,228,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,229,            final Localizable pat = msgPatterns.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,231,            out.writeObject(pat);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,232,            final Object[] args = msgArguments.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,233,            final int aLen = args.length;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,235,            out.writeInt(aLen);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,236,            for (int j = 0; j < aLen; j++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,237,                if (args[j] instanceof Serializable) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,239,                    out.writeObject(args[j]);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,242,                    out.writeObject(nonSerializableReplacement(args[j]));,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,246,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,259,        final int len = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,260,        msgPatterns = new ArrayList<Localizable>(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,261,        msgArguments = new ArrayList<Object[]>(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,263,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,265,            final Localizable pat = (Localizable) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,266,            msgPatterns.add(pat);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,268,            final int aLen = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,269,            final Object[] args = new Object[aLen];,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,270,            for (int j = 0; j < aLen; j++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,272,                args[j] = in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,274,            msgArguments.add(args);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,276,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,287,        final int len = context.keySet().size();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,288,        out.writeInt(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,289,        for (String key : context.keySet()) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,291,            out.writeObject(key);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,292,            final Object value = context.get(key);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,293,            if (value instanceof Serializable) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,295,                out.writeObject(value);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,298,                out.writeObject(nonSerializableReplacement(value));,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,300,        },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,301,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,314,        final int len = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,315,"        context = new HashMap<String, Object>();",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,316,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,318,            final String key = (String) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,320,            final Object value = in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,321,"            context.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,323,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,25,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,366,    private LocalizedFormats(final String sourceFormat) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,367,        this.sourceFormat = sourceFormat;,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,368,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,51,"    BANDWIDTH(""bandwidth ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,92,"    ELITISM_RATE(""elitism rate ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,102,"    EVALUATION(""evaluation""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,120,"    INDEX(""index ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,122,"    INFINITE_BOUND(""interval bounds must be finite""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,133,"    DIMENSION(""dimension ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,157,"    EVALUATIONS(""evaluations""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,162,"    MUTATION_RATE(""mutation rate ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,175,"    START_POSITION(""start position ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,194,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,195,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,196,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,197,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,198,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,199,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,200,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,201,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,202,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,203,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,204,"    EXPONENT(""exponent ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,205,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,206,"    LENGTH(""length ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,207,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,208,"    MEAN(""mean ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,209,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,210,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,211,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,212,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,213,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,214,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,215,"    POPULATION_SIZE(""population size ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,216,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,217,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,218,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,219,"    SCALE(""scale ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,220,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,221,"    SHAPE(""shape ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,222,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,223,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,224,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,225,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,226,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,227,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,228,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,229,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,230,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,231,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,232,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,233,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,234,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,235,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,236,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,237,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,238,"    NO_BIN_SELECTED(""no bin selected""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,239,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,240,"    NO_DATA(""no data""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,241,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,242,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,243,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,244,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,245,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,246,"    NO_RESULT_AVAILABLE(""no result available""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,247,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,248,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,249,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,250,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,251,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,252,"    DENOMINATOR(""denominator""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,253,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,254,"    FRACTION(""fraction""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,255,"    FUNCTION(""function""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,256,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,257,"    INPUT_ARRAY(""input array""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,258,"    NUMERATOR(""numerator""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,259,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,260,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,261,"    REAL_FORMAT(""real format""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,262,"    WHOLE_FORMAT(""whole format""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,263,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,264,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,265,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,266,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,267,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,268,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,269,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,270,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,271,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,272,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,273,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,274,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,275,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,276,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,277,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,278,"    OUT_OF_RANGE(""out of range""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,279,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,280,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,281,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,282,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,283,"    OVERFLOW(""overflow""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,284,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,285,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,286,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,287,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,288,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,289,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,290,"    POLYNOMIAL(""polynomial""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,291,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,292,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,293,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,294,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,295,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,296,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,297,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,298,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,299,"    ROW_INDEX(""row index ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,300,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,301,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,302,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,303,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,304,"    SIMPLE_MESSAGE(""{0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,305,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,306,"    SINGULAR_OPERATOR(""operator is singular""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,307,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,308,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,309,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,310,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,311,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,312,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,313,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,314,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,315,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,316,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,317,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,318,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,319,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,320,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,321,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,322,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,323,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,324,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,325,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,326,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,327,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,328,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,329,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,330,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,331,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,332,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,333,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,334,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,335,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,336,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,337,"    ILLEGAL_STATE(""illegal state""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,338,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,339,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,340,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,341,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,342,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,343,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,344,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,345,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,346,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,347,"    ZERO_DENOMINATOR(""denominator must be different from 0""), /* keep */",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,348,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,349,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,350,"    ZERO_NORM(""zero norm""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,351,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,352,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,353,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,39,public enum LocalizedFormats implements Localizable {,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,372,        return sourceFormat;,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,378,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,379,            ResourceBundle bundle =,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,381,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,383,                return bundle.getString(toString());,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,388,        },0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,386,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,25,392,        return sourceFormat;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,25,32,    private ArgUtils() {},0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,25,42,        final List<Object> list = new ArrayList<Object>();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,25,43,        if (array != null) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,25,44,            for (Object o : array) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,25,45,                if (o instanceof Object[]) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,25,46,                    for (Object oR : flatten((Object[]) o)) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,25,47,                        list.add(oR);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,25,50,                    list.add(o);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,25,54,        return list.toArray();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,25,86,        return context.getLocalizedMessage();,0.0,0,-1,0
