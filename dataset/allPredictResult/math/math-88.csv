project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0.5,1,0,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,0.2,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,0.16667,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,279,                    return null;,0.14286,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,0.125,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,885,        double dot = 0;,0.125,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,886,        for (int i = 0; i < data.length; i++) {,0.125,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,0.125,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,889,        return dot;,0.125,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1287,        if (data.length != n) {,0.125,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1292,    },0.125,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,154,        return true;,0.125,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,179,    },0.125,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,192,        return tableau.getSolution();,0.125,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,48,"    public RealPointValuePair(final double[] point, final double value) {",0.125,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,49,        this.point = point.clone();,0.125,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,50,        this.value  = value;,0.125,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,51,    },0.125,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,0.125,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,326,        Integer basicRow =,0.125,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",0.125,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,0.125,1,-1,1
org/apache/commons/math/optimization/linear/SimplexTableau,88,330,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,0.125,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,333,                coefficients[i] =,0.125,1,-1,1
org/apache/commons/math/optimization/linear/SimplexTableau,88,336,            if (basicRow != null) {,0.125,1,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,0.125,1,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,338,"                    if (tableau.getEntry(basicRow, j) == 1) {",0.125,1,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,344,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",0.125,1,-1,1
org/apache/commons/math/optimization/linear/SimplexTableau,88,459,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,0.125,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,92,        return coefficients.dotProduct(point) + constantTerm;,0.125,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,129,        if (tableau.getNumArtificialVariables() == 0) {,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,134,                return false;,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,137,        return true;,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,146,        if (tableau.getNumArtificialVariables() > 0) {,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,171,        while (!isPhase1Solved(tableau)) {,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,172,            doIteration(tableau);,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,188,        tableau.discardArtificialVariables();,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,189,        while (!isOptimal(tableau)) {,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,293,        int width = getWidth() - numArtificialVariables - 1;,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,294,        int height = getHeight() - 1;,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,295,        double[][] matrix = new double[height][width];,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,296,        for (int i = 0; i < height; i++) {,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,297,            for (int j = 0; j < width - 1; j++) {,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,298,"                matrix[i][j] = getEntry(i + 1, j + 1);",0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,300,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,302,        this.tableau = new RealMatrixImpl(matrix);,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,303,        this.numArtificialVariables = 0;,0.11111,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,304,    },0.11111,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,61,    protected AbstractLinearOptimizer() {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,62,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,63,    },0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,67,        this.maxIterations = maxIterations;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,68,    },0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,86,        if (++iterations > maxIterations) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,91,    },0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,100,        this.f                     = f;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,101,        this.constraints           = constraints;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,102,        this.goalType              = goalType;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,103,        this.restrictToNonNegative = restrictToNonNegative;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,105,        iterations = 0;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,108,        return doOptimize();,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,42,        this(DEFAULT_EPSILON);,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,43,    },0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,49,    public SimplexSolver(final double epsilon) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,50,        this.epsilon = epsilon;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,51,    },0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,59,        double minValue = 0;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,60,        Integer minPos = null;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,61,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,62,"            if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,63,"                minValue = tableau.getEntry(0, i);",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,64,                minPos = i;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,67,        return minPos;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,77,        double minRatio = Double.MAX_VALUE;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,78,        Integer minRatioPos = null;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,79,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,80,"            double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,81,"            if (MathUtils.compareTo(tableau.getEntry(i, col), 0, epsilon) >= 0) {",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,82,"                double ratio = rhs / tableau.getEntry(i, col);",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,83,                if (ratio < minRatio) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,84,                    minRatio = ratio;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,85,                    minRatioPos = i; ,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,89,        return minRatioPos;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,102,        incrementIterationsCounter();,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,104,        Integer pivotCol = getPivotColumn(tableau);,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,105,"        Integer pivotRow = getPivotRow(pivotCol, tableau);",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,106,        if (pivotRow == null) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,111,"        double pivotVal = tableau.getEntry(pivotRow, pivotCol);",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,112,"        tableau.divideRow(pivotRow, pivotVal);",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,115,        for (int i = 0; i < tableau.getHeight(); i++) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,116,            if (i != pivotRow) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,117,"                double multiplier = tableau.getEntry(i, pivotCol);",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,118,"                tableau.subtractRow(i, pivotRow, multiplier);",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,121,    },0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,167,        if (tableau.getNumArtificialVariables() == 0) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,185,        final SimplexTableau tableau =,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,187,        solvePhase1(tableau);,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,290,        if (numArtificialVariables == 0) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,357,        for (int j = 0; j < getWidth(); j++) {,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,358,"            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);",0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,360,    },0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,475,        return numArtificialVariables;,0.1,0,-1,0
org/apache/commons/math/util/MathUtils,88,367,"        if (equals(x, y, eps)) {",0.1,0,-1,0
org/apache/commons/math/util/MathUtils,88,368,            return 0;,0.1,0,-1,0
org/apache/commons/math/util/MathUtils,88,369,        } else if (x < y) {,0.1,0,-1,0
org/apache/commons/math/util/MathUtils,88,370,          return -1;,0.1,0,-1,0
org/apache/commons/math/util/MathUtils,88,372,        return 1;,0.1,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,436,        return getWidth() - 1;,0.09091,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,134,            matrix[0][0] = -1;,0.08333,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,171,                    } else if (constraint.getRelationship() == Relationship.GEQ) {,0.08333,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,178,                        matrix[0][getArtificialVariableOffset() + artificialVar] = 1; ,0.08333,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,179,                        matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; ,0.08333,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,249,            int row = getBasicRow(getArtificialVariableOffset() + artificialVar);,0.08333,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,250,"            subtractRow(0, row, 1.0);",0.08333,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,428,        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;,0.08333,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,354,            return data[row][column];,0.07692,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,367,            data[row][column] = value;,0.07692,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,372,        },0.07692,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,373,    },0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,273,        Integer row = null;,0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,274,        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {,0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,276,                if (row == null) {,0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,277,                    row = i;,0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,283,        return row;,0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,374,        for (int j = 0; j < getWidth(); j++) {,0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,375,"            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -",0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,378,    },0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,385,        return tableau.getColumnDimension();,0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,393,        return tableau.getRowDimension();,0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,402,"        return tableau.getEntry(row, column);",0.07692,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,420,        return getNumObjectiveFunctions() + numDecisionVariables;,0.07692,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,81,"        this(new RealVectorImpl(coefficients), relationship, value);",0.07692,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,82,    },0.07692,0,-1,0
org/apache/commons/math/util/MathUtils,88,30,public final class MathUtils {,0.07692,0,-1,0
org/apache/commons/math/util/MathUtils,88,473,    private static final long[] factorials = new long[] ,0.07692,0,-1,0
org/apache/commons/math/util/MathUtils,88,395,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,0.07692,0,-1,0
org/apache/commons/math/util/MathUtils,88,411,"      return equals(x, y) || (Math.abs(y - x) <= eps);",0.07692,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,43,    protected AbstractRealMatrix() {,0.07143,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,44,        lu = null;,0.07143,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,45,    },0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,77,    public RealVectorImpl(double[] d) {,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,78,        data = d.clone();,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,79,    },0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,36,    private static final RealVectorFormat DEFAULT_FORMAT =,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,854,        return data.clone();,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1157,        return data.length;,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,95,    },0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,117,"                            final String separator, final NumberFormat format) {",0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,118,        this.prefix      = prefix;,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,119,        this.suffix      = suffix;,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,120,        this.separator   = separator;,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,121,        trimmedPrefix    = prefix.trim();,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,122,        trimmedSuffix    = suffix.trim();,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,123,        trimmedSeparator = separator.trim();,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,124,        this.format      = format;,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,125,    },0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,173,        return getInstance(Locale.getDefault());,0.07143,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0.07143,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,31,public abstract class CompositeFormat extends Format {,0.07143,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0.07143,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,55,        nf.setMaximumFractionDigits(2);,0.07143,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,56,        return nf;,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,94,"        throws IllegalArgumentException, NullPointerException {",0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,95,        copyIn(d);,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,96,    },0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,314,        if (data == null) {,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,315,            if (row > 0) {,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,320,            if (column > 0) {,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,325,            final int nRows = subMatrix.length;,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,326,            if (nRows == 0) {,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,330,            final int nCols = subMatrix[0].length;,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,331,            if (nCols == 0) {,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,334,            data = new double[subMatrix.length][nCols];,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,335,            for (int i = 0; i < data.length; ++i) {,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,336,                if (subMatrix[i].length != nCols) {,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,341,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,343,        } else {,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,347,    },0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,404,        return (data == null) ? 0 : data.length;,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,622,"        setSubMatrix(in, 0, 0);",0.07143,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,623,    },0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,104,                   final double epsilon) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,105,        this.f                      = f;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,106,        this.constraints            = constraints;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,107,        this.restrictToNonNegative  = restrictToNonNegative;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,108,        this.epsilon                = epsilon;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,109,        this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,110,        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,112,        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,114,        this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,115,        initialize();,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,116,    },0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,126,        List<LinearConstraint> constraints = getNormalizedConstraints();,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,127,        int width = numDecisionVariables + numSlackVariables +,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,129,        int height = constraints.size() + getNumObjectiveFunctions();,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,130,        double[][] matrix = new double[height][width];,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,133,        if (getNumObjectiveFunctions() == 2) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,136,        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,137,        matrix[zIndex][zIndex] = maximize ? 1 : -1;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,138,        RealVector objectiveCoefficients =,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,140,"            copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());",0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,141,            matrix[zIndex][width - 1] =,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,144,                if (!restrictToNonNegative) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,150,                int slackVar = 0;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,151,                int artificialVar = 0;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,152,                for (int i = 0; i < constraints.size(); i++) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,153,                    LinearConstraint constraint = constraints.get(i);,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,154,                    int row = getNumObjectiveFunctions() + i;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,157,"                    copyArray(constraint.getCoefficients().getData(), matrix[row], 1);",0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,160,                    if (!restrictToNonNegative) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,166,                    matrix[row][width - 1] = constraint.getValue();,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,169,                    if (constraint.getRelationship() == Relationship.LEQ) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,176,                    if ((constraint.getRelationship() == Relationship.EQ) ||,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,183,                return matrix;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,190,        return f.getCoefficients().getDimension();,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,198,        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,199,        for (LinearConstraint constraint : constraints) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,200,            normalized.add(normalize(constraint));,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,201,        },0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,202,        return normalized;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,211,        if (constraint.getValue() < 0) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,216,"        return new LinearConstraint(constraint.getCoefficients(), ",0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,225,        return this.numArtificialVariables > 0 ? 2 : 1;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,234,        int count = 0;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,235,        for (final LinearConstraint constraint : constraints) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,236,            if (constraint.getRelationship() == relationship) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,237,                ++count;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,239,        },0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,240,        return count;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,248,        for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,252,    },0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,314,"        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length); ",0.07143,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,315,    },0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,58,"        this(new RealVectorImpl(coefficients), constantTerm);",0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,59,    },0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,65,"    public LinearObjectiveFunction(RealVector coefficients, double constantTerm) {",0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,66,        this.coefficients = coefficients;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,67,        this.constantTerm = constantTerm;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,68,    },0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,75,        return coefficients;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,83,        return constantTerm;,0.07143,0,-1,0
org/apache/commons/math/optimization/GoalType,88,27,public enum GoalType implements Serializable {,0.07143,0,-1,0
org/apache/commons/math/optimization/GoalType,88,30,"    MAXIMIZE,",0.07143,0,-1,0
org/apache/commons/math/optimization/GoalType,88,33,    MINIMIZE,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,99,                            final double value) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,100,        this.coefficients = coefficients;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,101,        this.relationship = relationship;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,102,        this.value        = value;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,103,    },0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,168,        return coefficients;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,176,        return relationship;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,184,        return value;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,42,    private Relationship(String stringValue) {,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,43,        this.stringValue = stringValue;,0.07143,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,44,    },0.07143,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,28,"    EQ(""=""),",0.07143,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,31,"    LEQ(""<=""),",0.07143,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,34,"    GEQ("">="");",0.07143,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,25,public enum Relationship {,0.07143,0,-1,0
org/apache/commons/math/MathRuntimeException,88,341,"        return new ConcurrentModificationException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,349,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,98,"      super(buildMessage(Locale.US, pattern, arguments));",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,99,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,100,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,101,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,111,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,112,        this.pattern   = getMessage();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,113,        this.arguments = new Object[0];,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,114,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,127,"      super(buildMessage(Locale.US, pattern, arguments), rootCause);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,128,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,129,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,130,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,61,            ResourceBundle bundle =,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,63,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,65,                return bundle.getString(s);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,70,        },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,68,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,74,        return s;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,87,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,137,        return pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,145,        return arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,155,"        return buildMessage(locale, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,161,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,169,        printStackTrace(System.err);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,170,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,179,        synchronized (out) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,180,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,181,            printStackTrace(pw);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,183,            pw.flush();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,184,        },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,185,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,196,"        return new ArithmeticException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,219,"        return new ArrayIndexOutOfBoundsException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,242,"        return new EOFException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,268,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,269,        ioe.initCause(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,270,        return ioe;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,282,"        return new IllegalArgumentException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,304,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,305,        iae.initCause(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,306,        return iae;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,318,"        return new IllegalStateException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,341,"        return new ConcurrentModificationException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,364,"        return new NoSuchElementException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,387,"        return new NullPointerException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,413,"        return new ParseException(buildMessage(Locale.US, pattern, arguments), offset) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,37,public class MathRuntimeException extends RuntimeException {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,219,"        return new ArrayIndexOutOfBoundsException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,227,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,196,"        return new ArithmeticException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,204,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,333,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,334,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,335,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,340,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,341,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,55,        throws IllegalArgumentException {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,56,        if (rowDimension <= 0 ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,57,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,61,        if (columnDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,62,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,66,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,67,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,80,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,82,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,83,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,84,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,85,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,86,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,87,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,91,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,99,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,101,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,102,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,103,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,104,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,105,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,106,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,110,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,117,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,118,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,119,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,120,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,121,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,122,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,126,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,133,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,134,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,135,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,136,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,137,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,138,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,142,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,151,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,153,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,154,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,155,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,156,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,157,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,158,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,159,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,160,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,161,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,163,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,167,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,174,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,180,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,182,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,183,            final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,184,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,185,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,189,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,264,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,266,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,268,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,269,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,270,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,274,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,283,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,286,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,298,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,309,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,310,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,311,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,312,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,313,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,345,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,352,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,353,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,355,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,362,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,363,            final double[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,364,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,365,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,369,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,375,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,376,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,377,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row""); ",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,380,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,381,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,382,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column""); ",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,385,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,386,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,387,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,393,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,394,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,395,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,396,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,398,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,399,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,400,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,404,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,406,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,412,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,413,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,414,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,415,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,416,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,419,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,427,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,428,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,429,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,431,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,435,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,436,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,439,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,445,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,446,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,447,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,448,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,449,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,452,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,460,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,461,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,462,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,464,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,468,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,469,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,472,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,477,"        return new RealVectorImpl(getRow(row), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,484,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,485,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,486,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,487,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,491,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,492,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,495,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,500,"        return new RealVectorImpl(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,507,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,508,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,509,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,510,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,514,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,515,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,518,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,524,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,525,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,526,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,527,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,528,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,531,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,539,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,540,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,541,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,542,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,546,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,547,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,550,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,556,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,557,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,558,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,559,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,560,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,563,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,571,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,572,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,573,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,574,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,578,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,579,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,582,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,603,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,604,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,605,"        final RealMatrix out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,616,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,624,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,625,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,627,        return lu.getInverse();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,634,"        return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,639,        return (getColumnDimension() == getRowDimension());,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,645,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,646,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,648,        return !lu.isNonSingular();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,660,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,661,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,662,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,663,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,665,        double trace = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,666,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,667,"            trace += getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,669,        return trace;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,676,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,677,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,678,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,679,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,684,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,685,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,686,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,687,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,688,"                sum += getEntry(row, i) * v[i];",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,690,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,693,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,701,"            return new RealVectorImpl(operate(((RealVectorImpl) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,702,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,703,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,704,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,705,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,706,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,711,            final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,712,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,713,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,714,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,715,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,717,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,720,"            return new RealVectorImpl(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,728,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,729,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,730,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,731,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,736,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,737,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,738,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,739,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,740,"                sum += getEntry(i, col) * v[i];",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,742,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,745,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,753,"            return new RealVectorImpl(preMultiply(((RealVectorImpl) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,754,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,756,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,757,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,758,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,759,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,764,            final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,765,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,766,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,767,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,768,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,770,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,773,            return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,781,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,782,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,783,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,784,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,785,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,786,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,787,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,788,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,791,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,792,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,798,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,799,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,800,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,801,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,802,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,803,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,806,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,814,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,815,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,817,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,818,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,819,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,820,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,821,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,824,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,825,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,833,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,834,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,836,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,837,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,838,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,841,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,847,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,848,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,849,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,850,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,851,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,852,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,853,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,854,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,857,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,858,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,864,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,865,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,866,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,867,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,868,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,869,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,872,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,880,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,881,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,883,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,884,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,885,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,886,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,887,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,890,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,891,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,899,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,900,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,902,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,903,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,904,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,907,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,913,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,919,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,927,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,935,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,942,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,943,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,945,        return lu.solve(b);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,952,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,953,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,955,        return lu.solve(b);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,980,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,981,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,983,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,991,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,992,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,993,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,994,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,996,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,998,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,999,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1000,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1002,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1003,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1004,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1005,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1007,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1009,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1012,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1013,        return res.toString();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1027,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1028,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1030,        if (object instanceof RealMatrix == false) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1031,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1033,        RealMatrix m = (RealMatrix) object;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1034,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1035,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1036,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1037,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1039,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1040,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1041,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1042,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1046,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1056,        int ret = 7;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1057,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1058,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1059,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1060,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1061,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1062,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1063,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * ,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,1067,        return ret;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixIndexException,88,38,"      super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixIndexException,88,39,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,413,"        return new ParseException(buildMessage(Locale.US, pattern, arguments), offset) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,421,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,387,"        return new NullPointerException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,395,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,364,"        return new NoSuchElementException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,372,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,318,"        return new IllegalStateException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,326,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,282,"        return new IllegalArgumentException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,290,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,242,"        return new EOFException(buildMessage(Locale.US, pattern, arguments)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,88,250,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,611,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,612,            },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,51,    public RealVectorImpl() {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,52,        data = new double[0];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,53,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,59,    public RealVectorImpl(int size) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,60,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,61,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,68,"    public RealVectorImpl(int size, double preset) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,69,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,70,"        Arrays.fill(data, preset);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,71,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,96,"        throws NullPointerException, IllegalArgumentException {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,97,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,98,            throw new NullPointerException();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,100,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,101,"            throw MathRuntimeException.createIllegalArgumentException(""vector must have at least one element""); ",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,103,        data = copyArray ? d.clone() :  d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,104,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,112,"    public RealVectorImpl(double[] d, int pos, int size) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,113,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,114,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,118,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,119,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,120,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,126,    public RealVectorImpl(Double[] d) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,127,        data = new double[d.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,128,        for (int i = 0; i < d.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,129,            data[i] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,131,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,139,"    public RealVectorImpl(Double[] d, int pos, int size) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,140,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,141,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,145,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,146,        for (int i = pos; i < pos + size; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,147,            data[i-pos] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,149,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,155,    public RealVectorImpl(RealVector v) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,156,        data = new double[v.getDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,157,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,158,            data[i] = v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,160,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,166,    public RealVectorImpl(RealVectorImpl v) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,167,        data = v.data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,168,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,175,"    public RealVectorImpl(RealVectorImpl v, boolean deep) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,176,        data = deep ? v.data.clone() : v.data;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,177,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,184,"    public RealVectorImpl(RealVectorImpl v1, RealVectorImpl v2) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,185,        data = new double[v1.data.length + v2.data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,186,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,187,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,188,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,195,"    public RealVectorImpl(RealVectorImpl v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,196,        data = new double[v1.data.length + v2.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,197,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,198,"        System.arraycopy(v2, 0, data, v1.data.length, v2.length);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,199,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,206,"    public RealVectorImpl(double[] v1, RealVectorImpl v2) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,207,        data = new double[v1.length + v2.data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,208,"        System.arraycopy(v1, 0, data, 0, v1.length);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,209,"        System.arraycopy(v2.data, 0, data, v1.length, v2.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,210,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,217,"    public RealVectorImpl(double[] v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,218,        data = new double[v1.length + v2.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,219,"        System.arraycopy(v1, 0, data, 0, v1.length);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,220,"        System.arraycopy(v2, 0, data, v1.length, v2.length);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,221,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,225,"        return new RealVectorImpl(this, true);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,232,            return add((RealVectorImpl) v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,233,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,234,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,235,            double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,236,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,237,                out[i] = data[i] + v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,239,            return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,246,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,247,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,248,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,249,            out[i] = data[i] + v[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,251,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,262,        return (RealVectorImpl) add(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,269,            return subtract((RealVectorImpl) v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,270,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,271,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,272,            double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,273,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,274,                out[i] = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,276,            return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,283,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,284,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,285,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,286,            out[i] = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,288,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,299,        return (RealVectorImpl) subtract(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,304,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,305,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,306,            out[i] = data[i] + d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,308,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,313,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,314,            data[i] = data[i] + d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,316,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,321,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,322,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,323,            out[i] = data[i] - d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,325,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,330,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,331,            data[i] = data[i] - d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,333,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,338,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,339,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,340,            out[i] = data[i] * d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,342,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,347,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,348,            data[i] = data[i] * d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,350,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,355,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,356,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,357,            out[i] = data[i] / d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,359,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,364,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,365,            data[i] = data[i] / d;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,367,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,372,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,373,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,374,"            out[i] = Math.pow(data[i], d);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,376,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,381,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,382,"            data[i] = Math.pow(data[i], d);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,384,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,389,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,390,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,391,            out[i] = Math.exp(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,393,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,398,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,399,            data[i] = Math.exp(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,401,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,406,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,407,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,408,            out[i] = Math.expm1(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,410,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,415,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,416,            data[i] = Math.expm1(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,418,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,423,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,424,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,425,            out[i] = Math.log(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,427,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,432,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,433,            data[i] = Math.log(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,435,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,440,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,441,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,442,            out[i] = Math.log10(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,444,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,449,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,450,            data[i] = Math.log10(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,452,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,457,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,458,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,459,            out[i] = Math.log1p(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,461,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,466,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,467,            data[i] = Math.log1p(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,469,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,474,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,475,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,476,            out[i] = Math.cosh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,478,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,483,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,484,            data[i] = Math.cosh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,486,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,491,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,492,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,493,            out[i] = Math.sinh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,495,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,500,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,501,            data[i] = Math.sinh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,503,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,508,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,509,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,510,            out[i] = Math.tanh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,512,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,517,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,518,            data[i] = Math.tanh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,520,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,525,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,526,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,527,            out[i] = Math.cos(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,529,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,534,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,535,            data[i] = Math.cos(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,537,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,542,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,543,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,544,            out[i] = Math.sin(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,546,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,551,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,552,            data[i] = Math.sin(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,554,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,559,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,560,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,561,            out[i] = Math.tan(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,563,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,568,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,569,            data[i] = Math.tan(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,571,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,576,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,577,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,578,            out[i] = Math.acos(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,580,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,585,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,586,            data[i] = Math.acos(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,588,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,593,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,594,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,595,            out[i] = Math.asin(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,597,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,602,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,603,            data[i] = Math.asin(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,605,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,610,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,611,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,612,            out[i] = Math.atan(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,614,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,619,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,620,            data[i] = Math.atan(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,622,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,627,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,628,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,629,            out[i] = 1.0 / data[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,631,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,636,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,637,            data[i] = 1.0 / data[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,639,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,644,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,645,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,646,            out[i] = Math.abs(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,648,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,653,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,654,            data[i] = Math.abs(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,656,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,661,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,662,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,663,            out[i] = Math.sqrt(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,665,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,670,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,671,            data[i] = Math.sqrt(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,673,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,678,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,679,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,680,            out[i] = Math.cbrt(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,682,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,687,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,688,            data[i] = Math.cbrt(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,690,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,695,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,696,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,697,            out[i] = Math.ceil(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,699,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,704,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,705,            data[i] = Math.ceil(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,707,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,712,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,713,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,714,            out[i] = Math.floor(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,716,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,721,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,722,            data[i] = Math.floor(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,724,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,729,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,730,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,731,            out[i] = Math.rint(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,733,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,738,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,739,            data[i] = Math.rint(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,741,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,746,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,747,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,748,            out[i] = Math.signum(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,750,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,755,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,756,            data[i] = Math.signum(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,758,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,763,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,764,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,765,            out[i] = Math.ulp(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,767,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,772,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,773,            data[i] = Math.ulp(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,775,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,782,            return ebeMultiply((RealVectorImpl) v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,783,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,784,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,785,            double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,786,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,787,                out[i] = data[i] * v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,789,            return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,796,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,797,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,798,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,799,            out[i] = data[i] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,801,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,812,        return (RealVectorImpl) ebeMultiply(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,819,            return ebeDivide((RealVectorImpl) v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,820,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,821,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,822,            double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,823,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,824,                out[i] = data[i] / v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,826,            return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,833,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,834,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,835,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,836,                out[i] = data[i] / v[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,838,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,849,        return (RealVectorImpl) ebeDivide(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,863,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,870,            return dotProduct((RealVectorImpl) v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,871,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,872,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,873,            double dot = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,874,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,875,                dot += data[i] * v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,877,            return dot;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,900,        return dotProduct(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,905,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,906,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,907,            sum += a * a;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,909,        return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,914,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,915,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,916,            sum += Math.abs(a);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,918,        return sum;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,923,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,924,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,925,"            max += Math.max(max, Math.abs(a));",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,927,        return max;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,934,            return getDistance((RealVectorImpl) v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,935,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,936,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,937,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,938,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,939,                final double delta = data[i] - v.getEntry(i); ,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,940,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,942,            return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,949,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,950,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,951,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,952,            final double delta = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,953,            sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,955,        return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,973,        return getDistance(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,980,            return getL1Distance((RealVectorImpl) v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,981,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,982,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,983,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,984,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,985,                final double delta = data[i] - v.getEntry(i); ,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,986,                sum += Math.abs(delta);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,988,            return sum;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,995,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,996,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,997,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,998,            final double delta = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,999,            sum += Math.abs(delta);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1001,        return sum;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1019,        return getL1Distance(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1026,            return getLInfDistance((RealVectorImpl) v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1027,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1028,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1029,            double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1030,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1031,                final double delta = data[i] - v.getEntry(i); ,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1032,"                max = Math.max(max, Math.abs(delta));",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1034,            return max;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1041,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1042,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1043,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1044,            final double delta = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1045,"            max = Math.max(max, Math.abs(delta));",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1047,        return max;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1065,        return getLInfDistance(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1070,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1071,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1072,"            throw MathRuntimeException.createArithmeticException(""zero norm"");",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1074,        return mapDivide(getNorm());,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1079,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1080,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1081,"            throw MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1083,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1084,            data[i] /= norm;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1086,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1090,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1095,"        return projection(new RealVectorImpl(v, false));",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1104,        return (RealVectorImpl) v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1111,            return outerProduct((RealVectorImpl) v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1112,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1113,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1114,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1115,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1116,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1117,                for (int j = 0; j < data.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1118,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1121,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1133,        return outerProduct(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1139,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1140,        final int m = data.length;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1141,"        final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1142,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1143,            for (int j = 0; j < data.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1144,"                out.setEntry(i, j, data[i] * v[j]);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1147,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1152,        return data[index];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1163,            return append((RealVectorImpl) v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1164,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1165,"            return new RealVectorImpl(this,new RealVectorImpl(v));",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1175,"        return new RealVectorImpl(this, v);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1180,        final double[] out = new double[data.length + 1];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1181,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1182,        out[data.length] = in;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1183,        return new RealVectorImpl(out);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1188,"        return new RealVectorImpl(this, in);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1193,        RealVectorImpl out = new RealVectorImpl(n);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1195,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1199,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1196,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1197,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1198,            checkIndex(index + n - 1);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1200,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1206,            data[index] = value;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1209,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1207,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1208,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1210,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1216,"                set(index, (RealVectorImpl) v);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1221,            },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1217,            } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1218,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1219,                    data[i] = v.getEntry(i-index);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1225,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1222,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1223,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1224,            checkIndex(index + v.getDimension() - 1);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1226,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1231,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1235,        },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1232,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1233,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1234,            checkIndex(index + v.length - 1);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1236,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1248,"        setSubVector(index, v.data);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1249,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1253,"        Arrays.fill(data, value);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1254,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1258,        return data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1264,        return DEFAULT_FORMAT.format(this);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1275,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1276,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1288,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1299,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1300,            if (Double.isNaN(v)) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1301,                return true;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1304,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1315,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1316,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1319,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1320,            if (Double.isInfinite(v)) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1321,                return true;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1325,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1351,      if (this == other) { ,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1352,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1355,      if (other == null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1356,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1361,          RealVector rhs = (RealVector) other;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1362,          if (data.length != rhs.getDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1363,              return false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1366,          if (rhs.isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1367,              return this.isNaN();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1370,          for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1371,              if (data[i] != rhs.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1372,                  return false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1375,          return true;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1377,      } catch (ClassCastException ex) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1379,          return false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1391,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1392,            return 9;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1394,        return MathUtils.hash(data);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1404,        if (index < 0 || index >= getDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1405,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorImpl,88,1409,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,86,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, getDefaultNumberFormat());",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,87,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,105,"        this(prefix, suffix, separator, getDefaultNumberFormat());",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,106,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,133,        return NumberFormat.getAvailableLocales();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,141,        return prefix;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,149,        return suffix;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,157,        return separator;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,165,        return format;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,193,        return getInstance().format(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,207,        pos.setBeginIndex(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,208,        pos.setEndIndex(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,211,        toAppendTo.append(prefix);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,214,        for (int i = 0; i < vector.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,215,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,216,                toAppendTo.append(separator);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,218,"            formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,222,        toAppendTo.append(suffix);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,224,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,244,        if (obj instanceof RealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,245,"            return format( (RealVector)obj, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,248,        throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,262,        ParsePosition parsePosition = new ParsePosition(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,263,"        RealVectorImpl result = parse(source, parsePosition);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,264,        if (parsePosition.getIndex() == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,265,            throw MathRuntimeException.createParseException(,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,269,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,279,        int initialIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,282,"        parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,283,"        if (!parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,284,            return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,288,        List<Number> components = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,289,        for (boolean loop = true; loop;){,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,291,            if (!components.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,292,"                parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,293,"                if (!parseFixedstring(source, trimmedSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,294,                    loop = false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,298,            if (loop) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,299,"                parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,300,"                Number component = parseNumber(source, format, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,301,                if (component != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,302,                    components.add(component);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,306,                    pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,307,                    return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,309,            },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,314,"        parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,315,"        if (!parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,316,            return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,320,        double[] data = new double[components.size()];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,321,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,322,            data[i] = components.get(i).doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,324,"        return new RealVectorImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,88,337,"        return parse(source, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,43,        return getDefaultNumberFormat(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,68,"        parseNextCharacter(source, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,69,        pos.setIndex(pos.getIndex() - 1);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,70,    },0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,81,         int index = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,82,         final int n = source.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,83,         char ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,85,         if (index < n) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,88,                 c = source.charAt(index++);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,89,             } while (Character.isWhitespace(c) && index < n);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,90,             pos.setIndex(index);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,92,             if (index < n) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,93,                 ret = c;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,97,         return ret;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,111,        Number ret = null;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,113,        StringBuffer sb = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,114,        sb.append('(');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,115,        sb.append(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,116,        sb.append(')');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,118,        final int n = sb.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,119,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,120,        final int endIndex = startIndex + n;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,121,        if (endIndex < source.length()) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,123,                ret = Double.valueOf(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,124,                pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,128,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,143,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,144,"        Number number = format.parse(source, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,145,        final int endIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,148,        if (startIndex == endIndex) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,150,            final double[] special = {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,153,            for (int i = 0; i < special.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,154,"                number = parseNumber(source, special[i], pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,155,                if (number != null) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,156,                    break;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,161,        return number;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,174,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,175,        final int endIndex = startIndex + expected.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,176,        if ((startIndex >= source.length()) ||,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,180,            pos.setIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,181,            pos.setErrorIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,182,            return false;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,186,        pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,187,        return true;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,211,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,212,            toAppendTo.append('(');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,213,            toAppendTo.append(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,214,            toAppendTo.append(')');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,216,"            format.format(value, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,88,218,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,63,    public RealMatrixImpl() {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,64,    },0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,76,"        super(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,77,        data = new double[rowDimension][columnDimension];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,78,    },0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,114,"        throws IllegalArgumentException, NullPointerException {",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,115,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,116,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,118,            if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,119,                throw new NullPointerException();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,121,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,122,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,123,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row""); ",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,125,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,126,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,127,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column""); ",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,129,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,130,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,131,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,136,            data = d;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,138,    },0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,148,    public RealMatrixImpl(final double[] v) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,149,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,150,        data = new double[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,151,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,152,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,154,    },0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,160,"        return new RealMatrixImpl(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,166,"        return new RealMatrixImpl(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,174,            return add((RealMatrixImpl) m);,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,175,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,176,            return super.add(m);,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,191,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,193,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,194,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,195,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,196,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,197,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,198,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,199,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,200,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,201,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,205,"        return new RealMatrixImpl(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,214,            return subtract((RealMatrixImpl) m);,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,215,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,216,            return super.subtract(m);,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,231,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,233,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,234,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,235,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,236,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,237,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,238,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,239,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,240,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,241,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,245,"        return new RealMatrixImpl(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,254,            return multiply((RealMatrixImpl) m);,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,255,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,256,            return super.multiply(m);,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,271,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,273,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,274,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,275,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,276,        final double[][] outData = new double[nRows][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,277,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,278,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,279,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,280,            for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,281,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,282,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,283,                    sum += dataRow[i] * m.data[i][col];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,285,                outDataRow[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,289,"        return new RealMatrixImpl(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,296,        return copyOut();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,307,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,316,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,321,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,327,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row""); ",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,332,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column""); ",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,337,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,344,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,355,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,356,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,368,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,369,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,380,            data[row][column] += increment;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,385,        }      ,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,381,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,382,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,386,    },0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,393,            data[row][column] *= factor;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,398,        }      ,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,394,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,395,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,399,    },0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,417,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,418,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,419,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,420,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,424,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,425,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,426,            final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,427,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,428,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,429,                sum += dataRow[i] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,431,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,433,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,441,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,442,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,443,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,444,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,449,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,450,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,451,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,452,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,453,                sum += data[i][col] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,455,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,458,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,466,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,467,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,468,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,469,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,470,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,471,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,472,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,475,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,482,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,483,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,484,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,485,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,486,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,487,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,488,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,491,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,500,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,501,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,503,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,504,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,505,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,506,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,509,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,518,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,519,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,521,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,522,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,523,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,524,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,527,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,534,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,535,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,536,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,537,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,538,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,539,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,540,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,543,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,550,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,551,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,552,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,553,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,554,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,555,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,558,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,567,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,568,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,570,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,571,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,572,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,573,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,576,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,585,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,586,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,588,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,589,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,590,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,593,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,602,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,603,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,605,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,606,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/RealMatrixImpl,88,608,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/NonSquareMatrixException,88,37,"        super(""a {0}x{1} matrix was provided instead of a square matrix"",",0.0,0,-1,0
org/apache/commons/math/linear/NonSquareMatrixException,88,39,    },0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,88,40,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,88,41,    },0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,88,50,        super(cause);,0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,88,51,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,243,                sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,244,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,248,                sum += value * value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,249,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,253,                return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,210,                this.endRow = endRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,211,                columnSum   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,212,                maxColSum   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,213,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,217,                columnSum += Math.abs(value);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,218,                if (row == endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,219,"                    maxColSum = Math.max(maxColSum, columnSum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,220,                    columnSum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,222,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,226,                return maxColSum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,88,293,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math/optimization/linear/UnboundedSolutionException,88,37,"        super(""unbounded solution"");",0.0,0,-1,0
org/apache/commons/math/optimization/linear/UnboundedSolutionException,88,38,    },0.0,0,-1,0
org/apache/commons/math/optimization/OptimizationException,88,42,"        super(specifier, parts);",0.0,0,-1,0
org/apache/commons/math/optimization/OptimizationException,88,43,    },0.0,0,-1,0
org/apache/commons/math/optimization/OptimizationException,88,50,        super(cause);,0.0,0,-1,0
org/apache/commons/math/optimization/OptimizationException,88,51,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,88,34,"        super(""Convergence failed"");",0.0,0,-1,0
org/apache/commons/math/ConvergenceException,88,35,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,88,45,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/ConvergenceException,88,46,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,88,53,        super(cause);,0.0,0,-1,0
org/apache/commons/math/ConvergenceException,88,54,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,88,65,"        super(cause, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/ConvergenceException,88,66,    },0.0,0,-1,0
org/apache/commons/math/MathException,88,93,        super();,0.0,0,-1,0
org/apache/commons/math/MathException,88,94,        this.pattern   = null;,0.0,0,-1,0
org/apache/commons/math/MathException,88,95,        this.arguments = new Object[0];,0.0,0,-1,0
org/apache/commons/math/MathException,88,96,    },0.0,0,-1,0
org/apache/commons/math/MathException,88,106,"      super(buildMessage(Locale.US, pattern, arguments));",0.0,0,-1,0
org/apache/commons/math/MathException,88,107,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,88,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,88,109,    },0.0,0,-1,0
org/apache/commons/math/MathException,88,119,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathException,88,120,        this.pattern   = getMessage();,0.0,0,-1,0
org/apache/commons/math/MathException,88,121,        this.arguments = new Object[0];,0.0,0,-1,0
org/apache/commons/math/MathException,88,122,    },0.0,0,-1,0
org/apache/commons/math/MathException,88,135,"      super(buildMessage(Locale.US, pattern, arguments), rootCause);",0.0,0,-1,0
org/apache/commons/math/MathException,88,136,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,88,137,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,88,138,    },0.0,0,-1,0
org/apache/commons/math/MathException,88,60,            ResourceBundle bundle =,0.0,0,-1,0
org/apache/commons/math/MathException,88,62,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math/MathException,88,64,                return bundle.getString(s);,0.0,0,-1,0
org/apache/commons/math/MathException,88,69,        },0.0,0,-1,0
org/apache/commons/math/MathException,88,67,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math/MathException,88,73,        return s;,0.0,0,-1,0
org/apache/commons/math/MathException,88,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",0.0,0,-1,0
org/apache/commons/math/MathException,88,146,        return pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,88,155,        return arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,88,166,"        return buildMessage(locale, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathException,88,172,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/MathException,88,180,        printStackTrace(System.err);,0.0,0,-1,0
org/apache/commons/math/MathException,88,181,    },0.0,0,-1,0
org/apache/commons/math/MathException,88,190,        synchronized (out) {,0.0,0,-1,0
org/apache/commons/math/MathException,88,191,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,-1,0
org/apache/commons/math/MathException,88,192,            printStackTrace(pw);,0.0,0,-1,0
org/apache/commons/math/MathException,88,194,            pw.flush();,0.0,0,-1,0
org/apache/commons/math/MathException,88,195,        },0.0,0,-1,0
org/apache/commons/math/MathException,88,196,    },0.0,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,72,        return maxIterations;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,77,        return iterations;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,87,            if (++iterations > maxIterations) {,0.0,0,-1,0
org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,88,88,                throw new OptimizationException(new MaxIterationsExceededException(maxIterations));,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,107,            throw new UnboundedSolutionException();,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,130,            return true;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,147,            return false;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,151,                return false;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,168,            return;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,177,            throw new NoFeasibleSolutionException();,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexSolver,88,190,            doIteration(tableau);,0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,88,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,88,44,        this.maxIterations = maxIterations;,0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,88,45,    },0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,88,56,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,88,57,        this.maxIterations = maxIterations;,0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,88,58,    },0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,88,64,        return maxIterations;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/NoFeasibleSolutionException,88,37,"        super(""no feasible solution"");",0.0,0,-1,0
org/apache/commons/math/optimization/linear/NoFeasibleSolutionException,88,38,    },0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,61,                                final boolean copyArray) {,0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,62,        this.point = copyArray ? point.clone() : point;,0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,63,        this.value  = value;,0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,64,    },0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,79,        return point;,0.0,0,-1,0
org/apache/commons/math/optimization/RealPointValuePair,88,86,        return value;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,145,                    matrix[zIndex][getSlackVariableOffset() - 1] =,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,161,                        matrix[row][getSlackVariableOffset() - 1] =,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,212,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,260,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,261,        for (double coefficient : coefficients.getData()) {,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,262,            sum -= coefficient;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,264,        return sum;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,291,            return;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,412,"        tableau.setEntry(row, column, value);",0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,413,    },0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,450,        return numDecisionVariables;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,467,        return numSlackVariables;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,483,        return tableau.getData();,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,490,      if (this == other) { ,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,491,        return true;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,494,      if (other == null) {,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,495,        return false;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,500,          SimplexTableau rhs = (SimplexTableau) other;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,501,          return (restrictToNonNegative  == rhs.restrictToNonNegative) &&,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,510,      } catch (ClassCastException ex) {,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,512,          return false;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,520,        return Boolean.valueOf(restrictToNonNegative).hashCode() ^,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,536,        oos.defaultWriteObject();,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,537,"        MatrixUtils.serializeRealMatrix(tableau, oos);",0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,538,    },0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,547,        ois.defaultReadObject();,0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,548,"        MatrixUtils.deserializeRealMatrix(this, ""tableau"", ois);",0.0,0,-1,0
org/apache/commons/math/optimization/linear/SimplexTableau,88,549,    },0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,101,        return coefficients.dotProduct(point) + constantTerm;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,108,      if (this == other) { ,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,109,        return true;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,112,      if (other == null) {,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,113,        return false;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,118,          LinearObjectiveFunction rhs = (LinearObjectiveFunction) other;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,119,          return (constantTerm == rhs.constantTerm) && coefficients.equals(rhs.coefficients);,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,121,      } catch (ClassCastException ex) {,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,123,          return false;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,131,        return Double.valueOf(constantTerm).hashCode() ^ coefficients.hashCode();,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,140,        oos.defaultWriteObject();,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,141,"        MatrixUtils.serializeRealVector(coefficients, oos);",0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,142,    },0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,151,        ois.defaultReadObject();,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,152,"        MatrixUtils.deserializeRealVector(this, ""coefficients"", ois);",0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,153,    },0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,126,"                            final double[] rhsCoefficients, final double rhsConstant) {",0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,127,        double[] sub = new double[lhsCoefficients.length];,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,128,        for (int i = 0; i < sub.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,129,            sub[i] = lhsCoefficients[i] - rhsCoefficients[i];,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,131,"        this.coefficients = new RealVectorImpl(sub, false);",0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,132,        this.relationship = relationship;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,133,        this.value        = rhsConstant - lhsConstant;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,134,    },0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,157,"                            final RealVector rhsCoefficients, final double rhsConstant) {",0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,158,        this.coefficients = lhsCoefficients.subtract(rhsCoefficients);,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,159,        this.relationship = relationship;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,160,        this.value        = rhsConstant - lhsConstant;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,161,    },0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,191,      if (this == other) { ,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,192,        return true;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,195,      if (other == null) {,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,196,        return false;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,201,          LinearConstraint rhs = (LinearConstraint) other;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,202,          return (relationship == rhs.relationship) &&,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,206,      } catch (ClassCastException ex) {,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,208,          return false;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,216,        return relationship.hashCode() ^,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,227,        oos.defaultWriteObject();,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,228,"        MatrixUtils.serializeRealVector(coefficients, oos);",0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,229,    },0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,238,        ois.defaultReadObject();,0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,239,"        MatrixUtils.deserializeRealVector(this, ""coefficients"", ois);",0.0,0,-1,0
org/apache/commons/math/optimization/linear/LinearConstraint,88,240,    },0.0,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,49,        return stringValue;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,57,        switch (this) {,0.0,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,59,            return GEQ;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,61,            return LEQ;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,63,            return EQ;,0.0,0,-1,0
org/apache/commons/math/optimization/linear/Relationship,88,57,        switch (this) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,72,        super();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,73,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,86,        long s = (long)x + (long)y;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,87,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,88,"            throw new ArithmeticException(""overflow: add"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,90,        return (int)s;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,104,"        return addAndCheck(a, b, ""overflow: add"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,120,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,122,"            ret = addAndCheck(b, a, msg);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,126,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,127,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,129,                    if (Long.MIN_VALUE - b <= a) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,130,                        ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,132,                        throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,136,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,143,                if (a <= Long.MAX_VALUE - b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,144,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,146,                    throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,150,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,179,"        checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,180,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,181,            return 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,183,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,184,            return n;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,187,        if (k > n / 2),0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,188,"            return binomialCoefficient(n, n - k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,195,        long result = 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,196,        if (n <= 61) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,198,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,199,                result = result * i / j;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,201,        } else if (n <= 66) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,204,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,211,"                long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,212,                result = (result / (j / d)) * (i / d);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,218,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,219,"                long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,220,"                result = mulAndCheck((result / (j / d)), (i / d));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,223,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,249,"        checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,250,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,251,            return 1d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,253,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,254,            return n;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,256,        if (k > n/2) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,257,"            return binomialCoefficientDouble(n, n - k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,259,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,260,"            return binomialCoefficient(n,k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,263,        double result = 1d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,264,        for (int i = 1; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,265,             result *= (double)(n - k + i) / (double)i;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,268,        return Math.floor(result + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,290,"        checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,291,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,292,            return 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,294,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,295,            return Math.log(n);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,302,        if (n < 67) {  ,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,303,"            return Math.log(binomialCoefficient(n,k));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,310,        if (n < 1030) { ,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,311,"            return Math.log(binomialCoefficientDouble(n, k));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,314,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,315,"            return binomialCoefficientLog(n, n - k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,321,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,324,        for (int i = n - k + 1; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,325,            logSum += Math.log(i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,329,        for (int i = 2; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,330,            logSum -= Math.log(i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,333,        return logSum;      ,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,344,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,345,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,349,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,350,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,354,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,383,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,431,        assert maxUlps > 0 && maxUlps < NAN_GAP;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,433,        long xInt = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,434,        long yInt = Double.doubleToLongBits(y);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,437,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,438,            xInt = SGN_MASK - xInt;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,440,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,441,            yInt = SGN_MASK - yInt;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,444,        return Math.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,458,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,459,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,461,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,462,            return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,464,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,465,"            if (!equals(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,466,                return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,469,        return true;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,502,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,503,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,507,        if (n > 20) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,508,            throw new ArithmeticException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,511,        return factorials[n];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,535,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,536,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,540,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,541,            return factorial(n);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,543,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,560,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,561,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,565,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,566,            return Math.log(factorial(n));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,568,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,569,        for (int i = 2; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,570,            logSum += Math.log(i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,572,        return logSum;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,606,        int u = p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,607,        int v = q;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,608,        if ((u == 0) || (v == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,609,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,610,                throw MathRuntimeException.createArithmeticException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,614,            return (Math.abs(u) + Math.abs(v));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,621,        if (u > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,622,            u = -u;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,624,        if (v > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,625,            v = -v;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,628,        int k = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,629,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,631,            u /= 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,632,            v /= 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,633,            k++; // cast out twos.,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,635,        if (k == 31) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,636,            throw MathRuntimeException.createArithmeticException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,642,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,648,            while ((t & 1) == 0) { // while t is even..,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,649,                t /= 2; // cast out twos,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,652,            if (t > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,653,                u = -t;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,655,                v = t;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,658,            t = (v - u) / 2;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,661,        } while (t != 0);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,662,        return -u * (1 << k); // gcd is u*2^k,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,672,        return new Double(value).hashCode();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,683,        return Arrays.hashCode(value);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,694,        return (x >= ZB) ? PB : NB;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,706,        if (Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,707,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,709,        return (x >= 0.0) ? 1.0 : -1.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,720,        if (Float.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,721,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,723,        return (x >= 0.0F) ? 1.0F : -1.0F;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,733,        return (x >= 0) ? 1 : -1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,743,        return (x >= 0L) ? 1L : -1L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,754,        return (x >= ZS) ? PS : NS;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,781,        if (a==0 || b==0){,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,782,            return 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,784,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,785,        if (lcm == Integer.MIN_VALUE){,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,786,"            throw new ArithmeticException(""overflow: lcm is 2^31"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,788,        return lcm;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,808,        return Math.log(x)/Math.log(base);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,822,        long m = ((long)x) * ((long)y);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,823,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,824,"            throw new ArithmeticException(""overflow: mul"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,826,        return (int)m;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,841,"        String msg = ""overflow: multiply"";",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,842,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,844,"            ret = mulAndCheck(b, a);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,846,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,847,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,849,                    if (a >= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,850,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,852,                        throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,854,                } else if (b > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,856,                    if (Long.MIN_VALUE / b <= a) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,857,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,859,                        throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,864,                    ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,866,            } else if (a > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,871,                if (a <= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,872,                    ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,874,                    throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,878,                ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,881,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,904,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,905,                return d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,906,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,907,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,913,        long bits     = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,914,        long sign     = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,915,        long exponent = bits & 0x7ff0000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,916,        long mantissa = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,918,        if (d * (direction - d) >= 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,920,                if (mantissa == 0x000fffffffffffffL) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,921,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,924,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,929,                if (mantissa == 0L) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,930,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,934,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,953,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,954,            return d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,958,        final long bits     = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,959,        final long exponent = bits & 0x7ff0000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,960,        final long rest     = bits & 0x800fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,963,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,964,        return Double.longBitsToDouble(newBits);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,988,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1001,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1018,            return (new BigDecimal,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1022,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1023,            if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1024,                return x;          ,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1026,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1041,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1057,        float sign = indicator(x);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1058,"        float factor = (float)Math.pow(10.0f, scale) * sign;",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1059,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1076,        switch (roundingMethod) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1078,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1079,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1081,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1083,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1085,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1086,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1088,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1089,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1091,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1093,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1095,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1096,            double fraction = unscaled - Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1097,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1098,                unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1100,                unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1102,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1105,            double fraction = unscaled - Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1106,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1107,                unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1108,            } else if (fraction < 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1109,                unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1112,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1114,                    unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1116,                    unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1119,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1122,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1123,            double fraction = unscaled - Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1124,            if (fraction >= 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1125,                unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1127,                unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1129,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1132,            if (unscaled != Math.floor(unscaled)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1133,"                throw new ArithmeticException(""Inexact result from rounding"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1137,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1138,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1140,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1153,        return unscaled;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1167,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1183,        if (Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1184,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1186,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1201,        if (Float.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1202,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1204,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1218,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1232,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1247,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1258,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1272,        long s = (long)x - (long)y;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1273,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1274,"            throw new ArithmeticException(""overflow: subtract"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1276,        return (int)s;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1291,"        String msg = ""overflow: subtract"";",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1292,        if (b == Long.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1293,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1294,                ret = a - b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1296,                throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1300,"            ret = addAndCheck(a, -b, msg);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1302,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1315,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1316,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1321,        int result = 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1322,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1323,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1324,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1325,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1327,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1328,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1331,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1345,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1346,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1351,        int result = 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1352,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1353,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1354,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1355,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1357,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1358,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1361,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1375,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1376,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1381,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1382,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1383,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1384,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1385,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1387,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1388,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1391,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1405,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1406,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1411,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1412,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1413,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1414,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1415,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1417,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1418,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1421,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1435,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1436,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1441,        return k.pow(e);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1455,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1456,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1461,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1462,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1463,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1464,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1465,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1467,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1468,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1471,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1485,        if (e.compareTo(BigInteger.ZERO) < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1486,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1491,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1492,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1493,        while (!BigInteger.ZERO.equals(e)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1494,            if (e.testBit(0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1495,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1497,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1498,            e = e.shiftRight(1);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1501,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1513,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1514,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1515,            sum += Math.abs(p1[i] - p2[i]);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1517,        return sum;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1528,      int sum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1529,      for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1530,          sum += Math.abs(p1[i] - p2[i]);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1532,      return sum;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1543,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1544,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1545,            final double dp = p1[i] - p2[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1546,            sum += dp * dp;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1548,        return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1559,      int sum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1560,      for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1561,          final int dp = p1[i] - p2[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1562,          sum += dp * dp;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1564,      return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1575,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1576,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1577,"            max = Math.max(max, Math.abs(p1[i] - p2[i]));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1579,        return max;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1590,        int max = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1591,        for (int i = 0; i < p1.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1592,"            max = Math.max(max, Math.abs(p1[i] - p2[i]));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,88,1594,        return max;,0.0,0,-1,0
