project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,0.5,1,1,1
org/apache/commons/math/fraction/BigFraction,36,735,        return result;,0.5,1,1,1
org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,0.05405,0,-1,0
org/apache/commons/math/util/MathUtils,36,247,    },0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,138,            if (BigInteger.ZERO.compareTo(den) > 0) {,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,148,    },0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,367,    },0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,381,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,382,    },0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,65,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",0.05405,1,-1,1
org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",0.05405,1,-1,1
org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",0.05405,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,0.05405,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,372,    },0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,92,"    ELITISM_RATE(""elitism rate ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,101,"    EVALUATION(""evaluation""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,106,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,120,"    INDEX(""index ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,122,"    INFINITE_BOUND(""interval bounds must be finite""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,133,"    DIMENSION(""dimension ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,157,"    EVALUATIONS(""evaluations""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,162,"    MUTATION_RATE(""mutation rate ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,175,"    START_POSITION(""start position ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,194,"    ALPHA(""alpha""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,195,"    BETA(""beta""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,196,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,197,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,198,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,199,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,200,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,201,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,202,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,203,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,204,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,205,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,206,"    EXPONENT(""exponent ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,208,"    LENGTH(""length ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,210,"    MEAN(""mean ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,221,"    SCALE(""scale ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,223,"    SHAPE(""shape ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,226,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,234,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,235,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,238,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,240,"    NO_BIN_SELECTED(""no bin selected""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,241,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,242,"    NO_DATA(""no data""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,243,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,244,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,245,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,246,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,247,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,248,"    NO_RESULT_AVAILABLE(""no result available""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,251,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,254,"    DENOMINATOR(""denominator""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,256,"    FRACTION(""fraction""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,257,"    FUNCTION(""function""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,258,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,259,"    INPUT_ARRAY(""input array""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,260,"    NUMERATOR(""numerator""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,263,"    REAL_FORMAT(""real format""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,264,"    WHOLE_FORMAT(""whole format""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,266,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,267,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,268,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,273,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,274,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,275,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,276,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,277,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,278,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,279,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,280,"    OUT_OF_RANGE(""out of range""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,281,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,282,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,283,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,284,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,285,"    OVERFLOW(""overflow""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,286,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,287,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,288,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,289,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,290,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,291,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,292,"    POLYNOMIAL(""polynomial""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,293,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,294,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,295,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,296,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,297,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,298,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,299,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,300,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,301,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,302,"    ROW_INDEX(""row index ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,303,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,304,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,305,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,306,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,307,"    SIMPLE_MESSAGE(""{0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,308,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,309,"    SINGULAR_OPERATOR(""operator is singular""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,310,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,311,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,312,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,313,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,314,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,315,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,316,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,317,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,318,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,319,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,320,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,321,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,322,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,323,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,324,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,325,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,326,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,327,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,328,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,329,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,330,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,331,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,332,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,333,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,334,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,335,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,336,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,337,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,338,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,339,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,340,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,341,"    ILLEGAL_STATE(""illegal state""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,342,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,343,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,344,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,345,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,346,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,347,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,348,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,349,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,350,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,351,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,352,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,353,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,354,"    ZERO_NORM(""zero norm""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,355,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,356,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,357,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0.04706,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,39,public enum LocalizedFormats implements Localizable {,0.04706,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,685,        double result = numerator.doubleValue() / denominator.doubleValue();,0.02564,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,688,        return result;,0.02564,0,-1,0
org/apache/commons/math/util/MathUtils,36,47,    private MathUtils() {},0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,57,        return new Double(value).hashCode();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,68,        return Arrays.hashCode(value);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,113,        final double p = FastMath.abs(period);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,128,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,130,            return magnitude;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,131,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,133,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,135,            return (byte) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,150,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,152,            return magnitude;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,153,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,155,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,157,            return (short) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,172,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,174,            return magnitude;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,175,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,177,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,179,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,194,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,196,            return magnitude;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,197,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,199,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,201,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,212,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,213,            throw new NotFiniteNumberException(x);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,215,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,225,        for (int i = 0; i < val.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,226,            final double x = val[i];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,227,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,231,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,245,"            throw new NullArgumentException(pattern, args);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,257,        if (o == null) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,258,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,36,260,    },0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,46,    },0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,59,    },0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,63,        return context;,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math/exception/MathArithmeticException,36,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,36,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,36,42,    },0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,36,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/exception/NullArgumentException,36,51,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,36,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,36,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,36,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,36,47,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,36,51,        return context;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,36,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalArgumentException,36,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math/exception/NotFiniteNumberException,36,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,-1,0
org/apache/commons/math/exception/NotFiniteNumberException,36,41,    },0.0,0,-1,0
org/apache/commons/math/exception/NotFiniteNumberException,36,53,"        super(specific, wrong, args);",0.0,0,-1,0
org/apache/commons/math/exception/NotFiniteNumberException,36,54,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,36,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,36,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,36,48,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalNumberException,36,54,        return argument;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,107,"        this(num, BigInteger.ONE);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,108,    },0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,123,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,139,                num = num.negate();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,140,                den = den.negate();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,171,    public BigFraction(final double value) throws MathIllegalArgumentException {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,172,        if (Double.isNaN(value)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,173,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,175,        if (Double.isInfinite(value)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,176,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,180,        final long bits     = Double.doubleToLongBits(value);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,181,        final long sign     = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,182,        final long exponent = bits & 0x7ff0000000000000L;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,183,        long m              = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,184,        if (exponent != 0) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,186,            m |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,188,        if (sign != 0) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,189,            m = -m;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,191,        int k = ((int) (exponent >> 52)) - 1075;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,192,        while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,193,            m = m >> 1;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,194,            ++k;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,197,        if (k < 0) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,198,            numerator   = BigInteger.valueOf(m);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,199,            denominator = BigInteger.ZERO.flipBit(-k);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,201,            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,202,            denominator = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,205,    },0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,231,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,232,    },0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,270,        throws FractionConversionException {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,271,        long overflow = Integer.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,272,        double r0 = value;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,273,        long a0 = (long) FastMath.floor(r0);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,274,        if (a0 > overflow) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,275,"            throw new FractionConversionException(value, a0, 1l);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,280,        if (FastMath.abs(a0 - value) < epsilon) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,281,            numerator = BigInteger.valueOf(a0);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,282,            denominator = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,283,            return;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,286,        long p0 = 1;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,287,        long q0 = 0;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,288,        long p1 = a0;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,289,        long q1 = 1;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,291,        long p2 = 0;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,292,        long q2 = 1;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,294,        int n = 0;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,295,        boolean stop = false;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,297,            ++n;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,298,            final double r1 = 1.0 / (r0 - a0);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,299,            final long a1 = (long) FastMath.floor(r1);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,300,            p2 = (a1 * p1) + p0;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,301,            q2 = (a1 * q1) + q0;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,302,            if ((p2 > overflow) || (q2 > overflow)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,303,"                throw new FractionConversionException(value, p2, q2);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,306,            final double convergent = (double) p2 / (double) q2;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,307,            if ((n < maxIterations) &&,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,310,                p0 = p1;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,311,                p1 = p2;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,312,                q0 = q1;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,313,                q1 = q2;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,314,                a0 = a1;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,315,                r0 = r1;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,317,                stop = true;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,319,        } while (!stop);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,321,        if (n >= maxIterations) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,322,"            throw new FractionConversionException(value, maxIterations);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,325,        if (q2 < maxDenominator) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,326,            numerator   = BigInteger.valueOf(p2);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,327,            denominator = BigInteger.valueOf(q2);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,329,            numerator   = BigInteger.valueOf(p1);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,330,            denominator = BigInteger.valueOf(q1);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,332,    },0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,353,"        this(value, 0, maxDenominator, 100);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,354,    },0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,393,"        this(BigInteger.valueOf(num), BigInteger.ONE);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,394,    },0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,408,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,409,    },0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,432,        if (numerator == 0) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,433,            return ZERO; // normalize zero.,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,436,"        return new BigFraction(numerator, denominator);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,447,        return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,463,        MathUtils.checkNotNull(bg);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,464,"        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,478,        return add(BigInteger.valueOf(i));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,492,        return add(BigInteger.valueOf(l));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,507,        if (fraction == null) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,508,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,510,        if (ZERO.equals(fraction)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,511,            return this;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,514,        BigInteger num = null;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,515,        BigInteger den = null;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,517,        if (denominator.equals(fraction.denominator)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,518,            num = numerator.add(fraction.numerator);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,519,            den = denominator;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,521,            num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,522,            den = denominator.multiply(fraction.denominator);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,524,"        return new BigFraction(num, den);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,541,        return new BigDecimal(numerator).divide(new BigDecimal(denominator));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,560,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,579,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,594,        BigInteger nOd = numerator.multiply(object.denominator);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,595,        BigInteger dOn = denominator.multiply(object.numerator);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,596,        return nOd.compareTo(dOn);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,614,        if (BigInteger.ZERO.equals(bg)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,615,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,617,"        return new BigFraction(numerator, denominator.multiply(bg));",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,633,        return divide(BigInteger.valueOf(i));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,649,        return divide(BigInteger.valueOf(l));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,664,        if (fraction == null) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,665,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,667,        if (BigInteger.ZERO.equals(fraction.numerator)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,668,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,671,        return multiply(fraction.reciprocal());,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,708,        boolean ret = false;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,710,        if (this == other) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,711,            ret = true;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,712,        } else if (other instanceof BigFraction) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,713,            BigFraction rhs = ((BigFraction) other).reduce();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,714,            BigFraction thisOne = this.reduce();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,715,            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,718,        return ret;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,746,        return denominator;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,757,        return denominator.intValue();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,768,        return denominator.longValue();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,779,        return numerator;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,790,        return numerator.intValue();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,801,        return numerator.longValue();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,814,        return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,828,        return numerator.divide(denominator).intValue();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,842,        return numerator.divide(denominator).longValue();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,856,        if (bg == null) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,857,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,859,"        return new BigFraction(bg.multiply(numerator), denominator);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,873,        return multiply(BigInteger.valueOf(i));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,887,        return multiply(BigInteger.valueOf(l));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,901,        if (fraction == null) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,902,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,904,        if (numerator.equals(BigInteger.ZERO) ||,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,906,            return ZERO;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,908,"        return new BigFraction(numerator.multiply(fraction.numerator),",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,921,"        return new BigFraction(numerator.negate(), denominator);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,933,        return multiply(ONE_HUNDRED).doubleValue();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,948,        if (exponent < 0) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,949,"            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,951,"        return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,965,        if (exponent < 0) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,966,"            return new BigFraction(ArithmeticUtils.pow(denominator, -exponent),",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,969,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,984,        if (exponent.compareTo(BigInteger.ZERO) < 0) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,985,            final BigInteger eNeg = exponent.negate();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,986,"            return new BigFraction(ArithmeticUtils.pow(denominator, eNeg),",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,989,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1004,"        return FastMath.pow(numerator.doubleValue(),   exponent) /",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1016,"        return new BigFraction(denominator, numerator);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1028,        final BigInteger gcd = numerator.gcd(denominator);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1029,"        return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1043,        if (bg == null) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1044,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1046,"        return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1059,        return subtract(BigInteger.valueOf(i));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1072,        return subtract(BigInteger.valueOf(l));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1086,        if (fraction == null) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1087,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1089,        if (ZERO.equals(fraction)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1090,            return this;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1093,        BigInteger num = null;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1094,        BigInteger den = null;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1095,        if (denominator.equals(fraction.denominator)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1096,            num = numerator.subtract(fraction.numerator);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1097,            den = denominator;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1099,            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1100,            den = denominator.multiply(fraction.denominator);,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1102,"        return new BigFraction(num, den);",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1117,        String str = null;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1118,        if (BigInteger.ONE.equals(denominator)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1119,            str = numerator.toString();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1120,        } else if (BigInteger.ZERO.equals(numerator)) {,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1121,"            str = ""0"";",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1123,"            str = numerator + "" / "" + denominator;",0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1125,        return str;,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,1130,        return BigFractionField.getInstance();,0.0,0,-1,0
org/apache/commons/math/fraction/BigFraction,36,39,public class BigFraction,0.0,0,-1,0
org/apache/commons/math/exception/ZeroException,36,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math/exception/ZeroException,36,38,    },0.0,0,-1,0
org/apache/commons/math/exception/ZeroException,36,47,"        super(specific, 0, arguments);",0.0,0,-1,0
org/apache/commons/math/exception/ZeroException,36,48,    },0.0,0,-1,0
org/apache/commons/math/fraction/FractionConversionException,36,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",0.0,0,-1,0
org/apache/commons/math/fraction/FractionConversionException,36,43,    },0.0,0,-1,0
org/apache/commons/math/fraction/FractionConversionException,36,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",0.0,0,-1,0
org/apache/commons/math/fraction/FractionConversionException,36,54,    },0.0,0,-1,0
org/apache/commons/math/exception/ConvergenceException,36,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0.0,0,-1,0
org/apache/commons/math/exception/ConvergenceException,36,38,    },0.0,0,-1,0
org/apache/commons/math/exception/ConvergenceException,36,48,                                Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/ConvergenceException,36,49,"        getContext().addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/ConvergenceException,36,50,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,48,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,63,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,70,    },0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,74,        return context;,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math/exception/MathIllegalStateException,36,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,376,        return sourceFormat;,0.0,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,382,            ResourceBundle bundle =,0.0,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,384,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,386,                return bundle.getString(toString());,0.0,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,391,        },0.0,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,389,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math/exception/util/LocalizedFormats,36,395,        return sourceFormat;,0.0,0,-1,0
