project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,1.0,0,,0,0.5665583882757439,0.4334416117242557
org/apache/commons/math3/special/Gamma,30,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,1.0,0,,0,0.8638592044694516,0.13614079553054723
org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,1.0,0,,0,0.45358110431443854,0.5464188956855619
org/apache/commons/math3/special/Gamma,30,186,        return ret;,1.0,0,,0,0.2429799023513944,0.757020097648607
org/apache/commons/math3/special/Erf,30,67,        if (FastMath.abs(x) > 40) {,1.0,0,,0,0.3460626561877827,0.6539373438122181
org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",1.0,0,,0,0.5808607291130323,0.4191392708869665
org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,1.0,0,,0,0.38651588708016243,0.6134841129198373
org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,1.0,0,,0,0.22641120302034973,0.773588796979652
org/apache/commons/math3/util/FastMath,30,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,1.0,0,,0,0.5891970902521446,0.4108029097478556
org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,1.0,0,,0,0.4592839539299109,0.5407160460700886
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,    },1.0,0,,0,0.1784161547785075,0.821583845221494
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,        final double[] z = new double[x.length + y.length];,1.0,0,,0,0.39270464368829666,0.6072953563117036
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);",1.0,0,,0,0.2044890061536939,0.7955109938463061
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",1.0,0,,0,0.18396097253098828,0.8160390274690102
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,1.0,0,,0,0.24549586167299153,0.7545041383270075
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",1.0,0,,0,0.21078257491261546,0.7892174250873847
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);",1.0,0,,0,0.4114853570748506,0.5885146429251501
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,1.0,0,,0,0.42173430539102746,0.5782656946089725
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,1.0,0,,0,0.22436795041633523,0.7756320495836637
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,1.0,0,,0,0.4032601460051126,0.5967398539948874
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,1.0,0,,0,0.5529982824019122,0.4470017175980894
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,1.0,0,,0,0.6495157692204615,0.3504842307795371
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,        final double U2 = x.length * y.length - U1;,1.0,0,,0,0.25345548580910743,0.7465445141908911
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",1.0,0,,0,0.13525127225465705,0.864748727745342
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,1.0,1,,0,0.40179136220056627,0.5982086377994347
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,1.0,0,,0,0.41072658117755695,0.5892734188224433
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;,1.0,0,,0,0.640865791596804,0.35913420840319765
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,        final double z = (Umin - EU) / FastMath.sqrt(VarU);,1.0,0,,0,0.5576843006283126,0.4423156993716861
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",1.0,0,,0,0.9994693127094633,0.0005306872905370387
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,1.0,0,,0,0.32530458719883376,0.6746954128011665
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",1.0,0,,0,0.40116948742394903,0.5988305125760511
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,1.0,0,,0,0.26129982302177357,0.7387001769782261
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);",1.0,0,,0,0.4248686710395096,0.5751313289604887
org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",1.0,0,,0,0.4349235602625074,0.5650764397374912
org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,1.0,0,,0,0.3265196807462954,0.6734803192537052
org/apache/commons/math3/stat/ranking/NaturalRanking,30,434,            this.position = position;,1.0,0,,0,0.3252535710503957,0.6747464289496045
org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,        },1.0,0,,0,0.1784161547785075,0.821583845221494
org/apache/commons/math3/stat/ranking/NaturalRanking,30,445,"            return Double.compare(value, other.value);",1.0,0,,0,0.26650519418711843,0.7334948058128814
org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,1.0,0,,0,0.228838133175639,0.7711618668243593
org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,1.0,0,,0,0.22640159317015288,0.7735984068298468
org/apache/commons/math3/stat/ranking/NaturalRanking,30,419,    private static class IntDoublePair implements Comparable<IntDoublePair>  {,1.0,0,,0,0.999562823401161,0.0004371765988387472
org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,1.0,0,,0,0.3588124511167879,0.641187548883212
org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,1.0,0,,0,0.35897733514906854,0.6410226648509317
org/apache/commons/math3/stat/ranking/NaturalRanking,30,193,        IntDoublePair[] ranks = new IntDoublePair[data.length];,1.0,0,,0,0.9988295583125579,0.0011704416874408446
org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,1.0,0,,0,0.4080350642170775,0.5919649357829241
org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",1.0,0,,0,0.9157959658557216,0.08420403414427707
org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,1.0,0,,0,0.9976244437848824,0.002375556215117667
org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,1.0,0,,0,0.35897733514906854,0.6410226648509317
org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,1.0,0,,0,0.47987566794343833,0.5201243320565614
org/apache/commons/math3/stat/ranking/NaturalRanking,30,212,                break;,1.0,0,,0,0.16442839466313236,0.8355716053368667
org/apache/commons/math3/stat/ranking/NaturalRanking,30,218,        Arrays.sort(ranks);,1.0,0,,0,0.2002453911764962,0.7997546088235042
org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,1.0,0,,0,0.306515693030063,0.6934843069699385
org/apache/commons/math3/stat/ranking/NaturalRanking,30,223,        int pos = 1;  // position in sorted array,1.0,0,,0,0.23622749955690023,0.7637725004430991
org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,1.0,0,,0,0.7012682813352713,0.29873171866472753
org/apache/commons/math3/stat/ranking/NaturalRanking,30,225,        List<Integer> tiesTrace = new ArrayList<Integer>();,1.0,0,,0,0.999999999999936,6.244952165236484e-14
org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,1.0,0,,0,0.512153196538214,0.4878468034617845
org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,1.0,0,,0,0.40986661310054245,0.5901333868994567
org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",1.0,0,,0,0.6948973813905397,0.30510261860945853
org/apache/commons/math3/stat/ranking/NaturalRanking,30,230,                pos = i + 1;,1.0,0,,0,0.26964502117112255,0.7303549788288783
org/apache/commons/math3/stat/ranking/NaturalRanking,30,231,"                if (tiesTrace.size() > 1) {  // if seq is nontrivial, resolve",1.0,0,,0,0.34849868858711075,0.6515013114128878
org/apache/commons/math3/stat/ranking/NaturalRanking,30,234,                tiesTrace = new ArrayList<Integer>();,1.0,0,,0,0.998934478909287,0.0010655210907139381
org/apache/commons/math3/stat/ranking/NaturalRanking,30,235,                tiesTrace.add(ranks[i].getPosition());,1.0,0,,0,0.35274354489011794,0.6472564551098836
org/apache/commons/math3/stat/ranking/NaturalRanking,30,240,            out[ranks[i].getPosition()] = pos;,1.0,0,,0,0.6639423726779746,0.3360576273220263
org/apache/commons/math3/stat/ranking/NaturalRanking,30,242,        if (tiesTrace.size() > 1) {  // handle tie sequence at end,1.0,0,,0,0.4577461052273411,0.542253894772658
org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,1.0,0,,0,0.4585012960831053,0.5414987039168947
org/apache/commons/math3/stat/ranking/NaturalRanking,30,246,"            restoreNaNs(out, nanPositions);",1.0,0,,0,0.18474102965179592,0.8152589703482042
org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,1.0,0,,0,0.2429799023513944,0.757020097648607
org/apache/commons/math3/stat/ranking/NaturalRanking,30,387,        if (nanPositions.size() == 0) {,1.0,0,,0,0.3917704729196426,0.6082295270803575
org/apache/commons/math3/stat/ranking/NaturalRanking,30,388,            return;,1.0,0,,0,0.21483538086011406,0.7851646191398859
org/apache/commons/math3/stat/ranking/NaturalRanking,30,404,        ArrayList<Integer> out = new ArrayList<Integer>();,1.0,0,,0,0.999999999999936,6.326313715028469e-14
org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,1.0,0,,0,0.40986661310054245,0.5901333868994567
org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,1.0,0,,0,0.5809446021037674,0.4190553978962317
org/apache/commons/math3/stat/ranking/NaturalRanking,30,410,        return out;,1.0,0,,0,0.2429799023513944,0.757020097648607
org/apache/commons/math3/distribution/AbstractRealDistribution,30,53,    protected AbstractRealDistribution() { },1.0,0,,0,0.45610777091135846,0.5438922290886428
org/apache/commons/math3/distribution/AbstractRealDistribution,30,47,    protected final RandomDataImpl randomData = new RandomDataImpl();,1.0,0,,0,0.999710286376111,0.0002897136238887142
org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,1.0,0,,0,0.48308686552116326,0.5169131344788366
org/apache/commons/math3/distribution/NormalDistribution,30,61,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",1.0,0,,0,0.3381186521806028,0.661881347819396
org/apache/commons/math3/distribution/NormalDistribution,30,62,    },1.0,0,,0,0.1784161547785075,0.821583845221494
org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,1.0,0,,0,0.2932230994302269,0.7067769005697716
org/apache/commons/math3/distribution/NormalDistribution,30,76,        if (sd <= 0) {,1.0,0,,0,0.42591989603829805,0.5740801039617011
org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,1.0,0,,0,0.34268518435576667,0.657314815644234
org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,1.0,0,,0,0.29868712054526464,0.7013128794547366
org/apache/commons/math3/distribution/NormalDistribution,30,82,        solverAbsoluteAccuracy = inverseCumAccuracy;,1.0,0,,0,0.3195361318194498,0.6804638681805502
org/apache/commons/math3/distribution/NormalDistribution,30,83,    },1.0,0,,0,0.1784161547785075,0.821583845221494
org/apache/commons/math3/distribution/NormalDistribution,30,42,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,1.0,0,,0,0.7904906441743942,0.20950935582560534
org/apache/commons/math3/distribution/NormalDistribution,30,44,    private static final double SQRT2 = FastMath.sqrt(2.0);,1.0,0,,0,0.6842835744972963,0.3157164255027029
org/apache/commons/math3/distribution/NormalDistribution,30,137,        final double dev = x - mean;,1.0,0,,0,0.40126012142484263,0.5987398785751573
org/apache/commons/math3/distribution/NormalDistribution,30,138,        if (FastMath.abs(dev) > 40 * standardDeviation) {,1.0,0,,0,0.5304341119966098,0.46956588800338994
org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,1.0,0,,0,0.84708910114579,0.15291089885421122
org/apache/commons/math3/random/RandomDataImpl,30,168,    public RandomDataImpl() {,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,126,    private RandomGenerator rand = null;,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,129,    private SecureRandom secRand = null;,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,169,    },0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,139,        final double LN2 = FastMath.log(2);,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,140,        double qi = 0;,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,141,        int i = 1;,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,151,        while (qi < 1) {,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,153,            ra.addElement(qi);,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,154,            ++i;,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,157,        EXPONENTIAL_SA_QI = ra.getElements();,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,158,    },0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3747,    private static class ExpFracTable {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3776,        },0.5,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,29,    private static final double[] EXP_INT_A = new double[] {,0.5,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,1535,    private static final double[] EXP_INT_B = new double[] {,0.5,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,3043,    private static final double[] EXP_FRAC_A = new double[] {,0.5,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,4074,    private static final double[] EXP_FRAC_B = new double[] {,0.5,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,5103,    private static final double[][] LN_MANT = new double[][] {,0.5,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,6142,        return EXP_INT_A.clone();,0.5,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,6150,        return EXP_INT_B.clone();,0.5,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,6158,        return EXP_FRAC_A.clone();,0.5,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,6166,        return EXP_FRAC_B.clone();,0.5,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,6174,        return LN_MANT.clone();,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,113,    private static final double LN_QUICK_COEF[][] = {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,126,    private static final double LN_HI_PREC_COEF[][] = {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,139,    private static final double SINE_TABLE_A[] =,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,158,    private static final double SINE_TABLE_B[] =,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,177,    private static final double COSINE_TABLE_A[] =,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,196,    private static final double COSINE_TABLE_B[] =,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,216,    private static final double TANGENT_TABLE_A[] =,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,235,    private static final double TANGENT_TABLE_B[] =,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,254,    private static final long RECIP_2PI[] = new long[] {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,275,    private static final long PI_O_4_BITS[] = new long[] {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,826,        if (x < 0.0) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,827,            intVal = (int) -x;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,829,            if (intVal > 746) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,837,            if (intVal > 709) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,847,            if (intVal == 709) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,857,            intVal++;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,862,            intVal = -intVal;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,899,        double z = 0.04168701738764507;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,900,        z = z * epsilon + 0.1666666505023083;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,901,        z = z * epsilon + 0.5000000000042687;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,902,        z = z * epsilon + 1.0;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,903,        z = z * epsilon + -3.940510424527919E-20;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,910,        double tempA = intPartA * fracPartA;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,917,        final double tempC = tempB + tempA;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,919,        if (extra != 0.0) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,925,        if (hiPrec != null) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,931,        return result;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1096,"        return log(x, null);",0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1106,        if (x==0) { // Handle special case of +0/-0,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1109,        long bits = Double.doubleToLongBits(x);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1123,        if (x == Double.POSITIVE_INFINITY) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1132,        int exp = (int)(bits >> 52)-1023;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1154,        if (exp == -1 || exp == 0) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1215,        double lnza = 0.0;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1216,        double lnzb = 0.0;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1218,        if (hiPrec != null) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1220,            double tmp = epsilon * HEX_40000000;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1221,            double aa = epsilon + tmp - tmp;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1222,            double ab = epsilon - aa;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1223,            double xa = aa;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1224,            double xb = ab;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1227,            double numer = bits & 0x3ffffffffffL;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1229,            aa = numer - xa*denom - xb * denom;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1230,            xb += aa / denom;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1238,                aa = ya * xa;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1239,                ab = ya * xb + yb * xa + yb * xb;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1241,                tmp = aa * HEX_40000000;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1242,                ya = aa + tmp - tmp;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1243,                yb = aa - ya + ab;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1249,                tmp = aa * HEX_40000000;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1250,                ya = aa + tmp - tmp;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1251,                yb = aa - ya + ab;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1255,            aa = ya * xa;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1256,            ab = ya * xb + yb * xa + yb * xb;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1264,            lnza = aa + ab;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1265,            lnzb = -(lnza - aa - ab);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1266,        } else {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1269,            lnza = -0.16624882440418567;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1270,            lnza = lnza * epsilon + 0.19999954120254515;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1272,            lnza = lnza * epsilon + 0.3333333333332802;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1273,            lnza = lnza * epsilon + -0.5;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1274,            lnza = lnza * epsilon + 1.0;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1275,            lnza = lnza * epsilon;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1292,        double a = LN_2_A*exp;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1293,        double b = 0.0;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1294,        double c = a+lnm[0];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1295,        double d = -(c-a-lnm[0]);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1296,        a = c;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1297,        b = b + d;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1299,        c = a + lnza;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1300,        d = -(c - a - lnza);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1301,        a = c;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1302,        b = b + d;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1304,        c = a + LN_2_B*exp;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1305,        d = -(c - a - LN_2_B*exp);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1306,        a = c;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1307,        b = b + d;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1309,        c = a + lnm[1];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1310,        d = -(c - a - lnm[1]);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1311,        a = c;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1312,        b = b + d;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1314,        c = a + lnzb;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1315,        d = -(c - a - lnzb);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1316,        a = c;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1317,        b = b + d;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1319,        if (hiPrec != null) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1320,            hiPrec[0] = a;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1321,            hiPrec[1] = b;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1324,        return a + b;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1420,        final double lns[] = new double[2];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1422,        if (y == 0.0) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1426,        if (x != x) { // X is NaN,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1431,        if (x == 0) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1456,        if (x == Double.POSITIVE_INFINITY) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1467,        if (y == Double.POSITIVE_INFINITY) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1479,        if (x == Double.NEGATIVE_INFINITY) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1503,        if (y == Double.NEGATIVE_INFINITY) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1517,        if (x < 0) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1534,        if (y < 8e298 && y > -8e298) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1535,            double tmp1 = y * HEX_40000000;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1536,            ya = y + tmp1 - tmp1;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1537,            yb = y - ya;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1538,        } else {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1546,"        final double lores = log(x, lns);",0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1551,        double lna = lns[0];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1552,        double lnb = lns[1];,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1555,        double tmp1 = lna * HEX_40000000;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1556,        double tmp2 = lna + tmp1 - tmp1;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1557,        lnb += lna - tmp2;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1558,        lna = tmp2;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1561,        final double aa = lna * ya;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1564,        lna = aa+ab;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1565,        lnb = -(lna - aa - ab);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1567,        double z = 1.0 / 120.0;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1568,        z = z * lnb + (1.0 / 24.0);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1569,        z = z * lnb + (1.0 / 6.0);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1570,        z = z * lnb + 0.5;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1571,        z = z * lnb + 1.0;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1572,        z = z * lnb;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1574,"        final double result = exp(lna, z, null);",0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,1576,        return result;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3334,        if (x != x) { // NaN,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3342,        y = (long) x;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3343,        if (x < 0 && y != x) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3347,        if (y == 0) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3351,        return y;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3361,        if (x != x) { // NaN,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3365,        y = floor(x);,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3366,        if (y == x) {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3367,            return y;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3780,    private static class lnMant {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3794,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3796,        },0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,93,    private float contractionCriteria = 2.5f;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,103,    private float expansionFactor = 2.0f;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,109,    private int expansionMode = MULTIPLICATIVE_MODE;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,115,    private int initialCapacity = 16;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,126,    private int numElements = 0;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,134,    private int startIndex = 0;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,160,    public ResizableDoubleArray(int initialCapacity) {,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,161,        setInitialCapacity(initialCapacity);,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,162,        internalArray = new double[this.initialCapacity];,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,163,    },0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,301,        numElements++;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,302,        if ((startIndex + numElements) > internalArray.length) {,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,303,            expand();,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,305,        internalArray[startIndex + (numElements - 1)] = value;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,306,        if (shouldContract()) {,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,307,            contract();,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,309,    },0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,432,        double[] tempArray = new double[numElements + 1];,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,435,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,436,        internalArray = tempArray;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,439,        startIndex = 0;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,440,    },0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,532,        int newSize = 0;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,533,        if (expansionMode == MULTIPLICATIVE_MODE) {,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,534,            newSize = (int) FastMath.ceil(internalArray.length * expansionFactor);,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,538,        double[] tempArray = new double[newSize];,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,541,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,542,        internalArray = tempArray;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,543,    },0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,599,        double[] elementArray = new double[numElements];,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,600,"        System.arraycopy( internalArray, startIndex, elementArray, 0,",0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,602,        return elementArray;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,755,        if (initialCapacity > 0) {,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,756,            synchronized(this) {,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,757,                this.initialCapacity = initialCapacity;,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,758,            },0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,764,    },0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,800,        if (expansionMode == MULTIPLICATIVE_MODE) {,0.5,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,801,            return (internalArray.length / ((float) numElements)) > contractionCriteria;,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3708,    private static class ExpIntTable {,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3740,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3741,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.5,0,-1,0
org/apache/commons/math3/util/FastMath,30,3743,        },0.5,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,35,    static final long[] FACTORIALS = new long[] {,0.5,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,299,        if (n < 0) {,0.5,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,303,        if (n > 20) {,0.5,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,306,        return FACTORIALS[n];,0.5,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,44,    public MannWhitneyUTest() {,0.5,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,45,"        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,",0.5,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,47,    },0.5,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,74,        if (x == null ||,0.5,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,78,        if (x.length == 0 ||,0.5,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,222,"        ensureDataConformance(x, y);",0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaNStrategy,30,36,public enum NaNStrategy {,0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaNStrategy,30,39,"    MINIMAL,",0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaNStrategy,30,42,"    MAXIMAL,",0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaNStrategy,30,45,"    REMOVED,",0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaNStrategy,30,48,    FIXED,0.5,0,-1,0
org/apache/commons/math3/stat/ranking/TiesStrategy,30,39,public enum TiesStrategy {,0.5,0,-1,0
org/apache/commons/math3/stat/ranking/TiesStrategy,30,42,"    SEQUENTIAL,",0.5,0,-1,0
org/apache/commons/math3/stat/ranking/TiesStrategy,30,45,"    MINIMUM,",0.5,0,-1,0
org/apache/commons/math3/stat/ranking/TiesStrategy,30,48,"    MAXIMUM,",0.5,0,-1,0
org/apache/commons/math3/stat/ranking/TiesStrategy,30,51,"    AVERAGE,",0.5,0,-1,0
org/apache/commons/math3/stat/ranking/TiesStrategy,30,54,    RANDOM,0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,129,        super();,0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,130,        this.nanStrategy = nanStrategy;,0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,131,        this.tiesStrategy = tiesStrategy;,0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,132,        randomData = new RandomDataImpl();,0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,133,    },0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,74,    public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;,0.5,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,77,    public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;,0.5,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,180,        super();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,181,        this.rand = rand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,182,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,201,        if (len <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,202,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,206,        RandomGenerator ran = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,209,        StringBuilder outBuffer = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,212,        byte[] randomBytes = new byte[(len / 2) + 1];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,213,        ran.nextBytes(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,216,        for (int i = 0; i < randomBytes.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,217,            Integer c = Integer.valueOf(randomBytes[i]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,224,            String hex = Integer.toHexString(c.intValue() + 128);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,227,            if (hex.length() == 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,228,"                hex = ""0"" + hex;",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,230,            outBuffer.append(hex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,232,"        return outBuffer.toString().substring(0, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,237,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,238,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,241,        double r = getRan().nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,242,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,243,        return (int) FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,248,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,249,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,252,        double r = getRan().nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,253,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,254,        return (long)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,274,        if (len <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,275,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,279,        SecureRandom secRan = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,280,        MessageDigest alg = null;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,282,"            alg = MessageDigest.getInstance(""SHA-1"");",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,286,        },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,283,        } catch (NoSuchAlgorithmException ex) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,285,            throw new MathInternalError(ex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,287,        alg.reset();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,290,        int numIter = (len / 40) + 1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,292,        StringBuilder outBuffer = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,293,        for (int iter = 1; iter < numIter + 1; iter++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,294,            byte[] randomBytes = new byte[40];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,295,            secRan.nextBytes(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,296,            alg.update(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,299,            byte[] hash = alg.digest();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,302,            for (int i = 0; i < hash.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,303,                Integer c = Integer.valueOf(hash[i]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,310,                String hex = Integer.toHexString(c.intValue() + 128);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,313,                if (hex.length() == 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,314,"                    hex = ""0"" + hex;",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,316,                outBuffer.append(hex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,319,"        return outBuffer.toString().substring(0, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,324,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,325,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,328,        SecureRandom sec = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,329,        double r = sec.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,330,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,331,        return (int)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,337,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,338,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,341,        SecureRandom sec = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,342,        double r = sec.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,343,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,344,        return (long)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,361,        if (mean <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,362,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,365,        final double pivot = 40.0d;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,366,        if (mean < pivot) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,367,            final RandomGenerator generator = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,368,            double p = FastMath.exp(-mean);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,369,            long n = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,370,            double r = 1.0d;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,371,            double rnd = 1.0d;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,373,            while (n < 1000 * mean) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,374,                rnd = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,375,                r = r * rnd;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,376,                if (r >= p) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,377,                    n++;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,379,                    return n;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,382,            return n;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,384,            final double lambda = FastMath.floor(mean);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,385,            final double lambdaFractional = mean - lambda;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,386,            final double logLambda = FastMath.log(lambda);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,387,            final double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,388,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,389,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,390,            final double halfDelta = delta / 2;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,391,            final double twolpd = 2 * lambda + delta;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,392,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,393,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,394,            final double aSum = a1 + a2 + 1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,395,            final double p1 = a1 / aSum;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,396,            final double p2 = a2 / aSum;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,397,            final double c1 = 1 / (8 * lambda);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,399,            double x = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,400,            double y = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,401,            double v = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,402,            int a = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,403,            double t = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,404,            double qr = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,405,            double qa = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,407,"                final double u = nextUniform(0.0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,408,                if (u <= p1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,409,"                    final double n = nextGaussian(0d, 1d);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,410,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,411,                    if (x > delta || x < -lambda) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,412,                        continue;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,414,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,415,                    final double e = nextExponential(1d);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,416,                    v = -e - (n * n / 2) + c1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,417,                } else {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,418,                    if (u > p1 + p2) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,419,                        y = lambda;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,420,                        break;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,422,                        x = delta + (twolpd / delta) * nextExponential(1d);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,423,                        y = FastMath.ceil(x);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,424,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,427,                a = x < 0 ? 1 : 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,428,                t = y * (y + 1) / (2 * lambda);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,429,                if (v < -t && a == 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,430,                    y = lambda + y;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,431,                    break;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,433,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,434,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,435,                if (v < qa) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,436,                    y = lambda + y;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,437,                    break;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,439,                if (v > qr) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,440,                    continue;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,442,                if (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,443,                    y = lambda + y;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,444,                    break;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,446,            },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,447,            return y2 + (long) y;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,454,        if (sigma <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,455,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,457,        return sigma * getRan().nextGaussian() + mu;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,473,        if (mean <= 0.0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,474,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,478,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,479,"        double u = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,482,        while (u < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,483,            a += EXPONENTIAL_SA_QI[0];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,484,            u *= 2;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,488,        u += u - 1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,491,        if (u <= EXPONENTIAL_SA_QI[0]) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,492,            return mean * (a + u);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,496,"        int i = 0; // Should be 1, be we iterate before it in while using 0",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,497,"        double u2 = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,498,        double umin = u2;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,502,            ++i;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,503,"            u2 = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,505,            if (u2 < umin) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,506,                umin = u2;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,510,        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,512,        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,530,"        return nextUniform(lower, upper, false);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,551,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,552,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,556,        if (Double.isInfinite(lower) || Double.isInfinite(upper)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,557,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,560,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,561,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,564,        final RandomGenerator generator = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,567,        double u = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,568,        while (!lowerInclusive && u <= 0.0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,569,            u = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,572,        return u * upper + (1.0 - u) * lower;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,586,"        return nextInversionDeviate(new BetaDistribution(alpha, beta));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,600,"        return nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,614,"        return nextInversionDeviate(new CauchyDistribution(median, scale));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,627,        return nextInversionDeviate(new ChiSquaredDistribution(df));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,641,"        return nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,666,        if (shape < 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,671,"                final double u = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,672,                final double bGS = 1 + shape/FastMath.E;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,673,                final double p = bGS*u;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,675,                if (p <= 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,678,"                    final double x = FastMath.pow(p, 1/shape);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,679,"                    final double u2 = this.nextUniform(0.0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,681,                    if (u2 > FastMath.exp(-x)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,683,                        continue;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,685,                        return scale*x;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,690,                    final double x = -1 * FastMath.log((bGS-p)/shape);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,691,"                    final double u2 = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,693,"                    if (u2 > FastMath.pow(x, shape - 1)) {",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,695,                        continue;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,697,                        return scale*x;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,705,        final RandomGenerator generator = this.getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,706,        final double d = shape - 0.333333333333333333;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,707,        final double c = 1.0 / (3*FastMath.sqrt(d));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,710,            final double x = generator.nextGaussian();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,711,            final double v = (1+c*x)*(1+c*x)*(1+c*x);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,713,            if (v <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,714,                continue;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,717,            final double xx = x*x;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,718,"            final double u = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,721,            if (u < 1 - 0.0331*xx*xx) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,722,                return scale*d*v;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,725,            if (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,726,                return scale*d*v;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,728,        },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,743,"        return nextInversionDeviate(new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,757,"        return nextInversionDeviate(new PascalDistribution(r, p));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,770,        return nextInversionDeviate(new TDistribution(df));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,784,"        return nextInversionDeviate(new WeibullDistribution(shape, scale));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,798,"        return nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,812,        if (rand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,813,            initRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,815,        return rand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,823,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,824,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,836,        if (secRand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,837,            secRand = new SecureRandom();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,838,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,840,        return secRand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,853,        if (rand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,854,            initRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,856,        rand.setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,857,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,867,        if (secRand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,868,            secRand = new SecureRandom();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,870,        secRand.setSeed(System.currentTimeMillis());,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,871,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,883,        if (secRand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,884,            secRand = new SecureRandom();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,886,        secRand.setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,887,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,894,        if (rand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,895,            initRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,897,        rand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,898,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,922,"        secRand = SecureRandom.getInstance(algorithm, provider);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,923,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,935,        if (k > n) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,936,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,939,        if (k <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,940,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,944,        int[] index = getNatural(n);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,945,"        shuffle(index, n - k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,946,        int[] result = new int[k];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,947,        for (int i = 0; i < k; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,948,            result[i] = index[n - i - 1];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,951,        return result;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,969,        int len = c.size();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,970,        if (k > len) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,971,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,974,        if (k <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,975,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,978,        Object[] objects = c.toArray();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,979,"        int[] index = nextPermutation(len, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,980,        Object[] result = new Object[k];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,981,        for (int i = 0; i < k; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,982,            result[i] = objects[index[i]];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,984,        return result;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,996,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1009,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1024,        int target = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1025,        for (int i = list.length - 1; i >= end; i--) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1026,            if (i == 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1027,                target = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1029,"                target = nextInt(0, i);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1031,            int temp = list[target];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1032,            list[target] = list[i];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1033,            list[i] = temp;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1035,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1045,        int[] natural = new int[n];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1046,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1047,            natural[i] = i;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,30,1049,        return natural;,0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,30,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,30,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,30,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,30,49,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,30,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,30,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,30,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,30,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,30,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,30,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,30,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,30,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,30,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,30,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,30,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,30,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,30,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,30,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,30,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,30,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,30,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,30,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,30,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,30,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,30,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,30,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,30,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,30,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,30,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,30,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,30,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,30,37,    public MathInternalError() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,30,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,30,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,30,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,30,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,30,56,"        super(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,30,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,30,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,246,                    return ((2.0 * n) + 1.0) - a + x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,251,                    return n * (a - n);,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,45,        super();,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,46,    },0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,73,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,84,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,95,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,124,        final double small = 1e-50;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,125,"        double hPrev = getA(0, x);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,128,"        if (Precision.equals(hPrev, 0.0, small)) {",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,129,            hPrev = small;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,132,        int n = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,133,        double dPrev = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,134,        double cPrev = hPrev;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,135,        double hN = hPrev;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,137,        while (n < maxIterations) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,138,"            final double a = getA(n, x);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,139,"            final double b = getB(n, x);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,141,            double dN = a + b * dPrev;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,142,"            if (Precision.equals(dN, 0.0, small)) {",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,143,                dN = small;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,145,            double cN = a + b / cPrev;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,146,"            if (Precision.equals(cN, 0.0, small)) {",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,147,                cN = small;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,150,            dN = 1 / dN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,151,            final double deltaN = cN * dN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,152,            hN = hPrev * deltaN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,154,            if (Double.isInfinite(hN)) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,155,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,158,            if (Double.isNaN(hN)) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,159,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,163,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,164,                break;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,167,            dPrev = dN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,168,            cPrev = cN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,169,            hPrev = hN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,170,            n++;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,171,        },0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,173,        if (n >= maxIterations) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,174,"            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,30,178,        return hN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,73,    private Gamma() {},0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,95,        if (Double.isNaN(x) || (x <= 0.0)) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,96,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,98,            double g = 607.0 / 128.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,99,            double sum = lanczos(x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,100,            double tmp = x + g + .5;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,101,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,105,        return ret;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,117,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,155,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,156,        } else if (x == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,157,            ret = 0.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,158,        } else if (x >= a + 1) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,161,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,164,            double n = 0.0; // current element index,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,165,            double an = 1.0 / a; // n-th element in the series,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,166,            double sum = an; // partial sum,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,168,                   n < maxIterations &&,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,171,                n = n + 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,172,                an = an * (x / (a + n));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,175,                sum = sum + an;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,177,            if (n >= maxIterations) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,178,                throw new MaxCountExceededException(maxIterations);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,179,            } else if (Double.isInfinite(sum)) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,180,                ret = 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,182,                ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,198,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,232,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,233,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,234,        } else if (x == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,235,            ret = 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,236,        } else if (x < a + 1.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,239,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,255,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,256,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,259,        return ret;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,284,        if (x > 0 && x <= S_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,287,            return -GAMMA - 1 / x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,290,        if (x >= C_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,292,            double inv = 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,296,            return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,299,        return digamma(x + 1) - 1 / x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,314,        if (x > 0 && x <= S_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,315,            return 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,318,        if (x >= C_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,319,            double inv = 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,324,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,327,        return trigamma(x + 1) + 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,350,        double sum = 0.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,351,        for (int i = LANCZOS.length - 1; i > 0; --i) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,352,            sum = sum + (LANCZOS[i] / (x + i));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,30,354,        return sum + LANCZOS[0];,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,30,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,30,43,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,30,53,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,30,54,"        getContext().addMessage(specific, max, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,30,55,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,30,56,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,30,62,        return max;,0.0,0,-1,0
org/apache/commons/math3/special/Erf,30,44,    private Erf() {},0.0,0,-1,0
org/apache/commons/math3/special/Erf,30,68,            return x > 0 ? 1 : -1;,0.0,0,-1,0
org/apache/commons/math3/special/Erf,30,98,        if (FastMath.abs(x) > 40) {,0.0,0,-1,0
org/apache/commons/math3/special/Erf,30,99,            return x > 0 ? 0 : 2;,0.0,0,-1,0
org/apache/commons/math3/special/Erf,30,101,"        final double ret = Gamma.regularizedGammaQ(0.5, x * x, 1.0e-15, 10000);",0.0,0,-1,0
org/apache/commons/math3/special/Erf,30,102,        return x < 0 ? 2 - ret : ret;,0.0,0,-1,0
org/apache/commons/math3/special/Erf,30,116,        if(x1 > x2) {,0.0,0,-1,0
org/apache/commons/math3/special/Erf,30,117,"            return -erf(x2, x1);",0.0,0,-1,0
org/apache/commons/math3/special/Erf,30,120,        return,0.0,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,30,6134,    private FastMathLiteralArrays() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,349,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,362,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,364,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,366,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,383,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,384,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,392,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,393,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,396,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,397,          return exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,400,      double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,401,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,402,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,404,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,409,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,410,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,411,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,414,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,415,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,416,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,417,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,422,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,425,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,426,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,427,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,428,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,429,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,430,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,432,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,433,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,434,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,442,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,443,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,444,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,452,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,453,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,456,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,457,          return -exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,460,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,461,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,464,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,465,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,466,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,471,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,472,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,473,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,478,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,479,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,480,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,483,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,484,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,485,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,486,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,491,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,493,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,494,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,497,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,498,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,499,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,500,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,501,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,502,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,504,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,505,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,506,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,508,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,509,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,515,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,516,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,518,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,519,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,520,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,521,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,523,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,524,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,525,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,530,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,534,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,535,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,536,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,537,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,538,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,539,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,541,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,542,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,545,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,546,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,549,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,557,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,559,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,560,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,569,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,570,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,573,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,574,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,577,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,578,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,581,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,582,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,583,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,587,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,588,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,596,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,597,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,598,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,599,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,600,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,603,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,604,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,605,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,606,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,607,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,609,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,610,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,611,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,614,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,615,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,616,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,617,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,623,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,625,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,627,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,628,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,630,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,632,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,638,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,639,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,642,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,643,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,644,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,645,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,646,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,648,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,649,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,650,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,653,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,654,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,655,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,656,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,662,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,664,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,666,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,669,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,670,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,673,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,689,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,690,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,691,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,692,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,696,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,699,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,700,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,702,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,704,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,711,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,719,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,720,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,721,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,722,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,726,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,729,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,730,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,732,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,734,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,741,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,783,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,807,"        return exp(x, 0.0, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,830,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,831,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,832,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,834,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,840,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,844,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,850,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,854,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,864,            intVal = (int) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,866,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,867,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,869,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,871,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,922,            result = tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,927,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,939,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,955,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,956,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,957,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,962,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,963,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,970,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,972,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,973,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,974,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,978,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,982,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,983,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,984,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,986,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,987,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,988,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,990,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,995,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,999,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1000,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1002,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1003,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1004,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1005,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1007,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1008,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1009,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1010,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1013,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1015,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1017,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1019,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1021,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1023,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1025,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1029,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1030,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1031,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1033,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1035,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1036,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1038,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1040,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1043,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1045,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1046,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1048,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1050,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1051,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1053,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1054,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1055,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1056,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1058,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1059,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1060,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1073,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1077,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1078,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1081,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1082,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1083,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1086,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1113,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1114,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1115,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1118,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1124,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1128,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1136,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1146,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1148,                exp--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1149,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1160,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1161,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1162,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1163,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1164,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1165,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1166,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1173,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1174,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1176,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1177,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1178,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1184,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1185,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1186,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1190,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1191,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1193,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1194,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1195,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1197,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1333,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1334,            return x/0.0;   // -Infinity,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1338,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1341,        if (x>1e-6 || x<-1e-6) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1342,            double xpa = 1.0 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1343,            double xpb = -(xpa - 1.0 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1345,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1347,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1349,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1354,            double fx1 = xpb/xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1356,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1357,            epsilon = epsilon * fx1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1359,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1363,        double y = x * F_1_3 - F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1364,        y = y * x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1365,        y = y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1367,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1375,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1377,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1379,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1383,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1386,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1387,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1409,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1423,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1427,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1432,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1433,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1435,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1438,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1442,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1446,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1447,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1449,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1450,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1453,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1457,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1458,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1460,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1461,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1463,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1468,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1469,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1472,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1473,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1475,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1480,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1481,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1484,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1485,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1486,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1487,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1490,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1493,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1494,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1495,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1496,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1499,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1505,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1506,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1509,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1510,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1512,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1520,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1523,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1527,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1542,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1548,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1588,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1590,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1591,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1592,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1593,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1596,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1598,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1608,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1610,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1611,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1612,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1613,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1614,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1616,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1627,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1631,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1632,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1633,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1634,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1637,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1638,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1639,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1640,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1643,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1644,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1645,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1646,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1672,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1673,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1675,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1676,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1677,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1678,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1679,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1681,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1682,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1683,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1684,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1685,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1729,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1732,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1733,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1734,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1735,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1738,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1740,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1751,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1752,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1754,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1755,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1756,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1758,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1775,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1776,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1777,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1778,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1781,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1782,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1783,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1784,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1787,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1788,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1789,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1790,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1815,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1816,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1819,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1820,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1821,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1822,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1823,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1825,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1826,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1827,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1828,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1829,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1834,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1835,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1839,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1841,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1842,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1843,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1844,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1845,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1847,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1848,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1849,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1850,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1851,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1856,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1857,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1859,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1861,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1876,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1879,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1880,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1881,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1883,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1884,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1885,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1889,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1892,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1895,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1896,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1897,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1900,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1903,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1920,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1924,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1925,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1928,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1929,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1935,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1936,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1938,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1945,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1946,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1950,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1951,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1953,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1954,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1956,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1957,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1958,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1959,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1961,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1962,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1969,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1971,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1975,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1977,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1978,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1983,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1985,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1989,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1990,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1991,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1992,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1993,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1996,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2000,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2003,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2005,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2009,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2010,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2012,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2013,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2014,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2016,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2028,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2031,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2032,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2033,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2036,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2037,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2039,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2042,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2043,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2044,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2045,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2047,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2048,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2050,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2051,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2055,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2057,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2061,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2063,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2064,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2069,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2071,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2075,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2077,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2078,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2079,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2082,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2086,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2089,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2091,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2095,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2096,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2097,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2099,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2100,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2101,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2104,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2108,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2111,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2113,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2120,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2121,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2124,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2125,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2126,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2127,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2135,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2136,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2138,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2141,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2142,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2143,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2144,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2148,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2149,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2150,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2151,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2153,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2157,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2161,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2165,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2166,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2167,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2168,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2169,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2170,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2175,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2181,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2182,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2183,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2185,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2186,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2187,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2188,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2190,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2191,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2192,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2193,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2195,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2196,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2202,                k--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2203,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2204,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2205,            xa = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2206,            xb = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2209,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2210,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2213,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2215,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2217,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2219,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2221,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2223,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2233,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2236,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2237,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2238,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2242,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2246,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2247,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2251,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2252,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2253,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2254,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2255,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2256,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2261,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2267,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2268,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2269,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2271,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2272,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2273,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2274,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2276,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2277,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2278,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2279,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2281,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2282,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2288,                k--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2289,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2290,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2291,            xa = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2292,            xb = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2298,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2300,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2302,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2304,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2306,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2308,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2318,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2319,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2322,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2323,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2324,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2325,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2329,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2330,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2331,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2332,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2334,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2338,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2342,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2343,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2347,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2348,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2349,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2350,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2351,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2352,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2357,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2363,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2364,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2365,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2367,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2368,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2369,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2370,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2372,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2373,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2374,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2375,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2377,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2378,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2384,                k--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2385,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2386,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2387,            xa = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2388,            xb = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2391,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2393,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2394,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2396,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2397,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2398,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2400,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2401,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2402,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2403,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2407,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2408,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2410,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2413,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2414,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2417,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2426,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2436,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2443,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2445,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2446,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2447,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2450,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2451,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2455,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2458,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2463,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2465,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2466,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2467,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2470,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2471,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2472,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2473,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2474,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2477,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2482,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2483,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2484,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2486,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2487,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2489,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2490,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2491,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2493,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2494,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2496,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2497,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2498,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2500,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2501,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2502,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2507,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2508,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2512,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2513,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2516,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2527,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2528,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2529,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2530,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2531,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2532,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2533,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2536,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2538,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2539,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2540,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2543,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2546,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2547,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2548,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2549,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2550,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2552,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2553,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2555,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2557,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2558,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2560,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2561,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2562,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2564,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2565,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2569,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2570,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2573,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2583,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2584,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2587,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2588,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2589,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2590,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2592,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2593,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2594,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2596,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2600,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2601,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2602,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2604,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2607,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2613,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2614,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2615,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2618,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2619,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2622,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2625,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2626,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2627,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2630,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2631,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2634,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2637,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2638,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2639,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2642,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2643,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2647,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2649,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2650,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2653,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2654,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2660,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2661,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2662,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2665,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2666,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2671,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2672,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2673,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2676,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2677,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2680,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2681,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2685,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2686,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2687,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2689,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2690,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2694,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2696,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2704,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2705,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2708,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2709,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2712,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2713,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2716,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2717,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2720,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2721,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2727,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2728,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2729,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2732,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2733,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2736,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2737,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2739,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2740,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2742,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2743,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2744,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2748,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2749,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2750,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2751,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2754,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2757,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2760,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2761,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2762,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2763,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2765,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2766,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2768,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2769,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2770,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2772,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2780,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2781,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2784,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2785,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2788,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2789,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2792,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2793,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2796,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2797,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2803,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2804,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2805,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2808,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2809,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2812,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2813,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2815,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2816,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2818,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2819,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2820,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2823,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2824,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2825,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2826,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2832,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2833,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2834,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2837,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2840,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2841,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2844,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2845,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2847,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2850,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2851,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2852,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2854,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2863,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2864,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2865,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2867,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2868,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2869,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2873,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2874,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2875,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2876,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2879,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2881,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2885,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2888,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2892,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2895,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2896,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2897,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2898,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2899,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2901,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2906,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2907,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2908,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2911,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2912,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2913,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2915,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2916,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2917,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2918,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2919,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2920,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2922,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2923,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2925,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2926,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2927,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2929,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2932,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2934,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2935,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2938,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2953,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2954,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2956,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2957,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2959,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2960,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2961,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2963,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2973,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2974,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2978,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2979,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2981,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2982,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2984,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,2993,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3002,        return (x < 0l) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3029,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3030,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3032,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3041,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3042,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3056,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3062,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3064,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3065,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3067,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3068,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3072,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3073,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3075,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3078,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3080,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3082,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3084,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3085,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3089,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3092,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3093,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3094,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3096,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3098,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3102,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3106,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3109,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3110,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3111,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3113,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3114,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3116,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3117,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3122,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3140,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3145,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3146,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3148,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3149,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3151,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3156,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3157,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3158,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3159,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3162,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3164,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3166,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3168,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3169,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3173,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3177,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3178,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3180,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3182,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3186,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3190,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3193,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3194,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3195,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3197,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3198,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3200,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3201,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3206,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3207,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3209,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3249,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3250,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3251,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3252,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3253,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3255,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3261,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3262,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3263,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3264,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3306,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3307,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3308,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3309,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3310,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3311,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3317,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3318,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3319,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3322,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3335,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3339,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3344,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3348,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3362,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3370,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3372,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3373,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3376,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3384,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3385,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3387,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3388,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3389,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3391,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3393,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3394,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3398,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3399,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3407,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3415,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3424,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3433,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3442,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3443,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3445,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3446,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3449,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3450,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3454,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3455,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3456,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3458,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3467,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3468,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3470,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3471,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3474,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3475,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3479,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3480,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3481,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3483,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3492,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3501,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3510,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3511,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3513,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3514,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3517,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3518,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3522,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3523,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3524,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3526,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3536,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3538,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3539,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3542,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3543,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3547,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3548,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3549,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3551,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3570,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3572,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3575,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3576,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3577,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3579,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3580,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3582,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3586,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3589,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3590,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3596,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3636,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3637,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3639,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3641,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3653,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3654,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3655,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3656,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3658,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3671,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3684,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3693,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3701,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3702,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3703,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,30,3705,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,145,    public ResizableDoubleArray() {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,146,        internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,147,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,182,    public ResizableDoubleArray(double[] initialArray) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,183,        if (initialArray == null) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,184,            this.internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,186,            this.internalArray = new double[initialArray.length];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,187,"            System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,188,            initialCapacity = initialArray.length;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,189,            numElements = initialArray.length;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,191,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,215,"    public ResizableDoubleArray(int initialCapacity, float expansionFactor) {",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,216,        this.expansionFactor = expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,217,        setInitialCapacity(initialCapacity);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,218,        internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,219,        setContractionCriteria(expansionFactor +0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,220,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,242,        float contractionCriteria) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,243,        this.expansionFactor = expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,244,        setContractionCriteria(contractionCriteria);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,245,        setInitialCapacity(initialCapacity);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,246,        internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,247,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,271,"            float contractionCriteria, int expansionMode) {",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,272,        this.expansionFactor = expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,273,        setContractionCriteria(contractionCriteria);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,274,        setInitialCapacity(initialCapacity);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,275,        setExpansionMode(expansionMode);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,276,        internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,277,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,290,        throws NullArgumentException {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,291,        MathUtils.checkNotNull(original);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,292,"        copy(original, this);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,293,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,318,        final double[] tempArray = new double[numElements + values.length + 1];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,319,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,320,"        System.arraycopy(values, 0, tempArray, numElements, values.length);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,321,        internalArray = tempArray;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,322,        startIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,323,        numElements += values.length;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,324,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,343,        double discarded = internalArray[startIndex];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,345,        if ((startIndex + (numElements + 1)) > internalArray.length) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,346,            expand();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,349,        startIndex += 1;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,352,        internalArray[startIndex + (numElements - 1)] = value;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,355,        if (shouldContract()) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,356,            contract();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,358,        return discarded;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,372,        if (numElements < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,373,            throw new MathIllegalStateException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,377,        double discarded = internalArray[startIndex + (numElements - 1)];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,379,        internalArray[startIndex + (numElements - 1)] = value;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,381,        return discarded;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,397,        if (contraction < expansion) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,398,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,403,        if (contraction <= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,404,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,409,        if (expansion <= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,410,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,414,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,421,        numElements = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,422,        startIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,423,        internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,424,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,455,"        discardExtremeElements(i,true);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,457,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,472,"        discardExtremeElements(i,false);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,474,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,496,        if (i > numElements) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,497,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,500,       } else if (i < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,501,           throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,506,            numElements -= i;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,507,            if (front) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,508,                startIndex += i;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,511,        if (shouldContract()) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,512,            contract();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,514,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,536,            newSize = internalArray.length + FastMath.round(expansionFactor);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,551,        double[] tempArray = new double[size];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,553,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,554,        internalArray = tempArray;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,555,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,570,        return contractionCriteria;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,582,        if (index >= numElements) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,583,            throw new ArrayIndexOutOfBoundsException(index);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,584,        } else if (index >= 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,585,            return internalArray[startIndex + index];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,587,            throw new ArrayIndexOutOfBoundsException(index);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,618,        return expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,629,        return expansionMode;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,641,        return internalArray.length;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,651,        return numElements;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,667,        return internalArray;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,676,"        checkContractExpand(contractionCriteria, getExpansionFactor());",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,677,        synchronized(this) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,678,            this.contractionCriteria = contractionCriteria;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,679,        },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,680,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,696,        if (index < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,697,            throw new ArrayIndexOutOfBoundsException(index);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,699,        if (index + 1 > numElements) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,700,            numElements = index + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,702,        if ((startIndex + index) >= internalArray.length) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,703,            expandTo(startIndex + (index + 1));,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,705,        internalArray[startIndex + index] = value;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,706,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,720,"        checkContractExpand(getContractionCriteria(), expansionFactor);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,722,        synchronized(this) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,723,            this.expansionFactor = expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,724,        },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,725,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,735,        if (expansionMode != MULTIPLICATIVE_MODE &&,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,737,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,742,        synchronized(this) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,743,            this.expansionMode = expansionMode;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,744,        },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,745,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,760,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,777,        if (i < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,778,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,785,        if ((startIndex + i) > internalArray.length) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,786,            expandTo(startIndex + i);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,790,        numElements = i;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,791,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,803,            return (internalArray.length - numElements) > contractionCriteria;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,817,        return startIndex;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,839,        MathUtils.checkNotNull(source);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,840,        MathUtils.checkNotNull(dest);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,841,        synchronized(source) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,842,           synchronized(dest) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,843,               dest.initialCapacity = source.initialCapacity;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,844,               dest.contractionCriteria = source.contractionCriteria;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,845,               dest.expansionFactor = source.expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,846,               dest.expansionMode = source.expansionMode;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,847,               dest.internalArray = new double[source.internalArray.length];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,848,"               System.arraycopy(source.internalArray, 0, dest.internalArray,",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,850,               dest.numElements = source.numElements;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,851,               dest.startIndex = source.startIndex;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,852,           },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,853,       },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,854,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,865,        ResizableDoubleArray result = new ResizableDoubleArray();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,866,"        copy(this, result);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,867,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,881,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,882,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,884,       if (object instanceof ResizableDoubleArray == false) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,885,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,887,       synchronized(this) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,888,           synchronized(object) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,889,               boolean result = true;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,890,               ResizableDoubleArray other = (ResizableDoubleArray) object;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,891,               result = result && (other.initialCapacity == initialCapacity);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,892,               result = result && (other.contractionCriteria == contractionCriteria);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,893,               result = result && (other.expansionFactor == expansionFactor);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,894,               result = result && (other.expansionMode == expansionMode);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,895,               result = result && (other.numElements == numElements);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,896,               result = result && (other.startIndex == startIndex);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,897,               if (!result) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,898,                   return false;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,900,"                   return Arrays.equals(internalArray, other.internalArray);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,902,           },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,903,       },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,914,        int[] hashData = new int[7];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,915,        hashData[0] = new Float(expansionFactor).hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,916,        hashData[1] = new Float(contractionCriteria).hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,917,        hashData[2] = expansionMode;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,918,            hashData[3] = Arrays.hashCode(internalArray);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,919,            hashData[4] = initialCapacity;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,920,            hashData[5] = numElements;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,921,            hashData[6] = startIndex;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,30,922,        return Arrays.hashCode(hashData);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,30,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,30,42,    },0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,30,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,30,51,    },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,46,        super();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,47,    },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,60,        long s = (long)x + (long)y;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,64,        return (int)s;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,108,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,109,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,110,            return 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,112,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,113,            return n;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,116,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,117,"            return binomialCoefficient(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,125,        long result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,126,        if (n <= 61) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,128,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,129,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,130,                result = result * i / j;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,131,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,133,        } else if (n <= 66) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,136,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,137,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,144,"                final long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,145,                result = (result / (j / d)) * (i / d);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,146,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,148,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,152,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,153,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,154,"                final long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,155,"                result = mulAndCheck(result / (j / d), i / d);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,156,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,159,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,186,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,187,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,188,            return 1d;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,190,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,191,            return n;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,193,        if (k > n/2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,194,"            return binomialCoefficientDouble(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,196,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,197,"            return binomialCoefficient(n,k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,200,        double result = 1d;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,201,        for (int i = 1; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,202,             result *= (double)(n - k + i) / (double)i;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,205,        return FastMath.floor(result + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,228,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,229,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,230,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,232,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,233,            return FastMath.log(n);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,240,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,241,"            return FastMath.log(binomialCoefficient(n,k));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,248,        if (n < 1030) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,252,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,253,"            return binomialCoefficientLog(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,259,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,262,        for (int i = n - k + 1; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,263,            logSum += FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,267,        for (int i = 2; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,268,            logSum -= FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,271,        return logSum;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,304,            throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,323,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,327,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,328,            return factorial(n);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,341,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,345,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,346,            return FastMath.log(factorial(n));,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,348,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,349,        for (int i = 2; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,350,            logSum += FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,352,        return logSum;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,385,        int u = p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,386,        int v = q;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,387,        if ((u == 0) || (v == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,392,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,399,        if (u > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,400,            u = -u;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,402,        if (v > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,403,            v = -v;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,406,        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,409,            u /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,410,            v /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,411,            k++; // cast out twos.,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,413,        if (k == 31) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,425,            while ((t & 1) == 0) { // while t is even..,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,426,                t /= 2; // cast out twos,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,429,            if (t > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,430,                u = -t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,432,                v = t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,435,            t = (v - u) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,438,        } while (t != 0);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,439,        return -u * (1 << k); // gcd is u*2^k,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,472,        long u = p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,473,        long v = q;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,474,        if ((u == 0) || (v == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,479,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,486,        if (u > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,487,            u = -u;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,489,        if (v > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,490,            v = -v;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,493,        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,496,            u /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,497,            v /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,498,            k++; // cast out twos.,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,500,        if (k == 63) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,512,            while ((t & 1) == 0) { // while t is even..,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,513,                t /= 2; // cast out twos,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,516,            if (t > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,517,                u = -t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,519,                v = t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,522,            t = (v - u) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,525,        } while (t != 0);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,526,        return -u * (1L << k); // gcd is u*2^k,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,552,        if (a == 0 || b == 0){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,553,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,556,        if (lcm == Integer.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,560,        return lcm;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,586,        if (a == 0 || b == 0){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,587,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,590,        if (lcm == Long.MIN_VALUE){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,594,        return lcm;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,608,        long m = ((long)x) * ((long)y);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,610,            throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,612,        return (int)m;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,627,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,629,"            ret = mulAndCheck(b, a);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,631,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,632,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,634,                    if (a >= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,635,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,637,                        throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,639,                } else if (b > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,641,                    if (Long.MIN_VALUE / b <= a) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,642,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,644,                        throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,649,                    ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,651,            } else if (a > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,656,                if (a <= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,657,                    ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,659,                    throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,663,                ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,666,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,680,        long s = (long)x - (long)y;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,684,        return (int)s;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,699,        if (b == Long.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,700,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,701,                ret = a - b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,709,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,721,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,725,        int result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,726,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,727,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,728,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,729,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,731,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,732,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,735,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,747,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,751,        int result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,752,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,753,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,754,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,755,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,757,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,758,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,761,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,773,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,777,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,778,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,779,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,780,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,781,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,783,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,784,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,787,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,799,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,803,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,804,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,805,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,806,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,807,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,809,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,810,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,813,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,825,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,829,        return k.pow(e);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,841,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,845,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,846,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,847,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,848,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,849,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,851,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,852,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,855,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,872,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,873,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,874,        while (!BigInteger.ZERO.equals(e)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,875,            if (e.testBit(0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,876,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,878,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,879,            e = e.shiftRight(1);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,882,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,898,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,900,"            ret = addAndCheck(b, a, pattern);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,904,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,905,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,907,                    if (Long.MIN_VALUE - b <= a) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,908,                        ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,910,"                        throw new MathArithmeticException(pattern, a, b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,914,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,921,                if (a <= Long.MAX_VALUE - b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,922,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,924,"                    throw new MathArithmeticException(pattern, a, b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,928,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,940,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,944,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,947,    },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,30,956,        return (n > 0) && ((n & (n - 1)) == 0);,0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,30,37,"        super(value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,30,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,30,47,"        super(specific, value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,30,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,59,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,63,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,30,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,59,                            final TiesStrategy tiesStrategy) {,0.0,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,60,"        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);",0.0,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,61,    },0.0,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,76,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,80,            throw new NoDataException();,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,30,37,        this(LocalizedFormats.NO_DATA);,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,30,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,30,45,        super(specific);,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,30,46,    },0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,92,        super();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,93,        tiesStrategy = DEFAULT_TIES_STRATEGY;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,94,        nanStrategy = DEFAULT_NAN_STRATEGY;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,95,        randomData = null;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,96,    },0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,104,        super();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,105,        this.tiesStrategy = tiesStrategy;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,106,        nanStrategy = DEFAULT_NAN_STRATEGY;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,107,        randomData = new RandomDataImpl();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,108,    },0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,116,        super();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,117,        this.nanStrategy = nanStrategy;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,118,        tiesStrategy = DEFAULT_TIES_STRATEGY;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,119,        randomData = null;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,120,    },0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,142,        super();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,143,        this.tiesStrategy = TiesStrategy.RANDOM;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,144,        nanStrategy = DEFAULT_NAN_STRATEGY;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,145,        randomData = new RandomDataImpl(randomGenerator);,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,146,    },0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,158,        super();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,159,        this.nanStrategy = nanStrategy;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,160,        this.tiesStrategy = TiesStrategy.RANDOM;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,161,        randomData = new RandomDataImpl(randomGenerator);,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,162,    },0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,170,        return nanStrategy;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,179,        return tiesStrategy;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,202,"                recodeNaNs(ranks, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,203,                break;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,205,"                recodeNaNs(ranks, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,206,                break;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,208,                ranks = removeNaNs(ranks);,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,209,                break;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,214,                throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,232,"                    resolveTie(out, tiesTrace);",0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,238,                tiesTrace.add(ranks[i].getPosition());,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,243,"            resolveTie(out, tiesTrace);",0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,259,        if (!containsNaNs(ranks)) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,260,            return ranks;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,262,        IntDoublePair[] outRanks = new IntDoublePair[ranks.length];,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,263,        int j = 0;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,264,        for (int i = 0; i < ranks.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,265,            if (Double.isNaN(ranks[i].getValue())) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,267,                for (int k = i + 1; k < ranks.length; k++) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,268,                    ranks[k] = new IntDoublePair(,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,272,                outRanks[j] = new IntDoublePair(,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,274,                j++;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,277,        IntDoublePair[] returnRanks = new IntDoublePair[j];,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,278,"        System.arraycopy(outRanks, 0, returnRanks, 0, j);",0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,279,        return returnRanks;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,289,        for (int i = 0; i < ranks.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,290,            if (Double.isNaN(ranks[i].getValue())) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,291,                ranks[i] = new IntDoublePair(,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,295,    },0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,304,        for (int i = 0; i < ranks.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,305,            if (Double.isNaN(ranks[i].getValue())) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,306,                return true;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,309,        return false;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,329,        final double c = ranks[tiesTrace.get(0)];,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,332,        final int length = tiesTrace.size();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,0.0,0,,0,0.3588124511167879,0.641187548883212
org/apache/commons/math3/stat/ranking/NaturalRanking,30,336,"                fill(ranks, tiesTrace, (2 * c + length - 1) / 2d);",0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,337,                break;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,339,"                fill(ranks, tiesTrace, c + length - 1);",0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,340,                break;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,342,"                fill(ranks, tiesTrace, c);",0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,343,                break;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,345,                Iterator<Integer> iterator = tiesTrace.iterator();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,346,                long f = FastMath.round(c);,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,347,                while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,348,                    ranks[iterator.next()] =,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,354,                iterator = tiesTrace.iterator();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,355,                f = FastMath.round(c);,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,356,                int i = 0;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,357,                while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,358,                    ranks[iterator.next()] = f + i++;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,362,                throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,364,    },0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,374,        Iterator<Integer> iterator = tiesTrace.iterator();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,375,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,376,            data[iterator.next()] = value;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,378,    },0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,390,        Iterator<Integer> iterator = nanPositions.iterator();,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,391,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,392,            ranks[iterator.next().intValue()] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,395,    },0.0,0,-1,0
org/apache/commons/math3/stat/ranking/NaturalRanking,30,407,                out.add(Integer.valueOf(i));,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,152,                return cumulativeProbability(x) - p;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,62,        if (x0 > x1) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,63,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,66,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,107,        if (p < 0.0 || p > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,108,"            throw new OutOfRangeException(p, 0, 1);",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,111,        double lowerBound = getSupportLowerBound();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,112,        if (p == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,113,            return lowerBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,116,        double upperBound = getSupportUpperBound();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,117,        if (p == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,118,            return upperBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,121,        final double mu = getNumericalMean();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,122,        final double sig = FastMath.sqrt(getNumericalVariance());,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,128,            if (chebyshevApplies) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,129,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,131,                lowerBound = -1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,132,                while (cumulativeProbability(lowerBound) >= p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,133,                    lowerBound *= 2.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,138,        if (upperBound == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,139,            if (chebyshevApplies) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,142,                upperBound = 1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,143,                while (cumulativeProbability(upperBound) < p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,144,                    upperBound *= 2.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,156,"        double x = UnivariateSolverUtils.solve(toSolve,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,161,        if (!isSupportConnected()) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,163,            final double dx = getSolverAbsoluteAccuracy();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,164,            if (x - dx >= getSupportLowerBound()) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,165,                double px = cumulativeProbability(x);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,166,                if (cumulativeProbability(x - dx) == px) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,167,                    upperBound = x;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,168,                    while (upperBound - lowerBound > dx) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,169,                        final double midPoint = 0.5 * (lowerBound + upperBound);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,170,                        if (cumulativeProbability(midPoint) < px) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,171,                            lowerBound = midPoint;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,173,                            upperBound = midPoint;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,175,                    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,176,                    return upperBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,180,        return x;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,191,        return solverAbsoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,196,        randomData.reSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,197,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,208,        return randomData.nextInversionDeviate(this);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,218,        if (sampleSize <= 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,219,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,222,        double[] out = new double[sampleSize];,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,223,        for (int i = 0; i < sampleSize; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,224,            out[i] = sample();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,30,226,        return out;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,90,"        this(0, 1);",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,91,    },0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,99,        return mean;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,108,        return standardDeviation;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,119,        return 0.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,124,        final double x0 = x - mean;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,125,        final double x1 = x0 / standardDeviation;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,126,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,139,            return dev < 0 ? 0.0d : 1.0d;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,148,        if (x0 > x1) {,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,149,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,152,        final double denom = standardDeviation * SQRT2;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,153,        final double v0 = (x0 - mean) / denom;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,154,        final double v1 = (x1 - mean) / denom;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,155,"        return 0.5 * Erf.erf(v0, v1);",0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,161,        return solverAbsoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,170,        return getMean();,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,179,        final double s = getStandardDeviation();,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,180,        return s * s;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,193,        return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,206,        return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,211,        return false;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,216,        return false;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,227,        return true;,0.0,0,-1,0
org/apache/commons/math3/distribution/NormalDistribution,30,233,"        return randomData.nextGaussian(mean, standardDeviation);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,30,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,30,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,30,62,"        super(specific, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,30,63,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,30,64,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,30,65,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,30,71,        return lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,30,77,        return hi;,0.0,0,-1,0
