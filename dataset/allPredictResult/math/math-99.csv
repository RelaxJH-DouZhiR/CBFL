project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,1.0,1,,1,0.7066476233213224,0.2933523766786766
org/apache/commons/math/util/MathUtils,99,711,            return 0;,1.0,0,,0,0.13701871047561504,0.8629812895243856
org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",1.0,0,,0,0.07749309612553348,0.922506903874466
org/apache/commons/math/util/MathUtils,99,714,        return lcm;,1.0,1,,1,0.21993943235778532,0.7800605676422131
org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,0.14815,0,-1,0
org/apache/commons/math/util/MathUtils,99,561,            v /= 2;,0.14815,0,-1,0
org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,0.14815,0,-1,0
org/apache/commons/math/util/MathUtils,99,578,                t /= 2; // cast out twos,0.08889,0,-1,0
org/apache/commons/math/util/MathUtils,99,540,        int u = p;,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,541,        int v = q;,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,542,        if ((u == 0) || (v == 0)) {,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,550,        if (u > 0) {,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,551,            u = -u;,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,553,        if (v > 0) {,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,554,            v = -v;,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,557,        int k = 0;,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,558,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,564,        if (k == 31) {,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,571,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,577,            while ((t & 1) == 0) { // while t is even..,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,581,            if (t > 0) {,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,582,                u = -t;,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,584,                v = t;,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,587,            t = (v - u) / 2;,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,590,        } while (t != 0);,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,591,        return -u * (1 << k); // gcd is u*2^k,0.0678,0,-1,0
org/apache/commons/math/util/MathUtils,99,748,        long m = ((long)x) * ((long)y);,0.03448,0,-1,0
org/apache/commons/math/util/MathUtils,99,749,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0.03448,0,-1,0
org/apache/commons/math/util/MathUtils,99,752,        return (int)m;,0.03448,0,-1,0
org/apache/commons/math/util/MathUtils,99,413,    private static final long[] factorials = new long[] ,0.01869,0,-1,0
org/apache/commons/math/util/MathUtils,99,543,            return (Math.abs(u) + Math.abs(v));,0.01754,0,-1,0
org/apache/commons/math/MathRuntimeException,99,105,"      super(buildMessage(pattern, arguments, Locale.US));",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,106,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,107,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,108,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,118,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,119,        this.pattern   = getMessage();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,120,        this.arguments = new Object[0];,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,121,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,134,"      super(buildMessage(pattern, arguments, Locale.US), rootCause);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,135,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,136,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,137,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,43,    private static ResourceBundle cachedResources = null;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,64,            if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,66,                cachedResources =,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,70,            if (cachedResources.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,72,                return cachedResources.getString(s);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,77,        },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,75,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,81,        return s;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,94,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,144,        return pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,152,        return arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,162,"        return buildMessage(pattern, arguments, locale);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,167,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,174,        printStackTrace(System.err);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,175,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,183,        synchronized (out) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,184,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,185,            printStackTrace(pw);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,187,            pw.flush();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,188,        },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,189,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,200,"        return new ArithmeticException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,222,"        return new ArrayIndexOutOfBoundsException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,244,"        return new EOFException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,269,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,270,        ioe.initCause(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,271,        return ioe;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,283,"        return new IllegalArgumentException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,305,"        return new IllegalStateException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,327,"        return new ConcurrentModificationException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,349,"        return new NoSuchElementException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,374,"        return new ParseException(buildMessage(pattern, arguments, Locale.US), offset) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,37,public class MathRuntimeException extends RuntimeException {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,327,"        return new ConcurrentModificationException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,334,"                return buildMessage(pattern, arguments, Locale.getDefault());",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,305,"        return new IllegalStateException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,312,"                return buildMessage(pattern, arguments, Locale.getDefault());",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,283,"        return new IllegalArgumentException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,290,"                return buildMessage(pattern, arguments, Locale.getDefault());",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,244,"        return new EOFException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,251,"                return buildMessage(pattern, arguments, Locale.getDefault());",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,222,"        return new ArrayIndexOutOfBoundsException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,229,"                return buildMessage(pattern, arguments, Locale.getDefault());",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,200,"        return new ArithmeticException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,207,"                return buildMessage(pattern, arguments, Locale.getDefault());",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,374,"        return new ParseException(buildMessage(pattern, arguments, Locale.US), offset) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,381,"                return buildMessage(pattern, arguments, Locale.getDefault());",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,349,"        return new NoSuchElementException(buildMessage(pattern, arguments, Locale.US)) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,99,356,"                return buildMessage(pattern, arguments, Locale.getDefault());",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,66,        super();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,67,    },0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,80,        long s = (long)x + (long)y;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,81,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,82,"            throw new ArithmeticException(""overflow: add"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,84,        return (int)s;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,98,"        return addAndCheck(a, b, ""overflow: add"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,114,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,116,"            ret = addAndCheck(b, a, msg);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,120,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,121,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,123,                    if (Long.MIN_VALUE - b <= a) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,124,                        ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,126,                        throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,130,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,137,                if (a <= Long.MAX_VALUE - b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,138,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,140,                    throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,144,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,173,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,174,            throw new IllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,177,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,178,            throw new IllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,181,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,182,            return 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,184,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,185,            return n;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,188,        if (k > n / 2),0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,189,"            return binomialCoefficient(n, n - k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,196,        long result = 1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,197,        if (n <= 61) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,199,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,200,                result = result * i / j;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,202,        } else if (n <= 66) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,205,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,212,"                long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,213,                result = (result / (j / d)) * (i / d);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,219,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,220,"                long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,221,"                result = mulAndCheck((result / (j / d)), (i / d));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,224,        return result;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,250,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,251,            throw new IllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,254,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,255,            throw new IllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,258,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,259,            return 1d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,261,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,262,            return n;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,264,        if (k > n/2) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,265,"            return binomialCoefficientDouble(n, n - k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,267,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,268,"            return binomialCoefficient(n,k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,271,        double result = 1d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,272,        for (int i = 1; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,273,             result *= (double)(n - k + i) / (double)i;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,276,        return Math.floor(result + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,298,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,299,            throw new IllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,302,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,303,            throw new IllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,306,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,307,            return 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,309,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,310,            return Math.log((double) n);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,317,        if (n < 67) {  ,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,318,"            return Math.log(binomialCoefficient(n,k));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,325,        if (n < 1030) { ,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,326,"            return Math.log(binomialCoefficientDouble(n, k));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,329,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,330,"            return binomialCoefficientLog(n, n - k);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,336,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,339,        for (int i = n - k + 1; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,340,            logSum += Math.log((double) i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,344,        for (int i = 2; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,345,            logSum -= Math.log((double) i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,348,        return logSum;      ,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,359,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,371,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,384,      return x == y || (x < y && (x + eps) >= y) || (x > y && x <= (y + eps));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,398,        if ((x == null) || (y == null)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,399,            return !((x == null) ^ (y == null));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,401,        if (x.length != y.length) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,402,            return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,404,        for (int i = 0; i < x.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,405,"            if (!equals(x[i], y[i])) {",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,406,                return false;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,409,        return true;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,442,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,443,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,445,        if (n > 20) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,446,            throw new ArithmeticException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,449,        return factorials[n];,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,473,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,474,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,476,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,477,            return factorial(n);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,479,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,496,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,497,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,499,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,500,            return Math.log(factorial(n));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,502,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,503,        for (int i = 2; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,504,            logSum += Math.log((double)i);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,506,        return logSum;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,565,            throw MathRuntimeException.createArithmeticException(,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,601,        return new Double(value).hashCode();,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,612,        return Arrays.hashCode(value);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,623,        return (x >= ZB) ? PB : NB;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,635,        if (Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,636,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,638,        return (x >= 0.0) ? 1.0 : -1.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,649,        if (Float.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,650,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,652,        return (x >= 0.0F) ? 1.0F : -1.0F;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,662,        return (x >= 0) ? 1 : -1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,672,        return (x >= 0L) ? 1L : -1L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,683,        return (x >= ZS) ? PS : NS;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,734,        return Math.log(x)/Math.log(base);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,750,"            throw new ArithmeticException(""overflow: mul"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,767,"        String msg = ""overflow: multiply"";",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,768,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,770,"            ret = mulAndCheck(b, a);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,772,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,773,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,775,                    if (a >= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,776,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,778,                        throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,780,                } else if (b > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,782,                    if (Long.MIN_VALUE / b <= a) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,783,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,785,                        throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,790,                    ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,792,            } else if (a > 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,797,                if (a <= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,798,                    ret = a * b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,800,                    throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,804,                ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,807,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,830,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,831,                return d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,832,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,833,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,839,        long bits     = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,840,        long sign     = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,841,        long exponent = bits & 0x7ff0000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,842,        long mantissa = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,844,        if (d * (direction - d) >= 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,846,                if (mantissa == 0x000fffffffffffffL) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,847,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,850,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,855,                if (mantissa == 0L) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,856,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,860,                        return Double.longBitsToDouble(sign |,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,879,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,880,            return d;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,884,        final long bits     = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,885,        final long exponent = bits & 0x7ff0000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,886,        final long rest     = bits & 0x800fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,889,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,890,        return Double.longBitsToDouble(newBits);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,914,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,927,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,944,            return (new BigDecimal,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,948,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,949,            if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,950,                return x;          ,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,952,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,967,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,983,        float sign = indicator(x);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,984,"        float factor = (float)Math.pow(10.0f, scale) * sign;",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,985,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1002,        switch (roundingMethod) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1004,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1005,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1007,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1009,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1011,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1012,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1014,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1015,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1017,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1019,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1021,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1022,            double fraction = unscaled - Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1023,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1024,                unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1026,                unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1028,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1031,            double fraction = unscaled - Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1032,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1033,                unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1034,            } else if (fraction < 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1035,                unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1038,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1040,                    unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1042,                    unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1045,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1048,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1049,            double fraction = unscaled - Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1050,            if (fraction >= 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1051,                unscaled = Math.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1053,                unscaled = Math.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1055,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1058,            if (unscaled != Math.floor(unscaled)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1059,"                throw new ArithmeticException(""Inexact result from rounding"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1063,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1064,            break;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1066,"            throw new IllegalArgumentException(""Invalid rounding method."");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1068,        return unscaled;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1082,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1098,        if (Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1099,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1101,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1116,        if (Float.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1117,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1119,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1133,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1147,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1162,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1173,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1187,        long s = (long)x - (long)y;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1188,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1189,"            throw new ArithmeticException(""overflow: subtract"");",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1191,        return (int)s;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1206,"        String msg = ""overflow: subtract"";",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1207,        if (b == Long.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1208,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1209,                ret = a - b;,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1211,                throw new ArithmeticException(msg);,0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1215,"            ret = addAndCheck(a, -b, msg);",0.0,0,-1,0
org/apache/commons/math/util/MathUtils,99,1217,        return ret;,0.0,0,-1,0
