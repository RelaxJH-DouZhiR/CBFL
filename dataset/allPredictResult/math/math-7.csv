project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,0.11111,0,,0,0.31603876861912483,0.6839612313808735
org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,0.11111,0,,0,0.46126254337267486,0.5387374566273264
org/apache/commons/math3/util/FastMath,7,3373,        return y;,0.11111,0,,0,0.27598645411318956,0.7240135458868112
org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",0.11111,0,,0,0.06839604777005182,0.9316039522299484
org/apache/commons/math3/ode/AbstractIntegrator,7,352,                },0.11111,0,,0,0.21661238710481007,0.7833876128951885
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,0.11111,0,,0,0.26108693893990154,0.7389130610601002
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,                    return xB;,0.11111,0,,0,0.12869939004507747,0.8713006099549211
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,0.11111,0,,0,0.3153903359434557,0.6846096640565437
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,0.11111,0,,0,0.430343773239448,0.5696562267605508
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,0.11111,0,,0,0.32176944236661115,0.6782305576333906
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,0.11111,0,,0,0.18640035319803686,0.8135996468019638
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,0.11111,0,,0,0.4085523099548638,0.5914476900451356
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,0.11111,0,,0,0.19816488393746343,0.801835116062537
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,0.11111,0,,0,0.19816488393746343,0.801835116062537
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,0.11111,0,,0,0.26528031429706195,0.7347196857029369
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,0.11111,0,,0,0.18682029758260044,0.8131797024173983
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,0.11111,0,,0,0.18848983180546872,0.8115101681945307
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,                signChangeIndex++;,0.11111,0,,0,0.18277550874434756,0.8172244912556527
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,0.11111,0,,0,0.26108693893990154,0.7389130610601002
org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,            if ((nbPoints > 2) && (end - start != nbPoints)) {,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,326,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,327,            x[signChangeIndex] = nextX;,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,            y[signChangeIndex] = nextY;,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,            ++nbPoints;,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,333,            if (nextY * yA <= 0) {,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,335,                xB = nextX;,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,                yB = nextY;,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,337,                absYB = FastMath.abs(yB);,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,338,                ++agingA;,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,                agingB = 0;,0.1,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,        },0.1,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);",0.07692,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,368,"                    computeDerivatives(eventT, y, yDot);",0.07692,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,369,                    resetOccurred = true;,0.07692,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,0.07692,1,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,373,                    return eventT;,0.07692,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",0.06667,1,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,364,                if (needReset) {,0.06667,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,343,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,0.06667,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,347,        if (nextAction == EventHandler.Action.RESET_STATE) {,0.06667,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,350,        pendingEvent      = false;,0.06667,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,351,        pendingEventTime  = Double.NaN;,0.06667,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,353,        return (nextAction == EventHandler.Action.RESET_STATE) ||,0.06667,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,150,        final double[] x = new double[maximalOrder + 1];,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,151,        final double[] y = new double[maximalOrder + 1];,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,152,        x[0] = getMin();,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,153,        x[1] = getStartValue();,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,154,        x[2] = getMax();,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,155,"        verifySequence(x[0], x[1], x[2]);",0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,158,        y[1] = computeObjectiveValue(x[1]);,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,159,"        if (Precision.equals(y[1], 0.0, 1)) {",0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,165,        y[0] = computeObjectiveValue(x[0]);,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,166,"        if (Precision.equals(y[0], 0.0, 1)) {",0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,173,        if (y[0] * y[1] < 0) {,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,199,        final double[] tmpX = new double[x.length];,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,202,        double xA    = x[signChangeIndex - 1];,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,203,        double yA    = y[signChangeIndex - 1];,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,204,        double absYA = FastMath.abs(yA);,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,205,        int agingA   = 0;,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,206,        double xB    = x[signChangeIndex];,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,207,        double yB    = y[signChangeIndex];,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,208,        double absYB = FastMath.abs(yB);,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,209,        int agingB   = 0;,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,215,            final double xTol = getAbsoluteAccuracy() +,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,217,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,237,            if (agingA >= MAXIMAL_AGING) {,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,251,                targetY = 0;,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,256,            int start = 0;,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,257,            int end   = nbPoints;,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,261,"                System.arraycopy(x, start, tmpX, start, end - start);",0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,262,"                nextX = guessX(targetY, tmpX, y, start, end);",0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,264,                if (!((nextX > xA) && (nextX < xB))) {,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,283,            } while (Double.isNaN(nextX) && (end - start > 1));,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,285,            if (Double.isNaN(nextX)) {,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,293,            final double nextY = computeObjectiveValue(nextX);,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,294,"            if (Precision.equals(nextY, 0.0, 1)) {",0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,375,        for (int i = start; i < end - 1; ++i) {,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,376,            final int delta = i + 1 - start;,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,377,            for (int j = end - 1; j > i; --j) {,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,378,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,383,        double x0 = 0;,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,384,        for (int j = end - 1; j >= start; --j) {,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,385,            x0 = x[j] + x0 * (targetY - y[j]);,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,388,        return x0;,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,398,        this.allowed = allowedSolution;,0.0625,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,399,"        return super.solve(maxEval, f, min, max);",0.0625,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,127,"        addEventHandler(handler, maxCheckInterval, convergence,",0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,130,    },0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,325,                    occuringEvents.add(state);,0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,332,                final Iterator<EventState> iterator = occuringEvents.iterator();,0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,333,                final EventState currentEvent = iterator.next();,0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,334,                iterator.remove();,0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,337,                final double eventT = currentEvent.getEventTime();,0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,338,                interpolator.setSoftPreviousTime(previousT);,0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,339,                interpolator.setSoftCurrentTime(eventT);,0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,342,                interpolator.setInterpolatedTime(eventT);,0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,343,                final double[] eventY = interpolator.getInterpolatedState().clone();,0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,346,"                currentEvent.stepAccepted(eventT, eventY);",0.05882,1,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,347,                isLastStep = currentEvent.stop();,0.05882,1,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,350,                for (final StepHandler handler : stepHandlers) {,0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,354,                if (isLastStep) {,0.05882,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,242,                    } else {,0.05882,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,321,      this.softPreviousTime = softPreviousTime;,0.05882,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,322,  },0.05882,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,335,      this.softCurrentTime  = softCurrentTime;,0.05882,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,336,  },0.05882,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,317,"                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());",0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,84,        super(absoluteAccuracy);,0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,85,        if (maximalOrder < 2) {,0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,88,        this.maximalOrder = maximalOrder;,0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,89,        this.allowed = AllowedSolution.ANY_SIDE;,0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,90,    },0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,124,        return searchStart;,0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,201,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,277,"        UnivariateSolverUtils.verifySequence(lower, initial, upper);",0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,278,    },0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,372,"        verifyInterval(lower, initial);",0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,373,"        verifyInterval(initial, upper);",0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,374,    },0.05882,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,237,                        BracketedUnivariateSolver<UnivariateFunction> bracketing =,0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,239,                        root = forward ?,0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,256,                    if ((!Double.isNaN(previousEventTime)) &&,0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,264,                    } else if (Double.isNaN(previousEventTime) ||,0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,266,                        pendingEventTime = root;,0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,267,                        pendingEvent = true;,0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,268,                        return true;,0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,299,        return pendingEvent ?,0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,317,            previousEventTime = t;,0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,318,            g0Positive        = increasing;,0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,319,"            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));",0.05556,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,7,37,        super(absoluteAccuracy);,0.05556,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,7,38,    },0.05556,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,67,"        this(DEFAULT_RELATIVE_ACCURACY,",0.05556,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,70,    },0.05556,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,231,                    increasing = gb >= ga;,0.05263,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,235,                    if (solver instanceof BracketedUnivariateSolver<?>) {,0.05263,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,44,public class EventState {,0.05263,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,209,                        interpolator.setInterpolatedTime(t);,0.05263,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,210,"                        return handler.g(t, interpolator.getInterpolatedState());",0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,112,        return searchMin;,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,118,        return searchMax;,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,142,        return functionValueAccuracy;,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,155,        incrementEvaluationCount();,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,156,        return function.value(point);,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,177,        MathUtils.checkNotNull(f);,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,180,        searchMin = min;,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,181,        searchMax = max;,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,182,        searchStart = startValue;,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,183,        function = f;,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,184,        evaluations.setMaximalCount(maxEval);,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,185,        evaluations.resetCount();,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,186,    },0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,193,"        setup(maxEval, f, min, max, startValue);",0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,196,        return doSolve();,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,310,            evaluations.incrementCount();,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,313,        },0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,314,    },0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,353,        if (lower >= upper) {,0.05263,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,357,    },0.05263,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,138,"        eventsStates.add(new EventState(handler, maxCheckInterval, convergence,",0.04762,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,140,    },0.04762,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,191,"            state.getEventHandler().init(t0, y0, t);",0.04762,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,192,        },0.04762,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,306,                    state.reinitializeBegin(interpolator);,0.04762,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,307,                },0.04762,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,323,                if (state.evaluateStep(interpolator)) {,0.04762,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,327,            },0.04762,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,393,"                state.stepAccepted(currentT, currentY);",0.04762,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,394,                isLastStep = isLastStep || state.stop();,0.04762,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,395,            },0.04762,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,125,        return handler;,0.04762,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,321,            g0Positive = g0 >= 0;,0.04762,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,322,            nextAction = EventHandler.Action.CONTINUE;,0.04762,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,331,        return nextAction == EventHandler.Action.STOP;,0.04762,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,130,        return absoluteAccuracy;,0.04762,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,136,        return relativeAccuracy;,0.04762,0,-1,0
org/apache/commons/math3/util/FastMath,7,3358,        if (x != x) { // NaN,0.04545,0,-1,0
org/apache/commons/math3/util/FastMath,7,3362,        y = floor(x);,0.04545,0,-1,0
org/apache/commons/math3/util/FastMath,7,3363,        if (y == x) {,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,102,                      final UnivariateSolver solver) {,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,103,        this.handler           = handler;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,104,        this.maxCheckInterval  = maxCheckInterval;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,105,        this.convergence       = FastMath.abs(convergence);,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,106,        this.maxIterationCount = maxIterationCount;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,107,        this.solver            = solver;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,110,        t0                = Double.NaN;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,111,        g0                = Double.NaN;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,112,        g0Positive        = true;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,113,        pendingEvent      = false;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,114,        pendingEventTime  = Double.NaN;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,115,        previousEventTime = Double.NaN;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,116,        increasing        = true;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,117,        nextAction        = EventHandler.Action.CONTINUE;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,119,    },0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,157,        t0 = interpolator.getPreviousTime();,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,158,        interpolator.setInterpolatedTime(t0);,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,159,"        g0 = handler.g(t0, interpolator.getInterpolatedState());",0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,160,        if (g0 == 0) {,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,180,        g0Positive = g0 >= 0;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,182,    },0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,196,            forward = interpolator.isForward();,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,197,            final double t1 = interpolator.getCurrentTime();,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,198,            final double dt = t1 - t0;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,199,            if (FastMath.abs(dt) < convergence) {,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,203,"            final int    n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));",0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,204,            final double h = dt / n;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,206,            final UnivariateFunction f = new UnivariateFunction() {,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,217,            double ta = t0;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,218,            double ga = g0;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,219,            for (int i = 0; i < n; ++i) {,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,222,                final double tb = t0 + (i + 1) * h;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,223,                interpolator.setInterpolatedTime(tb);,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,224,"                final double gb = handler.g(tb, interpolator.getInterpolatedState());",0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,227,                if (g0Positive ^ (gb >= 0)) {,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,277,                    ta = tb;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,278,                    ga = gb;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,284,            pendingEvent     = false;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,285,            pendingEventTime = Double.NaN;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,286,            return false;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,312,        t0 = t;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,313,"        g0 = handler.g(t, y);",0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,315,        if (pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence)) {,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,324,    },0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventHandler,7,54,    public enum Action {,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventHandler,7,61,"        STOP,",0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventHandler,7,70,"        RESET_STATE,",0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventHandler,7,80,"        RESET_DERIVATIVES,",0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventHandler,7,87,        CONTINUE;,0.04545,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,206,            final UnivariateFunction f = new UnivariateFunction() {,0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,94,                                               final double functionValueAccuracy) {,0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,51,    private final Incrementor evaluations = new Incrementor();,0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,95,        this.absoluteAccuracy = absoluteAccuracy;,0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,96,        this.relativeAccuracy = relativeAccuracy;,0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,97,        this.functionValueAccuracy = functionValueAccuracy;,0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,98,    },0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/AllowedSolution,7,41,public enum AllowedSolution {,0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/AllowedSolution,7,48,"    ANY_SIDE,",0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/AllowedSolution,7,55,"    LEFT_SIDE,",0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/AllowedSolution,7,62,"    RIGHT_SIDE,",0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/AllowedSolution,7,68,"    BELOW_SIDE,",0.04545,0,-1,0
org/apache/commons/math3/analysis/solvers/AllowedSolution,7,74,    ABOVE_SIDE;,0.04545,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,374,        for (int i = 0; i < interpolatedState.length; ++i) {,0.04348,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,375,            interpolatedState[i] = previousState[i] +,0.04348,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,383,            interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +,0.04348,0,-1,0
org/apache/commons/math3/util/FastMath,7,2274,"                return sinQ(xa, xb);",0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,320,    if (! vectorsInitialized) {,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,322,      if (v == null) {,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,330,      finalizeStep();,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,333,      for (int i = 0; i < interpolatedState.length; ++i) {,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,334,          final double yDot1  = yDotK[0][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,335,          final double yDot6  = yDotK[5][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,336,          final double yDot7  = yDotK[6][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,337,          final double yDot8  = yDotK[7][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,338,          final double yDot9  = yDotK[8][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,339,          final double yDot10 = yDotK[9][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,340,          final double yDot11 = yDotK[10][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,341,          final double yDot12 = yDotK[11][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,342,          final double yDot13 = yDotK[12][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,343,          final double yDot14 = yDotKLast[0][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,344,          final double yDot15 = yDotKLast[1][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,345,          final double yDot16 = yDotKLast[2][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,346,          v[0][i] = B_01 * yDot1  + B_06 * yDot6 + B_07 * yDot7 +,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,349,          v[1][i] = yDot1 - v[0][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,350,          v[2][i] = v[0][i] - v[1][i] - yDotK[12][i];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,351,          for (int k = 0; k < D.length; ++k) {,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,352,              v[k+3][i] = D[k][0] * yDot1  + D[k][1]  * yDot6  + D[k][2]  * yDot7  +,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,359,      vectorsInitialized = true;,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,363,    final double eta      = 1 - theta;,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,364,    final double twoTheta = 2 * theta;,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,365,    final double theta2   = theta * theta;,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,366,    final double dot1 = 1 - twoTheta;,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,367,    final double dot2 = theta * (2 - 3 * theta);,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,368,    final double dot3 = twoTheta * (1 + theta * (twoTheta -3));,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,369,    final double dot4 = theta2 * (3 + theta * (5 * theta - 8));,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,370,    final double dot5 = theta2 * (3 + theta * (-12 + theta * (15 - 6 * theta)));,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,371,    final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta)));,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,373,    if ((previousState != null) && (theta <= 0.5)) {,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,388,        for (int i = 0; i < interpolatedState.length; ++i) {,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,389,            interpolatedState[i] = currentState[i] -,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,397,            interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,403,  },0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,415,      final double[] yTmp = new double[currentState.length];,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,416,      final double pT = getGlobalPreviousTime();,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,419,      for (int j = 0; j < currentState.length; ++j) {,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,420,          s = K14_01 * yDotK[0][j]  + K14_06 * yDotK[5][j]  + K14_07 * yDotK[6][j] +,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,423,          yTmp[j] = currentState[j] + h * s;,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,425,"      integrator.computeDerivatives(pT + C14 * h, yTmp, yDotKLast[0]);",0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,428,      for (int j = 0; j < currentState.length; ++j) {,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,429,          s = K15_01 * yDotK[0][j]  + K15_06 * yDotK[5][j]  + K15_07 * yDotK[6][j] +,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,433,          yTmp[j] = currentState[j] + h * s;,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,435,"      integrator.computeDerivatives(pT + C15 * h, yTmp, yDotKLast[1]);",0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,438,      for (int j = 0; j < currentState.length; ++j) {,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,439,          s = K16_01 * yDotK[0][j]  + K16_06 * yDotK[5][j]  + K16_07 * yDotK[6][j] +,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,443,          yTmp[j] = currentState[j] + h * s;,0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,445,"      integrator.computeDerivatives(pT + C16 * h, yTmp, yDotKLast[2]);",0.03846,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,447,  },0.03846,0,-1,0
org/apache/commons/math3/util/Precision,7,336,            xInt = SGN_MASK - xInt;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,255,    double error1 = 0;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,256,    double error2 = 0;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,258,    for (int j = 0; j < mainSetDimension; ++j) {,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,259,      final double errSum1 = E1_01 * yDotK[0][j]  + E1_06 * yDotK[5][j] +,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,263,      final double errSum2 = E2_01 * yDotK[0][j]  + E2_06 * yDotK[5][j] +,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,268,"      final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));",0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,269,      final double tol = (vecAbsoluteTolerance == null) ?,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,272,      final double ratio1  = errSum1 / tol;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,273,      error1        += ratio1 * ratio1;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,274,      final double ratio2  = errSum2 / tol;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,275,      error2        += ratio2 * ratio2;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,278,    double den = error1 + 0.01 * error2;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,279,    if (den <= 0.0) {,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,283,    return FastMath.abs(h) * error1 / FastMath.sqrt(mainSetDimension * den);,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,245,    super(interpolator);,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,247,    if (interpolator.currentState == null) {,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,249,      yDotKLast = null;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,250,      v         = null;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,251,      vectorsInitialized = false;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,274,  },0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,279,    return new DormandPrince853StepInterpolator(this);,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,289,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,291,    final int dimension = currentState.length;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,293,    yDotKLast = new double[3][];,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,294,    for (int k = 0; k < yDotKLast.length; ++k) {,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,295,      yDotKLast[k] = new double[dimension];,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,298,    v = new double[7][];,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,299,    for (int k = 0; k < v.length; ++k) {,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,300,      v[k]  = new double[dimension];,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,303,    vectorsInitialized = false;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,305,  },0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,310,    super.storeTime(t);,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,311,    vectorsInitialized = false;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,312,  },0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,409,      if (currentState == null) {,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,411,          return;,0.03448,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",0.03333,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,223,  },0.03333,0,-1,0
org/apache/commons/math3/util/FastMath,7,1678,        double x2 = x*x;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1680,        double p = 2.7553817452272217E-6;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1681,        p = p * x2 + -1.9841269659586505E-4;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1682,        p = p * x2 + 0.008333333333329196;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1683,        p = p * x2 + -0.16666666666666666;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1686,        p = p * x2 * x;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1688,        return p;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1698,        double x2 = x*x;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1700,        double p = 2.479773539153719E-5;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1701,        p = p * x2 + -0.0013888888689039883;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1702,        p = p * x2 + 0.041666666666621166;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1703,        p = p * x2 + -0.49999999999999994;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1704,        p *= x2;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1706,        return p;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1717,        int idx = (int) ((xa * 8.0) + 0.5);,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1718,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1721,        final double sintA = SINE_TABLE_A[idx];,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1722,        final double sintB = SINE_TABLE_B[idx];,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1723,        final double costA = COSINE_TABLE_A[idx];,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1724,        final double costB = COSINE_TABLE_B[idx];,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1727,        double sinEpsA = epsilon;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1728,        double sinEpsB = polySine(epsilon);,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1729,        final double cosEpsA = 1.0;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1730,        final double cosEpsB = polyCosine(epsilon);,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1733,        final double temp = sinEpsA * HEX_40000000;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1734,        double temp2 = (sinEpsA + temp) - temp;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1735,        sinEpsB +=  sinEpsA - temp2;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1736,        sinEpsA = temp2;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1762,        double a = 0;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1763,        double b = 0;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1765,        double t = sintA;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1766,        double c = a + t;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1767,        double d = -(c - a - t);,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1768,        a = c;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1769,        b = b + d;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1771,        t = costA * sinEpsA;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1772,        c = a + t;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1773,        d = -(c - a - t);,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1774,        a = c;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1775,        b = b + d;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1777,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1792,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1819,        if (xb != 0.0) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1822,            c = a + t;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1823,            d = -(c - a - t);,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1824,            a = c;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1825,            b = b + d;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1828,        result = a + b;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1830,        return result;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1841,        final double pi2a = 1.5707963267948966;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1842,        final double pi2b = 6.123233995736766E-17;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1844,        final double a = pi2a - xa;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1845,        double b = -(a - pi2a + xa);,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1846,        b += pi2b - xb;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,1848,"        return sinQ(a, b);",0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2226,        boolean negative = false;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2227,        int quadrant = 0;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2229,        double xb = 0.0;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2232,        xa = x;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2233,        if (x < 0) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2239,        if (xa == 0.0) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2247,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2252,        if (xa > 3294198.0) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2268,        if (negative) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2272,        switch (quadrant) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2293,        int quadrant = 0;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2296,        double xa = x;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2297,        if (x < 0) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2306,        double xb = 0;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2307,        if (xa > 3294198.0) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2326,        switch (quadrant) {,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,7,2328,"                return cosQ(xa, xb);",0.03226,0,-1,0
org/apache/commons/math3/util/MathUtils,7,264,        if (o == null) {,0.0303,0,-1,0
org/apache/commons/math3/util/MathUtils,7,267,    },0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,63,  private static final double[] STATIC_C = {,0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,70,  private static final double[][] STATIC_A = {,0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,137,  private static final double[] STATIC_B = {,0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,247,    return 8;,0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,232,    super();,0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,233,    yDotKLast = null;,0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,234,    v         = null;,0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,235,    vectorsInitialized = false;,0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,236,  },0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,181,    private static final double[][] D = {,0.0303,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,313,"              System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);",0.02381,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,239,              for (int i = 0; i < scale.length; ++i) {,0.02128,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,240,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,0.02128,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,309,          interpolator.storeTime(stepStart);,0.01961,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,311,          if (fsal) {,0.01961,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,317,          final double factor =,0.01961,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,319,          final double  scaledH    = stepSize * factor;,0.01961,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,320,          final double  nextT      = stepStart + scaledH;,0.01961,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,321,          final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,0.01961,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,322,"          hNew = filterStep(scaledH, forward, nextIsLast);",0.01961,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,324,          final double  filteredNextT      = stepStart + hNew;,0.01961,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,325,          final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);,0.01961,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,326,          if (filteredNextIsLast) {,0.01961,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,254,            if (stepStart + stepSize >= t) {,0.01923,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,304,"      System.arraycopy(y, 0, yTmp, 0, y.length);",0.01923,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,306,      if (!isLastStep) {,0.01923,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,332,    } while (!isLastStep);,0.01923,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,117,"    super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,119,    this.fsal      = fsal;,0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,120,    this.c         = c;,0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,121,    this.a         = a;,0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,122,    this.b         = b;,0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,123,    this.prototype = prototype;,0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,125,    exp = -1.0 / getOrder();,0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,128,    setSafety(0.9);,0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,129,    setMinReduction(0.2);,0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,130,    setMaxGrowth(10.0);,0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,132,  },0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,300,      interpolator.storeTime(stepStart + stepSize);,0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,301,"      System.arraycopy(yTmp, 0, y, 0, y0.length);",0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,302,"      System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);",0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,303,"      stepStart = acceptStep(interpolator, y, yDotTmp, t);",0.01852,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,236,        if (firstTime) {,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,237,          final double[] scale = new double[mainSetDimension];,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,238,          if (vecAbsoluteTolerance == null) {,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,247,"          hNew = initializeStep(forward, getOrder(), scale,",0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,249,          firstTime = false;,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,252,        stepSize = hNew;,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,253,        if (forward) {,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,264,        for (int k = 1; k < stages; ++k) {,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,266,          for (int j = 0; j < y0.length; ++j) {,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,267,            double sum = a[k-1][0] * yDotK[0][j];,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,268,            for (int l = 1; l < k; ++l) {,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,269,              sum += a[k-1][l] * yDotK[l][j];,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,271,            yTmp[j] = y[j] + stepSize * sum;,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,274,"          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);",0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,279,        for (int j = 0; j < y0.length; ++j) {,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,280,          double sum    = b[0] * yDotK[0][j];,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,281,          for (int l = 1; l < stages; ++l) {,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,282,            sum    += b[l] * yDotK[l][j];,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,284,          yTmp[j] = y[j] + stepSize * sum;,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,288,"        error = estimateError(yDotK, y, yTmp, stepSize);",0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,289,        if (error >= 1.0) {,0.01695,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,198,    setEquations(equations);,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,199,    final boolean forward = t > equations.getTime();,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,202,    final double[] y0  = equations.getCompleteState();,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,203,    final double[] y = y0.clone();,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,204,    final int stages = c.length + 1;,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,205,    final double[][] yDotK = new double[stages][y.length];,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,206,    final double[] yTmp    = y0.clone();,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,207,    final double[] yDotTmp = new double[y.length];,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,210,    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,211,"    interpolator.reinitialize(this, yTmp, yDotK, forward,",0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,213,    interpolator.storeTime(equations.getTime());,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,216,    stepStart         = equations.getTime();,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,217,    double  hNew      = 0;,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,218,    boolean firstTime = true;,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,219,"    initIntegration(equations.getTime(), y0, t);",0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,222,    isLastStep = false;,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,225,      interpolator.shift();,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,228,      double error = 10;,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,229,      while (error >= 1.0) {,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,231,        if (firstTime || !fsal) {,0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,233,"          computeDerivatives(stepStart, y, yDotK[0]);",0.01667,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,197,"    sanityChecks(equations, t);",0.01613,0,-1,0
org/apache/commons/math3/util/FastMath,7,3348,        return y;,0.01563,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,188,    this.safety = safety;,0.01493,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,189,  },0.01493,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,353,    this.minReduction = minReduction;,0.01493,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,354,  },0.01493,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,367,    this.maxGrowth = maxGrowth;,0.01493,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,368,  },0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,7,3331,        if (x != x) { // NaN,0.01299,0,-1,0
org/apache/commons/math3/util/FastMath,7,3335,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.01299,0,-1,0
org/apache/commons/math3/util/FastMath,7,3339,        y = (long) x;,0.01299,0,-1,0
org/apache/commons/math3/util/FastMath,7,3340,        if (x < 0 && y != x) {,0.01299,0,-1,0
org/apache/commons/math3/util/FastMath,7,3344,        if (y == 0) {,0.01299,0,-1,0
org/apache/commons/math3/util/FastMath,7,3489,        return (a <= b) ? b : a;,0.01299,0,-1,0
org/apache/commons/math3/util/FastMath,7,888,            intVal = (int) x;,0.01149,0,-1,0
org/apache/commons/math3/util/FastMath,7,890,            if (intVal > 709) {,0.01149,0,-1,0
org/apache/commons/math3/util/FastMath,7,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.01149,0,-1,0
org/apache/commons/math3/util/FastMath,7,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.01149,0,-1,0
org/apache/commons/math3/util/FastMath,7,3467,        if (a < b) {,0.01149,0,-1,0
org/apache/commons/math3/util/FastMath,7,3468,            return a;,0.01149,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,336,      } else if (filteredH < -maxStep) {,0.01031,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,334,      if (filteredH > maxStep) {,0.0102,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,340,      return filteredH;,0.0102,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,110,    super(name);,0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,111,"    setStepSizeControl(minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,112,    resetInternalState();,0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,114,  },0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,157,      minStep     = FastMath.abs(minimalStep);,0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,158,      maxStep     = FastMath.abs(maximalStep);,0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,159,      initialStep = -1;,0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,161,      scalAbsoluteTolerance = absoluteTolerance;,0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,162,      scalRelativeTolerance = relativeTolerance;,0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,163,      vecAbsoluteTolerance  = null;,0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,164,      vecRelativeTolerance  = null;,0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,166,  },0.0099,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,261,    double yOnScale2 = 0;,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,262,    double yDotOnScale2 = 0;,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,263,    for (int j = 0; j < scale.length; ++j) {,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,264,      ratio         = y0[j] / scale[j];,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,265,      yOnScale2    += ratio * ratio;,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,266,      ratio         = yDot0[j] / scale[j];,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,267,      yDotOnScale2 += ratio * ratio;,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,270,    double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ?,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,272,    if (! forward) {,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,277,    for (int j = 0; j < y0.length; ++j) {,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,278,      y1[j] = y0[j] + h * yDot0[j];,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,280,"    computeDerivatives(t0 + h, y1, yDot1);",0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,283,    double yDDotOnScale = 0;,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,284,    for (int j = 0; j < scale.length; ++j) {,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,285,      ratio         = (yDot1[j] - yDot0[j]) / scale[j];,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,286,      yDDotOnScale += ratio * ratio;,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,288,    yDDotOnScale = FastMath.sqrt(yDDotOnScale) / h;,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,292,"    final double maxInv2 = FastMath.max(FastMath.sqrt(yDotOnScale2), yDDotOnScale);",0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,293,    final double h1 = (maxInv2 < 1.0e-15) ?,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,296,"    h = FastMath.min(100.0 * FastMath.abs(h), h1);",0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,297,"    h = FastMath.max(h, 1.0e-12 * FastMath.abs(t0));  // avoids cancellation when computing t1 - t0",0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,298,    if (h < getMinStep()) {,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,301,    if (h > getMaxStep()) {,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,304,    if (! forward) {,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,308,    return h;,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,366,    return minStep;,0.0098,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,373,    return maxStep;,0.0098,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,182,        currentState     = null;,0.00971,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,183,        primaryMapper    = null;,0.00971,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,184,        secondaryMappers = null;,0.00971,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,185,        allocateInterpolatedArrays(-1);,0.00971,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,85,    super(interpolator);,0.00971,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,87,    if (interpolator.currentState != null) {,0.00971,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,97,      previousState = null;,0.00971,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,98,      yDotK = null;,0.00971,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,103,    integrator = null;,0.00971,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,105,  },0.00971,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,324,      double filteredH = h;,0.00962,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,325,      if (FastMath.abs(h) < minStep) {,0.00962,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,253,    if (initialStep > 0) {,0.00952,0,-1,0
org/apache/commons/math3/util/FastMath,7,3777,    private static class lnMant {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,3793,        },0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,944,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1130,        if (x==0) { // Handle special case of +0/-0,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1133,        long bits = Double.doubleToLongBits(x);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1147,        if (x == Double.POSITIVE_INFINITY) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1156,        int exp = (int)(bits >> 52)-1023;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1178,        if (exp == -1 || exp == 0) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1241,        double lnza = 0.0;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1242,        double lnzb = 0.0;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1244,        if (hiPrec != null) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1246,            double tmp = epsilon * HEX_40000000;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1247,            double aa = epsilon + tmp - tmp;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1248,            double ab = epsilon - aa;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1249,            double xa = aa;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1250,            double xb = ab;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1253,            final double numer = bits & 0x3ffffffffffL;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1255,            aa = numer - xa*denom - xb * denom;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1256,            xb += aa / denom;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1260,            double ya = lnCoef_last[0];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1261,            double yb = lnCoef_last[1];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1265,                aa = ya * xa;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1266,                ab = ya * xb + yb * xa + yb * xb;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1268,                tmp = aa * HEX_40000000;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1269,                ya = aa + tmp - tmp;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1270,                yb = aa - ya + ab;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1274,                aa = ya + lnCoef_i[0];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1275,                ab = yb + lnCoef_i[1];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1277,                tmp = aa * HEX_40000000;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1278,                ya = aa + tmp - tmp;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1279,                yb = aa - ya + ab;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1283,            aa = ya * xa;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1284,            ab = ya * xb + yb * xa + yb * xb;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1292,            lnza = aa + ab;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1293,            lnzb = -(lnza - aa - ab);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1294,        } else {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1320,        double a = LN_2_A*exp;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1321,        double b = 0.0;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1322,        double c = a+lnm[0];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1323,        double d = -(c-a-lnm[0]);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1324,        a = c;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1325,        b = b + d;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1327,        c = a + lnza;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1328,        d = -(c - a - lnza);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1329,        a = c;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1330,        b = b + d;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1332,        c = a + LN_2_B*exp;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1333,        d = -(c - a - LN_2_B*exp);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1334,        a = c;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1335,        b = b + d;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1337,        c = a + lnm[1];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1338,        d = -(c - a - lnm[1]);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1339,        a = c;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1340,        b = b + d;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1342,        c = a + lnzb;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1343,        d = -(c - a - lnzb);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1344,        a = c;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1345,        b = b + d;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1347,        if (hiPrec != null) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1348,            hiPrec[0] = a;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1349,            hiPrec[1] = b;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1352,        return a + b;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1479,        if (x == Double.POSITIVE_INFINITY) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1490,        if (y == Double.POSITIVE_INFINITY) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1502,        if (x == Double.NEGATIVE_INFINITY) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1526,        if (y == Double.NEGATIVE_INFINITY) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1540,        if (x < 0) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1557,        if (y < 8e298 && y > -8e298) {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1558,            double tmp1 = y * HEX_40000000;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1559,            ya = y + tmp1 - tmp1;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1560,            yb = y - ya;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1561,        } else {,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1569,"        final double lores = log(x, lns);",0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1574,        double lna = lns[0];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1575,        double lnb = lns[1];,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1578,        double tmp1 = lna * HEX_40000000;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1579,        double tmp2 = lna + tmp1 - tmp1;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1580,        lnb += lna - tmp2;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1581,        lna = tmp2;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1584,        final double aa = lna * ya;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1587,        lna = aa+ab;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1588,        lnb = -(lna - aa - ab);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1590,        double z = 1.0 / 120.0;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1591,        z = z * lnb + (1.0 / 24.0);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1592,        z = z * lnb + (1.0 / 6.0);,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1593,        z = z * lnb + 0.5;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1594,        z = z * lnb + 1.0;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1595,        z = z * lnb;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1597,"        final double result = exp(lna, z, null);",0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1599,        return result;,0.00943,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,6174,        return LN_MANT.clone();,0.00943,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,233,  },0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,172,  protected AbstractStepInterpolator(final AbstractStepInterpolator interpolator) {,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,174,    globalPreviousTime = interpolator.globalPreviousTime;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,175,    globalCurrentTime  = interpolator.globalCurrentTime;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,176,    softPreviousTime   = interpolator.softPreviousTime;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,177,    softCurrentTime    = interpolator.softCurrentTime;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,178,    h                  = interpolator.h;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,179,    interpolatedTime   = interpolator.interpolatedTime;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,181,    if (interpolator.currentState == null) {,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,200,    finalized        = interpolator.finalized;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,201,    forward          = interpolator.forward;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,202,    dirtyState       = interpolator.dirtyState;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,203,    primaryMapper    = interpolator.primaryMapper;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,204,    secondaryMappers = (interpolator.secondaryMappers == null) ?,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,207,  },0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,249,    globalPreviousTime    = Double.NaN;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,250,    globalCurrentTime     = Double.NaN;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,251,    softPreviousTime      = Double.NaN;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,252,    softCurrentTime       = Double.NaN;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,253,    h                     = Double.NaN;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,254,    interpolatedTime      = Double.NaN;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,255,    currentState          = y;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,256,    finalized             = false;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,257,    this.forward          = isForward;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,258,    this.dirtyState       = true;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,259,    this.primaryMapper    = primary;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,260,    this.secondaryMappers = secondary.clone();,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,261,    allocateInterpolatedArrays(y.length);,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,263,  },0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,269,     finalizeStep();,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,272,     return doCopy();,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,489,    if (! finalized) {,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,490,      doFinalize();,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,491,      finalized = true;,0.00943,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,493,  },0.00943,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,134,"    reinitialize(y, forward, primaryMapper, secondaryMappers);",0.00943,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,135,    this.previousState = null;,0.00943,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,136,    this.yDotK = yDotArray;,0.00943,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,137,    this.integrator = rkIntegrator;,0.00943,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,138,  },0.00943,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,143,    previousState = currentState.clone();,0.00943,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,144,    super.shift();,0.00943,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,145,  },0.00943,0,-1,0
org/apache/commons/math3/util/FastMath,7,1443,        final double lns[] = new double[2];,0.00935,0,-1,0
org/apache/commons/math3/util/FastMath,7,1445,        if (y == 0.0) {,0.00935,0,-1,0
org/apache/commons/math3/util/FastMath,7,1449,        if (x != x) { // X is NaN,0.00935,0,-1,0
org/apache/commons/math3/util/FastMath,7,1454,        if (x == 0) {,0.00935,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,223,      mainSetDimension = equations.getPrimaryMapper().getDimension();,0.00935,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,225,      if ((vecAbsoluteTolerance != null) && (vecAbsoluteTolerance.length != mainSetDimension)) {,0.00935,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,229,      if ((vecRelativeTolerance != null) && (vecRelativeTolerance.length != mainSetDimension)) {,0.00935,0,-1,0
org/apache/commons/math3/util/FastMath,7,3465,            return b;,0.00917,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,221,"      super.sanityChecks(equations, t);",0.00917,0,-1,0
org/apache/commons/math3/util/FastMath,7,3464,        if (a > b) {,0.00901,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,358,    stepStart = Double.NaN;,0.0087,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,359,    stepSize  = FastMath.sqrt(minStep * maxStep);,0.0087,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,360,  },0.0087,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,60,  protected RungeKuttaStepInterpolator() {,0.00847,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,61,    previousState = null;,0.00847,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,62,    yDotK         = null;,0.00847,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,63,    integrator    = null;,0.00847,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,64,  },0.00847,0,-1,0
org/apache/commons/math3/util/FastMath,7,851,            intVal = (int) -x;,0.0084,0,-1,0
org/apache/commons/math3/util/FastMath,7,853,            if (intVal > 746) {,0.0084,0,-1,0
org/apache/commons/math3/util/FastMath,7,861,            if (intVal > 709) {,0.0084,0,-1,0
org/apache/commons/math3/util/FastMath,7,871,            if (intVal == 709) {,0.0084,0,-1,0
org/apache/commons/math3/util/FastMath,7,881,            intVal++;,0.0084,0,-1,0
org/apache/commons/math3/util/FastMath,7,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0084,0,-1,0
org/apache/commons/math3/util/FastMath,7,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0084,0,-1,0
org/apache/commons/math3/util/FastMath,7,886,            intVal = -intVal;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,112,  protected AbstractStepInterpolator() {,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,113,    globalPreviousTime = Double.NaN;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,114,    globalCurrentTime  = Double.NaN;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,115,    softPreviousTime   = Double.NaN;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,116,    softCurrentTime    = Double.NaN;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,117,    h                  = Double.NaN;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,118,    interpolatedTime   = Double.NaN;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,119,    currentState       = null;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,120,    finalized          = false;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,121,    this.forward       = true;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,122,    this.dirtyState    = true;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,123,    primaryMapper      = null;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,124,    secondaryMappers   = null;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,125,    allocateInterpolatedArrays(-1);,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,126,  },0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,214,          interpolatedState                = null;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,215,          interpolatedDerivatives          = null;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,216,          interpolatedPrimaryState         = null;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,217,          interpolatedPrimaryDerivatives   = null;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,218,          interpolatedSecondaryState       = null;,0.0084,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,219,          interpolatedSecondaryDerivatives = null;,0.0084,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,400,"                handler.handleStep(interpolator, isLastStep);",0.00826,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,401,            },0.00826,0,-1,0
org/apache/commons/math3/util/FastMath,7,3533,            return a;,0.00787,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,109,        stepHandlers.add(handler);,0.00787,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,110,    },0.00787,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,195,"            handler.init(t0, y0, t);",0.00787,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,196,        },0.00787,0,-1,0
org/apache/commons/math3/util/FastMath,7,3744,    private static class ExpFracTable {,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,3773,        },0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,850,        if (x < 0.0) {,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,923,        double z = 0.04168701738764507;,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,924,        z = z * epsilon + 0.1666666505023083;,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,925,        z = z * epsilon + 0.5000000000042687;,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,926,        z = z * epsilon + 1.0;,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,927,        z = z * epsilon + -3.940510424527919E-20;,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,934,        double tempA = intPartA * fracPartA;,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,941,        final double tempC = tempB + tempA;,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,943,        if (extra != 0.0) {,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,949,        if (hiPrec != null) {,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,955,        return result;,0.00775,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,29,    private static final double[] EXP_INT_A = new double[] {,0.00775,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,1535,    private static final double[] EXP_INT_B = new double[] {,0.00775,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,3043,    private static final double[] EXP_FRAC_A = new double[] {,0.00775,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,4074,    private static final double[] EXP_FRAC_B = new double[] {,0.00775,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,5103,    private static final double[][] LN_MANT = new double[][] {,0.00775,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,6142,        return EXP_INT_A.clone();,0.00775,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,6150,        return EXP_INT_B.clone();,0.00775,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,6158,        return EXP_FRAC_A.clone();,0.00775,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,6166,        return EXP_FRAC_B.clone();,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,3705,    private static class ExpIntTable {,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.00775,0,-1,0
org/apache/commons/math3/util/FastMath,7,3740,        },0.00775,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,360,    return softPreviousTime;,0.00769,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,369,    return softCurrentTime;,0.00746,0,-1,0
org/apache/commons/math3/util/FastMath,7,379,        return Math.sqrt(a);,0.0073,0,-1,0
org/apache/commons/math3/util/FastMath,7,2999,        return (x < 0l) ? -x : x;,0.00704,0,-1,0
org/apache/commons/math3/util/Precision,7,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0.00704,0,-1,0
org/apache/commons/math3/util/Precision,7,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,0.00704,0,-1,0
org/apache/commons/math3/util/Precision,7,78,    },0.00704,0,-1,0
org/apache/commons/math3/util/Precision,7,331,        long xInt = Double.doubleToLongBits(x);,0.00704,0,-1,0
org/apache/commons/math3/util/Precision,7,332,        long yInt = Double.doubleToLongBits(y);,0.00704,0,-1,0
org/apache/commons/math3/util/Precision,7,335,        if (xInt < 0) {,0.00704,0,-1,0
org/apache/commons/math3/util/Precision,7,338,        if (yInt < 0) {,0.00704,0,-1,0
org/apache/commons/math3/util/Precision,7,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.00704,0,-1,0
org/apache/commons/math3/util/Precision,7,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,300,            double previousT = interpolator.getGlobalPreviousTime();,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,301,            final double currentT = interpolator.getGlobalCurrentTime();,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,304,            if (! statesInitialized) {,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,305,                for (EventState state : eventsStates) {,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,308,                statesInitialized = true;,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,312,            final int orderingSign = interpolator.isForward() ? +1 : -1;,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,313,            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,322,            for (final EventState state : eventsStates) {,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,329,            while (!occuringEvents.isEmpty()) {,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,390,            interpolator.setInterpolatedTime(currentT);,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,391,            final double[] currentY = interpolator.getInterpolatedState();,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,392,            for (final EventState state : eventsStates) {,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,396,"            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);",0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,399,            for (StepHandler handler : stepHandlers) {,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,403,            return currentT;,0.00704,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,343,    return globalPreviousTime;,0.00704,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,351,    return globalCurrentTime;,0.00704,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,313,            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {,0.00704,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,385,    return forward;,0.00694,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,99,            return primaryMapper.getDimension();,0.0069,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,407,      if (dirtyState) {,0.0068,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,408,          final double oneMinusThetaH = globalCurrentTime - interpolatedTime;,0.0068,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,409,          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;,0.0068,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,410,"          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);",0.0068,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,411,          dirtyState = false;,0.0068,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,413,  },0.0068,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,417,      evaluateCompleteInterpolatedState();,0.0068,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,418,"      primaryMapper.extractEquationData(interpolatedState,",0.0068,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,420,      return interpolatedPrimaryState;,0.0068,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,270,    },0.00676,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,120,"        primaryMapper.insertEquationData(primaryStateDot, yDot);",0.00676,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,123,        for (final SecondaryComponent component : components) {,0.00676,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,130,    },0.00676,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,188,        evaluations.resetCount();,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,190,        for (final EventState state : eventsStates) {,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,194,        for (StepHandler handler : stepHandlers) {,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,198,        setStateInitialized(false);,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,200,    },0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,206,        this.expandable = equations;,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,207,    },0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,218,        if (y.length != equations.getDimension()) {,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,223,        final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations);,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,224,        expandableODE.setTime(t0);,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,225,        expandableODE.setPrimaryState(y0);,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,228,"        integrate(expandableODE, t);",0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,268,        evaluations.incrementCount();,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,269,"        expandable.computeDerivatives(t, y, yDot);",0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,280,        this.statesInitialized = stateInitialized;,0.00671,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,281,    },0.00671,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,97,        if (components.isEmpty()) {,0.00671,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,118,"        primaryMapper.extractEquationData(y, primaryState);",0.00671,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,119,"        primary.computeDerivatives(t, primaryState, primaryStateDot);",0.00671,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,167,        final EquationsMapper[] mappers = new EquationsMapper[components.size()];,0.00671,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,168,        for (int i = 0; i < mappers.length; ++i) {,0.00671,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,171,        return mappers;,0.00671,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,289,        double[] completeState = new double[getTotalDimension()];,0.00671,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,292,"        primaryMapper.insertEquationData(primaryState, completeState);",0.00671,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,293,        for (final SecondaryComponent component : components) {,0.00671,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,297,        return completeState;,0.00671,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,92,        if (equationData.length != dimension) {,0.00671,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,95,"        System.arraycopy(equationData, 0, complete, firstIndex, dimension);",0.00671,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,96,    },0.00671,0,-1,0
org/apache/commons/math3/util/Incrementor,7,155,        if (++count > maximalCount) {,0.00667,0,-1,0
org/apache/commons/math3/util/Incrementor,7,158,    },0.00667,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,425,    },0.00667,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,159,        return primaryMapper;,0.00667,0,-1,0
org/apache/commons/math3/util/FastMath,7,3536,            return b;,0.00662,0,-1,0
org/apache/commons/math3/util/FastMath,7,3026,        if (Double.isInfinite(x)) {,0.00654,0,-1,0
org/apache/commons/math3/util/FastMath,7,3029,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.00654,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,417,"        final double threshold = 1000 * FastMath.ulp(FastMath.max(FastMath.abs(equations.getTime()),",0.00654,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,419,        final double dt = FastMath.abs(equations.getTime() - t);,0.00654,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,420,        if (dt <= threshold) {,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,73,    public ExpandableStatefulODE(final FirstOrderDifferentialEquations primary) {,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,74,        final int n          = primary.getDimension();,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,75,        this.primary         = primary;,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,76,"        this.primaryMapper   = new EquationsMapper(0, n);",0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,77,        this.time            = Double.NaN;,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,78,        this.primaryState    = new double[n];,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,79,        this.primaryStateDot = new double[n];,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,80,        this.components      = new ArrayList<ExpandableStatefulODE.SecondaryComponent>();,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,81,    },0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,178,        this.time = time;,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,179,    },0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,185,        return time;,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,196,        if (primaryState.length != this.primaryState.length) {,0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,201,"        System.arraycopy(primaryState, 0, this.primaryState, 0, primaryState.length);",0.00654,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,203,    },0.00654,0,-1,0
org/apache/commons/math3/util/FastMath,7,3532,        if (a > b) {,0.00649,0,-1,0
org/apache/commons/math3/util/FastMath,7,3535,        if (a < b) {,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,221,          interpolatedState                = new double[dimension];,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,222,          interpolatedDerivatives          = new double[dimension];,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,223,          interpolatedPrimaryState         = new double[primaryMapper.getDimension()];,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,224,          interpolatedPrimaryDerivatives   = new double[primaryMapper.getDimension()];,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,225,          if (secondaryMappers == null) {,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,229,              interpolatedSecondaryState       = new double[secondaryMappers.length][];,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,230,              interpolatedSecondaryDerivatives = new double[secondaryMappers.length][];,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,231,              for (int i = 0; i < secondaryMappers.length; ++i) {,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,290,    globalPreviousTime = globalCurrentTime;,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,291,    softPreviousTime   = globalPreviousTime;,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,292,    softCurrentTime    = globalCurrentTime;,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,293,  },0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,300,    globalCurrentTime = t;,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,301,    softCurrentTime   = globalCurrentTime;,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,302,    h                 = globalCurrentTime - globalPreviousTime;,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,303,    setInterpolatedTime(t);,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,306,    finalized  = false;,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,308,  },0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,379,      interpolatedTime = time;,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,380,      dirtyState       = true;,0.00649,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,381,  },0.00649,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,77,        if (equationData.length != dimension) {,0.00649,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,80,"        System.arraycopy(complete, firstIndex, equationData, 0, dimension);",0.00649,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,81,    },0.00649,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,65,        return dimension;,0.00645,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,215,        if (y0.length != equations.getDimension()) {,0.00633,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,49,"    public EquationsMapper(final int firstIndex, final int dimension) {",0.00633,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,50,        this.firstIndex = firstIndex;,0.00633,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,51,        this.dimension  = dimension;,0.00633,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,52,    },0.00633,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,213,      if (dimension < 0) {,0.00606,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,237,  },0.00606,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,84,    public AbstractIntegrator(final String name) {,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,85,        this.name = name;,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,86,        stepHandlers = new ArrayList<StepHandler>();,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,87,        stepStart = Double.NaN;,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,88,        stepSize  = Double.NaN;,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,89,        eventsStates = new ArrayList<EventState>();,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,90,        statesInitialized = false;,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,91,        evaluations = new Incrementor();,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,92,        setMaxEvaluations(-1);,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,93,        evaluations.resetCount();,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,94,    },0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,168,        evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations);,0.00602,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,169,    },0.00602,0,-1,0
org/apache/commons/math3/util/FastMath,7,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,115,    private static final double LN_QUICK_COEF[][] = {,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,128,    private static final double LN_HI_PREC_COEF[][] = {,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,141,    private static final double SINE_TABLE_A[] =,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,160,    private static final double SINE_TABLE_B[] =,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,179,    private static final double COSINE_TABLE_A[] =,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,198,    private static final double COSINE_TABLE_B[] =,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,218,    private static final double TANGENT_TABLE_A[] =,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,237,    private static final double TANGENT_TABLE_B[] =,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,256,    private static final long RECIP_2PI[] = new long[] {,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,277,    private static final long PI_O_4_BITS[] = new long[] {,0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,63,             new MaxCountExceededCallback() {,0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,53,        this(0);,0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,54,    },0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,62,"        this(max,",0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,69,    },0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,80,        throws NullArgumentException {,0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,41,    private int count = 0;,0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,81,        if (cb == null){,0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,84,        maximalCount = max;,0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,85,        maxCountCallback = cb;,0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,86,    },0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,96,        maximalCount = max;,0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,97,    },0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,164,        count = 0;,0.00599,0,-1,0
org/apache/commons/math3/util/Incrementor,7,165,    },0.00599,0,-1,0
org/apache/commons/math3/util/FastMath,7,353,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,365,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,366,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,368,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,369,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,370,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,387,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,388,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,396,      if (x > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,397,          if (x >= LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,399,              final double t = exp(0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,400,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,402,              return 0.5 * exp(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,404,      } else if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,405,          if (x <= -LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,407,              final double t = exp(-0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,408,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,410,              return 0.5 * exp(-x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,414,      final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,415,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,416,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,418,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,420,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,421,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,423,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,424,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,425,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,428,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,429,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,430,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,431,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,434,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,436,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,439,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,440,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,441,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,442,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,443,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,444,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,446,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,447,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,448,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,456,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,457,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,458,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,466,      if (x > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,467,          if (x >= LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,469,              final double t = exp(0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,470,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,472,              return 0.5 * exp(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,474,      } else if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,475,          if (x <= -LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,477,              final double t = exp(-0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,478,              return (-0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,480,              return -0.5 * exp(-x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,484,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,485,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,488,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,489,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,490,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,495,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,496,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,497,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,499,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,500,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,502,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,503,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,504,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,507,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,508,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,509,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,510,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,513,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,515,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,517,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,518,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,521,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,522,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,523,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,524,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,525,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,526,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,528,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,529,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,530,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,532,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,533,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,535,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,536,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,539,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,540,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,541,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,542,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,543,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,544,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,545,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,547,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,548,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,549,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,551,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,554,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,555,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,558,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,559,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,560,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,561,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,562,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,563,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,565,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,566,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,569,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,570,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,573,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,581,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,583,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,584,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,593,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,594,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,597,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,598,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,601,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,602,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,605,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,606,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,607,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,611,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,612,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,614,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,616,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,617,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,620,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,621,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,622,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,623,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,624,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,627,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,628,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,629,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,630,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,631,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,633,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,634,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,635,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,638,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,639,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,640,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,641,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,644,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,647,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,649,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,651,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,652,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,654,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,656,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,658,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,659,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,662,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,663,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,666,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,667,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,668,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,669,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,670,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,672,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,673,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,674,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,677,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,678,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,679,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,680,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,683,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,686,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,688,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,690,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,693,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,694,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,697,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,705,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,713,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,714,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,715,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,716,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,720,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,721,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,723,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,724,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,725,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,726,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,727,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,728,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,729,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,735,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,743,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,744,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,745,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,746,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,750,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,751,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,753,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,754,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,755,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,756,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,757,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,758,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,759,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,765,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,774,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,783,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,807,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,831,"        return exp(x, 0.0, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,854,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,855,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,856,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,858,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,864,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,865,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,866,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,868,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,874,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,875,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,876,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,878,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,891,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,892,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,893,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,895,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,946,            result = tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,951,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,952,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,963,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,972,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,973,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,976,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,979,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,980,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,981,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,982,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,984,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,985,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,986,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,987,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,994,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,996,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,997,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,998,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1002,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1003,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1004,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1006,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1007,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1008,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1010,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1011,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1012,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1014,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1019,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1020,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1021,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1022,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1023,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1024,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1026,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1027,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1028,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1029,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1031,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1032,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1033,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1034,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1037,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1039,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1040,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1043,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1044,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1045,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1047,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1048,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1049,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1053,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1054,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1055,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1057,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1059,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1060,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1062,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1064,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1065,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1067,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1069,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1070,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1072,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1074,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1075,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1076,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1077,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1078,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1079,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1080,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1082,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1083,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1084,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1086,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1097,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1098,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1101,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1102,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1105,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1106,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1107,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1110,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1120,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1131,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1137,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1139,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1142,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1148,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1149,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1152,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1160,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1162,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1163,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1166,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1170,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1171,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1172,                --exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1173,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1184,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1185,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1186,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1187,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1188,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1189,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1190,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1193,                double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1194,                double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1198,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1199,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1201,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1202,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1203,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1207,                    aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1208,                    ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1210,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1211,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1212,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1216,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1217,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1219,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1220,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1221,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1223,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1297,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1298,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1299,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1300,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1301,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1302,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1303,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1362,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1363,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1366,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1367,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1370,        if (x > 1e-6 ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1372,            final double xpa = 1 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1373,            final double xpb = -(xpa - 1 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1375,            final double[] hiPrec = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1376,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1377,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1378,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1383,            final double fx1 = xpb / xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1384,            final double epsilon = 0.5 * fx1 + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1385,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1388,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1389,            return y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1398,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1400,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1401,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1402,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1405,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1406,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1407,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1409,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1410,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1412,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1432,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1446,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1450,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1455,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1456,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1458,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1460,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1461,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1464,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1465,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1469,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1470,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1472,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1473,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1476,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1480,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1481,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1483,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1484,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1486,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1491,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1492,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1495,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1496,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1498,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1503,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1504,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1507,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1508,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1509,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1510,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1513,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1516,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1517,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1518,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1519,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1522,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1528,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1529,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1532,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1533,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1535,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1542,            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1543,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1546,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1548,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1550,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1562,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1563,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1564,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1565,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1571,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1613,        if (e == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1614,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1615,        } else if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1616,            e = -e;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1617,            d = 1.0 / d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1622,        final int splitFactor = 0x8000001;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1623,        final double cd       = splitFactor * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1624,        final double d1High   = cd - (cd - d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1625,        final double d1Low    = d - d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1628,        double resultHigh = 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1629,        double resultLow  = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1632,        double d2p     = d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1633,        double d2pHigh = d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1634,        double d2pLow  = d1Low;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1636,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1638,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1641,                final double tmpHigh = resultHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1642,                final double cRH     = splitFactor * resultHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1643,                final double rHH     = cRH - (cRH - resultHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1644,                final double rHL     = resultHigh - rHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1645,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1646,                resultHigh = tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1647,                resultLow  = resultLow * d2p + tmpLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1652,            final double tmpHigh = d2pHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1653,            final double cD2pH   = splitFactor * d2pHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1654,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1655,            final double d2pHL   = d2pHigh - d2pHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1656,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1657,            final double cTmpH   = splitFactor * tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1658,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1659,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1660,            d2p     = d2pHigh + d2pLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1662,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1664,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1666,        return resultHigh + resultLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1861,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1862,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1865,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1866,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1867,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1868,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1871,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1872,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1873,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1874,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1877,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1878,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1879,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1880,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1905,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1906,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1909,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1910,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1911,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1912,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1913,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1915,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1916,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1917,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1918,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1919,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1921,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1922,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1924,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1925,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1929,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1931,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1932,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1933,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1934,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1935,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1937,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1938,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1939,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1940,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1941,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1943,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1944,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1946,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1947,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1949,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1951,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1952,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1966,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1969,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1970,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1971,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1973,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1974,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1975,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1978,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1979,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1980,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1982,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1985,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1986,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1987,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1990,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,1993,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2010,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2011,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2014,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2015,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2018,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2019,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2025,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2026,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2028,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2029,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2030,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2031,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2032,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2034,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2035,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2036,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2040,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2041,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2043,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2044,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2046,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2047,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2048,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2049,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2051,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2052,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2054,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2055,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2056,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2059,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2061,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2064,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2065,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2067,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2068,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2070,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2073,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2075,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2079,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2080,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2081,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2082,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2083,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2086,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2088,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2089,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2090,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2091,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2093,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2095,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2099,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2100,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2102,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2103,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2104,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2106,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2118,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2121,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2122,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2123,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2126,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2127,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2129,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2130,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2132,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2133,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2134,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2135,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2137,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2138,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2140,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2141,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2142,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2145,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2147,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2150,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2151,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2153,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2154,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2156,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2159,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2161,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2165,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2166,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2167,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2168,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2169,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2172,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2174,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2175,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2176,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2177,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2179,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2181,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2185,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2186,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2187,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2188,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2189,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2190,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2191,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2194,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2196,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2197,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2198,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2199,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2201,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2203,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2207,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2208,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2210,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2211,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2214,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2215,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2216,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2217,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2234,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2235,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2240,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2241,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2242,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2244,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2248,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2256,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2257,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2258,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2259,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2260,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2261,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2262,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2263,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2264,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2265,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2269,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2276,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2278,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2280,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2282,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2298,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2302,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2311,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2312,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2313,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2314,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2315,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2316,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2317,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2318,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2319,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2320,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2330,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2332,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2334,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2336,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2347,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2348,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2351,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2352,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2353,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2354,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2358,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2359,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2360,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2361,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2363,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2366,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2367,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2371,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2372,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2376,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2377,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2378,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2379,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2380,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2381,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2382,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2383,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2384,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2385,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2388,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2390,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2391,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2393,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2394,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2395,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2397,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2398,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2399,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2400,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2404,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2405,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2407,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2410,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2411,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2414,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2423,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2433,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2437,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2440,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2442,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2443,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2444,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2447,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2448,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2452,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2453,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2455,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2460,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2462,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2463,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2464,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2467,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2468,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2469,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2470,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2471,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2474,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2479,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2480,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2481,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2482,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2483,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2484,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2485,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2486,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2487,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2488,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2490,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2491,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2493,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2494,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2495,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2497,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2498,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2499,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2502,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2504,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2505,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2509,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2510,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2513,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2524,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2525,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2526,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2527,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2528,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2529,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2530,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2533,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2535,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2536,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2537,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2540,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2543,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2544,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2545,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2546,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2547,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2549,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2550,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2552,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2554,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2555,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2557,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2558,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2559,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2561,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2562,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2566,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2567,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2570,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2580,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2581,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2584,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2585,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2586,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2587,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2589,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2590,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2591,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2593,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2597,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2598,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2599,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2601,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2604,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2610,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2611,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2612,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2615,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2616,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2619,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2622,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2623,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2624,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2627,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2628,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2631,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2634,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2635,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2636,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2639,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2640,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2644,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2646,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2647,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2650,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2651,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2657,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2658,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2659,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2662,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2663,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2668,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2669,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2670,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2673,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2674,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2677,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2678,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2680,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2682,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2683,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2684,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2686,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2687,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2691,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2693,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2701,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2702,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2705,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2706,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2709,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2710,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2713,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2714,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2717,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2718,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2724,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2725,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2726,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2729,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2730,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2733,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2734,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2736,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2737,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2739,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2740,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2741,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2745,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2746,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2747,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2748,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2751,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2754,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2757,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2758,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2759,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2760,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2762,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2763,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2765,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2766,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2767,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2769,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2777,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2778,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2781,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2782,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2785,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2786,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2789,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2790,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2793,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2794,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2800,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2801,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2802,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2805,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2806,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2809,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2810,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2812,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2813,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2815,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2816,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2817,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2820,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2821,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2822,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2823,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2826,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2829,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2830,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2831,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2834,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2837,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2838,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2841,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2842,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2844,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2845,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2847,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2848,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2849,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2851,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2860,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2861,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2862,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2864,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2865,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2866,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2870,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2871,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2872,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2873,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2876,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2878,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2882,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2885,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2889,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2892,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2893,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2894,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2895,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2896,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2898,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2903,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2904,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2905,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2908,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2909,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2910,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2912,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2913,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2914,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2915,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2916,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2917,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2919,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2920,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2922,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2923,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2924,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2926,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2929,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2931,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2932,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2935,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2945,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2946,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2950,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2951,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2953,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2954,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2956,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2957,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2958,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2960,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2970,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2971,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2975,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2976,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2978,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2979,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,2990,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3008,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3027,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3038,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3039,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3041,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3053,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3054,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3058,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3059,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3061,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3062,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3064,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3065,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3069,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3070,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3071,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3072,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3075,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3077,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3079,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3081,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3082,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3086,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3089,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3090,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3091,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3093,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3095,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3099,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3103,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3106,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3107,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3108,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3110,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3111,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3113,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3114,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3116,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3119,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3120,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3122,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3137,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3138,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3142,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3143,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3145,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3146,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3148,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3149,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3153,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3154,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3155,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3156,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3159,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3161,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3163,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3165,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3166,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3170,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3173,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3174,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3175,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3177,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3179,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3183,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3187,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3190,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3191,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3192,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3194,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3195,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3197,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3198,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3200,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3203,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3204,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3206,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3246,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3247,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3248,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3249,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3250,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3251,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3252,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3253,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3258,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3259,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3260,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3261,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3263,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3302,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3303,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3304,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3305,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3306,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3307,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3308,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3309,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3314,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3315,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3316,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3317,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3319,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3332,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3336,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3341,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3345,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3359,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3364,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3370,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3381,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3382,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3384,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3385,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3386,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3388,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3390,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3391,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3395,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3396,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3404,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3412,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3421,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3430,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3439,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3440,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3442,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3443,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3446,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3447,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3451,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3452,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3453,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3455,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3471,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3472,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3476,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3477,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3478,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3480,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3498,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3507,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3508,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3510,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3511,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3514,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3515,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3519,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3520,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3521,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3523,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3539,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3540,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3544,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3545,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3546,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3548,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3566,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3567,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3568,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3569,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3572,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3573,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3574,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3576,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3577,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3579,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3583,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3586,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3587,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3590,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3593,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3621,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3633,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3634,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3635,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3636,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3638,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3650,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3651,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3652,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3653,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3655,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3668,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3681,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3690,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3691,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3692,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3693,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3694,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3695,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3696,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3697,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3698,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3699,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3700,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3701,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3702,    },0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,7,66,                     throw new MaxCountExceededException(max);,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,7,82,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,7,105,        return maximalCount;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,7,114,        return count;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,7,125,        return count < maximalCount;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,7,136,        for (int i = 0; i < value; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,7,137,            incrementCount();,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,7,139,    },0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,7,156,            maxCountCallback.trigger(maximalCount);,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,7,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,7,43,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,7,53,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,7,54,"        getContext().addMessage(specific, max, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,7,55,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,7,56,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,7,62,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,7,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,83,    private Precision() {},0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,96,"        if (equals(x, y, eps)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,97,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,98,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,99,            return -1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,101,        return 1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,122,"        if (equals(x, y, maxUlps)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,123,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,124,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,125,            return -1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,127,        return 1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,139,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,152,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,166,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,181,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,203,        int xInt = Float.floatToIntBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,204,        int yInt = Float.floatToIntBits(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,207,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,208,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,210,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,211,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,214,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,216,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,232,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,244,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,257,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,288,"        if (equals(x, y, 1)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,289,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,292,"        final double absoluteMax = FastMath.max(FastMath.abs(x), FastMath.abs(y));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,293,        final double relativeDifference = FastMath.abs((x - y) / absoluteMax);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,295,        return relativeDifference <= eps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,310,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,339,            yInt = SGN_MASK - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,360,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,373,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,395,            return (new BigDecimal,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,399,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,400,            if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,401,                return x;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,403,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,418,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,436,"        final float sign = FastMath.copySign(1f, x);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,437,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,438,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,458,        switch (roundingMethod) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,460,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,461,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,463,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,465,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,467,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,468,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,470,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,471,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,473,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,475,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,477,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,478,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,479,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,480,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,482,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,484,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,487,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,488,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,489,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,490,            } else if (fraction < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,491,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,494,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,496,                    unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,498,                    unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,501,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,504,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,505,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,506,            if (fraction >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,507,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,509,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,511,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,514,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,515,                throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,519,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,520,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,522,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,533,        return unscaled;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,7,553,        return x + originalDelta - x;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,59,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,63,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,7,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,7,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,7,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,7,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,7,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,7,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,7,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,7,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,7,6134,    private FastMathLiteralArrays() {},0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,7,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,7,42,    },0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,7,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,7,51,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3808,        CodyWaite(double xa) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3811,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3817,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3818,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3819,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3821,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3822,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3823,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3824,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3826,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3827,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3828,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3829,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3831,                if (remA > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3832,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3838,                --k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3839,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3841,            this.finalK = k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3842,            this.finalRemA = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3843,            this.finalRemB = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3844,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3850,            return finalK;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3856,            return finalRemA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,7,3862,            return finalRemB;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,47,    private MathUtils() {},0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,57,        return new Double(value).hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,68,        return Arrays.hashCode(value);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,113,        final double p = FastMath.abs(period);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,129,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,131,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,132,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,134,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,136,            return (byte) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,152,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,154,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,155,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,157,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,159,            return (short) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,175,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,177,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,178,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,180,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,182,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,198,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,200,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,201,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,203,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,205,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,217,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,218,            throw new NotFiniteNumberException(x);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,220,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,231,        for (int i = 0; i < val.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,232,            final double x = val[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,233,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,234,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,237,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,251,        if (o == null) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,252,"            throw new NullArgumentException(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,254,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,7,265,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,7,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,7,41,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,7,53,"        super(specific, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,7,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,7,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,7,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,7,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,7,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,99,        this(null);,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,100,    },0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,104,        return name;,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,114,        return Collections.unmodifiableCollection(stepHandlers);,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,119,        stepHandlers.clear();,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,120,    },0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,144,        final List<EventHandler> list = new ArrayList<EventHandler>();,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,145,        for (EventState state : eventsStates) {,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,146,            list.add(state.getEventHandler());,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,147,        },0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,148,        return Collections.unmodifiableCollection(list);,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,153,        eventsStates.clear();,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,154,    },0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,158,        return stepStart;,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,163,        return stepSize;,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,173,        return evaluations.getMaximalCount();,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,178,        return evaluations.getCount();,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,216,"            throw new DimensionMismatchException(y0.length, equations.getDimension());",0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,219,"            throw new DimensionMismatchException(y.length, equations.getDimension());",0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,231,"        System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length);",0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,232,        return expandableODE.getTime();,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,356,"                    System.arraycopy(eventY, 0, y, 0, y.length);",0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,357,                    for (final EventState remaining : occuringEvents) {,0.0,1,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,358,"                        remaining.stepAccepted(eventT, eventY);",0.0,1,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,359,                    },0.0,1,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,360,                    return eventT;,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,371,"                        remaining.stepAccepted(eventT, eventY);",0.0,1,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,372,                    },0.0,1,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,377,                previousT = eventT;,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,378,                interpolator.setSoftPreviousTime(eventT);,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,379,                interpolator.setSoftCurrentTime(currentT);,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,382,                if (currentEvent.evaluateStep(interpolator)) {,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,384,                    occuringEvents.add(currentEvent);,0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,387,            },0.0,0,-1,0
org/apache/commons/math3/ode/AbstractIntegrator,7,421,"            throw new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL,",0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,132,        return maxCheckInterval;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,139,        return convergence;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,146,        return maxIterationCount;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,174,"            final double epsilon = FastMath.max(solver.getAbsoluteAccuracy(),",0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,176,            final double tStart = t0 + 0.5 * epsilon;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,177,            interpolator.setInterpolatedTime(tStart);,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,178,"            g0 = handler.g(tStart, interpolator.getInterpolatedState());",0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,201,                return false;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,243,                        final double baseRoot = forward ?,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,246,                        final int remainingEval = maxIterationCount - solver.getEvaluations();,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,247,                        BracketedUnivariateSolver<UnivariateFunction> bracketing =,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,249,                        root = forward ?,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,261,                        ta = forward ? ta + convergence : ta - convergence;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,262,                        ga = f.value(ta);,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,263,                        --i;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,271,                        ta = tb;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,272,                        ga = gb;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,275,                } else {,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,288,        } catch (LocalMaxCountExceededException lmcee) {,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,289,            throw lmcee.getException();,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,344,            return false;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,370,        public LocalMaxCountExceededException(final MaxCountExceededException exception) {,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,371,            wrapped = exception;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,372,        },0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,378,            return wrapped;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,51,"        this(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS, lo, hi, fLo, fHi);",0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,52,    },0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,68,"        super(specific, lo, hi, fLo, fHi, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,69,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,70,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,71,        this.fLo = fLo;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,72,        this.fHi = fHi;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,73,    },0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,81,        return lo;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,89,        return hi;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,97,        return fLo;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,7,105,        return fHi;,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,211,                    } catch (MaxCountExceededException mcee) {,0.0,0,-1,0
org/apache/commons/math3/ode/events/EventState,7,212,                        throw new LocalMaxCountExceededException(mcee);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,155,"    super(name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);",0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,157,    this.fsal      = fsal;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,158,    this.c         = c;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,159,    this.a         = a;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,160,    this.b         = b;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,161,    this.prototype = prototype;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,163,    exp = -1.0 / getOrder();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,166,    setSafety(0.9);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,167,    setMinReduction(0.2);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,168,    setMaxGrowth(10.0);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,170,  },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,181,    return safety;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,243,              for (int i = 0; i < scale.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,244,                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,255,                stepSize = t - stepStart;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,258,            if (stepStart + stepSize <= t) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,259,                stepSize = t - stepStart;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,291,          final double factor =,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,294,"          hNew = filterStep(stepSize * factor, forward, false);",0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,295,        },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,327,              hNew = t - stepStart;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,335,    equations.setTime(stepStart);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,336,    equations.setCompleteState(y);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,338,    resetInternalState();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,340,  },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,346,    return minReduction;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator,7,360,    return maxGrowth;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,133,    super(name);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,134,"    setStepSizeControl(minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);",0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,135,    resetInternalState();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,137,  },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,186,      minStep     = FastMath.abs(minimalStep);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,187,      maxStep     = FastMath.abs(maximalStep);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,188,      initialStep = -1;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,190,      scalAbsoluteTolerance = 0;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,191,      scalRelativeTolerance = 0;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,192,      vecAbsoluteTolerance  = absoluteTolerance.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,193,      vecRelativeTolerance  = relativeTolerance.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,195,  },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,210,      initialStep = -1.0;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,212,      initialStep = initialStepSize;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,214,  },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,226,"          throw new DimensionMismatchException(mainSetDimension, vecAbsoluteTolerance.length);",0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,230,"          throw new DimensionMismatchException(mainSetDimension, vecRelativeTolerance.length);",0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,255,      return forward ? initialStep : -initialStep;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,273,      h = -h;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,299,      h = getMinStep();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,302,      h = getMaxStep();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,305,      h = -h;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,326,          if (acceptSmall) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,327,              filteredH = forward ? minStep : -minStep;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,329,"              throw new NumberIsTooSmallException(LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION,",0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,335,          filteredH = maxStep;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,337,          filteredH = -maxStep;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/AdaptiveStepsizeIntegrator,7,353,    return stepStart;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,239,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,242,  },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853Integrator,7,280,      den = 1.0;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,7,44,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,7,45,        dimension = expected;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,7,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,7,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,7,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,7,63,        return dimension;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,7,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,7,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,7,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,7,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,7,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,7,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,7,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,7,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,137,                                     final EquationsMapper[] secondaryMappers) {,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,139,    globalPreviousTime    = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,140,    globalCurrentTime     = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,141,    softPreviousTime      = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,142,    softCurrentTime       = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,143,    h                     = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,144,    interpolatedTime      = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,145,    currentState          = y;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,146,    finalized             = false;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,147,    this.forward          = forward;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,148,    this.dirtyState       = true;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,149,    this.primaryMapper    = primaryMapper;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,150,    this.secondaryMappers = (secondaryMappers == null) ? null : secondaryMappers.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,151,    allocateInterpolatedArrays(y.length);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,153,  },0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,187,      currentState                     = interpolator.currentState.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,188,      interpolatedState                = interpolator.interpolatedState.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,189,      interpolatedDerivatives          = interpolator.interpolatedDerivatives.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,190,      interpolatedPrimaryState         = interpolator.interpolatedPrimaryState.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,191,      interpolatedPrimaryDerivatives   = interpolator.interpolatedPrimaryDerivatives.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,192,      interpolatedSecondaryState       = new double[interpolator.interpolatedSecondaryState.length][];,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,193,      interpolatedSecondaryDerivatives = new double[interpolator.interpolatedSecondaryDerivatives.length][];,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,194,      for (int i = 0; i < interpolatedSecondaryState.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,195,          interpolatedSecondaryState[i]       = interpolator.interpolatedSecondaryState[i].clone();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,196,          interpolatedSecondaryDerivatives[i] = interpolator.interpolatedSecondaryDerivatives[i].clone();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,226,              interpolatedSecondaryState       = null;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,227,              interpolatedSecondaryDerivatives = null;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,232,                  interpolatedSecondaryState[i]       = new double[secondaryMappers[i].getDimension()];,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,233,                  interpolatedSecondaryDerivatives[i] = new double[secondaryMappers[i].getDimension()];,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,374,    return interpolatedTime;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,425,      evaluateCompleteInterpolatedState();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,426,"      primaryMapper.extractEquationData(interpolatedDerivatives,",0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,428,      return interpolatedPrimaryDerivatives;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,433,      evaluateCompleteInterpolatedState();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,434,"      secondaryMappers[index].extractEquationData(interpolatedState,",0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,436,      return interpolatedSecondaryState[index];,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,441,      evaluateCompleteInterpolatedState();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,442,"      secondaryMappers[index].extractEquationData(interpolatedDerivatives,",0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,444,      return interpolatedSecondaryDerivatives[index];,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,501,  },0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,520,    if (currentState == null) {,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,521,        out.writeInt(-1);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,523,        out.writeInt(currentState.length);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,525,    out.writeDouble(globalPreviousTime);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,526,    out.writeDouble(globalCurrentTime);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,527,    out.writeDouble(softPreviousTime);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,528,    out.writeDouble(softCurrentTime);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,529,    out.writeDouble(h);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,530,    out.writeBoolean(forward);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,531,    out.writeObject(primaryMapper);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,532,    out.write(secondaryMappers.length);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,533,    for (final EquationsMapper  mapper : secondaryMappers) {,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,534,        out.writeObject(mapper);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,537,    if (currentState != null) {,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,538,        for (int i = 0; i < currentState.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,539,            out.writeDouble(currentState[i]);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,543,    out.writeDouble(interpolatedTime);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,550,        finalizeStep();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,555,    },0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,551,    } catch (MaxCountExceededException mcee) {,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,552,        final IOException ioe = new IOException(mcee.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,553,        ioe.initCause(mcee);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,554,        throw ioe;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,557,  },0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,573,    final int dimension = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,574,    globalPreviousTime  = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,575,    globalCurrentTime   = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,576,    softPreviousTime    = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,577,    softCurrentTime     = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,578,    h                   = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,579,    forward             = in.readBoolean();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,580,    primaryMapper       = (EquationsMapper) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,581,    secondaryMappers    = new EquationsMapper[in.read()];,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,582,    for (int i = 0; i < secondaryMappers.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,583,        secondaryMappers[i] = (EquationsMapper) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,585,    dirtyState          = true;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,587,    if (dimension < 0) {,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,588,        currentState = null;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,590,        currentState  = new double[dimension];,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,591,        for (int i = 0; i < currentState.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,592,            currentState[i] = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,597,    interpolatedTime = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,598,    allocateInterpolatedArrays(dimension);,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,600,    finalized = true;,0.0,0,-1,0
org/apache/commons/math3/ode/sampling/AbstractStepInterpolator,7,602,    return in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,89,      previousState = interpolator.previousState.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,91,      yDotK = new double[interpolator.yDotK.length][];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,92,      for (int k = 0; k < interpolator.yDotK.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,93,        yDotK[k] = interpolator.yDotK[k].clone();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,153,    writeBaseExternal(out);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,156,    final int n = (currentState == null) ? -1 : currentState.length;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,157,    for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,158,      out.writeDouble(previousState[i]);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,161,    final int kMax = (yDotK == null) ? -1 : yDotK.length;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,162,    out.writeInt(kMax);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,163,    for (int k = 0; k < kMax; ++k) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,164,      for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,165,        out.writeDouble(yDotK[k][i]);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,171,  },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,179,    final double t = readBaseExternal(in);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,182,    final int n = (currentState == null) ? -1 : currentState.length;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,183,    if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,184,      previousState = null;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,186,      previousState = new double[n];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,187,      for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,188,        previousState[i] = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,192,    final int kMax = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,193,    yDotK = (kMax < 0) ? null : new double[kMax][];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,194,    for (int k = 0; k < kMax; ++k) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,195,      yDotK[k] = (n < 0) ? null : new double[n];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,196,      for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,197,        yDotK[k][i] = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,201,    integrator = null;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,203,    if (currentState != null) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,205,        setInterpolatedTime(t);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,207,        interpolatedTime = t;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/RungeKuttaStepInterpolator,7,210,  },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,255,      final int dimension = interpolator.currentState.length;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,257,      yDotKLast    = new double[3][];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,258,      for (int k = 0; k < yDotKLast.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,259,        yDotKLast[k] = new double[dimension];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,260,"        System.arraycopy(interpolator.yDotKLast[k], 0, yDotKLast[k], 0,",0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,264,      v = new double[7][];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,265,      for (int k = 0; k < v.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,266,        v[k] = new double[dimension];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,267,"        System.arraycopy(interpolator.v[k], 0, v[k], 0, dimension);",0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,270,      vectorsInitialized = interpolator.vectorsInitialized;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,323,        v = new double[7][];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,324,        for (int k = 0; k < 7; ++k) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,325,          v[k] = new double[interpolatedState.length];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,456,        finalizeStep();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,461,    },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,457,    } catch (MaxCountExceededException mcee) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,458,        final IOException ioe = new IOException(mcee.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,459,        ioe.initCause(mcee);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,460,        throw ioe;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,463,    final int dimension = (currentState == null) ? -1 : currentState.length;,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,464,    out.writeInt(dimension);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,465,    for (int i = 0; i < dimension; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,466,      out.writeDouble(yDotKLast[0][i]);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,467,      out.writeDouble(yDotKLast[1][i]);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,468,      out.writeDouble(yDotKLast[2][i]);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,472,    super.writeExternal(out);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,474,  },0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,482,    yDotKLast = new double[3][];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,483,    final int dimension = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,484,    yDotKLast[0] = (dimension < 0) ? null : new double[dimension];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,485,    yDotKLast[1] = (dimension < 0) ? null : new double[dimension];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,486,    yDotKLast[2] = (dimension < 0) ? null : new double[dimension];,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,488,    for (int i = 0; i < dimension; ++i) {,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,489,      yDotKLast[0][i] = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,490,      yDotKLast[1][i] = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,491,      yDotKLast[2][i] = in.readDouble();,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,495,    super.readExternal(in);,0.0,0,-1,0
org/apache/commons/math3/ode/nonstiff/DormandPrince853StepInterpolator,7,497,  },0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,87,        return primary;,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,102,            final EquationsMapper lastMapper = components.get(components.size() - 1).mapper;,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,103,            return lastMapper.getFirstIndex() + lastMapper.getDimension();,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,124,"            component.mapper.extractEquationData(y, component.state);",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,125,"            component.equation.computeDerivatives(t, primaryState, primaryStateDot,",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,127,"            component.mapper.insertEquationData(component.stateDot, yDot);",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,128,        },0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,139,        if (components.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,141,            components = new ArrayList<ExpandableStatefulODE.SecondaryComponent>();,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,142,            firstIndex = primary.getDimension();,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,144,            final SecondaryComponent last = components.get(components.size() - 1);,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,145,            firstIndex = last.mapper.getFirstIndex() + last.mapper.getDimension();,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,148,"        components.add(new SecondaryComponent(secondary, firstIndex));",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,150,        return components.size() - 1;,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,169,            mappers[i] = components.get(i).mapper;,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,197,"            throw new DimensionMismatchException(primaryState.length, this.primaryState.length);",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,209,        return primaryState.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,216,        return primaryStateDot.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,230,        double[] localArray = components.get(index).state;,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,233,        if (secondaryState.length != localArray.length) {,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,234,"            throw new DimensionMismatchException(secondaryState.length, localArray.length);",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,238,"        System.arraycopy(secondaryState, 0, localArray, 0, secondaryState.length);",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,240,    },0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,248,        return components.get(index).state.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,257,        return components.get(index).stateDot.clone();,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,269,        if (completeState.length != getTotalDimension()) {,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,270,"            throw new DimensionMismatchException(completeState.length, getTotalDimension());",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,274,"        primaryMapper.extractEquationData(completeState, primaryState);",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,275,        for (final SecondaryComponent component : components) {,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,276,"            component.mapper.extractEquationData(completeState, component.state);",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,277,        },0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,279,    },0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,294,"            component.mapper.insertEquationData(component.state, completeState);",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,295,        },0.0,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,58,        return firstIndex;,0.0,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,78,"            throw new DimensionMismatchException(equationData.length, dimension);",0.0,0,-1,0
org/apache/commons/math3/ode/EquationsMapper,7,93,"            throw new DimensionMismatchException(equationData.length, dimension);",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,320,"        public SecondaryComponent(final SecondaryEquations equation, final int firstIndex) {",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,321,            final int n   = equation.getDimension();,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,322,            this.equation = equation;,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,323,"            mapper        = new EquationsMapper(firstIndex, n);",0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,324,            state         = new double[n];,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,325,            stateDot      = new double[n];,0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,326,        },0.0,0,-1,0
org/apache/commons/math3/ode/ExpandableStatefulODE,7,302,    private static class SecondaryComponent {,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,7,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,7,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,7,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,7,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,7,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,7,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,7,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,7,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,7,37,    public MathInternalError() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,7,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,7,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,7,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,7,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,7,56,"        super(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,7,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,7,37,        super(max);,0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,7,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,7,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,7,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,7,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,7,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,7,49,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,71,"        this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,72,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,86,"            throw new NumberIsTooSmallException(maximalOrder, 2, true);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,104,"        super(relativeAccuracy, absoluteAccuracy);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,105,        if (maximalOrder < 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,106,"            throw new NumberIsTooSmallException(maximalOrder, 2, true);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,108,        this.maximalOrder = maximalOrder;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,109,        this.allowed = AllowedSolution.ANY_SIDE;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,110,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,126,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,127,        if (maximalOrder < 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,128,"            throw new NumberIsTooSmallException(maximalOrder, 2, true);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,130,        this.maximalOrder = maximalOrder;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,131,        this.allowed = AllowedSolution.ANY_SIDE;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,132,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,138,        return maximalOrder;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,161,            return x[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,168,            return x[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,176,            nbPoints        = 2;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,177,            signChangeIndex = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,185,                return x[2];,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,193,"                throw new NoBracketingException(x[0], x[2], y[0], y[2]);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,220,                    return absYA < absYB ? xA : xB;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,222,                    return xA;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,226,                    return (yA <= 0) ? xA : xB;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,228,                    return (yA <  0) ? xB : xA;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,231,                    throw new MathInternalError();,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,245,                final int p = agingB - MAXIMAL_AGING;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,246,                final double weightA = p + 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,247,                final double weightB = (1 << p) - 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,248,                targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,249,            } else {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,270,                    if (signChangeIndex - start >= end - signChangeIndex) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,272,                        ++start;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,275,                        --end;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,279,                    nextX = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,287,                nextX = xA + 0.5 * (xB - xA);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,288,                start = signChangeIndex - 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,289,                end   = signChangeIndex;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,297,                return nextX;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,304,                nbPoints = end - start;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,305,"                System.arraycopy(x, start, x, 0, nbPoints);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,306,"                System.arraycopy(y, start, y, 0, nbPoints);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,307,                signChangeIndex -= start;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,312,                nbPoints--;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,315,                if (signChangeIndex >= (x.length + 1) / 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,317,"                    System.arraycopy(x, 1, x, 0, nbPoints);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,318,"                    System.arraycopy(y, 1, y, 0, nbPoints);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,319,                    --signChangeIndex;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,409,        this.allowed = allowedSolution;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,410,"        return super.solve(maxEval, f, min, max, startValue);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,7,47,"        super(relativeAccuracy, absoluteAccuracy);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,7,48,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,7,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,7,60,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,80,"        this(relativeAccuracy,",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,83,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,102,        return evaluations.getMaximalCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,106,        return evaluations.getCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,208,"        return solve(maxEval, f, Double.NaN, Double.NaN, startValue);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,234,"        return UnivariateSolverUtils.isBracketing(function, lower, upper);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,248,"        return UnivariateSolverUtils.isSequence(start, mid, end);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,261,"        UnivariateSolverUtils.verifyInterval(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,262,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,294,"        UnivariateSolverUtils.verifyBracketing(function, lower, upper);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,295,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,311,        } catch (MaxCountExceededException e) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,7,312,            throw new TooManyEvaluationsException(e.getMax());,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,36,    private UnivariateSolverUtils() {},0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,53,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,54,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,56,        final UnivariateSolver solver = new BrentSolver();,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,57,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,78,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,79,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,81,        final UnivariateSolver solver = new BrentSolver(absoluteAccuracy);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,82,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,107,        if (allowedSolution == AllowedSolution.ANY_SIDE) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,109,            return baseRoot;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,113,"        final double step = FastMath.max(bracketing.getAbsoluteAccuracy(),",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,115,"        double xLo        = FastMath.max(min, baseRoot - step);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,116,        double fLo        = f.value(xLo);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,117,"        double xHi        = FastMath.min(max, baseRoot + step);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,118,        double fHi        = f.value(xHi);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,119,        int remainingEval = maxEval - 2;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,120,        while (remainingEval > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,122,            if ((fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0)) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,124,"                return bracketing.solve(remainingEval, f, xLo, xHi, baseRoot, allowedSolution);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,128,            boolean changeLo = false;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,129,            boolean changeHi = false;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,130,            if (fLo < fHi) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,132,                if (fLo >= 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,133,                    changeLo = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,135,                    changeHi = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,137,            } else if (fLo > fHi) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,139,                if (fLo <= 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,140,                    changeLo = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,142,                    changeHi = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,146,                changeLo = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,147,                changeHi = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,151,            if (changeLo) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,152,"                xLo = FastMath.max(min, xLo - step);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,153,                fLo  = f.value(xLo);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,154,                remainingEval--;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,158,            if (changeHi) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,159,"                xHi = FastMath.min(max, xHi + step);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,160,                fHi  = f.value(xHi);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,161,                remainingEval--;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,164,        },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,166,"        throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,218,"        return bracket(function, initial, lowerBound, upperBound, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,260,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,261,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,263,        if (maximumIterations <= 0)  {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,264,"            throw new NotStrictlyPositiveException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,266,"        verifySequence(lowerBound, initial, upperBound);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,268,        double a = initial;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,269,        double b = initial;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,272,        int numIterations = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,275,"            a = FastMath.max(a - 1.0, lowerBound);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,276,"            b = FastMath.min(b + 1.0, upperBound);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,277,            fa = function.value(a);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,279,            fb = function.value(b);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,280,            ++numIterations;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,281,        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,284,        if (fa * fb > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,285,"            throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,291,"        return new double[] {a, b};",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,302,        return (a + b) * 0.5;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,321,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,322,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,324,        final double fLo = function.value(lower);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,325,        final double fHi = function.value(upper);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,326,        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,340,        return (start < mid) && (mid < end);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,354,"            throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,392,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,393,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,395,"        verifyInterval(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,396,"        if (!isBracketing(function, lower, upper)) {",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,397,"            throw new NoBracketingException(lower, upper,",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,7,401,    },0.0,0,-1,0
