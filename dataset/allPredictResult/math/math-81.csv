project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,                            return;,0.5,0,0,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,0.5,0,1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,0.5,0,1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,0.5,0,1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,0.5,0,0,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,0.5,0,1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,0.5,0,1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0.5,0,0,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,0.5,0,0,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,0.5,1,1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,0.5,0,0,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,0.5,0,1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,0.5,0,1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,                tType = -9;,0.5,0,1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,            break;,0.5,0,1,0
org/apache/commons/math/linear/ArrayRealVector,81,77,    public ArrayRealVector(double[] d) {,0.33333,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,78,        data = d.clone();,0.33333,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,79,    },0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,                        a2 = a2 + b2;,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,0.33333,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,                } else if ((dMin < 0.0) &&,0.125,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,                } else if (dMin < 0.0) {,0.125,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,0.125,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,0.125,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,0.125,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1101,                        tType -= 11;,0.125,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,                    tType = -4;,0.11111,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1475,                    double s = 0.25 * dMin;,0.11111,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1478,                    if (dMin == dN) {,0.11111,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,                    a2 = a2 + b2;,0.11111,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1503,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0.11111,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1517,                    a2 = cnst3 * a2;,0.11111,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1520,                    if (a2 < cnst1) {,0.11111,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,0.11111,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1523,                    tau = s;,0.11111,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,191,        throws InvalidMatrixException {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,193,        this.main      = main.clone();,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,194,        this.secondary = secondary.clone();,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,195,        transformer    = null;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,198,        squaredSecondary = new double[secondary.length];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,200,            final double s = secondary[i];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,201,            squaredSecondary[i] = s * s;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,204,        this.splitTolerance = splitTolerance;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,205,        decompose();,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",0.06667,1,-1,1
org/apache/commons/math/linear/EigenDecompositionImpl,81,644,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,645,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,646,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,647,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,648,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,649,                final double lambda        = chooseLeft ? range[0] : range[1];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,651,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,654,"                ldlTDecomposition(lambda, begin, n);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,657,                processGeneralBlock(n);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,826,        double sumOffDiag = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,827,        for (int i = 0; i < n - 1; ++i) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,828,            final int fourI = 4 * i;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,829,            final double ei = work[fourI + 2];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,830,            sumOffDiag += ei;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,833,        if (sumOffDiag == 0) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,839,"        flipIfWarranted(n, 2);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,842,        initialSplits(n);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,845,        tType = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,846,        dMin1 = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,847,        dMin2 = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,848,        dN    = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,849,        dN1   = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,850,        dN2   = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,851,        tau   = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,854,        int i0 = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,855,        int n0 = n;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,856,        while (n0 > 0) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,859,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,860,            sigmaLow = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,863,            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,864,            double offDiagMax = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,865,            double diagMax    = work[4 * n0 - 4];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,866,            double diagMin    = diagMax;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,867,            i0 = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,868,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,869,                if (work[i + 2] <= 0) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,873,                if (diagMin >= 4 * offDiagMax) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,874,"                    diagMin    = Math.min(diagMin, work[i + 4]);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,875,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,877,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,878,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,880,            work[4 * n0 - 2] = offDiagMin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,883,"            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,885,            pingPong = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,886,            int maxIter = 30 * (n0 - i0);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,887,            for (int k = 0; i0 < n0; ++k) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,888,                if (k >= maxIter) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,893,"                n0 = goodStep(i0, n0);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,894,                pingPong = 1 - pingPong;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,898,                if ((pingPong == 0) && (n0 - i0 > 3) &&,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,936,        pingPong = 0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,937,        for (int k = 0; k < 2; ++k) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,940,            double d = work[4 * (n - 1) + pingPong];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,941,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,942,                if (work[i + 2] <= TOLERANCE_2 * d) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,946,                    d *= work[i] / (d + work[i + 2]);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,951,            d = work[pingPong];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,952,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,953,                final int j = i - 2 * pingPong - 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,954,                work[j] = d + work[i];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,955,                if (work[i] <= TOLERANCE_2 * d) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,960,                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,962,                    final double tmp = work[i + 2] / work[j];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,963,                    work[j + 2] = work[i] * tmp;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,964,                    d *= tmp;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,965,                } else {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,970,            work[4 * n - 3 - pingPong] = d;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,973,            pingPong = 1 - pingPong;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,977,    },0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,992,        g = 0.0;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,995,        int deflatedEnd = end;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,996,        for (boolean deflating = true; deflating;) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,998,            if (start >= deflatedEnd) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1003,            final int k = 4 * deflatedEnd + pingPong - 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1005,            if ((start == deflatedEnd - 1) ||,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1011,                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1012,                deflatedEnd -= 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1014,            } else if ((start == deflatedEnd - 2) ||,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1043,                deflating = false;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1047,        },0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1049,        final int l = 4 * deflatedEnd + pingPong - 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1052,        if ((dMin <= 0) || (deflatedEnd < end)) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1053,"            if (flipIfWarranted(deflatedEnd, 1)) {",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1066,        if ((dMin < 0) ||,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1071,"            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1074,            for (boolean loop = true; loop;) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1077,"                dqds(start, deflatedEnd);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1080,                if ((dMin >= 0) && (dMin1 > 0)) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1082,                    updateSigma(tau);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1083,                    return deflatedEnd;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1118,"        dqd(start, deflatedEnd);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1120,        return deflatedEnd;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1132,        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1145,        return false;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1157,        final int lowerStart = 4 * main.length;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1158,        final int upperStart = 5 * main.length;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1159,        double lower = Double.POSITIVE_INFINITY;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1160,        double upper = Double.NEGATIVE_INFINITY;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1161,        for (int i = 0; i < n; ++i) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1162,"            lower = Math.min(lower, work[lowerStart + index +i]);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1163,"            upper = Math.max(upper, work[upperStart + index +i]);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1167,"        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1168,        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1169,        final double absoluteTolerance = 4 * minPivot;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1170,        final int maxIter =,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1172,        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1175,        double left  = lower - margin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1176,        double right = upper + margin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1177,        for (int i = 0; i < maxIter; ++i) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1179,            final double range = right - left;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1180,            if ((range < absoluteTolerance) ||,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1183,                break;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1186,            final double middle = 0.5 * (left + right);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1187,"            if (countEigenValues(middle, index, n) >= 1) {",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1188,                right = middle;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1190,                left = middle;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1194,"        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1197,        left  = lower - margin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1198,        right = upper + margin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1199,        for (int i = 0; i < maxIter; ++i) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1201,            final double range = right - left;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1202,            if ((range < absoluteTolerance) ||,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1205,                break;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1208,            final double middle = 0.5 * (left + right);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1209,"            if (countEigenValues(middle, index, n) >= n) {",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1210,                right = middle;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1212,                left = middle;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1216,"        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1218,"        return new double[] { lower, upper };",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1230,        double ratio = main[index] - t;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1231,        int count = (ratio > 0) ? 0 : 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1232,        for (int i = 1; i < n; ++i) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1233,            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1234,            if (ratio <= 0) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1235,                ++count;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1238,        return count;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1253,        double di = main[index] - lambda;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1254,        work[0] = Math.abs(di);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1255,        for (int i = 1; i < n; ++i) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1256,            final int    fourI = 4 * i;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1257,            final double eiM1  = secondary[index + i - 1];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1258,            final double ratio = eiM1 / di;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1259,            work[fourI - 2] = ratio * ratio * Math.abs(di);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1260,            di = (main[index + i] - lambda) - eiM1 * ratio;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1261,            work[fourI] = Math.abs(di);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1263,    },0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1273,        eMin = work[4 * start + pingPong + 4];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1274,        double d = work[4 * start + pingPong] - tau;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1275,        dMin = d;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1276,        dMin1 = -work[4 * start + pingPong];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1278,        if (pingPong == 0) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1279,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1280,                work[j4 - 2] = d + work[j4 - 1];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1281,                final double tmp = work[j4 + 1] / work[j4 - 2];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1282,                d = d * tmp - tau;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1283,"                dMin = Math.min(dMin, d);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1284,                work[j4] = work[j4 - 1] * tmp;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1285,"                eMin = Math.min(work[j4], eMin);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1288,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1289,                work[j4 - 3] = d + work[j4];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1290,                final double tmp = work[j4 + 2] / work[j4 - 3];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1291,                d = d * tmp - tau;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1292,"                dMin = Math.min(dMin, d);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1293,                work[j4 - 1] = work[j4] * tmp;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1294,"                eMin = Math.min(work[j4 - 1], eMin);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1299,        dN2 = d;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1300,        dMin2 = dMin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1301,        int j4 = 4 * (end - 2) - pingPong - 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1302,        int j4p2 = j4 + 2 * pingPong - 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1303,        work[j4 - 2] = dN2 + work[j4p2];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1304,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1305,        dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1306,"        dMin = Math.min(dMin, dN1);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1308,        dMin1 = dMin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1309,        j4 = j4 + 4;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1310,        j4p2 = j4 + 2 * pingPong - 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1311,        work[j4 - 2] = dN1 + work[j4p2];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1312,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1313,        dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1314,"        dMin = Math.min(dMin, dN);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1316,        work[j4 + 2] = dN;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1317,        work[4 * end - pingPong - 1] = eMin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1319,    },0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1330,        eMin = work[4 * start + pingPong + 4];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1331,        double d = work[4 * start + pingPong];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1332,        dMin = d;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1334,        if (pingPong == 0) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1335,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1336,                work[j4 - 2] = d + work[j4 - 1];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1337,                if (work[j4 - 2] == 0.0) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1342,                } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1344,                    final double tmp = work[j4 + 1] / work[j4 - 2];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1345,                    work[j4] = work[j4 - 1] * tmp;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1346,                    d *= tmp;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1347,                } else {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1351,"                dMin = Math.min(dMin, d);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1352,"                eMin = Math.min(eMin, work[j4]);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1377,        dN2   = d;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1378,        dMin2 = dMin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1379,        int j4 = 4 * (end - 2) - pingPong - 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1380,        int j4p2 = j4 + 2 * pingPong - 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1381,        work[j4 - 2] = dN2 + work[j4p2];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1382,        if (work[j4 - 2] == 0.0) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1387,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1389,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1390,            work[j4] = work[j4p2] * tmp;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1391,            dN1 = dN2 * tmp;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1392,        } else {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1396,"        dMin = Math.min(dMin, dN1);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1398,        dMin1 = dMin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1399,        j4 = j4 + 4;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1400,        j4p2 = j4 + 2 * pingPong - 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1401,        work[j4 - 2] = dN1 + work[j4p2];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1402,        if (work[j4 - 2] == 0.0) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1407,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1409,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1410,            work[j4] = work[j4p2] * tmp;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1411,            dN = dN1 * tmp;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1412,        } else {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1416,"        dMin = Math.min(dMin, dN);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1418,        work[j4 + 2] = dN;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1419,        work[4 * end - pingPong - 1] = eMin;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1421,    },0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1432,        final double cnst1 = 0.563;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1433,        final double cnst2 = 1.010;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1434,        final double cnst3 = 1.05;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1438,        if (dMin <= 0.0) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1444,        int nn = 4 * end + pingPong - 1;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1445,        switch (deflated) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1448,            if (dMin == dN || dMin == dN1) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1450,                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1451,                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1452,                double a2 = work[nn - 7] + work[nn - 5];,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1454,                if (dMin == dN && dMin1 == dN1) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1456,                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1457,                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1458,                    if (gap1 > 0.0 && gap1 > b1) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1459,"                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1460,                        tType = -2;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1472,                } else {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1526,            } else if (dMin == dN2) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1672,    },0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1682,        if (shift < sigma) {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1683,            sigmaLow += shift;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1684,            final double t = sigma + sigmaLow;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1685,            sigmaLow -= t - sigma;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1686,            sigma = t;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1687,        } else {,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1688,            final double t = sigma + shift;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1689,            sigmaLow += sigma - (t - shift);,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1690,            sigma = t;,0.06667,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1692,    },0.06667,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,30,public abstract class CompositeFormat extends Format {,0.04762,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,53,        final NumberFormat nf = NumberFormat.getInstance(locale);,0.04762,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,54,        nf.setMaximumFractionDigits(2);,0.04762,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,55,        return nf;,0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,95,    },0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,117,"                            final String separator, final NumberFormat format) {",0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,118,        this.prefix      = prefix;,0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,119,        this.suffix      = suffix;,0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,120,        this.separator   = separator;,0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,121,        trimmedPrefix    = prefix.trim();,0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,122,        trimmedSuffix    = suffix.trim();,0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,123,        trimmedSeparator = separator.trim();,0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,124,        this.format      = format;,0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,125,    },0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,173,        return getInstance(Locale.getDefault());,0.04762,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0.04762,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,36,    private static final RealVectorFormat DEFAULT_FORMAT =,0.04762,0,-1,0
org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,81,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,0.03704,0,-1,0
org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,81,35,    },0.03704,0,-1,0
org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,81,44,        return 0;,0.03704,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,603,        final int nRows = getRowDimension();,0.03704,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,604,        final int nCols = getColumnDimension();,0.03704,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,605,"        final RealMatrix out = createMatrix(nCols, nRows);",0.03704,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.03704,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,616,        return out;,0.03704,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,919,        return walkInRowOrder(visitor);,0.03704,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,160,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.03704,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,482,        final int rows    = getRowDimension();,0.03704,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,483,        final int columns = getColumnDimension();,0.03704,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,484,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.03704,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,485,        for (int i = 0; i < rows; ++i) {,0.03704,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,486,            final double[] rowI = data[i];,0.03704,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,487,            for (int j = 0; j < columns; ++j) {,0.03704,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,488,"                visitor.visit(i, j, rowI[j]);",0.03704,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,491,        return visitor.end();,0.03704,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.03704,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,611,"                out.setEntry(column, row, value);",0.03704,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,612,            },0.03704,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,55,        throws IllegalArgumentException {,0.03333,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,56,        if (rowDimension <= 0 ) {,0.03333,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,61,        if (columnDimension <= 0) {,0.03333,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,66,        lu = null;,0.03333,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,67,    },0.03333,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,76,"        super(rowDimension, columnDimension);",0.03333,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,77,        data = new double[rowDimension][columnDimension];,0.03333,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,78,    },0.03333,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,367,            data[row][column] = value;,0.03333,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,372,        },0.03333,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,373,    },0.03333,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,114,"        throws IllegalArgumentException, NullPointerException {",0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,115,        if (copyArray) {,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,118,            if (d == null) {,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,121,            final int nRows = d.length;,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,122,            if (nRows == 0) {,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,125,            final int nCols = d[0].length;,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,126,            if (nCols == 0) {,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,129,            for (int r = 1; r < nRows; r++) {,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,130,                if (d[r].length != nCols) {,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,136,            data = d;,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,138,    },0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,254,            return multiply((Array2DRowRealMatrix) m);,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,271,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,273,        final int nRows = this.getRowDimension();,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,274,        final int nCols = m.getColumnDimension();,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,275,        final int nSum = this.getColumnDimension();,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,276,        final double[][] outData = new double[nRows][nCols];,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,277,        for (int row = 0; row < nRows; row++) {,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,278,            final double[] dataRow    = data[row];,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,279,            final double[] outDataRow = outData[row];,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,280,            for (int col = 0; col < nCols; col++) {,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,281,                double sum = 0;,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,282,                for (int i = 0; i < nSum; i++) {,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,283,                    sum += dataRow[i] * m.data[i][col];,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,285,                outDataRow[col] = sum;,0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,289,"        return new Array2DRowRealMatrix(outData, false);",0.03125,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,650,        if (left.getColumnDimension() != right.getRowDimension()) {,0.03125,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,656,    },0.03125,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,94,"        throws IllegalArgumentException, NullPointerException {",0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,95,        copyIn(d);,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,96,    },0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,314,        if (data == null) {,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,315,            if (row > 0) {,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,320,            if (column > 0) {,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,325,            final int nRows = subMatrix.length;,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,326,            if (nRows == 0) {,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,330,            final int nCols = subMatrix[0].length;,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,331,            if (nCols == 0) {,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,334,            data = new double[subMatrix.length][nCols];,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,335,            for (int i = 0; i < data.length; ++i) {,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,336,                if (subMatrix[i].length != nCols) {,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,341,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,343,        } else {,0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,347,    },0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,622,"        setSubMatrix(in, 0, 0);",0.0303,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,623,    },0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,581,            final double dCurrent = main[i];,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,582,            final double ePrevious = eCurrent;,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,583,            eCurrent = Math.abs(secondary[i]);,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,584,"            eMax = Math.max(eMax, eCurrent);",0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,585,            final double radius = ePrevious + eCurrent;,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,587,            final double lower = dCurrent - radius;,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,588,            work[lowerStart + i] = lower;,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,589,"            lowerSpectra = Math.min(lowerSpectra, lower);",0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,591,            final double upper = dCurrent + radius;,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,592,            work[upperStart + i] = upper;,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,593,"            upperSpectra = Math.max(upperSpectra, upper);",0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,697,            final double absDPrevious = absDCurrent;,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,698,            absDCurrent = Math.abs(main[i + 1]);,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,699,            final double max = splitTolerance * Math.sqrt(absDPrevious * absDCurrent);,0.0303,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,700,            if (Math.abs(secondary[i]) <= max) {,0.0303,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,106,        return (data.length * data[0].length <= 4096) ?,0.0303,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,43,    protected AbstractRealMatrix() {,0.02941,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,44,        lu = null;,0.02941,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,45,    },0.02941,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,404,        return (data == null) ? 0 : data.length;,0.02941,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,237,        cachedV  = null;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,238,        cachedD  = null;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,239,        cachedVt = null;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,240,        work     = new double[6 * main.length];,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,243,        computeGershgorinCircles();,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,246,        findEigenvalues();,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,571,        final int m     = main.length;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,572,        final int lowerStart = 4 * m;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,573,        final int upperStart = 5 * m;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,574,        lowerSpectra = Double.POSITIVE_INFINITY;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,575,        upperSpectra = Double.NEGATIVE_INFINITY;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,576,        double eMax = 0;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,578,        double eCurrent = 0;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,579,        for (int i = 0; i < m - 1; ++i) {,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,597,        final double dCurrent = main[m - 1];,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,598,        final double lower = dCurrent - eCurrent;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,599,        work[lowerStart + m - 1] = lower;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,600,"        lowerSpectra = Math.min(lowerSpectra, lower);",0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,601,        final double upper = dCurrent + eCurrent;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,602,        work[upperStart + m - 1] = upper;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,603,"        minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);",0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,605,    },0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,615,        List<Integer> splitIndices = computeSplits();,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,618,        realEigenvalues = new double[main.length];,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,619,        imagEigenvalues = new double[main.length];,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,620,        int begin = 0;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,621,        for (final int end : splitIndices) {,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,622,            final int n = end - begin;,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,623,            switch (n) {,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,692,        final List<Integer> list = new ArrayList<Integer>();,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,695,        double absDCurrent = Math.abs(main[0]);,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,696,        for (int i = 0; i < secondary.length; ++i) {,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,707,        list.add(secondary.length + 1);,0.02941,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,708,        return list;,0.02941,0,-1,0
org/apache/commons/math/MathRuntimeException,81,259,        return new EOFException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,267,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,273,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,59,"    public MathRuntimeException(final String pattern, final Object ... arguments) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,60,        this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,61,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,62,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,72,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,73,        this.pattern   = getMessage();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,74,        this.arguments = new Object[0];,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,75,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,88,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,89,        this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,90,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,91,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,102,            ResourceBundle bundle =,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,104,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,106,                return bundle.getString(s);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,111,        },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,109,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,115,        return s;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,128,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,136,        return pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,144,        return arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,154,"        return buildMessage(locale, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,160,        return getMessage(Locale.US);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,166,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,174,        printStackTrace(System.err);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,175,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,184,        synchronized (out) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,185,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,186,            printStackTrace(pw);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,188,            pw.flush();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,189,        },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,190,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,201,        return new ArithmeticException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,230,        return new ArrayIndexOutOfBoundsException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,259,        return new EOFException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,291,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,292,        ioe.initCause(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,293,        return ioe;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,305,        return new IllegalArgumentException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,333,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,334,        iae.initCause(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,335,        return iae;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,347,        return new IllegalStateException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,376,        return new ConcurrentModificationException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,405,        return new NoSuchElementException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,434,        return new NullPointerException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,466,"        return new ParseException(null, offset) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,492,"        final String pattern  = ""internal error, please fill a bug report at {0}"";",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,493,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,495,        return new RuntimeException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,37,public class MathRuntimeException extends RuntimeException {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,42,        return getDefaultNumberFormat(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,67,"        parseNextCharacter(source, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,68,        pos.setIndex(pos.getIndex() - 1);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,69,    },0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,80,         int index = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,81,         final int n = source.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,82,         char ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,84,         if (index < n) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,87,                 c = source.charAt(index++);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,88,             } while (Character.isWhitespace(c) && index < n);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,89,             pos.setIndex(index);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,91,             if (index < n) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,92,                 ret = c;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,96,         return ret;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,110,        Number ret = null;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,112,        StringBuffer sb = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,113,        sb.append('(');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,114,        sb.append(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,115,        sb.append(')');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,117,        final int n = sb.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,118,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,119,        final int endIndex = startIndex + n;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,120,        if (endIndex < source.length()) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,121,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,122,                ret = Double.valueOf(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,123,                pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,127,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,142,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,143,"        Number number = format.parse(source, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,144,        final int endIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,147,        if (startIndex == endIndex) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,149,            final double[] special = {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,152,            for (int i = 0; i < special.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,153,"                number = parseNumber(source, special[i], pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,154,                if (number != null) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,155,                    break;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,160,        return number;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,173,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,174,        final int endIndex = startIndex + expected.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,175,        if ((startIndex >= source.length()) ||,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,179,            pos.setIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,180,            pos.setErrorIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,181,            return false;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,185,        pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,186,        return true;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,210,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,211,            toAppendTo.append('(');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,212,            toAppendTo.append(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,213,            toAppendTo.append(')');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,215,"            format.format(value, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,81,217,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math/MathException,81,55,    public MathException() {,0.0,0,-1,0
org/apache/commons/math/MathException,81,56,        this.pattern   = null;,0.0,0,-1,0
org/apache/commons/math/MathException,81,57,        this.arguments = new Object[0];,0.0,0,-1,0
org/apache/commons/math/MathException,81,58,    },0.0,0,-1,0
org/apache/commons/math/MathException,81,67,"    public MathException(String pattern, Object ... arguments) {",0.0,0,-1,0
org/apache/commons/math/MathException,81,68,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,81,69,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,81,70,    },0.0,0,-1,0
org/apache/commons/math/MathException,81,80,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathException,81,81,        this.pattern   = getMessage();,0.0,0,-1,0
org/apache/commons/math/MathException,81,82,        this.arguments = new Object[0];,0.0,0,-1,0
org/apache/commons/math/MathException,81,83,    },0.0,0,-1,0
org/apache/commons/math/MathException,81,96,      super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathException,81,97,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,81,98,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,81,99,    },0.0,0,-1,0
org/apache/commons/math/MathException,81,110,            ResourceBundle bundle =,0.0,0,-1,0
org/apache/commons/math/MathException,81,112,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math/MathException,81,114,                return bundle.getString(s);,0.0,0,-1,0
org/apache/commons/math/MathException,81,119,        },0.0,0,-1,0
org/apache/commons/math/MathException,81,117,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math/MathException,81,123,        return s;,0.0,0,-1,0
org/apache/commons/math/MathException,81,133,        return pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,81,142,        return arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,81,153,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",0.0,0,-1,0
org/apache/commons/math/MathException,81,159,        return getMessage(Locale.US);,0.0,0,-1,0
org/apache/commons/math/MathException,81,165,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/MathException,81,173,        printStackTrace(System.err);,0.0,0,-1,0
org/apache/commons/math/MathException,81,174,    },0.0,0,-1,0
org/apache/commons/math/MathException,81,183,        synchronized (out) {,0.0,0,-1,0
org/apache/commons/math/MathException,81,184,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,-1,0
org/apache/commons/math/MathException,81,185,            printStackTrace(pw);,0.0,0,-1,0
org/apache/commons/math/MathException,81,187,            pw.flush();,0.0,0,-1,0
org/apache/commons/math/MathException,81,188,        },0.0,0,-1,0
org/apache/commons/math/MathException,81,189,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,230,        return new ArrayIndexOutOfBoundsException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,238,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,244,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,434,        return new NullPointerException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,442,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,448,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,466,"        return new ParseException(null, offset) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,474,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,480,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,201,        return new ArithmeticException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,209,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,215,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,347,        return new IllegalStateException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,355,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,361,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,721,            super(BigFraction.ZERO);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,722,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,728,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,729,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,734,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,735,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,741,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,714,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,677,            super(Fraction.ZERO);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,678,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,684,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,685,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,690,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,691,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,697,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,670,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,347,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,360,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,361,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,362,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,367,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,368,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,44,    protected AbstractFieldMatrix() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,45,        field = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,46,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,52,    protected AbstractFieldMatrix(final Field<T> field) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,53,        this.field = field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,54,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,66,        throws IllegalArgumentException {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,67,        if (rowDimension <= 0 ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,68,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,72,        if (columnDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,73,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,77,        this.field = field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,78,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,89,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,90,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,92,        if (d[0].length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,93,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,95,        return d[0][0].getField();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,107,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,108,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,110,        return d[0].getField();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,128,        if (columns < 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,129,"            T[] dummyRow = (T[]) Array.newInstance(field.getZero().getClass(), 0);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,130,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,132,        T[][] array =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,134,        for (int i = 0; i < array.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,135,"            Arrays.fill(array[i], field.getZero());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,137,        return array;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,152,"        T[] array = (T[]) Array.newInstance(field.getZero().getClass(), length);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,153,"        Arrays.fill(array, field.getZero());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,154,        return array;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,159,        return field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,173,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,175,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,176,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,177,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,178,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,179,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,180,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,184,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,192,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,194,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,195,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,196,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,197,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,198,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,199,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,203,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,210,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,211,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,212,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,213,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,214,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,215,"                out.setEntry(row, col, getEntry(row, col).add(d));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,219,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,226,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,227,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,228,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,229,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,230,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,231,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,235,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,244,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,246,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,247,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,248,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,249,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,250,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,251,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,252,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,253,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,254,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,256,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,260,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,267,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,273,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,275,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,276,            final T[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,277,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,278,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,282,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,291,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,293,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,295,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,296,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,297,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,301,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,310,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,313,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,315,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,325,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,336,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,337,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,338,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,340,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,347,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,372,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,379,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,380,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,382,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,389,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,390,            final T[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,391,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,392,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,396,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,402,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,403,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,404,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,407,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,408,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,409,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,412,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,413,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,414,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,420,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,421,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,422,        checkRowIndex(nRows + row - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,423,        checkColumnIndex(nCols + column - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,425,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,426,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,427,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,431,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,437,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,438,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,439,"        final FieldMatrix<T> out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,440,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,441,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,444,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,452,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,453,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,454,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,456,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,460,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,461,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,464,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,470,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,471,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,472,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,473,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,474,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,477,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,485,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,486,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,487,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,489,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,493,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,494,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,497,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,502,"        return new ArrayFieldVector<T>(getRow(row), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,509,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,510,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,511,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,512,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,516,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,517,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,520,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,525,"        return new ArrayFieldVector<T>(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,532,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,533,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,534,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,535,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,539,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,540,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,543,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,549,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,550,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,551,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,552,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,553,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,556,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,564,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,565,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,566,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,567,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,571,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,572,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,575,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,581,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,582,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,583,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,584,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,585,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,588,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,596,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,597,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,598,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,599,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,603,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,604,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,607,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,628,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,629,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,630,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,631,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,641,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,647,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,659,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,660,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,661,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,662,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,664,        T trace = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,665,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,666,"            trace = trace.add(getEntry(i, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,668,        return trace;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,675,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,676,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,677,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,678,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,683,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,684,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,685,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,686,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,687,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,689,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,692,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,700,"            return new ArrayFieldVector<T>(operate(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,701,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,702,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,703,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,704,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,705,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,710,"            final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,711,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,712,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,713,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,714,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,716,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,719,"            return new ArrayFieldVector<T>(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,727,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,728,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,729,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,730,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,735,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,736,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,737,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,738,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,739,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,741,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,744,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,752,"            return new ArrayFieldVector<T>(preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,753,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,755,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,756,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,757,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,758,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,763,"            final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,764,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,765,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,766,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,767,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,769,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,772,            return new ArrayFieldVector<T>(out);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,780,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,781,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,783,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,784,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,785,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,786,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,787,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,790,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,796,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,797,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,798,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,799,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,800,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,801,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,804,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,812,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,813,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,815,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,816,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,817,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,818,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,819,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,822,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,830,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,831,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,833,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,834,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,835,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,838,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,844,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,845,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,846,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,847,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,848,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,849,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,850,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,851,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,854,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,860,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,861,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,862,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,863,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,864,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,865,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,868,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,876,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,877,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,879,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,880,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,881,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,882,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,883,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,886,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,894,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,895,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,897,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,898,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,899,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,902,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,908,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,914,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,922,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,930,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,939,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,940,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,941,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,942,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,943,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,944,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,946,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,947,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,948,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,950,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,951,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,952,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,953,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,955,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,957,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,960,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,961,        return res.toString();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,976,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,977,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,979,        if (object instanceof FieldMatrix == false) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,980,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,982,        FieldMatrix<T> m = (FieldMatrix<T>) object;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,983,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,984,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,985,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,986,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,988,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,989,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,990,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,991,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,995,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1005,        int ret = 322562;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1006,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1007,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1008,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1009,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1010,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1011,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1012,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1015,        return ret;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1024,        if (row < 0 || row >= getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1025,"            throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"",",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1028,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1037,        if (column < 0 || column >= getColumnDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1038,"            throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"",",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1041,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1055,        checkRowIndex(startRow);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1056,        checkRowIndex(endRow);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1057,        if (startRow > endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1058,"            throw new MatrixIndexException(""initial row {0} after final row {1}"",",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1062,        checkColumnIndex(startColumn);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1063,        checkColumnIndex(endColumn);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1064,        if (startColumn > endColumn) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1065,"            throw new MatrixIndexException(""initial column {0} after final column {1}"",",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1070,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1081,        if (selectedRows.length * selectedColumns.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1082,            if (selectedRows.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1083,"                throw new MatrixIndexException(""empty selected row index array"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1085,"            throw new MatrixIndexException(""empty selected column index array"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1088,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1089,            checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1091,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1092,            checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1094,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1102,        if ((getRowDimension()    != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1104,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1109,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1117,        if ((getRowDimension()    != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1119,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1124,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1132,        if (getColumnDimension() != m.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1133,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,1138,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,333,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,334,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,335,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,340,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,341,            },0.0,0,-1,0
org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,81,40,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,57,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,62,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,80,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,82,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,83,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,84,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,85,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,86,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,87,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,91,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,99,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,101,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,102,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,103,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,104,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,105,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,106,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,110,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,117,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,118,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,119,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,120,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,121,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,122,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,126,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,133,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,134,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,135,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,136,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,137,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,138,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,142,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,151,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,153,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,154,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,155,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,156,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,157,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,158,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,159,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,160,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,161,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,163,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,167,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,174,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,180,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,182,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,183,            final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,184,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,185,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,189,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,264,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,266,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,268,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,269,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,270,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,274,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,283,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,286,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,298,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,309,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,310,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,311,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,312,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,313,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,345,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,352,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,353,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,355,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,362,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,363,            final double[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,364,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,365,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,369,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,375,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,376,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,377,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,380,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,381,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,382,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,385,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,386,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,387,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,393,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,394,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,395,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,396,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,398,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,399,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,400,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,404,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,406,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,412,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,413,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,414,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,415,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,416,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,419,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,427,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,428,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,429,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,431,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,435,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,436,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,439,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,445,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,446,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,447,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,448,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,449,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,452,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,460,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,461,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,462,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,464,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,468,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,469,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,472,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,477,"        return new ArrayRealVector(getRow(row), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,484,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,485,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,486,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,487,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,491,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,492,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,495,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,500,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,507,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,508,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,509,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,510,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,514,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,515,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,518,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,524,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,525,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,526,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,527,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,528,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,531,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,539,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,540,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,541,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,542,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,546,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,547,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,550,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,556,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,557,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,558,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,559,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,560,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,563,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,571,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,572,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,573,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,574,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,578,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,579,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,582,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,624,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,625,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,627,        return lu.getInverse();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,634,"        return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,639,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,645,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,646,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,648,        return !lu.isNonSingular();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,660,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,661,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,662,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,663,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,665,        double trace = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,666,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,667,"            trace += getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,669,        return trace;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,676,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,677,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,678,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,679,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,684,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,685,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,686,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,687,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,688,"                sum += getEntry(row, i) * v[i];",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,690,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,693,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,701,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,702,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,703,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,704,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,705,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,706,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,711,            final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,712,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,713,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,714,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,715,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,717,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,720,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,728,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,729,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,730,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,731,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,736,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,737,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,738,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,739,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,740,"                sum += getEntry(i, col) * v[i];",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,742,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,745,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,753,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,754,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,756,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,757,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,758,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,759,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,764,            final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,765,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,766,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,767,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,768,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,770,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,773,            return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,781,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,782,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,783,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,784,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,785,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,786,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,787,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,788,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,791,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,792,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,798,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,799,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,800,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,801,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,802,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,803,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,806,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,814,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,815,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,817,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,818,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,819,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,820,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,821,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,824,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,825,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,833,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,834,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,836,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,837,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,838,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,841,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,847,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,848,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,849,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,850,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,851,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,852,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,853,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,854,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,857,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,858,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,864,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,865,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,866,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,867,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,868,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,869,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,872,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,880,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,881,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,883,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,884,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,885,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,886,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,887,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,890,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,891,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,899,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,900,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,902,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,903,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,904,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,907,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,913,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,927,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,935,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,942,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,943,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,945,        return lu.solve(b);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,952,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,953,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,955,        return lu.solve(b);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,980,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,981,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,983,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,991,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,992,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,993,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,994,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,996,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,998,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,999,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1000,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1002,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1003,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1004,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1005,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1007,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1009,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1012,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1013,        return res.toString();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1027,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1028,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1030,        if (object instanceof RealMatrix == false) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1031,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1033,        RealMatrix m = (RealMatrix) object;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1034,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1035,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1036,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1037,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1039,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1040,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1041,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1042,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1046,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1056,        int ret = 7;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1057,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1058,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1059,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1060,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1061,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1062,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1063,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,1067,        return ret;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,63,    public Array2DRowRealMatrix() {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,64,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,116,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,119,                throw new NullPointerException();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,123,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,127,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,131,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,148,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,149,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,150,        data = new double[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,151,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,152,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,154,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,166,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,174,            return add((Array2DRowRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,175,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,176,            return super.add(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,191,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,193,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,194,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,195,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,196,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,197,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,198,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,199,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,200,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,201,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,205,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,214,            return subtract((Array2DRowRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,215,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,216,            return super.subtract(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,231,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,233,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,234,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,235,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,236,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,237,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,238,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,239,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,240,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,241,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,245,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,255,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,256,            return super.multiply(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,296,        return copyOut();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,307,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,316,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,321,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,327,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,332,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,337,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,344,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,354,            return data[row][column];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,355,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,356,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,368,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,369,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,380,            data[row][column] += increment;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,385,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,381,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,382,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,386,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,393,            data[row][column] *= factor;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,398,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,394,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,395,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,399,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,417,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,418,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,419,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,420,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,424,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,425,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,426,            final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,427,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,428,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,429,                sum += dataRow[i] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,431,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,433,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,441,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,442,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,443,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,444,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,449,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,450,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,451,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,452,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,453,                sum += data[i][col] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,455,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,458,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,466,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,467,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,468,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,469,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,470,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,471,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,472,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,475,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,500,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,501,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,503,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,504,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,505,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,506,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,509,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,518,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,519,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,521,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,522,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,523,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,524,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,527,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,534,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,535,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,536,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,537,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,538,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,539,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,540,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,543,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,550,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,551,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,552,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,553,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,554,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,555,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,558,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,567,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,568,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,570,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,571,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,572,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,573,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,576,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,585,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,586,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,588,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,589,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,590,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,593,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,602,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,603,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,605,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,606,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,81,608,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/NonSquareMatrixException,81,37,"        super(""a {0}x{1} matrix was provided instead of a square matrix"",",0.0,0,-1,0
org/apache/commons/math/linear/NonSquareMatrixException,81,39,    },0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,81,40,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,81,41,    },0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,81,50,        super(cause);,0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,81,51,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixIndexException,81,38,"      super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixIndexException,81,39,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,210,                this.endRow = endRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,211,                columnSum   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,212,                maxColSum   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,213,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,217,                columnSum += Math.abs(value);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,218,                if (row == endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,219,"                    maxColSum = Math.max(maxColSum, columnSum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,220,                    columnSum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,222,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,226,                return maxColSum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,101,"        super(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,102,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,103,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,106,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,107,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,110,"        blocks = createBlocksLayout(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,112,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,129,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,130,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,151,"        super(extractField(blockData), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,152,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,153,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,156,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,157,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,159,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,161,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,164,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,167,        int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,168,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,169,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,170,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,171,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,172,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,176,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,177,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,182,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,211,        final int rows         = rawData.length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,212,        final int columns      = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,213,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,214,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,217,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,218,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,219,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,220,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,227,        final Field<T> field = extractField(rawData);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,228,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,229,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,230,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,231,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,232,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,233,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,234,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,235,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,236,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,237,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,240,"                final T[] block = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,241,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,244,                int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,245,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,246,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,247,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,250,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,255,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,277,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,278,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,280,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,281,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,282,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,283,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,284,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,285,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,286,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,287,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,288,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,289,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,290,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,291,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,295,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,303,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,311,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,314,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,315,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,318,        return copied;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,327,            return add((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,328,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,331,            checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,333,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,336,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,337,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,338,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,341,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,342,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,343,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,344,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,345,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,346,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,347,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,348,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,349,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,350,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,351,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,356,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,361,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,377,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,379,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,382,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,383,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,384,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,385,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,386,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,387,                outBlock[k] = tBlock[k].add(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,391,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,400,            return subtract((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,401,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,404,            checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,406,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,409,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,410,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,411,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,414,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,415,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,416,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,417,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,418,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,419,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,420,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,421,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,422,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,423,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,424,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,429,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,434,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,450,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,452,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,455,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,456,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,457,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,458,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,459,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,460,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,464,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,473,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,476,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,477,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,478,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,479,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,480,                outBlock[k] = tBlock[k].add(d);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,484,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,493,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,496,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,497,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,498,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,499,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,500,                outBlock[k] = tBlock[k].multiply(d);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,504,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,513,            return multiply((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,514,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,517,            checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,519,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,520,            final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,523,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,524,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,526,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,527,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,529,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,531,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,532,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,535,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,538,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,539,                        final int kWidth      = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,540,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,541,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,542,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,543,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,544,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,545,                            final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,546,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,547,                                T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,548,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,549,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,550,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,551,                                    ++r;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,553,                                outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,554,                                ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,560,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,565,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,581,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,583,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,584,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,587,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,588,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,590,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,591,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,593,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,594,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,595,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,596,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,597,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,600,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,603,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,604,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,605,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,606,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,607,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,608,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,609,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,610,                        final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,611,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,612,                            T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,613,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,614,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,615,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,616,                                sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,621,                                l += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,622,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,624,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,625,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,626,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,628,                            outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,629,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,635,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,640,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,648,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,649,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,651,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,652,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,653,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,654,            int regularPos   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,655,            int lastPos      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,656,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,657,                final T[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,658,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,659,                int dataPos    = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,660,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,661,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,662,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,664,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,665,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,666,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,670,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,681,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,684,        final BlockFieldMatrix<T> out =,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,688,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,689,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,690,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,691,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,694,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,695,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,696,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,697,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,698,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,699,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,702,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,703,                final T[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,704,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,705,                final int      width    = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,707,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,708,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,709,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,711,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,713,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,714,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,718,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,722,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,726,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,730,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,732,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,736,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,743,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,745,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,746,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,750,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,754,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,756,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,763,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,766,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,770,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,794,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,795,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,796,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,797,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,798,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,799,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,800,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,802,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,810,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,811,        if (refLength < 1) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,812,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,814,        final int endRow    = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,815,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,816,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,817,        for (final T[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,818,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,819,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,826,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,827,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,828,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,829,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,832,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,833,            final int iHeight  = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,834,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,835,"            final int iStart   = Math.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,836,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,838,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,839,                final int jWidth      = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,840,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,841,"                final int jStart      = Math.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,842,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,843,                final int jLength     = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,846,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,847,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,848,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,855,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,862,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,863,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,866,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,867,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,868,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,869,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,870,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,871,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,872,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,873,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,874,            final int available  = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,875,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,876,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,877,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,878,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,879,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,881,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,882,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,886,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,895,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,898,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,896,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,897,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,899,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,915,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,916,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,917,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,919,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,926,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,927,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,928,        int mBlockIndex  = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,929,        int mIndex       = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,930,        T[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,931,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,932,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,933,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,934,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,935,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,936,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,937,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,938,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,939,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,941,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,942,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,946,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,953,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,954,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,957,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,958,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,959,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,960,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,961,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,962,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,963,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,964,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,965,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,966,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,967,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,968,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,969,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,971,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,975,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,984,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,987,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,985,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,986,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,988,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1004,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1005,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1006,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1008,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1015,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1016,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1017,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1018,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1019,        int mIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1020,        T[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1021,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1022,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1023,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1024,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1025,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1026,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1027,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1029,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1033,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1040,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1041,"        final T[] outData = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1044,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1045,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1046,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1047,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1048,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1049,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1050,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1051,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1054,"        return new ArrayFieldVector<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1063,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1066,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1064,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1065,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1067,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1074,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1075,"        final T[] outData = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1078,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1079,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1080,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1081,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1082,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1083,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1084,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1085,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1086,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1090,"        return new ArrayFieldVector<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1099,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1102,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1100,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1101,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1103,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1110,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1111,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1114,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1115,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1116,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1117,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1118,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1119,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1120,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1121,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1124,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1133,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1134,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1135,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1136,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1142,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1143,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1144,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1145,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1146,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1147,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1148,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1149,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1152,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1159,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1160,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1163,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1164,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1165,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1166,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1167,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1168,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1169,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1170,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1171,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1175,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1184,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1185,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1186,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1187,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1193,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1194,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1195,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1196,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1197,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1198,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1199,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1200,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1201,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1205,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1212,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1213,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1214,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1216,            return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1217,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1218,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1229,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1230,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1231,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1233,            blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1238,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1234,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1235,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1239,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1246,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1247,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1248,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1250,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1251,            blockIJ[k] = blockIJ[k].add(increment);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1256,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1252,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1253,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1257,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1264,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1265,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1266,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1268,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1269,            blockIJ[k] = blockIJ[k].multiply(factor);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1274,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1270,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1271,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1275,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1281,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1282,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1283,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1286,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1287,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1288,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1291,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1292,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1293,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1294,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1295,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1296,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1297,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1298,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1299,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1300,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1301,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1302,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1303,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1304,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1309,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1314,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1321,        return rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1327,        return columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1335,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1336,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1340,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1341,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1344,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1345,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1346,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1347,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1348,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1349,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1350,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1351,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1352,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1353,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1354,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1355,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1356,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1361,                        k += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1362,                        q += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1364,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1365,                        sum = sum.add(block[k++].multiply(v[q++]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1367,                    out[p] = out[p].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1372,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1381,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1382,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1386,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1387,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1390,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1391,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1392,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1393,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1394,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1395,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1396,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1397,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1398,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1399,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1400,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1401,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1402,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1403,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1404,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1405,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1406,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1411,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1412,                        p += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1414,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1415,                        sum = sum.add(block[k].multiply(v[p++]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1416,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1418,                    out[q] = out[q].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1423,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1431,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1432,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1433,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1434,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1435,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1436,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1437,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1438,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1439,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1440,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1441,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1442,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1443,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1444,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1449,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1457,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1458,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1459,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1460,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1461,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1462,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1463,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1464,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1465,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1466,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1467,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1468,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1469,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1474,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1483,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1484,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1485,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1486,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1487,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1488,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1489,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1490,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1491,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1492,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1493,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1494,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1495,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1496,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1497,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1498,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1499,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1504,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1513,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1514,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1515,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1516,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1517,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1518,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1519,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1520,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1521,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1522,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1523,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1524,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1525,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1526,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1527,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1528,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1529,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1534,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1541,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1542,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1543,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1544,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1545,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1546,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1547,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1548,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1549,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1550,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1551,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1552,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1553,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1554,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1557,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1560,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1567,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1568,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1569,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1570,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1571,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1572,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1573,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1574,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1575,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1576,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1577,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1578,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1579,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1580,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1583,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1586,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1595,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1596,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1597,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1598,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1599,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1600,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1601,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1602,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1603,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1604,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1605,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1606,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1607,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1608,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1609,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1610,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1611,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1616,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1625,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1626,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1627,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1628,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1629,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1630,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1631,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1632,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1633,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1634,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1635,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1636,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1637,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1638,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1639,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1640,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1641,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1646,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1655,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,81,1664,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,243,                sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,244,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,248,                sum += value * value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,249,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,253,                return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,86,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, getDefaultNumberFormat());",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,87,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,105,"        this(prefix, suffix, separator, getDefaultNumberFormat());",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,106,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,133,        return NumberFormat.getAvailableLocales();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,141,        return prefix;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,149,        return suffix;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,157,        return separator;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,165,        return format;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,193,        return getInstance().format(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,207,        pos.setBeginIndex(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,208,        pos.setEndIndex(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,211,        toAppendTo.append(prefix);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,214,        for (int i = 0; i < vector.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,215,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,216,                toAppendTo.append(separator);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,218,"            formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,222,        toAppendTo.append(suffix);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,224,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,244,        if (obj instanceof RealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,245,"            return format( (RealVector)obj, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,248,        throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,262,        ParsePosition parsePosition = new ParsePosition(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,263,"        ArrayRealVector result = parse(source, parsePosition);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,264,        if (parsePosition.getIndex() == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,265,            throw MathRuntimeException.createParseException(,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,269,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,279,        int initialIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,282,"        parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,283,"        if (!parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,284,            return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,288,        List<Number> components = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,289,        for (boolean loop = true; loop;){,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,291,            if (!components.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,292,"                parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,293,"                if (!parseFixedstring(source, trimmedSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,294,                    loop = false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,298,            if (loop) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,299,"                parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,300,"                Number component = parseNumber(source, format, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,301,                if (component != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,302,                    components.add(component);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,306,                    pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,307,                    return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,309,            },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,314,"        parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,315,"        if (!parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,316,            return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,320,        double[] data = new double[components.size()];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,321,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,322,            data[i] = components.get(i).doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,324,"        return new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,81,337,"        return parse(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,51,    public ArrayRealVector() {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,52,        data = new double[0];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,53,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,59,    public ArrayRealVector(int size) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,60,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,61,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,68,"    public ArrayRealVector(int size, double preset) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,69,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,70,"        Arrays.fill(data, preset);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,71,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,96,"        throws NullPointerException, IllegalArgumentException {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,97,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,98,            throw new NullPointerException();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,100,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,101,"            throw MathRuntimeException.createIllegalArgumentException(""vector must have at least one element"");",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,103,        data = copyArray ? d.clone() :  d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,104,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,112,"    public ArrayRealVector(double[] d, int pos, int size) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,113,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,114,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,118,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,119,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,120,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,126,    public ArrayRealVector(Double[] d) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,127,        data = new double[d.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,128,        for (int i = 0; i < d.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,129,            data[i] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,131,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,139,"    public ArrayRealVector(Double[] d, int pos, int size) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,140,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,141,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,145,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,146,        for (int i = pos; i < pos + size; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,147,            data[i-pos] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,149,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,155,    public ArrayRealVector(RealVector v) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,156,        data = new double[v.getDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,157,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,158,            data[i] = v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,160,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,166,    public ArrayRealVector(ArrayRealVector v) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,167,        data = v.data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,168,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,176,        data = deep ? v.data.clone() : v.data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,177,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,184,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,185,        data = new double[v1.data.length + v2.data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,186,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,187,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,188,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,195,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,196,        data = new double[v1.data.length + v2.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,197,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,198,"        System.arraycopy(v2, 0, data, v1.data.length, v2.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,199,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,206,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,207,        data = new double[v1.length + v2.data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,208,"        System.arraycopy(v1, 0, data, 0, v1.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,209,"        System.arraycopy(v2.data, 0, data, v1.length, v2.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,210,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,217,"    public ArrayRealVector(double[] v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,218,        data = new double[v1.length + v2.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,219,"        System.arraycopy(v1, 0, data, 0, v1.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,220,"        System.arraycopy(v2, 0, data, v1.length, v2.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,221,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,225,"        return new ArrayRealVector(this, true);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,232,            return add((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,233,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,234,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,235,            double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,236,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,237,                out[i] = data[i] + v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,239,            return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,246,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,247,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,248,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,249,            out[i] = data[i] + v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,251,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,262,        return (ArrayRealVector) add(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,269,            return subtract((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,270,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,271,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,272,            double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,273,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,274,                out[i] = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,276,            return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,283,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,284,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,285,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,286,            out[i] = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,288,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,299,        return (ArrayRealVector) subtract(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,304,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,305,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,306,            out[i] = data[i] + d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,308,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,313,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,314,            data[i] = data[i] + d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,316,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,321,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,322,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,323,            out[i] = data[i] - d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,325,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,330,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,331,            data[i] = data[i] - d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,333,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,338,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,339,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,340,            out[i] = data[i] * d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,342,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,347,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,348,            data[i] = data[i] * d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,350,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,355,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,356,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,357,            out[i] = data[i] / d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,359,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,364,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,365,            data[i] = data[i] / d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,367,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,372,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,373,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,374,"            out[i] = Math.pow(data[i], d);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,376,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,381,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,382,"            data[i] = Math.pow(data[i], d);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,384,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,389,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,390,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,391,            out[i] = Math.exp(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,393,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,398,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,399,            data[i] = Math.exp(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,401,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,406,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,407,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,408,            out[i] = Math.expm1(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,410,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,415,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,416,            data[i] = Math.expm1(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,418,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,423,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,424,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,425,            out[i] = Math.log(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,427,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,432,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,433,            data[i] = Math.log(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,435,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,440,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,441,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,442,            out[i] = Math.log10(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,444,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,449,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,450,            data[i] = Math.log10(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,452,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,457,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,458,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,459,            out[i] = Math.log1p(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,461,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,466,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,467,            data[i] = Math.log1p(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,469,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,474,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,475,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,476,            out[i] = Math.cosh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,478,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,483,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,484,            data[i] = Math.cosh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,486,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,491,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,492,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,493,            out[i] = Math.sinh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,495,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,500,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,501,            data[i] = Math.sinh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,503,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,508,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,509,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,510,            out[i] = Math.tanh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,512,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,517,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,518,            data[i] = Math.tanh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,520,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,525,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,526,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,527,            out[i] = Math.cos(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,529,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,534,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,535,            data[i] = Math.cos(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,537,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,542,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,543,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,544,            out[i] = Math.sin(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,546,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,551,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,552,            data[i] = Math.sin(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,554,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,559,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,560,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,561,            out[i] = Math.tan(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,563,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,568,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,569,            data[i] = Math.tan(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,571,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,576,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,577,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,578,            out[i] = Math.acos(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,580,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,585,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,586,            data[i] = Math.acos(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,588,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,593,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,594,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,595,            out[i] = Math.asin(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,597,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,602,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,603,            data[i] = Math.asin(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,605,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,610,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,611,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,612,            out[i] = Math.atan(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,614,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,619,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,620,            data[i] = Math.atan(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,622,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,627,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,628,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,629,            out[i] = 1.0 / data[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,631,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,636,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,637,            data[i] = 1.0 / data[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,639,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,644,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,645,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,646,            out[i] = Math.abs(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,648,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,653,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,654,            data[i] = Math.abs(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,656,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,661,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,662,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,663,            out[i] = Math.sqrt(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,665,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,670,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,671,            data[i] = Math.sqrt(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,673,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,678,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,679,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,680,            out[i] = Math.cbrt(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,682,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,687,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,688,            data[i] = Math.cbrt(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,690,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,695,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,696,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,697,            out[i] = Math.ceil(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,699,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,704,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,705,            data[i] = Math.ceil(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,707,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,712,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,713,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,714,            out[i] = Math.floor(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,716,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,721,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,722,            data[i] = Math.floor(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,724,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,729,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,730,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,731,            out[i] = Math.rint(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,733,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,738,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,739,            data[i] = Math.rint(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,741,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,746,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,747,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,748,            out[i] = Math.signum(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,750,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,755,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,756,            data[i] = Math.signum(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,758,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,763,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,764,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,765,            out[i] = Math.ulp(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,767,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,772,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,773,            data[i] = Math.ulp(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,775,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,782,            return ebeMultiply((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,783,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,784,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,785,            double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,786,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,787,                out[i] = data[i] * v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,789,            return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,796,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,797,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,798,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,799,            out[i] = data[i] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,801,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,812,        return (ArrayRealVector) ebeMultiply(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,819,            return ebeDivide((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,820,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,821,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,822,            double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,823,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,824,                out[i] = data[i] / v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,826,            return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,833,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,834,        double[] out = new double[data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,835,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,836,                out[i] = data[i] / v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,838,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,849,        return (ArrayRealVector) ebeDivide(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,854,        return data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,863,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,870,            return dotProduct((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,871,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,872,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,873,            double dot = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,874,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,875,                dot += data[i] * v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,877,            return dot;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,884,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,885,        double dot = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,886,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,887,            dot += data[i] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,889,        return dot;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,900,        return dotProduct(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,905,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,906,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,907,            sum += a * a;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,909,        return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,914,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,915,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,916,            sum += Math.abs(a);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,918,        return sum;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,923,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,924,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,925,"            max += Math.max(max, Math.abs(a));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,927,        return max;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,934,            return getDistance((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,935,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,936,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,937,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,938,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,939,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,940,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,942,            return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,949,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,950,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,951,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,952,            final double delta = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,953,            sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,955,        return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,973,        return getDistance(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,980,            return getL1Distance((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,981,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,982,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,983,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,984,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,985,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,986,                sum += Math.abs(delta);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,988,            return sum;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,995,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,996,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,997,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,998,            final double delta = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,999,            sum += Math.abs(delta);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1001,        return sum;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1019,        return getL1Distance(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1026,            return getLInfDistance((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1027,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1028,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1029,            double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1030,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1031,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1032,"                max = Math.max(max, Math.abs(delta));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1034,            return max;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1041,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1042,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1043,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1044,            final double delta = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1045,"            max = Math.max(max, Math.abs(delta));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1047,        return max;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1065,        return getLInfDistance(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1070,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1071,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1072,"            throw MathRuntimeException.createArithmeticException(""zero norm"");",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1074,        return mapDivide(getNorm());,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1079,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1080,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1081,"            throw MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1083,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1084,            data[i] /= norm;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1086,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1090,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1095,"        return projection(new ArrayRealVector(v, false));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1104,        return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1111,            return outerProduct((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1112,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1113,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1114,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1115,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1116,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1117,                for (int j = 0; j < data.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1118,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1121,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1133,        return outerProduct(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1139,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1140,        final int m = data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1141,"        final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1142,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1143,            for (int j = 0; j < data.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1144,"                out.setEntry(i, j, data[i] * v[j]);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1147,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1152,        return data[index];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1157,        return data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1163,            return append((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1164,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1165,"            return new ArrayRealVector(this,new ArrayRealVector(v));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1175,"        return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1180,        final double[] out = new double[data.length + 1];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1181,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1182,        out[data.length] = in;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1183,        return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1188,"        return new ArrayRealVector(this, in);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1193,        ArrayRealVector out = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1195,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1199,        },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1196,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1197,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1198,            checkIndex(index + n - 1);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1200,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1206,            data[index] = value;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1209,        },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1207,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1208,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1210,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1216,"                set(index, (ArrayRealVector) v);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1221,            },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1217,            } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1218,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1219,                    data[i] = v.getEntry(i-index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1225,        },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1222,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1223,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1224,            checkIndex(index + v.getDimension() - 1);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1226,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1231,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1235,        },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1232,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1233,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1234,            checkIndex(index + v.length - 1);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1236,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1248,"        setSubVector(index, v.data);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1249,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1253,"        Arrays.fill(data, value);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1254,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1258,        return data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1264,        return DEFAULT_FORMAT.format(this);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1275,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1276,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1287,        if (data.length != n) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1288,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1292,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1299,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1300,            if (Double.isNaN(v)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1301,                return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1304,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1315,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1316,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1319,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1320,            if (Double.isInfinite(v)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1321,                return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1325,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1351,      if (this == other) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1352,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1355,      if (other == null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1356,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1361,          RealVector rhs = (RealVector) other;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1362,          if (data.length != rhs.getDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1363,              return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1366,          if (rhs.isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1367,              return this.isNaN();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1370,          for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1371,              if (data[i] != rhs.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1372,                  return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1375,          return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1377,      } catch (ClassCastException ex) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1379,          return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1391,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1392,            return 9;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1394,        return MathUtils.hash(data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1404,        if (index < 0 || index >= getDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1405,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,81,1409,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,495,        return new RuntimeException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,503,"                return buildMessage(Locale.US, pattern, argument);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,509,"                return buildMessage(Locale.getDefault(), pattern, argument);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,405,        return new NoSuchElementException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,413,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,419,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,376,        return new ConcurrentModificationException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,384,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,390,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,305,        return new IllegalArgumentException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,313,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,81,319,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,381,                       final ArrayRealVector[] eigenvectors) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,382,            this.realEigenvalues = realEigenvalues;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,383,            this.imagEigenvalues = imagEigenvalues;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,384,            this.eigenvectors    = eigenvectors;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,385,        },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,363,    private static class Solver implements DecompositionSolver {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,398,            if (!isNonSingular()) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,399,                throw new SingularMatrixException();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,402,            final int m = realEigenvalues.length;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,403,            if (b.length != m) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,404,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,409,            final double[] bp = new double[m];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,410,            for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,411,                final ArrayRealVector v = eigenvectors[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,412,                final double[] vData = v.getDataRef();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,413,                final double s = v.dotProduct(b) / realEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,414,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,415,                    bp[j] += s * vData[j];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,419,            return bp;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,434,            if (!isNonSingular()) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,435,                throw new SingularMatrixException();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,438,            final int m = realEigenvalues.length;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,439,            if (b.getDimension() != m) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,440,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,445,            final double[] bp = new double[m];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,446,            for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,447,                final ArrayRealVector v = eigenvectors[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,448,                final double[] vData = v.getDataRef();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,449,                final double s = v.dotProduct(b) / realEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,450,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,451,                    bp[j] += s * vData[j];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,455,"            return new ArrayRealVector(bp, false);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,470,            if (!isNonSingular()) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,471,                throw new SingularMatrixException();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,474,            final int m = realEigenvalues.length;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,475,            if (b.getRowDimension() != m) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,476,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,481,            final int nColB = b.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,482,            final double[][] bp = new double[m][nColB];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,483,            for (int k = 0; k < nColB; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,484,                for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,485,                    final ArrayRealVector v = eigenvectors[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,486,                    final double[] vData = v.getDataRef();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,487,                    double s = 0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,488,                    for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,489,"                        s += v.getEntry(j) * b.getEntry(j, k);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,491,                    s /= realEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,492,                    for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,493,                        bp[j][k] += s * vData[j];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,498,            return MatrixUtils.createRealMatrix(bp);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,507,            for (int i = 0; i < realEigenvalues.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,508,                if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,509,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,512,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,522,            if (!isNonSingular()) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,523,                throw new SingularMatrixException();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,526,            final int m = realEigenvalues.length;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,527,            final double[][] invData = new double[m][m];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,529,            for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,530,                final double[] invI = invData[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,531,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,532,                    double invIJ = 0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,533,                    for (int k = 0; k < m; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,534,                        final double[] vK = eigenvectors[k].getDataRef();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,535,                        invIJ += vK[i] * vK[j] / realEigenvalues[k];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,537,                    invI[j] = invIJ;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,540,            return MatrixUtils.createRealMatrix(invData);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,167,        throws InvalidMatrixException {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,168,        if (isSymmetric(matrix)) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,169,            this.splitTolerance = splitTolerance;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,170,            transformToTridiagonal(matrix);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,171,            decompose();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,175,"            throw new InvalidMatrixException(""eigen decomposition of assymetric matrices not supported yet"");",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,177,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,207,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,215,        final int rows    = matrix.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,216,        final int columns = matrix.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,217,        final double eps  = 10 * rows * columns * MathUtils.EPSILON;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,218,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,219,            for (int j = i + 1; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,220,"                final double mij = matrix.getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,221,"                final double mji = matrix.getEntry(j, i);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,222,"                if (Math.abs(mij - mji) > (Math.max(Math.abs(mij), Math.abs(mji)) * eps)) {",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,223,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,227,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,249,        eigenvectors = null;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,251,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,257,        if (cachedV == null) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,259,            if (eigenvectors == null) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,260,                findEigenVectors();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,263,            final int m = eigenvectors.length;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,264,"            cachedV = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,265,            for (int k = 0; k < m; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,266,"                cachedV.setColumnVector(k, eigenvectors[k]);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,272,        return cachedV;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,279,        if (cachedD == null) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,281,            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,283,        return cachedD;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,290,        if (cachedVt == null) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,292,            if (eigenvectors == null) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,293,                findEigenVectors();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,296,            final int m = eigenvectors.length;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,297,"            cachedVt = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,298,            for (int k = 0; k < m; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,299,"                cachedVt.setRowVector(k, eigenvectors[k]);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,305,        return cachedVt;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,312,        return realEigenvalues.clone();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,318,        return realEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,324,        return imagEigenvalues.clone();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,330,        return imagEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,336,        if (eigenvectors == null) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,337,            findEigenVectors();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,339,        return eigenvectors[i].copy();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,347,        double determinant = 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,348,        for (double lambda : realEigenvalues) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,349,            determinant *= lambda;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,351,        return determinant;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,356,        if (eigenvectors == null) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,357,            findEigenVectors();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,359,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,553,        transformer = new TriDiagonalTransformer(matrix);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,554,        main      = transformer.getMainDiagonalRef();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,555,        secondary = transformer.getSecondaryDiagonalRef();,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,558,        squaredSecondary = new double[secondary.length];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,559,        for (int i = 0; i < squaredSecondary.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,560,            final double s = secondary[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,561,            squaredSecondary[i] = s * s;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,564,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,627,                process1RowBlock(begin);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,628,                break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,632,                process2RowsBlock(begin);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,633,                break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,637,                process3RowsBlock(begin);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,638,                break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,660,                if (chooseLeft) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,661,                    for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,662,                        realEigenvalues[begin + i] = lambda + work[4 * i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,665,                    for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,666,                        realEigenvalues[begin + i] = lambda - work[4 * i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,671,            begin = end;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,672,        },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,675,        Arrays.sort(realEigenvalues);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,676,        int j = realEigenvalues.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,677,        for (int i = 0; i < j; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,678,            final double tmp = realEigenvalues[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,679,            realEigenvalues[i] = realEigenvalues[j];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,680,            realEigenvalues[j] = tmp;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,681,            --j;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,684,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,701,                list.add(i + 1);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,702,                secondary[i] = 0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,703,                squaredSecondary[i] = 0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,718,        realEigenvalues[index] = main[index];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,719,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,732,        final double q0   = main[index];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,733,        final double q1   = main[index + 1];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,734,        final double e12  = squaredSecondary[index];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,736,        final double s     = q0 + q1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,737,        final double p     = q0 * q1 - e12;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,738,        final double delta = s * s - 4 * p;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,739,        if (delta < 0) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,740,"            throw new InvalidMatrixException(""cannot solve degree {0} equation"", 2);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,743,        final double largestRoot = 0.5 * (s + Math.sqrt(delta));,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,744,        realEigenvalues[index]     = largestRoot;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,745,        realEigenvalues[index + 1] = p / largestRoot;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,747,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,760,        final double q0       = main[index];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,761,        final double q1       = main[index + 1];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,762,        final double q2       = main[index + 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,763,        final double e12      = squaredSecondary[index];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,764,        final double q1q2Me22 = q1 * q2 - squaredSecondary[index + 1];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,767,        final double b        = -(q0 + q1 + q2);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,768,        final double c        = q0 * q1 + q0 * q2 + q1q2Me22 - e12;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,769,        final double d        = q2 * e12 - q0 * q1q2Me22;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,772,        final double b2       = b * b;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,773,        final double q        = (3 * c - b2) / 9;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,774,        final double r        = ((9 * c - 2 * b2) * b - 27 * d) / 54;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,775,        final double delta    = q * q * q + r * r;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,776,        if (delta >= 0) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,780,"            throw new InvalidMatrixException(""cannot solve degree {0} equation"", 3);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,782,        final double sqrtMq = Math.sqrt(-q);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,783,        final double theta  = Math.acos(r / (-q * sqrtMq));,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,784,        final double alpha  = 2 * sqrtMq;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,785,        final double beta   = b / 3;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,787,        double z0 = alpha * Math.cos(theta / 3) - beta;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,788,        double z1 = alpha * Math.cos((theta + 2 * Math.PI) / 3) - beta;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,789,        double z2 = alpha * Math.cos((theta + 4 * Math.PI) / 3) - beta;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,790,        if (z0 < z1) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,791,            final double t = z0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,792,            z0 = z1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,793,            z1 = t;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,795,        if (z1 < z2) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,796,            final double t = z1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,797,            z1 = z2;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,798,            z2 = t;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,800,        if (z0 < z1) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,801,            final double t = z0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,802,            z0 = z1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,803,            z1 = t;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,805,        realEigenvalues[index]     = z0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,806,        realEigenvalues[index + 1] = z1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,807,        realEigenvalues[index + 2] = z2;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,809,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,835,            return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,870,                    i0 = 1 + i / 4;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,871,                    break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,889,                    throw new InvalidMatrixException(new MaxIterationsExceededException(maxIter));,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,901,                    int split  = i0 - 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,902,                    diagMax    = work[4 * i0];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,903,                    offDiagMin = work[4 * i0 + 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,904,                    double previousEMin = work[4 * i0 + 3];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,905,                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {,0.0,1,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,906,                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&,0.0,1,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,909,                            work[i + 2]  = -sigma;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,910,                            split        = i / 4;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,911,                            diagMax      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,912,                            offDiagMin   = work[i + 6];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,913,                            previousEMin = work[i + 7];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,915,"                            diagMax      = Math.max(diagMax, work[i + 4]);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,916,"                            offDiagMin   = Math.min(offDiagMin, work[i + 2]);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,917,"                            previousEMin = Math.min(previousEMin, work[i + 3]);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,920,                    work[4 * n0 - 2] = offDiagMin;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,921,                    work[4 * n0 - 1] = previousEMin;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,922,                    i0 = split + 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,926,        },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,928,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,943,                    work[i + 2] = -0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,944,                    d = work[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,956,                    work[i]     = -0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,957,                    work[j]     = d;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,958,                    work[j + 2] = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,959,                    d = work[i + 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,966,                    work[j + 2] = work[i + 2] * (work[i] / work[j]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,967,                    d *= work[i + 2] / work[j];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1000,                return deflatedEnd;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1019,                if (work[k - 3] > work[k - 7]) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1020,                    final double tmp = work[k - 3];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1021,                    work[k - 3] = work[k - 7];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1022,                    work[k - 7] = tmp;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1025,                if (work[k - 5] > TOLERANCE_2 * work[k - 3]) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1026,                    double t = 0.5 * ((work[k - 7] - work[k - 3]) + work[k - 5]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1027,                    double s = work[k - 3] * (work[k - 5] / t);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1028,                    if (s <= t) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1029,                        s = work[k - 3] * work[k - 5] / (t * (1 + Math.sqrt(1 + s / t)));,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1031,                        s = work[k - 3] * work[k - 5] / (t + Math.sqrt(t * (t + s)));,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1033,                    t = work[k - 7] + (s + work[k - 5]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1034,                    work[k - 3] *= work[k - 7] / t;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1035,                    work[k - 7]  = t;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1037,                work[4 * deflatedEnd - 8] = sigma + work[k - 7];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1038,                work[4 * deflatedEnd - 4] = sigma + work[k - 3];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1039,                deflatedEnd -= 2;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1054,"                dMin2 = Math.min(dMin2, work[l - 1]);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1055,                work[l - 1] =,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1058,                work[l - 2 * pingPong] =,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1061,"                qMax  = Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1062,                dMin  = -0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1089,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1090,                    dMin = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1091,                    updateSigma(tau);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1092,                    return deflatedEnd;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1097,                        tau = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1104,                        tau *= 0.25;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1105,                        tType -= 12;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1107,                } else if (Double.isNaN(dMin)) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1108,                    tau = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1111,                    loop = false;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1134,            int j = 4 * n - 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1135,            for (int i = 0; i < j; i += 4) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1136,                for (int k = 0; k < 4; k += step) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1137,                    final double tmp = work[i + k];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1138,                    work[i + k] = work[j - k];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1139,                    work[j - k] = tmp;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1141,                j -= 4;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1143,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1338,                    work[j4] = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1339,                    d = work[j4 + 1];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1340,                    dMin = d;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1341,                    eMin = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1348,                    work[j4] = work[j4 + 1] * (work[j4 - 1] / work[j4 - 2]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1349,                    d *= work[j4 + 1] / work[j4 - 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1355,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1356,                work[j4 - 3] = d + work[j4];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1357,                if (work[j4 - 3] == 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1358,                    work[j4 - 1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1359,                    d = work[j4 + 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1360,                    dMin = d;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1361,                    eMin = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1362,                } else if ((MathUtils.SAFE_MIN * work[j4 + 2] < work[j4 - 3]) &&,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1364,                    final double tmp = work[j4 + 2] / work[j4 - 3];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1365,                    work[j4 - 1] = work[j4] * tmp;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1366,                    d *= tmp;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1367,                } else {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1368,                    work[j4 - 1] = work[j4 + 2] * (work[j4] / work[j4 - 3]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1369,                    d *= work[j4 + 2] / work[j4 - 3];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1371,"                dMin = Math.min(dMin, d);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1372,"                eMin = Math.min(eMin, work[j4 - 1]);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1383,            work[j4] = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1384,            dN1  = work[j4p2 + 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1385,            dMin = dN1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1386,            eMin = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1393,            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1394,            dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1403,            work[j4] = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1404,            dN   = work[j4p2 + 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1405,            dMin = dN;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1406,            eMin = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1413,            work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1414,            dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1439,            tau = -dMin;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1440,            tType = -1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1441,            return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1462,                        double s = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1463,                        if (dN > b1) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1464,                            s = dN - b1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1466,                        if (a2 > (b1 + b2)) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1467,"                            s = Math.min(s, a2 - (b1 + b2));",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1469,"                        tau   = Math.max(s, 0.333 * dMin);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1470,                        tType = -3;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1482,                            return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1487,                        np = nn - 2 * pingPong;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1488,                        b2 = work[np - 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1489,                        gam = dN1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1490,                        if (work[np - 4]  >  work[np - 2]) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1491,                            return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1493,                        a2 = work[np - 4] / work[np - 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1494,                        if (work[nn - 9]  >  work[nn - 11]) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1495,                            return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1497,                        b2 = work[nn - 9] / work[nn - 11];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1498,                        np = nn - 13;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1505,                            break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1514,                            break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1538,                    return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1545,                    a2 = a2 + b2;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1546,                    for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1547,                        if (b2 == 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1548,                            break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1550,                        b1 = b2;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1551,                        if (work[i4]  >  work[i4 - 2]) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1552,                            return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1554,                        b2 = b2 * (work[i4] / work[i4 - 2]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1555,                        a2 = a2 + b2;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1556,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2)  {",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1557,                            break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1560,                    a2 = cnst3 * a2;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1563,                if (a2 < cnst1) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1564,                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1566,                    tau = s;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1569,            } else {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1572,                if (tType == -6) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1573,                    g += 0.333 * (1 - g);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1574,                } else if (tType == -18) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1575,                    g = 0.25 * 0.333;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1577,                    g = 0.25;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1579,                tau   = g * dMin;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1580,                tType = -6;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1583,            break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1589,                tType = -7;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1590,                double s = 0.333 * dMin1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1591,                if (work[nn - 5] > work[nn - 7]) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1592,                    return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1594,                double b1 = work[nn - 5] / work[nn - 7];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1595,                double b2 = b1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1596,                if (b2 != 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1597,                    for (int i4 = 4 * end - 10 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1598,                        final double oldB1 = b1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1599,                        if (work[i4] > work[i4 - 2]) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1600,                            return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1602,                        b1 = b1 * (work[i4] / work[i4 - 2]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1603,                        b2 = b2 + b1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1604,"                        if (100 * Math.max(b1, oldB1) < b2) {",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1605,                            break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1609,                b2 = Math.sqrt(cnst3 * b2);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1610,                final double a2 = dMin1 / (1 + b2 * b2);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1611,                final double gap2 = 0.5 * dMin2 - a2;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1612,                if (gap2 > 0.0 && gap2 > b2 * a2) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1613,"                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1615,"                    tau = Math.max(s, a2 * (1 - cnst2 * b2));",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1616,                    tType = -8;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1618,            } else {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1623,                    tau = 0.5 * dMin1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1632,            if (dMin2 == dN2 && 2 * work[nn - 5] < work[nn - 7]) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1633,                tType = -10;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1634,                final double s = 0.333 * dMin2;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1635,                if (work[nn - 5] > work[nn - 7]) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1636,                    return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1638,                double b1 = work[nn - 5] / work[nn - 7];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1639,                double b2 = b1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1640,                if (b2 != 0.0){,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1641,                    for (int i4 = 4 * end - 9 + pingPong; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1642,                        if (work[i4] > work[i4 - 2]) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1643,                            return;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1645,                        b1 *= work[i4] / work[i4 - 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1646,                        b2 += b1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1647,                        if (100 * b1 < b2) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1648,                            break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1652,                b2 = Math.sqrt(cnst3 * b2);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1653,                final double a2 = dMin2 / (1 + b2 * b2);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1654,                final double gap2 = work[nn - 7] + work[nn - 9] -,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1656,                if (gap2 > 0.0 && gap2 > b2 * a2) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1657,"                    tau = Math.max(s, a2 * (1 - cnst2 * a2 * (b2 / gap2) * b2));",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1659,"                    tau = Math.max(s, a2 * (1 - cnst2 * b2));",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1661,            } else {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1662,                tau   = 0.25 * dMin2;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1663,                tType = -11;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1665,            break;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1668,            tau   = 0.0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1669,            tType = -12;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1699,        final int m = main.length;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1700,        eigenvectors = new ArrayRealVector[m];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1703,        final double[] d = new double[m];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1704,        final double[] l = new double[m - 1];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1706,        final double mu = realEigenvalues[m-1] <= 0 && realEigenvalues[0] > 0 ? 0.5-realEigenvalues[m-1] : 0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1707,        double di = main[0]+mu;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1708,        d[0] = di;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1709,        for (int i = 1; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1710,            final double eiM1  = secondary[i - 1];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1711,            final double ratio = eiM1 / di;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1712,            di       = main[i] - eiM1 * ratio + mu;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1713,            l[i - 1] = ratio;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1714,            d[i]     = di;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1718,        for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1719,"            eigenvectors[i] = findEigenvector(realEigenvalues[i]+mu, d, l);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1722,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1738,        final int m = main.length;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1739,"        stationaryQuotientDifferenceWithShift(d, l, eigenvalue);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1740,"        progressiveQuotientDifferenceWithShift(d, l, eigenvalue);",0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1744,        int r = m - 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1745,        double minG = Math.abs(work[6 * r] + work[6 * r + 3] + eigenvalue);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1746,        int sixI = 0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1747,        for (int i = 0; i < m - 1; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1748,            final double absG = Math.abs(work[sixI] + d[i] * work[sixI + 9] / work[sixI + 10]);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1749,            if (absG < minG) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1750,                r = i;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1751,                minG = absG;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1753,            sixI += 6;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1758,        double[] eigenvector = new double[m];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1759,        double n2 = 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1760,        eigenvector[r] = 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1761,        double z = 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1762,        for (int i = r - 1; i >= 0; --i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1763,            z *= -work[6 * i + 2];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1764,            eigenvector[i] = z;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1765,            n2 += z * z;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1767,        z = 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1768,        for (int i = r + 1; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1769,            z *= -work[6 * i - 1];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1770,            eigenvector[i] = z;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1771,            n2 += z * z;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1775,        final double inv = 1.0 / Math.sqrt(n2);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1776,        for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1777,            eigenvector[i] *= inv;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1780,        return (transformer == null) ?,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1796,        final int nM1 = d.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1797,        double si = -lambda;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1798,        int sixI = 0;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1799,        for (int i = 0; i < nM1; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1800,            final double di   = d[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1801,            final double li   = l[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1802,            final double diP1 = di + si;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1803,            final double liP1 = li * di / diP1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1804,            work[sixI]        = si;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1805,            work[sixI + 1]    = diP1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1806,            work[sixI + 2]    = liP1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1807,            si = li * liP1 * si - lambda;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1808,            sixI += 6;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1810,        work[6 * nM1 + 1] = d[nM1] + si;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1811,        work[6 * nM1]     = si;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1812,    },0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1824,        final int nM1 = d.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1825,        double pi = d[nM1] - lambda;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1826,        int sixI = 6 * (nM1 - 1);,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1827,        for (int i = nM1 - 1; i >= 0; --i) {,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1828,            final double di   = d[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1829,            final double li   = l[i];,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1830,            final double diP1 = di * li * li + pi;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1831,            final double t    = di / diP1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1832,            work[sixI +  9]   = pi;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1833,            work[sixI + 10]   = diP1;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1834,            work[sixI +  5]   = li * t;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1835,            pi = pi * t - lambda;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1836,            sixI -= 6;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1838,        work[3] = pi;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1839,        work[4] = pi;,0.0,0,-1,0
org/apache/commons/math/linear/EigenDecompositionImpl,81,1840,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,631,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,636,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,637,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,81,293,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,44,        super();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,45,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,61,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,83,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,129,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,142,"        final RealMatrix m = createRealMatrix(dimension, dimension);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,143,        for (int i = 0; i < dimension; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,144,"            m.setEntry(i, i, 1.0);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,146,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,162,        final T zero = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,163,        final T one  = field.getOne();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,164,"        final T[][] d = (T[][]) Array.newInstance(zero.getClass(), new int[] { dimension, dimension });",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,165,        for (int row = 0; row < dimension; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,166,            final T[] dRow = d[row];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,167,"            Arrays.fill(dRow, zero);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,168,            dRow[row] = one;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,170,"        return new Array2DRowFieldMatrix<T>(d, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,184,        final BigDecimal[][] d = new BigDecimal[dimension][dimension];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,185,        for (int row = 0; row < dimension; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,186,            final BigDecimal[] dRow = d[row];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,187,"            Arrays.fill(dRow, BigMatrixImpl.ZERO);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,188,            dRow[row] = BigMatrixImpl.ONE;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,190,"        return new BigMatrixImpl(d, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,203,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,204,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,206,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,220,        final FieldMatrix<T> m =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,222,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,223,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,225,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,241,        return new BigMatrixImpl(data);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,257,        return new BigMatrixImpl(data);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,279,"        return new BigMatrixImpl(data, copyArray);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,295,        return new BigMatrixImpl(data);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,307,"        return new ArrayRealVector(data, true);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,320,"        return new ArrayFieldVector<T>(data, true);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,333,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,334,"        final RealMatrix m = createRealMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,335,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,336,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,338,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,353,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,354,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,355,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,357,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,358,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,359,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,361,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,376,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,377,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,378,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,379,            data[0][i] = new BigDecimal(rowData[i]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,381,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,396,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,397,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,398,"        System.arraycopy(rowData, 0, data[0], 0, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,399,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,414,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,415,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,416,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,417,            data[0][i] = new BigDecimal(rowData[i]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,419,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,432,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,433,"        final RealMatrix m = createRealMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,434,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,435,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,437,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,452,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,453,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,454,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,456,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,457,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,458,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,460,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,475,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,476,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,477,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,478,            data[row][0] = new BigDecimal(columnData[row]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,480,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,495,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,496,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,497,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,498,            data[row][0] = columnData[row];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,500,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,515,        int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,516,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,517,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,518,            data[row][0] = new BigDecimal(columnData[row]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,520,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,530,        if (row < 0 || row >= m.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,531,"            throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"",",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,534,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,544,        if (column < 0 || column >= m.getColumnDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,545,"            throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"",",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,548,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,564,"        checkRowIndex(m, startRow);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,565,"        checkRowIndex(m, endRow);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,566,        if (startRow > endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,567,"            throw new MatrixIndexException(""initial row {0} after final row {1}"",",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,571,"        checkColumnIndex(m, startColumn);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,572,"        checkColumnIndex(m, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,573,        if (startColumn > endColumn) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,574,"            throw new MatrixIndexException(""initial column {0} after final column {1}"",",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,579,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,593,        if (selectedRows.length * selectedColumns.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,594,            if (selectedRows.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,595,"                throw new MatrixIndexException(""empty selected row index array"");",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,597,"            throw new MatrixIndexException(""empty selected column index array"");",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,600,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,601,"            checkRowIndex(m, row);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,603,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,604,"            checkColumnIndex(m, column);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,606,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,616,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,618,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,623,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,635,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,640,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,651,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,664,        final FractionMatrixConverter converter = new FractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,665,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,666,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,708,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,709,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,710,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,789,        final int n = vector.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,790,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,791,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,792,            oos.writeDouble(vector.getEntry(i));,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,794,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,820,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,821,            final double[] data = new double[n];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,822,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,823,                data[i] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,827,"            final RealVector vector = new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,830,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,832,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,833,"            f.set(instance, vector);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,843,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,835,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,836,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,837,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,838,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,839,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,840,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,841,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,842,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,845,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,890,        final int n = matrix.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,891,        final int m = matrix.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,892,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,893,        oos.writeInt(m);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,894,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,895,            for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,896,"                oos.writeDouble(matrix.getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,899,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,925,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,926,            final int m = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,927,            final double[][] data = new double[n][m];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,928,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,929,                final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,930,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,931,                    dataI[j] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,936,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,939,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,941,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,942,"            f.set(instance, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,952,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,944,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,945,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,946,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,947,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,948,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,949,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,950,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,951,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,81,954,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,50,        super(field);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,51,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,65,"        super(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,66,"        data = buildArray(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,67,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,84,        super(extractField(d));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,85,        copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,86,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,105,        super(extractField(d));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,106,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,107,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,109,            if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,110,                throw new NullPointerException();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,112,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,113,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,114,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,116,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,117,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,118,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,120,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,121,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,122,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,127,            data = d;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,129,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,140,        super(extractField(v));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,141,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,142,"        data = buildArray(getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,143,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,144,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,146,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,152,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,158,"        return new Array2DRowFieldMatrix<T>(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,166,            return add((Array2DRowFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,167,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,168,            return super.add(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,183,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,185,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,186,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,187,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,188,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,189,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,190,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,191,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,192,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,193,                outDataRow[col] = dataRow[col].add(mRow[col]);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,197,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,206,            return subtract((Array2DRowFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,207,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,208,            return super.subtract(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,223,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,225,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,226,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,227,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,228,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,229,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,230,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,231,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,232,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,233,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,237,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,246,            return multiply((Array2DRowFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,247,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,248,            return super.multiply(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,263,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,265,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,266,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,267,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,268,"        final T[][] outData = buildArray(getField(), nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,269,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,270,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,271,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,272,            for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,273,                T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,274,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,275,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,277,                outDataRow[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,281,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,288,        return copyOut();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,299,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,306,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,307,            if (row > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,308,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,312,            if (column > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,313,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,317,            final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,318,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,319,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,322,            final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,323,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,324,"                throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,326,"            data = buildArray(getField(), subMatrix.length, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,327,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,328,                if (subMatrix[i].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,329,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,333,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,335,        } else {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,336,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,339,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,346,            return data[row][column];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,347,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,348,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,359,            data[row][column] = value;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,364,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,360,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,361,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,365,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,372,            data[row][column] = data[row][column].add(increment);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,377,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,373,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,374,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,378,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,385,            data[row][column] = data[row][column].multiply(factor);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,390,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,386,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,387,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,391,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,396,        return (data == null) ? 0 : data.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,402,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,409,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,410,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,411,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,412,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,416,"        final T[] out = buildArray(getField(), nRows);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,417,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,418,            final T[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,419,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,420,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,421,                sum = sum.add(dataRow[i].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,423,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,425,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,433,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,434,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,435,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,436,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,441,"        final T[] out = buildArray(getField(), nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,442,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,443,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,444,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,445,                sum = sum.add(data[i][col].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,447,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,450,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,458,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,459,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,460,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,461,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,462,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,463,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,464,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,467,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,474,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,475,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,476,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,477,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,478,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,479,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,480,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,483,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,492,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,493,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,495,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,496,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,497,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,498,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,501,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,510,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,511,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,513,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,514,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,515,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,516,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,519,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,526,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,527,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,528,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,529,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,530,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,531,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,532,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,535,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,542,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,543,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,544,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,545,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,546,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,547,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,550,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,559,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,560,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,562,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,563,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,564,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,565,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,568,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,577,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,578,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,580,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,581,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,582,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,585,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,594,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,595,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,597,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,598,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,600,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,614,"        setSubMatrix(in, 0, 0);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,81,615,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,98,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,99,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,100,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,103,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,107,"        blocks = createBlocksLayout(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,109,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,127,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,148,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,149,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,150,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,156,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,158,            blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,161,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,164,        int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,166,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,169,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,173,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,174,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,179,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,206,        final int rows         = rawData.length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,207,        final int columns      = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,212,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,213,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,214,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,215,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,222,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,223,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,225,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,226,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,227,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,228,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,229,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,230,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,231,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,234,                final double[] block = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,235,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,238,                int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,239,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,240,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,241,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,244,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,249,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,267,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,268,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,270,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,271,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,272,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,273,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,274,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,275,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,276,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,277,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,278,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,279,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,280,                blocks[blockIndex] = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,281,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,285,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,293,"        return new BlockRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,301,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,304,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,305,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,308,        return copied;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,317,            return add((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,318,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,321,"            MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,323,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,326,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,327,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,328,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,331,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,332,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,333,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,334,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,335,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,336,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,337,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,338,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,339,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,340,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,341,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,346,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,351,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,367,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,369,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,372,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,373,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,374,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,375,            final double[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,376,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,377,                outBlock[k] = tBlock[k] + mBlock[k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,381,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,390,            return subtract((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,391,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,394,"            MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,396,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,399,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,400,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,401,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,404,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,405,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,406,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,407,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,408,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,409,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,410,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,411,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,412,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,413,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,414,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,419,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,424,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,440,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,442,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,445,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,446,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,447,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,448,            final double[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,449,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,450,                outBlock[k] = tBlock[k] - mBlock[k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,454,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,463,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,466,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,467,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,468,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,469,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,470,                outBlock[k] = tBlock[k] + d;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,474,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,483,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,486,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,487,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,488,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,489,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,490,                outBlock[k] = tBlock[k] * d;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,494,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,503,            return multiply((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,504,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,507,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,509,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,512,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,513,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,515,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,516,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,518,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,520,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,521,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,524,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,527,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,528,                        final int kWidth      = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,529,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,530,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,531,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,532,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,533,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,534,                            final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,535,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,536,                                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,537,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,538,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,539,"                                    sum += tBlock[l] * m.getEntry(r, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,540,                                    ++r;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,542,                                outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,543,                                ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,549,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,554,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,570,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,572,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,575,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,576,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,578,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,579,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,581,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,582,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,583,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,584,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,585,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,588,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,591,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,592,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,593,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,594,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,595,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,596,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,597,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,598,                        final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,599,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,600,                            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,601,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,602,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,603,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,604,                                sum += tBlock[l] * mBlock[n] +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,608,                                l += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,609,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,611,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,612,                                sum += tBlock[l++] * mBlock[n];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,613,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,615,                            outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,616,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,622,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,627,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,635,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,636,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,638,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,639,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,640,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,641,            int regularPos   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,642,            int lastPos      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,643,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,644,                final double[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,645,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,646,                int dataPos    = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,647,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,648,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,649,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,651,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,652,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,653,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,657,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,664,        final double[] colSums = new double[BLOCK_SIZE];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,665,        double maxColSum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,666,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,667,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,668,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,669,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,670,                final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,671,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,672,                for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,673,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,674,                    for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,675,                        sum += Math.abs(block[i * jWidth + j]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,677,                    colSums[j] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,680,            for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,681,"                maxColSum = Math.max(maxColSum, colSums[j]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,684,        return maxColSum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,690,        double sum2 = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,691,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,692,            for (final double entry : blocks[blockIndex]) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,693,                sum2 += entry * entry;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,696,        return Math.sqrt(sum2);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,706,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,709,        final BlockRealMatrix out =,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,713,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,714,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,715,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,716,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,719,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,720,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,721,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,722,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,723,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,724,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,727,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,728,                final double[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,729,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,730,                final int      width    = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,732,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,733,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,734,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,736,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,738,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,739,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,743,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,747,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,751,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,755,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,757,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,761,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,768,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,770,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,771,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,775,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,779,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,781,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,788,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,792,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,796,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,820,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,821,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,822,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,823,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,824,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,825,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,826,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,828,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,836,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,837,        if (refLength < 1) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,838,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,840,        final int endRow    = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,841,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,842,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,843,        for (final double[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,844,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,845,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,852,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,853,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,854,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,855,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,858,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,859,            final int iHeight  = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,860,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,861,"            final int iStart   = Math.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,862,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,864,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,865,                final int jWidth      = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,866,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,867,"                final int jStart      = Math.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,868,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,869,                final int jLength     = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,872,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,873,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,874,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,881,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,888,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,889,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,892,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,893,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,894,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,895,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,896,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,897,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,898,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,899,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,900,            final int available  = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,901,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,902,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,903,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,904,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,905,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,907,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,908,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,912,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,921,"            setRowMatrix(row, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,924,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,922,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,923,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,925,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,941,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,942,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,943,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,945,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,952,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,953,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,954,        int mBlockIndex  = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,955,        int mIndex       = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,956,        double[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,957,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,958,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,959,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,960,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,961,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,962,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,963,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,964,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,965,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,967,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,968,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,972,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,979,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,980,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,983,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,984,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,985,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,986,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,987,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,988,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,989,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,990,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,991,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,992,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,993,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,994,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,995,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,997,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1001,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1010,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1013,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1011,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1012,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1014,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1030,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1031,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1032,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1034,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1041,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1042,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1043,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1044,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1045,        int mIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1046,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1047,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1048,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1049,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1050,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1051,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1052,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1053,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1055,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1059,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1066,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1067,        final double[] outData = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1070,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1071,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1072,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1073,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1074,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1075,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1076,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1077,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1080,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1089,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1092,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1090,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1091,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1093,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1100,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1101,        final double[] outData = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1104,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1105,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1106,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1107,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1108,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1109,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1110,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1111,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1112,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1116,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1125,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1128,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1126,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1127,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1129,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1136,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1137,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1140,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1141,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1142,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1143,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1144,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1145,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1146,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1147,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1150,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1159,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1160,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1161,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1162,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1168,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1169,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1170,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1171,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1172,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1173,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1174,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1175,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1178,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1185,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1186,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1189,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1190,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1191,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1192,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1193,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1194,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1195,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1196,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1197,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1201,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1210,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1211,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1212,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1213,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1219,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1220,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1221,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1222,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1223,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1224,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1225,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1226,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1227,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1231,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1238,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1239,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1240,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1242,            return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1243,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1244,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1255,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1256,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1264,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1260,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1261,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1265,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1272,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1273,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1274,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1276,            blocks[iBlock * blockColumns + jBlock][k] += increment;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1281,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1277,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1278,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1282,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1289,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1290,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1291,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1293,            blocks[iBlock * blockColumns + jBlock][k] *= factor;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1298,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1294,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1295,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1299,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1305,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1306,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1307,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1310,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1311,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1312,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1315,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1316,                final double[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1317,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1318,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1319,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1320,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1321,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1322,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1323,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1324,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1325,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1326,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1327,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1328,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1333,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1338,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1345,        return rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1351,        return columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1359,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1360,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1364,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1367,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1368,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1369,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1370,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1371,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1372,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1373,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1374,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1375,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1376,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1377,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1378,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1379,                        sum += block[k]     * v[q]     +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1383,                        k += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1384,                        q += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1386,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1387,                        sum += block[k++] * v[q++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1389,                    out[p] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1394,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1403,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1404,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1408,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1411,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1412,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1413,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1414,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1415,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1416,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1417,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1418,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1419,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1420,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1421,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1422,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1423,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1424,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1425,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1426,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1427,                        sum += block[k]           * v[p]     +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1431,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1432,                        p += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1434,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1435,                        sum += block[k] * v[p++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1436,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1438,                    out[q] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1443,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1451,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1452,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1453,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1454,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1455,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1456,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1457,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1458,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1459,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1460,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1461,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1462,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1463,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1464,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1469,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1476,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1477,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1478,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1479,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1480,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1481,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1482,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1483,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1484,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1485,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1486,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1487,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1488,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1489,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1494,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1503,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1504,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1505,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1506,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1507,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1508,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1509,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1510,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1511,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1512,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1513,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1514,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1515,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1516,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1517,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1518,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1519,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1524,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1533,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1534,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1535,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1536,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1537,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1538,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1539,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1540,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1541,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1542,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1543,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1544,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1545,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1546,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1547,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1548,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1549,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1554,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1561,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1562,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1563,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1564,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1565,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1566,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1567,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1568,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1569,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1570,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1571,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1572,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1573,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1574,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1577,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1580,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1587,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1588,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1589,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1590,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1591,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1592,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1593,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1594,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1595,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1596,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1597,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1598,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1599,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1600,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1603,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1606,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1615,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1616,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1617,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1618,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1619,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1620,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1621,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1622,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1623,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1624,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1625,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1626,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1627,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1628,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1629,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1630,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1631,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1636,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1645,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1646,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1647,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1648,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1649,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1650,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1651,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1652,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1653,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1654,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1655,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1656,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1657,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1658,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1659,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1660,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1661,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1666,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1675,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,1684,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,81,64,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,315,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,81,320,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,81,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,81,44,        this.maxIterations = maxIterations;,0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,81,45,    },0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,81,56,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,81,57,        this.maxIterations = maxIterations;,0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,81,58,    },0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,81,64,        return maxIterations;,0.0,0,-1,0
org/apache/commons/math/ConvergenceException,81,34,"        super(""Convergence failed"");",0.0,0,-1,0
org/apache/commons/math/ConvergenceException,81,35,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,81,45,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/ConvergenceException,81,46,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,81,53,        super(cause);,0.0,0,-1,0
org/apache/commons/math/ConvergenceException,81,54,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,81,65,"        super(cause, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/ConvergenceException,81,66,    },0.0,0,-1,0
