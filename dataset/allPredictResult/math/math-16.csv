project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,0.15385,0,,0,0.47944669043367866,0.52055330956632
org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,0.15385,0,,0,0.4271692345149239,0.5728307654850755
org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,0.13333,1,-1,1
org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0.13333,1,-1,1
org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0.09091,1,-1,1
org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,0.09091,1,-1,1
org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,0.09091,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,0.09091,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0.09091,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,134,    },0.09091,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,144,        long longMT = seed;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,146,        mt[0]= (int) longMT;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,151,            mt[mti]= (int) longMT;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,155,    },0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,180,            mt[i]   = (int) (l & 0xffffffffl);,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,181,            i++; j++;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,182,            if (i >= N) {,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,183,                mt[0] = mt[N - 1];,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,184,                i = 1;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,186,            if (j >= seed.length) {,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,187,                j = 0;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,191,        for (int k = N - 1; k != 0; k--) {,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,195,            mt[i]   = (int) (l & 0xffffffffL);,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,196,            i++;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,197,            if (i >= N) {,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,198,                mt[0] = mt[N - 1];,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,199,                i = 1;,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,205,        clear(); // Clear normal deviate cache,0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,207,    },0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0.05714,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,217,    },0.05714,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1087,            switch (rmode) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,202,"        this(field, (long) x);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,203,    },0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,209,"    protected Dfp(final DfpField field, long x) {",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,212,        mant = new int[field.getRadixDigits()];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,213,        nans = FINITE;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,214,        this.field = field;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,216,        boolean isLongMin = false;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,217,        if (x == Long.MIN_VALUE) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,225,        if (x < 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,226,            sign = -1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,227,            x = -x;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,229,            sign = 1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,232,        exp = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,233,        while (x != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,235,            mant[mant.length - 1] = (int) (x % RADIX);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,236,            x /= RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,237,            exp++;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,240,        if (isLongMin) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,250,    },0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,322,    public Dfp(final Dfp d) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,323,        mant  = d.mant.clone();,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,324,        sign  = d.sign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,325,        exp   = d.exp;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,326,        nans  = d.nans;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,327,        field = d.field;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,328,    },0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,334,"    protected Dfp(final DfpField field, final String s) {",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,337,        mant = new int[field.getRadixDigits()];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,338,        sign = 1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,339,        exp = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,340,        nans = FINITE;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,341,        this.field = field;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,343,        boolean decimalFound = false;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,344,        final int rsize = 4;   // size of radix in decimal digits,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,345,        final int offset = 4;  // Starting offset into Striped,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,349,        if (s.equals(POS_INFINITY_STRING)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,355,        if (s.equals(NEG_INFINITY_STRING)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,361,        if (s.equals(NAN_STRING)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,368,"        int p = s.indexOf(""e"");",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,369,        if (p == -1) { // try upper case?,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,370,"            p = s.indexOf(""E"");",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,374,        int sciexp = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,375,        if (p != -1) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,398,            fpdecimal = s;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,407,        p = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,410,        int decimalPos = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,413,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,417,                decimalPos--;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,420,            if (fpdecimal.charAt(p) == '.') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,421,                decimalFound = true;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,424,            p++;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,426,            if (p == fpdecimal.length()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,432,        int q = offset;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,433,        striped[0] = '0';,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,434,        striped[1] = '0';,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,435,        striped[2] = '0';,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,436,        striped[3] = '0';,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,437,        int significantDigits=0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,439,            if (p == (fpdecimal.length())) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,440,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,444,            if (q == mant.length*rsize+offset+1) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,445,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,448,            if (fpdecimal.charAt(p) == '.') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,449,                decimalFound = true;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,450,                decimalPos = significantDigits;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,451,                p++;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,452,                continue;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,460,            striped[q] = fpdecimal.charAt(p);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,461,            q++;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,462,            p++;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,463,            significantDigits++;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,468,        if (decimalFound && q != offset) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,470,                q--;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,471,                if (q == offset) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,474,                if (striped[q] == '0') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,475,                    significantDigits--;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,483,        if (decimalFound && significantDigits == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,488,        if (!decimalFound) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,493,        q = offset;  // set q to point to first sig digit,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,494,        p = significantDigits-1+offset;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,496,        while (p > q) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,497,            if (striped[p] != '0') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,498,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,505,        q -= i;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,506,        decimalPos += i;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,509,        while ((p - q) < (mant.length * rsize)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,510,            for (i = 0; i < rsize; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,511,                striped[++p] = '0';,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,517,        for (i = mant.length - 1; i >= 0; i--) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,518,            mant[i] = (striped[q]   - '0') * 1000 +,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,522,            q += 4;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,526,        exp = (decimalPos+sciexp) / rsize;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,528,        if (q < striped.length) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,530,            round((striped[q] - '0')*1000);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,533,    },0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,604,        return new Dfp(d);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,635,        return field;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,642,        return field.getRadixDigits();,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,649,        return field.getZero();,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,669,        for (int i = mant.length - 1; i > 0; i--) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,670,            mant[i] = mant[i-1];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,672,        mant[0] = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,673,        exp--;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,674,    },0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,681,        for (int i = 0; i < mant.length - 1; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,682,            mant[i] = mant[i+1];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,684,        mant[mant.length - 1] = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,685,        exp++;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,686,    },0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,697,        int lostdigit = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,698,        boolean inexact = false;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,700,        int diff = exp - e;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,702,        int adiff = diff;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,703,        if (adiff < 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,704,            adiff = -adiff;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,707,        if (diff == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,708,            return 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,711,        if (adiff > (mant.length + 1)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,713,"            Arrays.fill(mant, 0);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,714,            exp = e;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,719,            return 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,722,        for (int i = 0; i < adiff; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,723,            if (diff < 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,728,                if (lostdigit != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,729,                    inexact = true;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,732,                lostdigit = mant[0];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,734,                shiftRight();,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,740,        if (inexact) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,745,        return lostdigit;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,765,        if (isNaN() || x.isNaN()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,771,"        return compare(this, x) < 0;",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,790,        if (isNaN() || x.isNaN()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,796,"        return compare(this, x) > 0;",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,879,        return (nans == QNAN) || (nans == SNAN);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,904,        if (other instanceof Dfp) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,905,            final Dfp x = (Dfp) other;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,910,"            return compare(this, x) == 0;",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,935,        return greaterThan(x) || lessThan(x);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,948,            return 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,951,        if (a.sign != b.sign) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,960,        if (a.nans == INFINITE && b.nans == FINITE) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,964,        if (a.nans == FINITE && b.nans == INFINITE) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,974,            if (a.exp < b.exp) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,975,                return -a.sign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,978,            if (a.exp > b.exp) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,979,                return a.sign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,985,            if (a.mant[i] > b.mant[i]) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,986,                return a.sign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,989,            if (a.mant[i] < b.mant[i]) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,990,                return -a.sign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,994,        return 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1231,        extra = RADIX-extra;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1232,        for (int i = 0; i < mant.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1233,            mant[i] = RADIX-mant[i]-1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1236,        int rh = extra / RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1237,        extra = extra - rh * RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1238,        for (int i = 0; i < mant.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1239,            final int r = mant[i] + rh;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1240,            rh = r / RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1241,            mant[i] = r - rh * RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1244,        return extra;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1262,        if (nans != FINITE || x.nans != FINITE) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1293,        Dfp a = newInstance(this);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1294,        Dfp b = newInstance(x);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1297,        Dfp result = newInstance(getZero());,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1300,        final byte asign = a.sign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1301,        final byte bsign = b.sign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1303,        a.sign = 1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1304,        b.sign = 1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1307,        byte rsign = bsign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1308,"        if (compare(a, b) > 0) {",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1309,            rsign = asign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1315,        if (b.mant[mant.length-1] == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1316,            b.exp = a.exp;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1319,        if (a.mant[mant.length-1] == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1324,        int aextradigit = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1325,        int bextradigit = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1326,        if (a.exp < b.exp) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1327,            aextradigit = a.align(b.exp);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1329,            bextradigit = b.align(a.exp);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1333,        if (asign != bsign) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1334,            if (asign == rsign) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1335,                bextradigit = b.complement(bextradigit);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1337,                aextradigit = a.complement(aextradigit);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1342,        int rh = 0; /* acts as a carry */,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1343,        for (int i = 0; i < mant.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1344,            final int r = a.mant[i]+b.mant[i]+rh;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1345,            rh = r / RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1346,            result.mant[i] = r - rh * RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1348,        result.exp = a.exp;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1349,        result.sign = rsign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1354,        if (rh != 0 && (asign == bsign)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1355,            final int lostdigit = result.mant[0];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1356,            result.shiftRight();,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1357,            result.mant[mant.length-1] = rh;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1358,            final int excp = result.round(lostdigit);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1359,            if (excp != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1365,        for (int i = 0; i < mant.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1366,            if (result.mant[mant.length-1] != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1367,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1369,            result.shiftLeft();,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1370,            if (i == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1371,                result.mant[0] = aextradigit+bextradigit;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1372,                aextradigit = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1373,                bextradigit = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1378,        if (result.mant[mant.length-1] == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1379,            result.exp = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1381,            if (asign != bsign) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1383,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1388,        final int excp = result.round(aextradigit + bextradigit);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1389,        if (excp != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1390,"            result = dotrap(excp, ADD_TRAP, x, result);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1393,        return result;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1400,        Dfp result = newInstance(this);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1401,        result.sign = (byte) - result.sign;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1402,        return result;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1410,        return add(x.negate());,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1418,        boolean inc = false;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1419,        switch (field.getRoundingMode()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1437,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1438,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1454,        if (inc) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1456,            int rh = 1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1457,            for (int i = 0; i < mant.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1458,                final int r = mant[i] + rh;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1459,                rh = r / RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1460,                mant[i] = r - rh * RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1463,            if (rh != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1470,        if (exp < MIN_EXP) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1476,        if (exp > MAX_EXP) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1482,        if (n != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1484,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1485,            return DfpField.FLAG_INEXACT;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1488,        return 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1499,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1506,        Dfp result = newInstance(getZero());,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1509,        if (nans != FINITE || x.nans != FINITE) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1546,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1548,        for (int i = 0; i < mant.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1549,            int rh = 0;  // acts as a carry,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1550,            for (int j=0; j<mant.length; j++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1551,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1552,                r = r + product[i+j] + rh;  // add to the product digit with carry in,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1554,                rh = r / RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1555,                product[i+j] = r - rh * RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1557,            product[i+mant.length] = rh;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1561,"        int md = mant.length * 2 - 1;  // default, in case result is zero",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1562,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1563,            if (product[i] != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1564,                md = i;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1565,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1570,        for (int i = 0; i < mant.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1571,            result.mant[mant.length - i - 1] = product[md - i];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1575,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1576,        result.sign = (byte)((sign == x.sign)?1:-1);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1578,        if (result.mant[mant.length-1] == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1580,            result.exp = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1584,        if (md > (mant.length-1)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1585,            excp = result.round(product[md-mant.length]);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1590,        if (excp != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1591,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1594,        return result;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1683,        int trial=0;    // trial quotient digit,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1686,        int md=0;       // most sig digit in result,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1690,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1697,        Dfp result = newInstance(getZero());,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1700,        if (nans != FINITE || divisor.nans != FINITE) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1731,        if (divisor.mant[mant.length-1] == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1740,        dividend = new int[mant.length+1];  // one extra digit needed,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1741,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1742,        remainder = new int[mant.length+1]; // one extra digit needed,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1746,        dividend[mant.length] = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1747,        quotient[mant.length] = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1748,        quotient[mant.length+1] = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1749,        remainder[mant.length] = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1754,        for (int i = 0; i < mant.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1755,            dividend[i] = mant[i];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1756,            quotient[i] = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1757,            remainder[i] = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1761,        nsqd = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1762,        for (qd = mant.length+1; qd >= 0; qd--) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1766,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1767,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1768,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1770,            trialgood = false;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1771,            while (!trialgood) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1773,                trial = (min+max)/2;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1776,                int rh = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1777,                for (int i = 0; i < mant.length + 1; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1778,                    int dm = (i<mant.length)?divisor.mant[i]:0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1779,                    final int r = (dm * trial) + rh;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1780,                    rh = r / RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1781,                    remainder[i] = r - rh * RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1785,                rh = 1;  // carry in to aid the subtraction,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1786,                for (int i = 0; i < mant.length + 1; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1787,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1788,                    rh = r / RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1789,                    remainder[i] = r - rh * RADIX;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1793,                if (rh == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1795,                    max = trial-1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1796,                    continue;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1800,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1801,                minadj = minadj / (divisor.mant[mant.length-1]+1);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1803,                if (minadj >= 2) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1804,                    min = trial+minadj;  // update the minimum,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1805,                    continue;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1810,                trialgood = false;  // assume false,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1811,                for (int i = mant.length - 1; i >= 0; i--) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1812,                    if (divisor.mant[i] > remainder[i]) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1813,                        trialgood = true;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1815,                    if (divisor.mant[i] < remainder[i]) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1816,                        break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1820,                if (remainder[mant.length] != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1821,                    trialgood = false;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1824,                if (trialgood == false) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1825,                    min = trial+1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1827,            },0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1830,            quotient[qd] = trial;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1831,            if (trial != 0 || nsqd != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1832,                nsqd++;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1835,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1840,            if (nsqd > mant.length) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1842,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1846,            dividend[0] = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1847,            for (int i = 0; i < mant.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1848,                dividend[i + 1] = remainder[i];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1853,        md = mant.length;  // default,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1854,        for (int i = mant.length + 1; i >= 0; i--) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1855,            if (quotient[i] != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1856,                md = i;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1857,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1862,        for (int i=0; i<mant.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1863,            result.mant[mant.length-i-1] = quotient[md-i];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1867,        result.exp = exp - divisor.exp + md - mant.length;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1868,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1870,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1871,            result.exp = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1874,        if (md > (mant.length-1)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1875,            excp = result.round(quotient[md-mant.length]);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1880,        if (excp != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1881,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1884,        return result;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1895,        if (nans != FINITE) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1906,        if (divisor == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1916,        if (divisor < 0 || divisor >= RADIX) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1924,        Dfp result = newInstance(this);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1926,        int rl = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1927,        for (int i = mant.length-1; i >= 0; i--) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1928,            final int r = rl*RADIX + result.mant[i];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1929,            final int rh = r / divisor;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1930,            rl = r - rh * divisor;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1931,            result.mant[i] = rh;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1934,        if (result.mant[mant.length-1] == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1936,            result.shiftLeft();,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1937,            final int r = rl * RADIX;        // compute the next digit and put it in,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1938,            final int rh = r / divisor;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1939,            rl = r - rh * divisor;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1940,            result.mant[0] = rh;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1943,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1944,        if (excp != 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1945,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1948,        return result;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1963,        if (nans == FINITE && mant[mant.length-1] == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1968,        if (nans != FINITE) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1988,        if (sign == -1) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1999,        Dfp x = newInstance(this);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2002,        if (x.exp < -1 || x.exp > 1) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2007,        switch (x.mant[mant.length-1] / 2000) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2009,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2010,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2018,                x.mant[mant.length-1] = 3000;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2021,        Dfp dx = newInstance(x);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2026,        Dfp px  = getZero();,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2027,        Dfp ppx = getZero();,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2028,        while (x.unequal(px)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2029,            dx = newInstance(x);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2030,            dx.sign = -1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2031,            dx = dx.add(this.divide(x));,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2032,            dx = dx.divide(2);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2033,            ppx = px;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2034,            px = x;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2035,            x = x.add(dx);,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2037,            if (x.equals(ppx)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2044,            if (dx.mant[mant.length-1] == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2045,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2049,        return x;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2058,        if (nans != FINITE) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2067,        if (exp > mant.length || exp < -1) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2071,        return dfp2string();,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2160,        char buffer[] = new char[mant.length*4 + 20];,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2161,        int p = 1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2163,        int e = exp;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2164,        boolean pointInserted = false;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2166,        buffer[0] = ' ';,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2168,        if (e <= 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2169,            buffer[p++] = '0';,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2170,            buffer[p++] = '.';,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2171,            pointInserted = true;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2174,        while (e < 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2182,        for (int i = mant.length - 1; i >= 0; i--) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2183,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2184,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2185,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2186,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2187,            if (--e == 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2188,                buffer[p++] = '.';,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2189,                pointInserted = true;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2193,        while (e > 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2201,        if (!pointInserted) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2207,        q = 1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2208,        while (buffer[q] == '0') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2209,            q++;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2211,        if (buffer[q] == '.') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2212,            q--;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2216,        while (buffer[p-1] == '0') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2217,            p--;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2221,        if (sign < 0) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2225,"        return new String(buffer, q, p - q);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2237,        Dfp def = result;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2239,        switch (type) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2288,            default: def = result; break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2291,"        return trap(type, what, oper, def, result);",0.05556,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2307,        return def;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,30,    public enum RoundingMode {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,33,"        ROUND_DOWN,",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,36,"        ROUND_UP,",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,39,"        ROUND_HALF_UP,",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,42,"        ROUND_HALF_DOWN,",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,47,"        ROUND_HALF_EVEN,",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,50,"        ROUND_HALF_ODD,",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,53,"        ROUND_CEIL,",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,56,        ROUND_FLOOR;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,177,"        this(decimalDigits, true);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,178,    },0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,191,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,193,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,194,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,195,        this.ieeeFlags   = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,196,"        this.zero        = new Dfp(this, 0);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,197,"        this.one         = new Dfp(this, 1);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,198,"        this.two         = new Dfp(this, 2);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,200,        if (computeConstants) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,202,            synchronized (DfpField.class) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,208,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,211,"                sqr2           = new Dfp(this, sqr2String);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,212,                sqr2Split      = split(sqr2String);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,214,"                sqr3           = new Dfp(this, sqr3String);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,216,"                pi             = new Dfp(this, piString);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,217,                piSplit        = split(piString);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,218,"                e              = new Dfp(this, eString);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,219,                eSplit         = split(eString);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,220,"                ln2            = new Dfp(this, ln2String);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,221,                ln2Split       = split(ln2String);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,222,"                ln5            = new Dfp(this, ln5String);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,223,                ln5Split       = split(ln5String);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,224,"                ln10           = new Dfp(this, ln10String);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,226,            },0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,229,            sqr2           = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,230,            sqr2Split      = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,231,            sqr2Reciprocal = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,232,            sqr3           = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,233,            sqr3Reciprocal = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,234,            pi             = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,235,            piSplit        = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,236,            e              = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,237,            eSplit         = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,238,            ln2            = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,239,            ln2Split       = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,240,            ln5            = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,241,            ln5Split       = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,242,            ln10           = null;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,245,    },0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,251,        return radixDigits;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,269,        return rMode;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,331,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,332,    },0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,403,        return zero;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,530,      Dfp result[] = new Dfp[2];,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,531,      boolean leading = true;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,532,      int sp = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,533,      int sig = 0;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,535,      char[] buf = new char[a.length()];,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,537,      for (int i = 0; i < buf.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,538,        buf[i] = a.charAt(i);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,540,        if (buf[i] >= '1' && buf[i] <= '9') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,541,            leading = false;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,544,        if (buf[i] == '.') {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,545,          sig += (400 - sig) % 4;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,546,          leading = false;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,549,        if (sig == (radixDigits / 2) * 4) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,550,          sp = i;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,551,          break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,554,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,555,            sig ++;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,561,      for (int i = 0; i < buf.length; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,562,        buf[i] = a.charAt(i);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,563,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,564,            buf[i] = '0';,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,568,"      result[1] = new Dfp(this, new String(buf));",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,570,      return result;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,578,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,584,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,586,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,587,            sqr2String           = highPrecisionSqr2.toString();,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,588,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,590,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,591,            sqr3String           = highPrecisionSqr3.toString();,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,592,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,594,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,595,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,596,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,598,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,601,    },0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,611,        Dfp sqrt2   = two.sqrt();,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,612,        Dfp yk      = sqrt2.subtract(one);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,613,        Dfp four    = two.add(two);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,614,        Dfp two2kp3 = two;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,615,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,623,        for (int i = 1; i < 20; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,624,            final Dfp ykM1 = yk;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,626,            final Dfp y2         = yk.multiply(yk);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,627,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,628,            final Dfp s          = oneMinusY4.sqrt().sqrt();,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,629,            yk = one.subtract(s).divide(one.add(s));,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,631,            two2kp3 = two2kp3.multiply(four);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,633,            final Dfp p = one.add(yk);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,634,            final Dfp p2 = p.multiply(p);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,635,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,637,            if (yk.equals(ykM1)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,638,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,642,        return one.divide(ak);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,653,        Dfp y  = new Dfp(one);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,654,        Dfp py = new Dfp(one);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,655,        Dfp f  = new Dfp(one);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,656,        Dfp fi = new Dfp(one);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,657,        Dfp x  = new Dfp(one);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,659,        for (int i = 0; i < 10000; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,660,            x = x.multiply(a);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,661,            y = y.add(x.divide(f));,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,662,            fi = fi.add(one);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,663,            f = f.multiply(fi);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,664,            if (y.equals(py)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,665,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,667,            py = new Dfp(y);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,670,        return y;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,736,        int den = 1;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,739,        Dfp y = new Dfp(x);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,740,        Dfp num = new Dfp(x);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,741,        Dfp py = new Dfp(y);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,742,        for (int i = 0; i < 10000; i++) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,743,            num = num.multiply(x);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,744,            num = num.multiply(x);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,745,            den = den + 2;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,746,            Dfp t = num.divide(den);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,747,            y = y.add(t);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,748,            if (y.equals(py)) {,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,749,                break;,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,751,            py = new Dfp(y);,0.05556,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,754,        return y.multiply(two);,0.05556,0,-1,0
org/apache/commons/math3/util/FastMath,16,397,      if (x < -20) {,0.03704,1,-1,0
org/apache/commons/math3/util/FastMath,16,3004,        if (Double.isInfinite(x)) {,0.01613,0,-1,0
org/apache/commons/math3/util/FastMath,16,3007,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.01613,0,-1,0
org/apache/commons/math3/util/FastMath,16,877,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.01099,1,-1,1
org/apache/commons/math3/util/FastMath,16,878,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.01099,1,-1,1
org/apache/commons/math3/util/FastMath,16,3522,        long bits = Double.doubleToRawLongBits(a);,0.01084,0,-1,0
org/apache/commons/math3/util/FastMath,16,3523,        if (bits == 0x8000000000000000L) {,0.01084,0,-1,0
org/apache/commons/math3/util/FastMath,16,3526,        return a;,0.01084,0,-1,0
org/apache/commons/math3/util/FastMath,16,867,            intVal = (int) x;,0.01081,1,-1,1
org/apache/commons/math3/util/FastMath,16,869,            if (intVal > 709) {,0.01081,1,-1,1
org/apache/commons/math3/util/FastMath,16,3517,        if (a != b) {,0.01075,0,-1,0
org/apache/commons/math3/util/FastMath,16,810,"        return exp(x, 0.0, null);",0.01064,1,-1,1
org/apache/commons/math3/util/FastMath,16,925,            result = tempC*z + tempB + tempA;,0.01034,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,35,    public BitsStreamGenerator() {,0.0101,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,36,        nextGaussian = Double.NaN;,0.0101,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,37,    },0.0101,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,165,        nextGaussian = Double.NaN;,0.0101,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,166,    },0.0101,0,-1,0
org/apache/commons/math3/util/FastMath,16,3467,        return (a <= b) ? b : a;,0.0084,0,-1,0
org/apache/commons/math3/util/FastMath,16,3514,            return b;,0.00815,0,-1,0
org/apache/commons/math3/util/FastMath,16,885,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,886,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,887,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,893,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,902,        double z = 0.04168701738764507;,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,903,        z = z * epsilon + 0.1666666505023083;,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,904,        z = z * epsilon + 0.5000000000042687;,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,905,        z = z * epsilon + 1.0;,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,906,        z = z * epsilon + -3.940510424527919E-20;,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,913,        double tempA = intPartA * fracPartA;,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,914,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,920,        final double tempC = tempB + tempA;,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,922,        if (extra != 0.0) {,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,928,        if (hiPrec != null) {,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,934,        return result;,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,3683,    private static class ExpIntTable {,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,3715,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,3716,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,3718,        },0.00697,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,6142,        return EXP_INT_A.clone();,0.00697,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,6150,        return EXP_INT_B.clone();,0.00697,0,-1,0
org/apache/commons/math3/util/FastMath,16,3722,    private static class ExpFracTable {,0.00693,0,-1,0
org/apache/commons/math3/util/FastMath,16,3748,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.00693,0,-1,0
org/apache/commons/math3/util/FastMath,16,3749,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.00693,0,-1,0
org/apache/commons/math3/util/FastMath,16,3751,        },0.00693,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,6158,        return EXP_FRAC_A.clone();,0.00693,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,6166,        return EXP_FRAC_B.clone();,0.00693,0,-1,0
org/apache/commons/math3/util/FastMath,16,829,        if (x < 0.0) {,0.00673,0,-1,0
org/apache/commons/math3/util/FastMath,16,3513,        if (a < b) {,0.00673,0,-1,0
org/apache/commons/math3/util/FastMath,16,3510,        if (a > b) {,0.00648,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,29,    private static final double[] EXP_INT_A = new double[] {,0.00569,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,1535,    private static final double[] EXP_INT_B = new double[] {,0.00569,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,3043,    private static final double[] EXP_FRAC_A = new double[] {,0.00569,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,4074,    private static final double[] EXP_FRAC_B = new double[] {,0.00569,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,5103,    private static final double[][] LN_MANT = new double[][] {,0.00569,0,-1,0
org/apache/commons/math3/util/FastMath,16,2995,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.00317,0,-1,0
org/apache/commons/math3/util/FastMath,16,114,    private static final double LN_QUICK_COEF[][] = {,0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,127,    private static final double LN_HI_PREC_COEF[][] = {,0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,140,    private static final double SINE_TABLE_A[] =,0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,159,    private static final double SINE_TABLE_B[] =,0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,178,    private static final double COSINE_TABLE_A[] =,0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,197,    private static final double COSINE_TABLE_B[] =,0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,217,    private static final double TANGENT_TABLE_A[] =,0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,236,    private static final double TANGENT_TABLE_B[] =,0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,255,    private static final long RECIP_2PI[] = new long[] {,0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,276,    private static final long PI_O_4_BITS[] = new long[] {,0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,284,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.00163,0,-1,0
org/apache/commons/math3/util/FastMath,16,287,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.00163,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,181,    protected Dfp(final DfpField field) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,182,        mant = new int[field.getRadixDigits()];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,183,        sign = 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,184,        exp = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,185,        nans = FINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,186,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,187,    },0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,194,"        this(field, (long) x);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,195,    },0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,220,            isLongMin = true;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,221,            ++x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,243,            for (int i = 0; i < mant.length - 1; i++) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,244,                if (mant[i] != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,245,                    mant[i]++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,246,                    break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,256,"    protected Dfp(final DfpField field, double x) {",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,259,        mant = new int[field.getRadixDigits()];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,260,        sign = 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,261,        exp = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,262,        nans = FINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,263,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,265,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,266,        long mantissa = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,267,        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,269,        if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,271,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,273,                if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,274,                    sign = -1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,276,                return;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,279,            exponent++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,282,            while ( (mantissa & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,283,                exponent--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,284,                mantissa <<= 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,286,            mantissa &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,289,        if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,291,            if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,292,                sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,293,                nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,294,            } else if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,295,                sign = (byte) -1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,296,                nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,298,                sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,299,                nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,301,            return;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,304,"        Dfp xdfp = new Dfp(field, mantissa);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,305,"        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,306,"        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,308,        if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,309,            xdfp = xdfp.negate();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,312,"        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,313,        sign = xdfp.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,314,        exp  = xdfp.exp;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,315,        nans = xdfp.nans;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,317,    },0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,350,            sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,351,            nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,352,            return;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,356,            sign = (byte) -1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,357,            nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,358,            return;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,362,            sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,363,            nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,364,            return;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,377,"            fpdecimal = s.substring(0, p);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,378,            String fpexp = s.substring(p+1);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,379,            boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,381,            for (int i=0; i<fpexp.length(); i++),0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,383,                if (fpexp.charAt(i) == '-'),0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,385,                    negative = true;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,386,                    continue;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,388,                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,389,                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,393,            if (negative) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,394,                sciexp = -sciexp;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,396,        } else {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,403,            sign = -1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,427,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,456,                p++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,457,                continue;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,472,                    break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,484,            decimalPos = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,489,            decimalPos = q-offset;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,500,            p--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,541,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,542,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,543,        this.mant    = new int[field.getRadixDigits()];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,544,        this.sign    = sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,545,        this.exp     = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,546,        this.nans    = nans;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,547,    },0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,554,        return new Dfp(getField());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,562,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,570,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,578,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,586,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,598,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,599,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,600,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,601,"            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,614,"        return new Dfp(field, s);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,624,"        return field.newDfp(sig, code);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,656,        return field.getOne();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,663,        return field.getTwo();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,736,                shiftLeft();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,757,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,758,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,759,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,760,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,761,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,766,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,767,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,768,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,782,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,783,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,784,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,785,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,786,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,791,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,792,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,793,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,804,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,805,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,806,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,807,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,810,        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,819,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,820,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,821,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,822,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,825,        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,834,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,835,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,836,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,837,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,840,        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,849,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,850,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,851,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,852,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,855,        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,863,        Dfp result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,864,        result.sign = 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,865,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,872,        return nans == INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,887,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,888,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,889,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,890,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,893,        return (mant[mant.length - 1] == 0) && !isInfinite();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,907,                return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,913,        return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,923,        return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,932,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,952,            if (a.sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,953,                return -1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,955,                return 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,961,            return a.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,965,            return -b.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,969,            return 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1004,        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1012,        return trunc(DfpField.RoundingMode.ROUND_FLOOR);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1020,        return trunc(DfpField.RoundingMode.ROUND_CEIL);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1029,        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1032,        if (result.mant[mant.length-1] == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1033,            result.sign = sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1036,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1045,        boolean changed = false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1047,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1048,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1051,        if (nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1052,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1055,        if (mant[mant.length-1] == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1057,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1062,        if (exp < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1063,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1064,            Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1065,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1066,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1073,        if (exp >= mant.length) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1074,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1080,        Dfp result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1081,        for (int i = 0; i < mant.length-result.exp; i++) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1082,            changed |= result.mant[i] != 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1083,            result.mant[i] = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1086,        if (changed) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1087,            switch (rmode) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1089,                    if (result.sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1091,                        result = result.add(newInstance(-1));,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1096,                    if (result.sign == 1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1098,                        result = result.add(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1104,"                    final Dfp half = newInstance(""0.5"");",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1105,                    Dfp a = subtract(result);  // difference between this and result,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1106,                    a.sign = 1;            // force positive (take abs),0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1107,                    if (a.greaterThan(half)) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1108,                        a = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1109,                        a.sign = sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1110,                        result = result.add(a);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1114,                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1115,                        a = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1116,                        a.sign = sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1117,                        result = result.add(a);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1122,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1123,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1124,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1127,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1136,        int result = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1138,        rounded = rint();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1140,        if (rounded.greaterThan(newInstance(2147483647))) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1141,            return 2147483647;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1144,        if (rounded.lessThan(newInstance(-2147483648))) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1145,            return -2147483648;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1148,        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1149,            result = result * RADIX + rounded.mant[i];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1152,        if (rounded.sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1153,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1156,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1165,        return exp - 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1173,        Dfp d = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1174,        d.exp = e + 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1175,        return d;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1182,        if (mant[mant.length-1] > 1000) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1183,            return exp * 4 - 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1185,        if (mant[mant.length-1] > 100) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1186,            return exp * 4 - 2;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1188,        if (mant[mant.length-1] > 10) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1189,            return exp * 4 - 3;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1191,        return exp * 4 - 4;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1199,        Dfp d = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1201,        if (e >= 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1202,            d.exp = e / 4 + 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1204,            d.exp = (e + 1) / 4;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1207,        switch ((e % 4 + 4) % 4) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1209,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1211,                d = d.multiply(10);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1212,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1214,                d = d.multiply(100);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1215,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1217,                d = d.multiply(1000);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1220,        return d;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1255,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1256,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1257,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1258,"            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1263,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1264,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1267,            if (x.isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1268,                return x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1271,            if (nans == INFINITE && x.nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1272,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1275,            if (x.nans == INFINITE && nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1276,                return x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1279,            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1280,                return x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1283,            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1284,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1285,                Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1286,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1287,"                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1288,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1320,            a.exp = b.exp;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1421,                inc = false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1422,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1425,                inc = n != 0;       // round up if n!=0,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1426,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1429,                inc = n >= 5000;  // round half up,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1430,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1433,                inc = n > 5000;  // round half down,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1434,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1441,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1442,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1445,                inc = sign == 1 && n != 0;  // round ceil,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1446,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1450,                inc = sign == -1 && n != 0;  // round floor,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1464,                shiftRight();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1465,                mant[mant.length-1] = rh;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1473,            return DfpField.FLAG_UNDERFLOW;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1479,            return DfpField.FLAG_OVERFLOW;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1500,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1501,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1502,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1503,"            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1510,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1511,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1514,            if (x.isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1515,                return x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1519,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1520,                result.sign = (byte) (sign * x.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1521,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1524,            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1525,                result = newInstance(x);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1526,                result.sign = (byte) (sign * x.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1527,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1530,            if (x.nans == INFINITE && nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1531,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1532,                result.sign = (byte) (sign * x.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1533,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1536,            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1538,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1539,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1540,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1541,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1542,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1587,            excp = result.round(0); // has no effect except to check status,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1603,        if (x >= 0 && x < RADIX) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1604,            return multiplyFast(x);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1606,            return multiply(newInstance(x));,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1616,        Dfp result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1619,        if (nans != FINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1620,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1621,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1624,            if (nans == INFINITE && x != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1625,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1626,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1629,            if (nans == INFINITE && x == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1630,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1631,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1632,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1633,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1634,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1639,        if (x < 0 || x >= RADIX) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1640,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1641,            result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1642,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1643,"            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1644,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1647,        int rh = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1648,        for (int i = 0; i < mant.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1649,            final int r = mant[i] * x + rh;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1650,            rh = r / RADIX;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1651,            result.mant[i] = r - rh * RADIX;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1654,        int lostdigit = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1655,        if (rh != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1656,            lostdigit = result.mant[0];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1657,            result.shiftRight();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1658,            result.mant[mant.length-1] = rh;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1661,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1662,            result.exp = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1665,        final int excp = result.round(lostdigit);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1666,        if (excp != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1667,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1670,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1691,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1692,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1693,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1694,"            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1701,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1702,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1705,            if (divisor.isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1706,                return divisor;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1709,            if (nans == INFINITE && divisor.nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1710,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1711,                result.sign = (byte) (sign * divisor.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1712,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1715,            if (divisor.nans == INFINITE && nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1716,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1717,                result.sign = (byte) (sign * divisor.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1718,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1721,            if (divisor.nans == INFINITE && nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1722,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1723,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1724,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1725,"                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1726,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1732,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1733,            result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1734,            result.sign = (byte) (sign * divisor.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1735,            result.nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1736,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1737,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1837,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1877,            excp = result.round(0);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1896,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1897,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1900,            if (nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1901,                return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1907,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1908,            Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1909,            result.sign = sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1910,            result.nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1911,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1912,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1917,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1918,            Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1919,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1920,"            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1921,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1954,        return field.getOne().divide(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1965,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1969,            if (nans == INFINITE && sign == 1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1971,                return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1974,            if (nans == QNAN) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1975,                return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1978,            if (nans == SNAN) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1981,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1982,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1983,"                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1984,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1992,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1993,            result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1994,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1995,"            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,1996,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2003,            x.exp = this.exp / 2;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2012,                x.mant[mant.length-1] = 1500;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2013,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2015,                x.mant[mant.length-1] = 2200;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2016,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2039,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2060,            if (nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2061,                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2063,                return NAN_STRING;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2068,            return dfp2sci();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2079,        char rawdigits[]    = new char[mant.length * 4];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2080,        char outputbuffer[] = new char[mant.length * 4 + 20];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2088,        p = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2089,        for (int i = mant.length - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2090,            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2091,            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2092,            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2093,            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2097,        for (p = 0; p < rawdigits.length; p++) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2098,            if (rawdigits[p] != '0') {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2099,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2102,        shf = p;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2105,        q = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2106,        if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2107,            outputbuffer[q++] = '-';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2110,        if (p != rawdigits.length) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2112,            outputbuffer[q++] = rawdigits[p++];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2113,            outputbuffer[q++] = '.';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2115,            while (p<rawdigits.length) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2116,                outputbuffer[q++] = rawdigits[p++];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2119,            outputbuffer[q++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2120,            outputbuffer[q++] = '.';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2121,            outputbuffer[q++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2122,            outputbuffer[q++] = 'e';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2123,            outputbuffer[q++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2124,"            return new String(outputbuffer, 0, 5);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2127,        outputbuffer[q++] = 'e';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2131,        e = exp * 4 - shf - 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2132,        ae = e;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2133,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2134,            ae = -e;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2138,        for (p = 1000000000; p > ae; p /= 10) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2142,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2143,            outputbuffer[q++] = '-';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2146,        while (p > 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2147,            outputbuffer[q++] = (char)(ae / p + '0');,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2148,            ae = ae % p;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2149,            p = p / 10;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2152,"        return new String(outputbuffer, 0, q);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2175,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2176,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2177,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2178,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2179,            e++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2194,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2195,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2196,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2197,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2198,            e--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2203,            buffer[p++] = '.';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2222,            buffer[--q] = '-';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2241,                def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2242,                def.sign = result.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2243,                def.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2244,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2247,                if (nans == FINITE && mant[mant.length-1] != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2249,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2250,                    def.sign = (byte)(sign*oper.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2251,                    def.nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2254,                if (nans == FINITE && mant[mant.length-1] == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2256,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2257,                    def.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2260,                if (nans == INFINITE || nans == QNAN) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2261,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2262,                    def.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2265,                if (nans == INFINITE || nans == SNAN) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2266,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2267,                    def.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2272,                if ( (result.exp+mant.length) < MIN_EXP) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2273,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2274,                    def.sign = result.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2276,                    def = newInstance(result);  // gradual underflow,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2278,                result.exp = result.exp + ERR_SCALE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2279,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2282,                result.exp = result.exp - ERR_SCALE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2283,                def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2284,                def.sign = result.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2285,                def.nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2286,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2314,        return nans;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2324,        Dfp result = x.newInstance(x);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2325,        result.sign = y.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2326,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2337,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2338,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2339,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2340,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2341,"            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2345,        boolean up = false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2346,        if (this.lessThan(x)) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2347,            up = true;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2350,"        if (compare(this, x) == 0) {",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2351,            return newInstance(x);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2354,        if (lessThan(getZero())) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2355,            up = !up;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2360,        if (up) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2361,            inc = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2362,            inc.exp = this.exp-mant.length+1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2363,            inc.sign = this.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2365,            if (this.equals(getZero())) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2366,                inc.exp = MIN_EXP-mant.length;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2369,            result = add(inc);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2371,            inc = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2372,            inc.exp = this.exp;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2373,            inc.sign = this.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2375,            if (this.equals(inc)) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2376,                inc.exp = this.exp-mant.length;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2378,                inc.exp = this.exp-mant.length+1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2381,            if (this.equals(getZero())) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2382,                inc.exp = MIN_EXP-mant.length;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2385,            result = this.subtract(inc);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2388,        if (result.classify() == INFINITE && this.classify() != INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2389,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2390,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2393,        if (result.equals(getZero()) && this.equals(getZero()) == false) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2394,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2395,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2398,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2408,        if (isInfinite()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2409,            if (lessThan(getZero())) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2410,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2412,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2416,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2417,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2420,        Dfp y = this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2421,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2422,"        int cmp0 = compare(this, getZero());",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2423,        if (cmp0 == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2424,            return sign < 0 ? -0.0 : +0.0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2425,        } else if (cmp0 < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2426,            y = negate();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2427,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2432,        int exponent = (int)(y.log10() * 3.32);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2433,        if (exponent < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2434,            exponent--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2437,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2438,        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2439,            tempDfp = tempDfp.multiply(2);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2440,            exponent++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2442,        exponent--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2446,"        y = y.divide(DfpMath.pow(getTwo(), exponent));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2447,        if (exponent > -1023) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2448,            y = y.subtract(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2451,        if (exponent < -1074) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2452,            return 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2455,        if (exponent > 1023) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2456,            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2460,        y = y.multiply(newInstance(4503599627370496l)).rint();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2461,        String str = y.toString();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2462,"        str = str.substring(0, str.length()-1);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2463,        long mantissa = Long.parseLong(str);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2465,        if (mantissa == 4503599627370496L) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2467,            mantissa = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2468,            exponent++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2472,        if (exponent <= -1023) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2473,            exponent--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2476,        while (exponent < -1023) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2477,            exponent++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2478,            mantissa >>>= 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2481,        long bits = mantissa | ((exponent + 1023L) << 52);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2482,        double x = Double.longBitsToDouble(bits);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2484,        if (negate) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2485,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2488,        return x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2497,        double split[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2498,        long mask = 0xffffffffc0000000L;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2500,        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2501,        split[1] = subtract(newInstance(split[0])).toDouble();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,2503,        return split;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,16,96,public class Dfp implements FieldElement<Dfp> {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,16,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,16,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,16,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,16,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,16,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,16,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,16,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,262,        rMode = mode;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,263,    },0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,284,        return ieeeFlags;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,298,        ieeeFlags = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,299,    },0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,313,        ieeeFlags = flags & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,314,    },0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,338,        return new Dfp(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,346,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,354,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,362,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,370,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,378,        return new Dfp(d);,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,386,"        return new Dfp(this, s);",0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,396,"        return new Dfp(this, sign, nans);",0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,410,        return one;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,415,        return Dfp.class;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,422,        return two;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,429,        return sqr2;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,436,        return sqr2Split.clone();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,443,        return sqr2Reciprocal;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,450,        return sqr3;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,457,        return sqr3Reciprocal;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,464,        return pi;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,471,        return piSplit.clone();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,478,        return e;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,485,        return eSplit.clone();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,492,        return ln2;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,499,        return ln2Split.clone();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,506,        return ln5;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,513,        return ln5Split.clone();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,520,        return ln10;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,16,27,public class DfpField implements Field<Dfp> {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,16,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,16,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,16,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,16,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,16,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,16,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,16,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,16,49,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,16,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,16,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,16,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,16,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,16,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,16,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,16,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,16,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3755,    private static class lnMant {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3769,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3771,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,350,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,362,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,363,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,365,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,366,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,367,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,376,        return Math.sqrt(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,385,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,402,      final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,403,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,404,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,406,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,408,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,409,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,411,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,412,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,413,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,416,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,417,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,418,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,419,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,422,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,424,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,427,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,428,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,429,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,430,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,431,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,432,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,434,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,435,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,436,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,444,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,445,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,446,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,454,      if (x > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,456,              return 0.5 * exp(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,458,      if (x < -20) {,0.0,1,-1,0
org/apache/commons/math3/util/FastMath,16,460,              return -0.5 * exp(-x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,463,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,464,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,467,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,468,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,469,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,474,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,475,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,476,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,478,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,479,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,481,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,482,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,483,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,486,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,487,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,488,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,489,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,492,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,494,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,496,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,497,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,500,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,501,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,502,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,503,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,504,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,505,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,507,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,508,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,509,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,511,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,512,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,514,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,515,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,518,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,519,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,520,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,521,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,522,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,523,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,524,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,526,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,527,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,528,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,530,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,533,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,534,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,537,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,538,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,539,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,540,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,541,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,542,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,544,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,545,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,548,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,549,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,552,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,560,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,562,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,563,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,572,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,573,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,576,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,577,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,580,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,581,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,584,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,585,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,586,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,590,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,591,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,593,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,595,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,596,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,599,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,600,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,601,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,602,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,603,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,606,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,607,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,608,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,609,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,610,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,612,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,613,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,614,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,617,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,618,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,619,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,620,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,623,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,626,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,628,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,630,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,631,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,633,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,635,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,637,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,638,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,641,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,642,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,645,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,646,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,647,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,648,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,649,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,651,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,652,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,653,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,656,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,657,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,658,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,659,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,662,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,665,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,667,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,669,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,672,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,673,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,676,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,684,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,692,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,693,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,694,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,695,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,699,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,700,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,702,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,703,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,704,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,705,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,706,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,707,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,708,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,710,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,714,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,722,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,723,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,724,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,725,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,729,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,730,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,732,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,733,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,734,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,735,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,736,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,737,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,738,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,740,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,744,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,753,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,762,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,770,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,778,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,786,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,830,            intVal = (int) -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,832,            if (intVal > 746) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,833,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,834,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,835,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,837,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,840,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,842,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,843,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,844,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,845,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,847,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,850,            if (intVal == 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,852,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,853,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,854,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,855,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,857,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,860,            intVal++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,862,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,863,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,865,            intVal = -intVal;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,871,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,872,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,923,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,930,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,931,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,942,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,951,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,952,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,955,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,958,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,959,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,960,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,961,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,963,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,964,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,965,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,966,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,973,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,975,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,976,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,977,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,981,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,982,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,983,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,985,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,986,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,987,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,989,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,990,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,991,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,993,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,998,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,999,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1000,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1001,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1002,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1003,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1005,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1006,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1007,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1008,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1010,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1011,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1012,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1013,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1016,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1018,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1019,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1020,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1022,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1023,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1024,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1026,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1027,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1028,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1032,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1033,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1034,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1036,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1038,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1039,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1041,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1043,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1044,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1046,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1048,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1049,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1051,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1053,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1054,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1055,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1056,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1057,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1058,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1059,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1061,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1062,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1063,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1065,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1076,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1077,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1080,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1081,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1084,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1085,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1086,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1089,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1099,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1109,        if (x==0) { // Handle special case of +0/-0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1110,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1112,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1115,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1116,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1117,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1118,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1121,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1126,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1127,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1128,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1131,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1135,        int exp = (int)(bits >> 52)-1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1137,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1139,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1141,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1142,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1145,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1149,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1150,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1151,                --exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1152,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1157,        if (exp == -1 || exp == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1158,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1163,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1164,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1165,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1166,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1167,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1168,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1169,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1171,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1172,                double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1173,                double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1175,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1177,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1178,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1180,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1181,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1182,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1185,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1186,                    aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1187,                    ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1189,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1190,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1191,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1195,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1196,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1198,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1199,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1200,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1202,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1207,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1218,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1220,        double lnza = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1221,        double lnzb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1223,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1225,            double tmp = epsilon * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1226,            double aa = epsilon + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1227,            double ab = epsilon - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1228,            double xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1229,            double xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1232,            final double numer = bits & 0x3ffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1233,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1234,            aa = numer - xa*denom - xb * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1235,            xb += aa / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1238,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1239,            double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1240,            double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1242,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1244,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1245,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1247,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1248,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1249,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1252,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1253,                aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1254,                ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1256,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1257,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1258,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1262,            aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1263,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1271,            lnza = aa + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1272,            lnzb = -(lnza - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1273,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1276,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1277,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1278,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1279,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1280,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1281,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1282,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1299,        double a = LN_2_A*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1300,        double b = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1301,        double c = a+lnm[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1302,        double d = -(c-a-lnm[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1303,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1304,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1306,        c = a + lnza;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1307,        d = -(c - a - lnza);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1308,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1309,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1311,        c = a + LN_2_B*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1312,        d = -(c - a - LN_2_B*exp);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1313,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1314,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1316,        c = a + lnm[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1317,        d = -(c - a - lnm[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1318,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1319,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1321,        c = a + lnzb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1322,        d = -(c - a - lnzb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1323,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1324,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1326,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1327,            hiPrec[0] = a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1328,            hiPrec[1] = b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1331,        return a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1341,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1342,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1345,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1346,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1349,        if (x > 1e-6 ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1351,            final double xpa = 1 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1352,            final double xpb = -(xpa - 1 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1354,            final double[] hiPrec = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1355,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1356,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1357,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1362,            final double fx1 = xpb / xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1363,            final double epsilon = 0.5 * fx1 + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1364,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1367,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1368,            return y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1377,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1379,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1380,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1381,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1384,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1385,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1386,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1388,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1389,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1391,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1411,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1422,        final double lns[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1424,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1425,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1428,        if (x != x) { // X is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1429,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1433,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1434,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1435,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1437,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1439,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1440,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1443,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1444,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1448,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1449,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1451,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1452,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1455,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1458,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1459,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1460,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1462,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1463,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1465,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1469,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1470,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1471,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1474,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1475,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1477,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1481,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1482,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1483,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1486,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1487,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1488,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1489,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1492,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1495,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1496,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1497,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1498,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1501,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1505,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1507,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1508,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1511,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1512,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1514,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1519,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1521,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1522,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1525,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1527,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1529,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1536,        if (y < 8e298 && y > -8e298) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1537,            double tmp1 = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1538,            ya = y + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1539,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1540,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1541,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1542,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1543,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1544,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1548,"        final double lores = log(x, lns);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1549,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1550,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1553,        double lna = lns[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1554,        double lnb = lns[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1557,        double tmp1 = lna * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1558,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1559,        lnb += lna - tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1560,        lna = tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1563,        final double aa = lna * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1564,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1566,        lna = aa+ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1567,        lnb = -(lna - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1569,        double z = 1.0 / 120.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1570,        z = z * lnb + (1.0 / 24.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1571,        z = z * lnb + (1.0 / 6.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1572,        z = z * lnb + 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1573,        z = z * lnb + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1574,        z = z * lnb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1576,"        final double result = exp(lna, z, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1578,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1591,        if (e == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1592,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1593,        } else if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1594,            e = -e;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1595,            d = 1.0 / d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1600,        final int splitFactor = 0x8000001;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1601,        final double cd       = splitFactor * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1602,        final double d1High   = cd - (cd - d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1603,        final double d1Low    = d - d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1606,        double resultHigh = 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1607,        double resultLow  = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1610,        double d2p     = d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1611,        double d2pHigh = d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1612,        double d2pLow  = d1Low;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1614,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1616,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1619,                final double tmpHigh = resultHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1620,                final double cRH     = splitFactor * resultHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1621,                final double rHH     = cRH - (cRH - resultHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1622,                final double rHL     = resultHigh - rHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1623,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1624,                resultHigh = tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1625,                resultLow  = resultLow * d2p + tmpLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1630,            final double tmpHigh = d2pHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1631,            final double cD2pH   = splitFactor * d2pHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1632,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1633,            final double d2pHL   = d2pHigh - d2pHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1634,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1635,            final double cTmpH   = splitFactor * tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1636,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1637,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1638,            d2p     = d2pHigh + d2pLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1640,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1642,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1644,        return resultHigh + resultLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1656,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1658,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1659,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1660,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1661,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1664,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1666,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1676,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1678,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1679,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1680,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1681,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1682,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1684,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1695,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1696,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1699,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1700,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1701,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1702,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1705,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1706,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1707,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1708,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1711,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1712,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1713,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1714,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1740,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1741,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1743,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1744,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1745,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1746,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1747,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1749,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1750,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1751,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1752,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1753,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1755,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1770,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1797,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1798,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1800,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1801,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1802,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1803,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1806,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1808,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1819,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1820,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1822,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1823,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1824,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1826,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1839,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1840,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1843,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1844,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1845,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1846,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1849,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1850,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1851,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1852,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1855,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1856,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1857,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1858,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1883,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1884,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1887,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1888,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1889,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1890,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1891,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1893,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1894,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1895,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1896,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1897,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1899,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1900,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1902,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1903,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1907,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1909,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1910,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1911,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1912,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1913,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1915,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1916,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1917,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1918,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1919,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1921,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1922,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1924,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1925,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1927,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1929,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1930,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1944,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1947,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1948,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1949,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1951,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1952,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1953,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1956,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1957,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1958,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1960,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1963,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1964,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1965,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1968,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1971,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1988,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1989,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1992,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1993,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1996,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,1997,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2003,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2004,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2006,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2007,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2008,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2009,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2010,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2012,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2013,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2014,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2018,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2019,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2021,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2022,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2024,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2025,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2026,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2027,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2029,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2030,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2032,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2033,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2034,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2037,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2039,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2042,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2043,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2045,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2046,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2048,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2051,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2053,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2057,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2058,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2059,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2060,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2061,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2064,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2066,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2067,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2068,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2069,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2071,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2073,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2077,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2078,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2080,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2081,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2082,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2084,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2096,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2099,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2100,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2101,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2104,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2105,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2107,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2108,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2110,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2111,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2112,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2113,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2115,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2116,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2118,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2119,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2120,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2123,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2125,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2128,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2129,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2131,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2132,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2134,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2137,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2139,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2143,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2144,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2145,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2146,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2147,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2150,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2152,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2153,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2154,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2155,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2157,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2159,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2163,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2164,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2165,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2166,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2167,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2168,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2169,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2172,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2174,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2175,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2176,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2177,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2179,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2181,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2185,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2186,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2188,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2189,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2192,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2193,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2194,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2195,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2204,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2205,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2207,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2210,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2211,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2212,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2213,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2217,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2218,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2219,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2220,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2222,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2225,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2226,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2230,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2234,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2235,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2236,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2237,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2238,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2239,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2240,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2241,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2242,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2243,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2246,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2247,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2250,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2252,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2254,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2256,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2258,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2260,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2271,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2274,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2275,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2276,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2279,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2280,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2284,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2285,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2289,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2290,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2291,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2292,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2293,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2294,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2295,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2296,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2297,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2298,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2304,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2306,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2308,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2310,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2312,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2314,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2325,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2326,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2329,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2330,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2331,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2332,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2336,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2337,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2338,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2339,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2341,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2344,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2345,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2349,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2350,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2354,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2355,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2356,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2357,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2358,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2359,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2360,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2361,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2362,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2363,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2366,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2368,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2369,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2371,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2372,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2373,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2375,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2376,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2377,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2378,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2382,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2383,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2385,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2388,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2389,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2392,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2401,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2411,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2414,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2415,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2418,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2420,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2421,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2422,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2425,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2426,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2430,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2431,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2433,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2434,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2436,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2437,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2438,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2440,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2441,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2442,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2445,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2446,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2447,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2448,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2449,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2452,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2455,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2457,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2458,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2459,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2460,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2461,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2462,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2463,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2464,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2465,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2466,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2468,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2469,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2471,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2472,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2473,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2475,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2476,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2477,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2480,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2482,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2483,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2487,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2488,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2491,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2502,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2503,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2504,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2505,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2506,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2507,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2508,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2511,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2513,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2514,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2515,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2518,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2521,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2522,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2523,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2524,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2525,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2527,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2528,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2530,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2532,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2533,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2535,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2536,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2537,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2539,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2540,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2544,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2545,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2548,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2558,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2559,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2562,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2563,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2564,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2565,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2567,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2568,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2569,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2571,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2575,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2576,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2577,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2579,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2582,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2588,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2589,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2590,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2593,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2594,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2597,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2600,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2601,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2602,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2605,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2606,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2609,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2612,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2613,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2614,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2617,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2618,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2622,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2624,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2625,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2628,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2629,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2635,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2636,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2637,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2640,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2641,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2646,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2647,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2648,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2651,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2652,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2655,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2656,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2658,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2660,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2661,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2662,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2664,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2665,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2669,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2671,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2679,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2680,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2683,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2684,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2687,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2688,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2691,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2692,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2695,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2696,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2702,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2703,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2704,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2707,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2708,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2711,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2712,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2714,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2715,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2717,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2718,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2719,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2723,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2724,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2725,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2726,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2729,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2732,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2735,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2736,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2737,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2738,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2740,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2741,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2743,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2744,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2745,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2747,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2755,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2756,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2759,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2760,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2763,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2764,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2767,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2768,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2771,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2772,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2778,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2779,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2780,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2783,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2784,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2787,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2788,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2790,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2791,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2793,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2794,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2795,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2798,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2799,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2800,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2801,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2804,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2807,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2808,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2809,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2812,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2815,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2816,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2819,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2820,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2822,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2823,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2825,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2826,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2827,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2829,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2838,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2839,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2840,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2842,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2843,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2844,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2848,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2849,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2850,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2851,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2854,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2856,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2860,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2863,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2867,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2870,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2871,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2872,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2873,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2874,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2876,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2881,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2882,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2883,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2886,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2887,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2888,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2890,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2891,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2892,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2893,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2894,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2895,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2897,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2898,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2900,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2901,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2902,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2904,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2907,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2909,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2910,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2913,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2923,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2924,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2928,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2929,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2931,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2932,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2934,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2935,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2936,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2938,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2953,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2954,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2956,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2957,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2959,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2968,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2977,        return (x < 0l) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,2986,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3005,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3016,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3017,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3019,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3031,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3032,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3036,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3037,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3039,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3040,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3042,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3043,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3047,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3048,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3049,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3050,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3053,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3055,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3057,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3059,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3060,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3064,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3067,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3068,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3069,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3071,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3073,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3077,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3081,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3084,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3085,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3086,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3088,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3089,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3091,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3092,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3094,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3097,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3098,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3100,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3115,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3116,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3120,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3121,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3123,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3124,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3126,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3127,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3131,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3132,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3133,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3134,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3137,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3139,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3141,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3143,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3144,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3148,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3151,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3152,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3153,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3155,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3157,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3161,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3165,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3168,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3169,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3170,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3172,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3173,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3175,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3176,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3178,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3181,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3182,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3184,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3224,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3225,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3226,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3227,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3228,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3229,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3230,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3231,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3236,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3237,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3238,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3239,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3241,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3280,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3281,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3282,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3283,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3284,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3285,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3286,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3287,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3292,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3293,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3294,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3295,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3297,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3309,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3310,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3313,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3314,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3317,        y = (long) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3318,        if (x < 0 && y != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3319,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3322,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3323,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3326,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3336,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3337,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3340,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3341,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3342,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3345,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3347,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3348,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3351,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3359,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3360,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3362,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3363,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3364,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3366,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3368,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3369,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3373,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3374,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3382,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3390,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3399,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3408,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3417,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3418,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3420,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3421,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3424,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3425,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3429,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3430,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3431,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3433,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3442,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3443,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3445,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3446,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3449,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3450,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3454,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3455,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3456,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3458,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3476,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3485,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3486,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3488,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3489,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3492,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3493,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3497,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3498,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3499,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3501,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3511,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3518,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3524,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3544,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3545,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3546,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3547,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3550,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3551,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3552,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3554,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3555,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3557,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3561,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3564,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3565,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3568,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3571,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3599,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3611,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3612,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3613,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3614,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3616,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3628,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3629,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3630,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3631,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3633,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3646,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3659,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3668,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3669,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3670,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3671,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3672,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3673,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3674,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3675,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3676,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3677,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3678,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3679,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3680,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3788,                  double xb) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3791,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3797,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3798,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3799,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3801,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3802,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3803,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3804,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3806,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3807,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3808,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3809,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3811,                if (remA > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3812,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3818,                --k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3819,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3821,            this.finalK = k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3822,            this.finalRemA = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3823,            this.finalRemB = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3824,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3830,            return finalK;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3836,            return finalRemA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,16,3842,            return finalRemB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,6134,    private FastMathLiteralArrays() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,16,6174,        return LN_MANT.clone();,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,106,    public MersenneTwister() {,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,107,        mt = new int[N];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,108,        setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,109,    },0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,114,    public MersenneTwister(int seed) {,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,115,        mt = new int[N];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,116,        setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,117,    },0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,123,    public MersenneTwister(int[] seed) {,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,124,        mt = new int[N];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,125,        setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,126,    },0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,168,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,169,            return;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,233,        if (mti >= N) { // generate N words at one time,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,234,            int mtNext = mt[0];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,235,            for (int k = 0; k < N - M; ++k) {,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,236,                int mtCurr = mtNext;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,237,                mtNext = mt[k + 1];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,241,            for (int k = N - M; k < N - 1; ++k) {,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,242,                int mtCurr = mtNext;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,243,                mtNext = mt[k + 1];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,250,            mti = 0;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,253,        y = mt[mti++];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,256,        y ^=  y >>> 11;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,257,        y ^= (y <<   7) & 0x9d2c5680;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,258,        y ^= (y <<  15) & 0xefc60000;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,259,        y ^=  y >>> 18;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,16,261,        return y >>> (32 - bits);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,61,        return next(1) != 0;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,66,        int i = 0;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,67,        final int iEnd = bytes.length - 3;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,68,        while (i < iEnd) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,69,            final int random = next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,70,            bytes[i]     = (byte) (random & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,71,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,72,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,73,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,74,            i += 4;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,75,        },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,76,        int random = next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,77,        while (i < bytes.length) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,78,            bytes[i++] = (byte) (random & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,79,            random     = random >> 8;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,81,    },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,85,        final long high = ((long) next(26)) << 26;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,86,        final int  low  = next(26);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,87,        return (high | low) * 0x1.0p-52d;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,92,        return next(23) * 0x1.0p-23f;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,99,        if (Double.isNaN(nextGaussian)) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,101,            final double x = nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,102,            final double y = nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,103,            final double alpha = 2 * FastMath.PI * x;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,104,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,105,            random       = r * FastMath.cos(alpha);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,106,            nextGaussian = r * FastMath.sin(alpha);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,107,        } else {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,109,            random = nextGaussian;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,110,            nextGaussian = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,113,        return random;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,119,        return next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,138,        if (n > 0) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,139,            if ((n & -n) == n) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,140,                return (int) ((n * (long) next(31)) >> 31);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,145,                bits = next(31);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,146,                val = bits % n;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,147,            } while (bits - val + (n - 1) < 0);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,148,            return val;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,150,        throw new NotStrictlyPositiveException(n);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,155,        final long high  = ((long) next(32)) << 32;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,156,        final long  low  = ((long) next(32)) & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,16,157,        return high | low;,0.0,0,-1,0
