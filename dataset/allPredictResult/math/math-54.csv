project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,0.08333,0,0,0
org/apache/commons/math/dfp/Dfp,54,1041,        return result;,0.07143,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1234,            a.exp = b.exp;,0.05556,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,0.05556,0,-1,0
org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",0.05263,1,-1,1
org/apache/commons/math/dfp/Dfp,54,801,        return nans == INFINITE;,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1105,        return exp * 4 - 4;,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2305,        if (isInfinite()) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2313,        if (isNaN()) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2317,        Dfp y = this;,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2318,        boolean negate = false;,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2319,        if (lessThan(getZero())) {,0.05263,1,-1,0
org/apache/commons/math/dfp/Dfp,54,2326,        int exponent = (int)(y.log10() * 3.32);,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2327,        if (exponent < 0) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2331,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2332,        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2336,        exponent--;,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2340,"        y = y.divide(DfpMath.pow(getTwo(), exponent));",0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2341,        if (exponent > -1023) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2342,            y = y.subtract(getOne());,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2345,        if (exponent < -1074) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2349,        if (exponent > 1023) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2354,        y = y.multiply(newInstance(4503599627370496l)).rint();,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2355,        String str = y.toString();,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2356,"        str = str.substring(0, str.length()-1);",0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2357,        long mantissa = Long.parseLong(str);,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2359,        if (mantissa == 4503599627370496L) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2366,        if (exponent <= -1023) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2370,        while (exponent < -1023) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2375,        long bits = mantissa | ((exponent + 1023L) << 52);,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2376,        double x = Double.longBitsToDouble(bits);,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2378,        if (negate) {,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2382,        return x;,0.05263,0,-1,0
org/apache/commons/math/dfp/Dfp,54,661,        return field.getTwo();,0.05,0,-1,0
org/apache/commons/math/dfp/DfpField,54,414,        return two;,0.05,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1096,        if (mant[mant.length-1] > 1000) {,0.04762,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1099,        if (mant[mant.length-1] > 100) {,0.04762,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1102,        if (mant[mant.length-1] > 10) {,0.04762,0,-1,0
org/apache/commons/math/dfp/Dfp,54,539,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {",0.04167,0,-1,0
org/apache/commons/math/dfp/Dfp,54,540,        this.field = field;,0.04167,0,-1,0
org/apache/commons/math/dfp/Dfp,54,541,        this.mant    = new int[field.getRadixDigits()];,0.04167,0,-1,0
org/apache/commons/math/dfp/Dfp,54,542,        this.sign    = sign;,0.04167,0,-1,0
org/apache/commons/math/dfp/Dfp,54,543,        this.exp     = 0;,0.04167,0,-1,0
org/apache/commons/math/dfp/Dfp,54,544,        this.nans    = nans;,0.04167,0,-1,0
org/apache/commons/math/dfp/Dfp,54,545,    },0.04167,0,-1,0
org/apache/commons/math/dfp/Dfp,54,918,        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);,0.04167,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2153,                    def = newInstance(getZero());,0.04167,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2154,                    def.nans = QNAN;,0.04167,0,-1,0
org/apache/commons/math/dfp/DfpField,54,393,"        return new Dfp(this, sign, nans);",0.04167,0,-1,0
org/apache/commons/math/dfp/DfpField,54,383,"        return new Dfp(this, s);",0.04,0,-1,0
org/apache/commons/math/dfp/Dfp,54,959,        boolean changed = false;,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,961,        if (isNaN()) {,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,965,        if (nans == INFINITE) {,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,969,        if (mant[mant.length-1] == 0) {,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,976,        if (exp < 0) {,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,987,        if (exp >= mant.length) {,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,994,        Dfp result = newInstance(this);,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,995,        for (int i = 0; i < mant.length-result.exp; i++) {,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,996,            changed |= result.mant[i] != 0;,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,997,            result.mant[i] = 0;,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1000,        if (changed) {,0.03846,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1634,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1635,            result = newInstance(getZero());,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1636,            result.sign = (byte) (sign * divisor.sign);,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1637,            result.nans = INFINITE;,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1638,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1639,            return result;,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2144,                if (nans == FINITE && mant[mant.length-1] != 0) {,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2146,                    def = newInstance(getZero());,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2147,                    def.sign = (byte)(sign*oper.sign);,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2148,                    def.nans = INFINITE;,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2151,                if (nans == FINITE && mant[mant.length-1] == 0) {,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2157,                if (nans == INFINITE || nans == QNAN) {,0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2162,                if (nans == INFINITE || nans == SNAN) {,0.03704,0,-1,0
org/apache/commons/math/dfp/DfpField,54,295,        ieeeFlags = 0;,0.03704,0,-1,0
org/apache/commons/math/dfp/DfpField,54,296,    },0.03704,0,-1,0
org/apache/commons/math/dfp/Dfp,54,654,        return field.getOne();,0.03571,0,-1,0
org/apache/commons/math/dfp/DfpField,54,407,        return one;,0.03571,0,-1,0
org/apache/commons/math/dfp/Dfp,54,399,            sign = -1;,0.03125,0,-1,0
org/apache/commons/math/dfp/Dfp,54,423,                break;,0.03125,0,-1,0
org/apache/commons/math/dfp/Dfp,54,485,            decimalPos = q-offset;,0.03125,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1001,            switch (rmode) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,202,"        this(field, (long) x);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,203,    },0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,209,"    protected Dfp(final DfpField field, long x) {",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,212,        mant = new int[field.getRadixDigits()];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,213,        nans = FINITE;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,214,        this.field = field;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,216,        boolean isLongMin = false;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,217,        if (x == Long.MIN_VALUE) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,225,        if (x < 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,226,            sign = -1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,227,            x = -x;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,229,            sign = 1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,232,        exp = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,233,        while (x != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,235,            mant[mant.length - 1] = (int) (x % RADIX);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,236,            x /= RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,237,            exp++;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,240,        if (isLongMin) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,250,    },0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,319,    public Dfp(final Dfp d) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,320,        mant  = d.mant.clone();,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,321,        sign  = d.sign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,322,        exp   = d.exp;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,323,        nans  = d.nans;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,324,        field = d.field;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,325,    },0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,331,"    protected Dfp(final DfpField field, final String s) {",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,334,        mant = new int[field.getRadixDigits()];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,335,        sign = 1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,336,        exp = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,337,        nans = FINITE;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,338,        this.field = field;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,340,        boolean decimalFound = false;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,341,        final int rsize = 4;   // size of radix in decimal digits,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,342,        final int offset = 4;  // Starting offset into Striped,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,343,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,346,        if (s.equals(POS_INFINITY_STRING)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,352,        if (s.equals(NEG_INFINITY_STRING)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,358,        if (s.equals(NAN_STRING)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,365,"        int p = s.indexOf(""e"");",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,366,        if (p == -1) { // try upper case?,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,367,"            p = s.indexOf(""E"");",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,371,        int sciexp = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,372,        if (p != -1) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,394,            fpdecimal = s;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,398,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,403,        p = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,406,        int decimalPos = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,408,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,409,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,412,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,413,                decimalPos--;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,416,            if (fpdecimal.charAt(p) == '.') {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,417,                decimalFound = true;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,420,            p++;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,422,            if (p == fpdecimal.length()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,428,        int q = offset;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,429,        striped[0] = '0';,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,430,        striped[1] = '0';,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,431,        striped[2] = '0';,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,432,        striped[3] = '0';,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,433,        int significantDigits=0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,435,            if (p == (fpdecimal.length())) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,436,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,440,            if (q == mant.length*rsize+offset+1) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,441,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,444,            if (fpdecimal.charAt(p) == '.') {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,445,                decimalFound = true;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,446,                decimalPos = significantDigits;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,447,                p++;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,448,                continue;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,451,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,456,            striped[q] = fpdecimal.charAt(p);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,457,            q++;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,458,            p++;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,459,            significantDigits++;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,464,        if (decimalFound && q != offset) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,466,                q--;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,467,                if (q == offset) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,470,                if (striped[q] == '0') {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,471,                    significantDigits--;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,479,        if (decimalFound && significantDigits == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,484,        if (!decimalFound) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,489,        q = offset;  // set q to point to first sig digit,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,490,        p = significantDigits-1+offset;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,492,        int trailingZeros = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,493,        while (p > q) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,494,            if (striped[p] != '0') {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,495,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,502,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,503,        q -= i;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,504,        decimalPos += i;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,507,        while ((p - q) < (mant.length * rsize)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,508,            for (i = 0; i < rsize; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,509,                striped[++p] = '0';,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,515,        for (i = mant.length - 1; i >= 0; i--) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,516,            mant[i] = (striped[q]   - '0') * 1000 +,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,520,            q += 4;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,524,        exp = (decimalPos+sciexp) / rsize;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,526,        if (q < striped.length) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,528,            round((striped[q] - '0')*1000);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,531,    },0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,595,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,602,        return new Dfp(d);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,633,        return field;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,640,        return field.getRadixDigits();,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,647,        return field.getZero();,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,667,        for (int i = mant.length - 1; i > 0; i--) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,668,            mant[i] = mant[i-1];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,670,        mant[0] = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,671,        exp--;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,672,    },0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,679,        for (int i = 0; i < mant.length - 1; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,680,            mant[i] = mant[i+1];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,682,        mant[mant.length - 1] = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,683,        exp++;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,684,    },0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,695,        int lostdigit = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,696,        boolean inexact = false;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,698,        int diff = exp - e;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,700,        int adiff = diff;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,701,        if (adiff < 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,702,            adiff = -adiff;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,705,        if (diff == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,706,            return 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,709,        if (adiff > (mant.length + 1)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,711,"            Arrays.fill(mant, 0);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,712,            exp = e;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,714,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,715,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,717,            return 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,720,        for (int i = 0; i < adiff; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,721,            if (diff < 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,726,                if (lostdigit != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,727,                    inexact = true;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,730,                lostdigit = mant[0];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,732,                shiftRight();,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,738,        if (inexact) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,739,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,740,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,743,        return lostdigit;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,754,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,763,        if (isNaN() || x.isNaN()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,769,"        return compare(this, x) < 0;",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,779,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,788,        if (isNaN() || x.isNaN()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,794,"        return compare(this, x) > 0;",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,808,        return (nans == QNAN) || (nans == SNAN);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,818,        if (other instanceof Dfp) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,819,            final Dfp x = (Dfp) other;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,820,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,824,"            return compare(this, x) == 0;",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,845,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,849,        return greaterThan(x) || lessThan(x);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,860,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,862,            return 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,865,        if (a.sign != b.sign) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,874,        if (a.nans == INFINITE && b.nans == FINITE) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,878,        if (a.nans == FINITE && b.nans == INFINITE) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,882,        if (a.nans == INFINITE && b.nans == INFINITE) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,887,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,888,            if (a.exp < b.exp) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,889,                return -a.sign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,892,            if (a.exp > b.exp) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,893,                return a.sign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,898,        for (int i = a.mant.length - 1; i >= 0; i--) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,899,            if (a.mant[i] > b.mant[i]) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,900,                return a.sign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,903,            if (a.mant[i] < b.mant[i]) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,904,                return -a.sign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,908,        return 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1145,        extra = RADIX-extra;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1146,        for (int i = 0; i < mant.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1147,            mant[i] = RADIX-mant[i]-1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1150,        int rh = extra / RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1151,        extra = extra - rh * RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1152,        for (int i = 0; i < mant.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1153,            final int r = mant[i] + rh;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1154,            rh = r / RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1155,            mant[i] = r - rh * RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1158,        return extra;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1168,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1176,        if (nans != FINITE || x.nans != FINITE) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1207,        Dfp a = newInstance(this);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1208,        Dfp b = newInstance(x);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1211,        Dfp result = newInstance(getZero());,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1214,        final byte asign = a.sign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1215,        final byte bsign = b.sign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1217,        a.sign = 1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1218,        b.sign = 1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1221,        byte rsign = bsign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1222,"        if (compare(a, b) > 0) {",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1223,            rsign = asign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1229,        if (b.mant[mant.length-1] == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1230,            b.exp = a.exp;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1233,        if (a.mant[mant.length-1] == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1238,        int aextradigit = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1239,        int bextradigit = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1240,        if (a.exp < b.exp) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1241,            aextradigit = a.align(b.exp);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1243,            bextradigit = b.align(a.exp);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1247,        if (asign != bsign) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1248,            if (asign == rsign) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1249,                bextradigit = b.complement(bextradigit);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1251,                aextradigit = a.complement(aextradigit);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1256,        int rh = 0; /* acts as a carry */,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1257,        for (int i = 0; i < mant.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1258,            final int r = a.mant[i]+b.mant[i]+rh;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1259,            rh = r / RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1260,            result.mant[i] = r - rh * RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1262,        result.exp = a.exp;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1263,        result.sign = rsign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1268,        if (rh != 0 && (asign == bsign)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1269,            final int lostdigit = result.mant[0];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1270,            result.shiftRight();,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1271,            result.mant[mant.length-1] = rh;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1272,            final int excp = result.round(lostdigit);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1273,            if (excp != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1274,"                result = dotrap(excp, ADD_TRAP, x, result);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1279,        for (int i = 0; i < mant.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1280,            if (result.mant[mant.length-1] != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1281,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1283,            result.shiftLeft();,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1284,            if (i == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1285,                result.mant[0] = aextradigit+bextradigit;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1286,                aextradigit = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1287,                bextradigit = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1292,        if (result.mant[mant.length-1] == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1293,            result.exp = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1295,            if (asign != bsign) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1297,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1302,        final int excp = result.round(aextradigit + bextradigit);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1303,        if (excp != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1304,"            result = dotrap(excp, ADD_TRAP, x, result);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1307,        return result;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1314,        Dfp result = newInstance(this);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1315,        result.sign = (byte) - result.sign;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1316,        return result;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1324,        return add(x.negate());,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1332,        boolean inc = false;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1333,        switch (field.getRoundingMode()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1351,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1352,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1368,        if (inc) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1370,            int rh = 1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1371,            for (int i = 0; i < mant.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1372,                final int r = mant[i] + rh;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1373,                rh = r / RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1374,                mant[i] = r - rh * RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1377,            if (rh != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1384,        if (exp < MIN_EXP) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1390,        if (exp > MAX_EXP) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1396,        if (n != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1398,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1399,            return DfpField.FLAG_INEXACT;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1402,        return 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1413,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1420,        Dfp result = newInstance(getZero());,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1423,        if (nans != FINITE || x.nans != FINITE) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1460,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1462,        for (int i = 0; i < mant.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1463,            int rh = 0;  // acts as a carry,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1464,            for (int j=0; j<mant.length; j++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1465,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1466,                r = r + product[i+j] + rh;  // add to the product digit with carry in,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1468,                rh = r / RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1469,                product[i+j] = r - rh * RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1471,            product[i+mant.length] = rh;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1475,"        int md = mant.length * 2 - 1;  // default, in case result is zero",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1476,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1477,            if (product[i] != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1478,                md = i;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1479,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1484,        for (int i = 0; i < mant.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1485,            result.mant[mant.length - i - 1] = product[md - i];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1489,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1490,        result.sign = (byte)((sign == x.sign)?1:-1);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1492,        if (result.mant[mant.length-1] == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1494,            result.exp = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1498,        if (md > (mant.length-1)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1499,            excp = result.round(product[md-mant.length]);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1504,        if (excp != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1505,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1508,        return result;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1585,        int trial=0;    // trial quotient digit,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1588,        int md=0;       // most sig digit in result,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1592,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1599,        Dfp result = newInstance(getZero());,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1602,        if (nans != FINITE || divisor.nans != FINITE) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1633,        if (divisor.mant[mant.length-1] == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1642,        dividend = new int[mant.length+1];  // one extra digit needed,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1643,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1644,        remainder = new int[mant.length+1]; // one extra digit needed,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1648,        dividend[mant.length] = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1649,        quotient[mant.length] = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1650,        quotient[mant.length+1] = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1651,        remainder[mant.length] = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1656,        for (int i = 0; i < mant.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1657,            dividend[i] = mant[i];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1658,            quotient[i] = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1659,            remainder[i] = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1663,        nsqd = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1664,        for (qd = mant.length+1; qd >= 0; qd--) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1668,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1669,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1670,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1672,            trialgood = false;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1673,            while (!trialgood) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1675,                trial = (min+max)/2;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1678,                int rh = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1679,                for (int i = 0; i < mant.length + 1; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1680,                    int dm = (i<mant.length)?divisor.mant[i]:0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1681,                    final int r = (dm * trial) + rh;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1682,                    rh = r / RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1683,                    remainder[i] = r - rh * RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1687,                rh = 1;  // carry in to aid the subtraction,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1688,                for (int i = 0; i < mant.length + 1; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1689,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1690,                    rh = r / RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1691,                    remainder[i] = r - rh * RADIX;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1695,                if (rh == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1697,                    max = trial-1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1698,                    continue;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1702,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1703,                minadj = minadj / (divisor.mant[mant.length-1]+1);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1705,                if (minadj >= 2) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1706,                    min = trial+minadj;  // update the minimum,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1707,                    continue;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1712,                trialgood = false;  // assume false,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1713,                for (int i = mant.length - 1; i >= 0; i--) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1714,                    if (divisor.mant[i] > remainder[i]) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1715,                        trialgood = true;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1717,                    if (divisor.mant[i] < remainder[i]) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1718,                        break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1722,                if (remainder[mant.length] != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1723,                    trialgood = false;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1726,                if (trialgood == false) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1727,                    min = trial+1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1729,            },0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1732,            quotient[qd] = trial;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1733,            if (trial != 0 || nsqd != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1734,                nsqd++;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1737,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1742,            if (nsqd > mant.length) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1744,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1748,            dividend[0] = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1749,            for (int i = 0; i < mant.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1750,                dividend[i + 1] = remainder[i];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1755,        md = mant.length;  // default,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1756,        for (int i = mant.length + 1; i >= 0; i--) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1757,            if (quotient[i] != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1758,                md = i;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1759,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1764,        for (int i=0; i<mant.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1765,            result.mant[mant.length-i-1] = quotient[md-i];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1769,        result.exp = exp - divisor.exp + md - mant.length;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1770,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1772,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1773,            result.exp = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1776,        if (md > (mant.length-1)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1777,            excp = result.round(quotient[md-mant.length]);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1782,        if (excp != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1783,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1786,        return result;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1797,        if (nans != FINITE) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1808,        if (divisor == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1818,        if (divisor < 0 || divisor >= RADIX) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1826,        Dfp result = newInstance(this);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1828,        int rl = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1829,        for (int i = mant.length-1; i >= 0; i--) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1830,            final int r = rl*RADIX + result.mant[i];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1831,            final int rh = r / divisor;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1832,            rl = r - rh * divisor;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1833,            result.mant[i] = rh;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1836,        if (result.mant[mant.length-1] == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1838,            result.shiftLeft();,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1839,            final int r = rl * RADIX;        // compute the next digit and put it in,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1840,            final int rh = r / divisor;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1841,            rl = r - rh * divisor;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1842,            result.mant[0] = rh;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1845,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1846,        if (excp != 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1847,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1850,        return result;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1860,        if (nans == FINITE && mant[mant.length-1] == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1865,        if (nans != FINITE) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1885,        if (sign == -1) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1896,        Dfp x = newInstance(this);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1899,        if (x.exp < -1 || x.exp > 1) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1904,        switch (x.mant[mant.length-1] / 2000) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1906,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1907,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1915,                x.mant[mant.length-1] = 3000;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1918,        Dfp dx = newInstance(x);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1923,        Dfp px  = getZero();,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1924,        Dfp ppx = getZero();,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1925,        while (x.unequal(px)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1926,            dx = newInstance(x);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1927,            dx.sign = -1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1928,            dx = dx.add(this.divide(x));,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1929,            dx = dx.divide(2);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1930,            ppx = px;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1931,            px = x;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1932,            x = x.add(dx);,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1934,            if (x.equals(ppx)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1941,            if (dx.mant[mant.length-1] == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1942,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1946,        return x;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1955,        if (nans != FINITE) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1964,        if (exp > mant.length || exp < -1) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1968,        return dfp2string();,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2057,        char buffer[] = new char[mant.length*4 + 20];,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2058,        int p = 1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2060,        int e = exp;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2061,        boolean pointInserted = false;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2063,        buffer[0] = ' ';,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2065,        if (e <= 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2066,            buffer[p++] = '0';,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2067,            buffer[p++] = '.';,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2068,            pointInserted = true;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2071,        while (e < 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2079,        for (int i = mant.length - 1; i >= 0; i--) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2080,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2081,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2082,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2083,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2084,            if (--e == 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2085,                buffer[p++] = '.';,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2086,                pointInserted = true;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2090,        while (e > 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2098,        if (!pointInserted) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2104,        q = 1;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2105,        while (buffer[q] == '0') {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2106,            q++;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2108,        if (buffer[q] == '.') {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2109,            q--;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2113,        while (buffer[p-1] == '0') {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2114,            p--;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2118,        if (sign < 0) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2122,"        return new String(buffer, q, p - q);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2134,        Dfp def = result;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2136,        switch (type) {,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2185,            default: def = result; break;,0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2188,"        return trap(type, what, oper, def, result);",0.01613,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2204,        return def;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,29,    public enum RoundingMode {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,32,"        ROUND_DOWN,",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,35,"        ROUND_UP,",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,38,"        ROUND_HALF_UP,",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,41,"        ROUND_HALF_DOWN,",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,46,"        ROUND_HALF_EVEN,",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,49,"        ROUND_HALF_ODD,",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,52,"        ROUND_CEIL,",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,55,        ROUND_FLOOR;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,174,"        this(decimalDigits, true);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,175,    },0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,190,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,191,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,192,        this.ieeeFlags   = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,193,"        this.zero        = new Dfp(this, 0);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,194,"        this.one         = new Dfp(this, 1);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,195,"        this.two         = new Dfp(this, 2);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,197,        if (computeConstants) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,199,            synchronized (DfpField.class) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,205,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,208,"                sqr2           = new Dfp(this, sqr2String);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,209,                sqr2Split      = split(sqr2String);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,211,"                sqr3           = new Dfp(this, sqr3String);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,213,"                pi             = new Dfp(this, piString);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,214,                piSplit        = split(piString);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,215,"                e              = new Dfp(this, eString);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,216,                eSplit         = split(eString);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,217,"                ln2            = new Dfp(this, ln2String);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,218,                ln2Split       = split(ln2String);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,219,"                ln5            = new Dfp(this, ln5String);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,220,                ln5Split       = split(ln5String);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,221,"                ln10           = new Dfp(this, ln10String);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,223,            },0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,226,            sqr2           = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,227,            sqr2Split      = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,228,            sqr2Reciprocal = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,229,            sqr3           = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,230,            sqr3Reciprocal = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,231,            pi             = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,232,            piSplit        = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,233,            e              = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,234,            eSplit         = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,235,            ln2            = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,236,            ln2Split       = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,237,            ln5            = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,238,            ln5Split       = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,239,            ln10           = null;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,242,    },0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,248,        return radixDigits;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,266,        return rMode;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,328,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,329,    },0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,400,        return zero;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,522,      Dfp result[] = new Dfp[2];,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,523,      boolean leading = true;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,524,      int sp = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,525,      int sig = 0;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,527,      char[] buf = new char[a.length()];,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,529,      for (int i = 0; i < buf.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,530,        buf[i] = a.charAt(i);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,532,        if (buf[i] >= '1' && buf[i] <= '9') {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,533,            leading = false;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,536,        if (buf[i] == '.') {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,537,          sig += (400 - sig) % 4;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,538,          leading = false;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,541,        if (sig == (radixDigits / 2) * 4) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,542,          sp = i;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,543,          break;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,546,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,547,            sig ++;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,551,"      result[0] = new Dfp(this, new String(buf, 0, sp));",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,553,      for (int i = 0; i < buf.length; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,554,        buf[i] = a.charAt(i);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,555,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,556,            buf[i] = '0';,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,560,"      result[1] = new Dfp(this, new String(buf));",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,562,      return result;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,570,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,573,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,574,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,575,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,576,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,578,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,579,            sqr2String           = highPrecisionSqr2.toString();,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,580,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,582,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,583,            sqr3String           = highPrecisionSqr3.toString();,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,584,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,586,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,587,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,588,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,589,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,590,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,593,    },0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,603,        Dfp sqrt2   = two.sqrt();,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,604,        Dfp yk      = sqrt2.subtract(one);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,605,        Dfp four    = two.add(two);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,606,        Dfp two2kp3 = two;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,607,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,615,        for (int i = 1; i < 20; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,616,            final Dfp ykM1 = yk;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,618,            final Dfp y2         = yk.multiply(yk);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,619,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,620,            final Dfp s          = oneMinusY4.sqrt().sqrt();,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,621,            yk = one.subtract(s).divide(one.add(s));,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,623,            two2kp3 = two2kp3.multiply(four);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,625,            final Dfp p = one.add(yk);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,626,            final Dfp p2 = p.multiply(p);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,627,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,629,            if (yk.equals(ykM1)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,630,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,634,        return one.divide(ak);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,645,        Dfp y  = new Dfp(one);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,646,        Dfp py = new Dfp(one);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,647,        Dfp f  = new Dfp(one);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,648,        Dfp fi = new Dfp(one);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,649,        Dfp x  = new Dfp(one);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,651,        for (int i = 0; i < 10000; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,652,            x = x.multiply(a);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,653,            y = y.add(x.divide(f));,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,654,            fi = fi.add(one);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,655,            f = f.multiply(fi);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,656,            if (y.equals(py)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,657,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,659,            py = new Dfp(y);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,662,        return y;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,728,        int den = 1;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,729,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,731,        Dfp y = new Dfp(x);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,732,        Dfp num = new Dfp(x);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,733,        Dfp py = new Dfp(y);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,734,        for (int i = 0; i < 10000; i++) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,735,            num = num.multiply(x);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,736,            num = num.multiply(x);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,737,            den = den + 2;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,738,            Dfp t = num.divide(den);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,739,            y = y.add(t);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,740,            if (y.equals(py)) {,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,741,                break;,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,743,            py = new Dfp(y);,0.01613,0,-1,0
org/apache/commons/math/dfp/DfpField,54,746,        return y.multiply(two);,0.01613,0,-1,0
org/apache/commons/math/util/FastMath,54,250,    private FastMath() {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,251,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,73,    private static final double FACT[] = new double[20];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,76,    private static final double LN_MANT[][] = new double[1024][];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,85,    private static final double LN_SPLIT_COEF[][] = {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,105,    private static final double LN_QUICK_COEF[][] = {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,118,    private static final double LN_HI_PREC_COEF[][] = {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,128,    private static final double SINE_TABLE_A[] = new double[14];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,131,    private static final double SINE_TABLE_B[] = new double[14];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,134,    private static final double COSINE_TABLE_A[] = new double[14];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,137,    private static final double COSINE_TABLE_B[] = new double[14];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,140,    private static final double TANGENT_TABLE_A[] = new double[14];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,143,    private static final double TANGENT_TABLE_B[] = new double[14];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,146,    private static final long RECIP_2PI[] = new long[] {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,167,    private static final long PI_O_4_BITS[] = new long[] {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,208,        FACT[0] = 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,209,        for (i = 1; i < FACT.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,210,            FACT[i] = FACT[i-1] * i;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,213,        double tmp[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,214,        double recip[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,217,        for (i = 0; i < 750; i++) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,218,"            expint(i, tmp);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,222,            if (i != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,224,"                splitReciprocal(tmp, recip);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,225,                EXP_INT_TABLE_A[750-i] = recip[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,226,                EXP_INT_TABLE_B[750-i] = recip[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,232,"            slowexp(i/1024.0, tmp);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,238,        for (i = 0; i < LN_MANT.length; i++) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,240,            LN_MANT[i] = slowLog(d);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,244,        buildSinCosTables();,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,245,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,263,        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,264,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,266,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,267,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,268,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,277,        return Math.sqrt(a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,285,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,286,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,289,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,290,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,293,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,294,          return exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,297,      double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,298,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,299,          x = -x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,301,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,303,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,304,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,306,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,307,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,308,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,311,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,312,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,313,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,314,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,317,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,319,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,322,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,323,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,324,      ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,325,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,326,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,327,      ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,329,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,330,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,331,      return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,339,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,340,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,341,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,344,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,345,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,348,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,349,          return -exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,352,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,353,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,356,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,357,          x = -x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,358,          negate = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,363,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,364,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,365,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,367,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,368,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,370,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,371,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,372,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,375,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,376,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,377,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,378,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,381,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,383,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,385,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,386,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,389,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,390,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,391,          ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,392,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,393,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,394,          ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,396,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,397,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,398,      },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,400,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,401,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,403,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,404,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,407,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,408,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,409,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,410,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,411,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,412,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,413,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,415,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,416,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,417,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,419,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,422,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,423,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,426,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,427,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,428,          ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,429,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,430,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,431,          ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,433,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,434,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,437,      if (negate) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,438,          result = -result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,441,      return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,449,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,451,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,452,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,455,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,456,          return 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,459,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,460,          return -1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,463,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,464,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,467,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,468,          x = -x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,469,          negate = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,473,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,474,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,476,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,478,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,479,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,482,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,483,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,484,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,485,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,486,          na = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,489,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,490,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,491,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,492,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,493,          da = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,495,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,496,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,497,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,500,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,501,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,502,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,503,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,506,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,509,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,511,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,513,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,514,      },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,516,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,518,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,520,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,521,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,524,          double na = ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,525,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,528,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,529,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,530,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,531,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,532,          da = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,534,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,535,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,536,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,539,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,540,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,541,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,542,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,545,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,548,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,550,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,552,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,555,      if (negate) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,556,          result = -result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,559,      return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,567,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,576,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,577,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,578,            negative = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,579,            a = -a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,583,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,584,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,586,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,587,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,589,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,590,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,591,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,592,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,594,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,598,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,608,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,609,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,610,            negative = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,611,            a = -a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,615,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,616,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,618,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,619,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,620,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,621,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,622,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,623,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,624,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,630,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,649,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,657,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,665,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,673,        return Math.random();,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,697,"        return exp(x, 0.0, null);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,716,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,717,            intVal = (int) -x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,719,            if (intVal > 746) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,720,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,721,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,722,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,724,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,727,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,729,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,730,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,731,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,732,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,734,                return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,737,            if (intVal == 709) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,740,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,741,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,742,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,744,                return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,747,            intVal++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,752,            intVal = -intVal;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,754,            intVal = (int) x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,756,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,757,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,758,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,759,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,761,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,789,        double z = 0.04168701738764507;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,790,        z = z * epsilon + 0.1666666505023083;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,791,        z = z * epsilon + 0.5000000000042687;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,792,        z = z * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,793,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,800,        double tempA = intPartA * fracPartA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,807,        final double tempC = tempB + tempA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,809,        if (extra != 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,810,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,812,            result = tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,815,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,817,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,818,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,821,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,829,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,838,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,839,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,842,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,845,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,846,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,847,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,848,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,850,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,851,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,852,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,853,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,860,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,862,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,863,            x = -x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,864,            negative = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,868,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,869,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,870,            double tempB = EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,872,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,873,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,874,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,876,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,877,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,878,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,880,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,885,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,886,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,887,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,888,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,889,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,890,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,892,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,893,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,894,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,895,        za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,897,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,898,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,899,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,900,        za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,903,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,905,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,906,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,907,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,909,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,910,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,911,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,913,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,914,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,915,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,919,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,920,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,921,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,923,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,925,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,926,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,928,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,930,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,931,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,933,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,935,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,936,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,938,        if (negative) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,940,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,941,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,942,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,943,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,944,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,945,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,946,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,948,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,949,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,950,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,952,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,963,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,964,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,967,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,968,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,971,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,972,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,973,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,976,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,987,        final double xs[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,988,        final double ys[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,989,        final double facts[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,990,        final double as[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,991,"        split(x, xs);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,992,        ys[0] = ys[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,994,        for (int i = 19; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,995,"            splitMult(xs, ys, as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,996,            ys[0] = as[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,997,            ys[1] = as[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,999,"            split(FACT[i], as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1000,"            splitReciprocal(as, facts);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1002,"            splitAdd(ys, facts, as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1003,            ys[0] = as[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1004,            ys[1] = as[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1007,        if (result != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1008,            result[0] = ys[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1009,            result[1] = ys[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1012,        return ys[0] + ys[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1021,        if (d < 8e298 && d > -8e298) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1022,            final double a = d * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1023,            split[0] = (d + a) - a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1024,            split[1] = d - split[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1025,        } else {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1026,            final double a = d * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1027,            split[0] = (d + a - d) * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1028,            split[1] = d - split[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1030,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1037,        final double c = a[0] + a[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1038,        final double d = -(c - a[0] - a[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1040,        if (c < 8e298 && c > -8e298) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1041,            double z = c * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1042,            a[0] = (c + z) - z;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1043,            a[1] = c - a[0] + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1044,        } else {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1045,            double z = c * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1046,            a[0] = (c + z - c) * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1047,            a[1] = c - a[0] + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1049,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1057,        ans[0] = a[0] * b[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1061,        resplit(ans);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1062,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1070,        ans[0] = a[0] + b[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1071,        ans[1] = a[1] + b[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1073,        resplit(ans);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1074,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1095,        final double b = 1.0/4194304.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1096,        final double a = 1.0 - b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1098,        if (in[0] == 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1099,            in[0] = in[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1100,            in[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1103,        result[0] = a / in[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1107,            result[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1111,        resplit(result);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1113,        for (int i = 0; i < 2; i++) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1118,            err = err * (result[0] + result[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1120,            result[1] += err;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1122,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1130,        final double xs[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1131,        final double ys[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1132,        final double zs[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1135,"        split(a[0], xs);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1136,"        split(b[0], ys);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1137,"        splitMult(xs, ys, zs);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1139,        result[0] = zs[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1140,        result[1] = zs[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1143,"        split(b[1], ys);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1144,"        splitMult(xs, ys, zs);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1146,        double tmp = result[0] + zs[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1148,        result[0] = tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1149,        tmp = result[0] + zs[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1151,        result[0] = tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1154,"        split(a[1], xs);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1155,"        split(b[0], ys);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1156,"        splitMult(xs, ys, zs);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1158,        tmp = result[0] + zs[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1160,        result[0] = tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1161,        tmp = result[0] + zs[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1163,        result[0] = tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1166,"        split(a[1], xs);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1167,"        split(b[1], ys);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1168,"        splitMult(xs, ys, zs);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1170,        tmp = result[0] + zs[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1172,        result[0] = tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1173,        tmp = result[0] + zs[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1175,        result[0] = tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1176,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1185,        final double xs[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1186,        final double as[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1187,        final double ys[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1196,        xs[0] = 2.718281828459045;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1197,        xs[1] = 1.4456468917292502E-16;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1199,"        split(1.0, ys);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1201,        while (p > 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1202,            if ((p & 1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1203,"                quadMult(ys, xs, as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1204,                ys[0] = as[0]; ys[1] = as[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1207,"            quadMult(xs, xs, as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1208,            xs[0] = as[0]; xs[1] = as[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1210,            p >>= 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1213,        if (result != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1214,            result[0] = ys[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1215,            result[1] = ys[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1217,            resplit(result);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1220,        return ys[0] + ys[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1231,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1241,        if (x==0) { // Handle special case of +0/-0,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1242,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1244,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1247,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1248,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1249,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1250,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1253,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1258,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1259,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1260,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1263,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1267,        int exp = (int)(bits >> 52)-1023;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1269,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1271,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1273,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1274,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1277,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1281,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1282,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1283,                exp--;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1284,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1289,        if (exp == -1 || exp == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1290,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1295,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1296,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1297,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1298,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1299,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1300,                xa = aa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1301,                xb = ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1303,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1304,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1306,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1308,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1309,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1311,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1312,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1313,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1316,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1317,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1319,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1320,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1321,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1325,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1326,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1328,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1329,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1330,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1332,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1337,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1348,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1350,        double lnza = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1351,        double lnzb = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1353,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1355,            double tmp = epsilon * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1356,            double aa = epsilon + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1357,            double ab = epsilon - aa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1358,            double xa = aa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1359,            double xb = ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1362,            double numer = bits & 0x3ffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1363,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1364,            aa = numer - xa*denom - xb * denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1365,            xb += aa / denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1368,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1369,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1371,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1373,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1374,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1376,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1377,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1378,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1381,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1382,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1384,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1385,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1386,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1390,            aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1391,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1399,            lnza = aa + ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1400,            lnzb = -(lnza - aa - ab);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1401,        } else {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1404,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1405,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1406,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1407,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1408,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1409,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1410,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1427,        double a = LN_2_A*exp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1428,        double b = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1429,        double c = a+lnm[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1430,        double d = -(c-a-lnm[0]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1431,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1432,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1434,        c = a + lnza;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1435,        d = -(c - a - lnza);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1436,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1437,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1439,        c = a + LN_2_B*exp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1440,        d = -(c - a - LN_2_B*exp);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1441,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1442,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1444,        c = a + lnm[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1445,        d = -(c - a - lnm[1]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1446,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1447,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1449,        c = a + lnzb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1450,        d = -(c - a - lnzb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1451,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1452,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1454,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1455,            hiPrec[0] = a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1456,            hiPrec[1] = b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1459,        return a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1467,        double xpa = 1.0 + x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1468,        double xpb = -(xpa - 1.0 - x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1470,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1471,            return x/0.0;   // -Infinity,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1474,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1475,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1478,        if (x>1e-6 || x<-1e-6) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1479,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1481,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1482,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1483,                return lores;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1488,            double fx1 = xpb/xpa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1490,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1491,            epsilon = epsilon * fx1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1493,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1497,        double y = x * 0.333333333333333 - 0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1498,        y = y * x + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1499,        y = y * x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1501,        return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1509,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1511,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1512,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1513,            return lores;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1516,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1517,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1518,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1520,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1521,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1523,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1534,        final double lns[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1536,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1537,            return 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1540,        if (x != x) { // X is NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1541,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1545,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1546,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1547,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1549,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1551,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1552,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1555,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1556,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1559,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1560,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1564,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1565,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1567,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1568,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1571,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1574,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1575,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1576,                return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1578,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1579,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1581,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1585,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1586,            if (x * x == 1.0),0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1587,              return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1589,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1590,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1592,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1596,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1597,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1598,                return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1601,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1602,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1603,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1604,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1607,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1610,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1611,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1612,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1613,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1616,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1620,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1622,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1623,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1626,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1627,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1629,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1634,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1636,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1637,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1640,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1644,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1651,        if (y < 8e298 && y > -8e298) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1652,            double tmp1 = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1653,            ya = y + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1654,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1655,        } else {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1656,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1657,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1658,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1659,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1663,"        final double lores = log(x, lns);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1664,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1665,            return lores;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1668,        double lna = lns[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1669,        double lnb = lns[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1672,        double tmp1 = lna * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1673,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1674,        lnb += lna - tmp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1675,        lna = tmp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1678,        final double aa = lna * ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1679,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1681,        lna = aa+ab;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1682,        lnb = -(lna - aa - ab);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1684,        double z = 1.0 / 120.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1685,        z = z * lnb + (1.0 / 24.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1686,        z = z * lnb + (1.0 / 6.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1687,        z = z * lnb + 0.5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1688,        z = z * lnb + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1689,        z = z * lnb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1691,"        final double result = exp(lna, z, null);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1693,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1716,        double x[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1717,        double x2[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1718,        double y[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1719,        double a[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1721,"        split(xi, x);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1724,        x[0] += 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1725,        resplit(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1726,"        splitReciprocal(x, a);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1727,        x[0] -= 2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1728,        resplit(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1729,"        splitMult(x, a, y);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1730,        x[0] = y[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1731,        x[1] = y[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1734,"        splitMult(x, x, x2);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1744,"            splitMult(y, x2, a);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1745,            y[0] = a[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1746,            y[1] = a[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1748,            y[0] = a[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1749,            y[1] = a[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1752,"        splitMult(y, x, a);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1753,        y[0] = a[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1754,        y[1] = a[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1756,        return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1766,        final double xs[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1767,        final double ys[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1768,        final double facts[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1769,        final double as[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1770,"        split(x, xs);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1771,        ys[0] = ys[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1773,        for (int i = 19; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1774,"            splitMult(xs, ys, as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1775,            ys[0] = as[0]; ys[1] = as[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1777,            if ( (i & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1778,                continue;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1781,"            split(FACT[i], as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1782,"            splitReciprocal(as, facts);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1784,            if ( (i & 2) != 0 ) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1785,                facts[0] = -facts[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1786,                facts[1] = -facts[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1789,"            splitAdd(ys, facts, as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1790,            ys[0] = as[0]; ys[1] = as[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1793,        if (result != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1794,            result[0] = ys[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1795,            result[1] = ys[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1798,        return ys[0] + ys[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1809,        final double xs[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1810,        final double ys[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1811,        final double facts[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1812,        final double as[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1813,"        split(x, xs);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1814,        ys[0] = ys[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1816,        for (int i = 19; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1817,"            splitMult(xs, ys, as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1818,            ys[0] = as[0]; ys[1] = as[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1820,            if ( (i & 1) != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1821,                continue;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1824,"            split(FACT[i], as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1825,"            splitReciprocal(as, facts);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1827,            if ( (i & 2) != 0 ) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1828,                facts[0] = -facts[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1829,                facts[1] = -facts[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1832,"            splitAdd(ys, facts, as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1833,            ys[0] = as[0]; ys[1] = as[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1836,        if (result != null) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1837,            result[0] = ys[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1838,            result[1] = ys[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1841,        return ys[0] + ys[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1847,        final double result[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1850,        for (int i = 0; i < 7; i++) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1851,            double x = i / 8.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1853,"            slowSin(x, result);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1854,            SINE_TABLE_A[i] = result[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1855,            SINE_TABLE_B[i] = result[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1857,"            slowCos(x, result);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1858,            COSINE_TABLE_A[i] = result[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1859,            COSINE_TABLE_B[i] = result[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1863,        for (int i = 7; i < 14; i++) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1864,            double xs[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1865,            double ys[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1866,            double as[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1867,            double bs[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1868,            double temps[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1870,            if ( (i & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1872,                xs[0] = SINE_TABLE_A[i/2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1873,                xs[1] = SINE_TABLE_B[i/2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1874,                ys[0] = COSINE_TABLE_A[i/2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1875,                ys[1] = COSINE_TABLE_B[i/2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1878,"                splitMult(xs, ys, result);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1883,"                splitMult(ys, ys, as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1884,"                splitMult(xs, xs, temps);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1885,                temps[0] = -temps[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1886,                temps[1] = -temps[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1887,"                splitAdd(as, temps, result);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1888,                COSINE_TABLE_A[i] = result[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1889,                COSINE_TABLE_B[i] = result[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1891,                xs[0] = SINE_TABLE_A[i/2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1892,                xs[1] = SINE_TABLE_B[i/2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1893,                ys[0] = COSINE_TABLE_A[i/2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1894,                ys[1] = COSINE_TABLE_B[i/2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1895,                as[0] = SINE_TABLE_A[i/2+1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1896,                as[1] = SINE_TABLE_B[i/2+1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1901,"                splitMult(xs, bs, temps);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1902,"                splitMult(ys, as, result);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1903,"                splitAdd(result, temps, result);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1904,                SINE_TABLE_A[i] = result[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1905,                SINE_TABLE_B[i] = result[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1908,"                splitMult(ys, bs, result);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1909,"                splitMult(xs, as, temps);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1910,                temps[0] = -temps[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1911,                temps[1] = -temps[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1912,"                splitAdd(result, temps, result);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1913,                COSINE_TABLE_A[i] = result[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1914,                COSINE_TABLE_B[i] = result[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1919,        for (int i = 0; i < 14; i++) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1920,            double xs[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1921,            double ys[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1922,            double as[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1924,            as[0] = COSINE_TABLE_A[i];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1925,            as[1] = COSINE_TABLE_B[i];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1927,"            splitReciprocal(as, ys);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1929,            xs[0] = SINE_TABLE_A[i];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1930,            xs[1] = SINE_TABLE_B[i];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1932,"            splitMult(xs, ys, as);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1934,            TANGENT_TABLE_A[i] = as[0];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1935,            TANGENT_TABLE_B[i] = as[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1938,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1948,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1950,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1951,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1952,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1953,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1956,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1958,        return p;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1968,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1970,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1971,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1972,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1973,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1974,        p *= x2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1976,        return p;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1987,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1988,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1991,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1992,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1993,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1994,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1997,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1998,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,1999,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2000,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2003,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2004,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2005,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2006,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2032,        double a = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2033,        double b = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2035,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2036,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2037,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2038,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2039,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2041,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2042,        c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2043,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2044,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2045,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2047,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2062,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2089,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2090,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2092,            c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2093,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2094,            a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2095,            b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2098,        result = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2100,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2111,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2112,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2114,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2115,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2116,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2118,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2131,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2132,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2135,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2136,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2137,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2138,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2141,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2142,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2143,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2144,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2147,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2148,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2149,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2150,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2175,        double a = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2176,        double b = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2179,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2180,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2181,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2182,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2183,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2185,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2186,        c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2187,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2188,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2189,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2191,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2192,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2194,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2195,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2199,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2201,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2202,        c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2203,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2204,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2205,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2207,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2208,        c = a + t;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2209,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2210,        a = c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2211,        b = b + d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2213,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2214,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2216,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2217,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2219,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2221,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2222,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2236,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2239,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2240,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2241,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2243,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2244,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2245,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2248,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2249,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2250,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2252,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2255,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2256,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2257,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2260,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2263,        return est+err;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2280,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2281,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2284,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2285,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2288,        exponent++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2289,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2295,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2296,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2298,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2299,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2300,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2301,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2302,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2304,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2305,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2306,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2310,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2311,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2313,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2314,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2316,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2317,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2318,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2319,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2321,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2322,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2324,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2325,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2326,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2329,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2331,            prodA++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2334,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2335,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2337,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2338,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2340,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2343,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2345,            prodA++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2349,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2350,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2351,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2352,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2353,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2356,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2358,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2359,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2360,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2361,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2363,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2365,            prodA++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2369,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2370,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2372,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2373,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2374,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2376,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2388,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2391,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2392,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2393,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2396,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2397,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2399,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2400,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2402,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2403,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2404,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2405,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2407,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2408,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2410,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2411,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2415,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2417,            prod2A++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2420,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2421,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2423,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2424,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2426,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2429,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2431,            prod2A++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2435,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2436,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2437,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2438,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2439,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2442,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2444,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2445,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2446,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2447,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2449,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2451,            prod2A++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2455,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2456,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2457,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2458,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2459,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2460,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2461,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2464,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2466,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2467,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2468,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2469,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2471,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2473,            prod2A++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2477,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2478,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2480,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2481,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2484,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2485,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2486,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2487,    },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2495,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2496,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2498,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2501,        xa = x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2502,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2503,            negative = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2504,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2508,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2509,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2510,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2511,                return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2513,            return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2516,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2517,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2521,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2525,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2526,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2527,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2528,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2529,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2530,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2535,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2541,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2542,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2543,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2545,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2546,                double b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2547,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2548,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2550,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2551,                b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2552,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2553,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2555,                if (remA > 0.0),0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2556,                    break;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2561,                k--;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2562,            },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2563,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2564,            xa = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2565,            xb = remB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2568,        if (negative) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2569,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2572,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2574,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2576,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2578,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2580,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2582,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2592,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2595,        double xa = x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2596,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2597,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2600,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2601,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2605,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2606,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2610,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2611,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2612,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2613,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2614,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2615,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2620,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2626,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2627,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2628,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2630,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2631,                double b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2632,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2633,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2635,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2636,                b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2637,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2638,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2640,                if (remA > 0.0),0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2641,                    break;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2646,                k--;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2647,            },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2648,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2649,            xa = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2650,            xb = remB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2656,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2658,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2660,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2662,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2664,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2666,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2676,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2677,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2680,        double xa = x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2681,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2682,            negative = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2683,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2687,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2688,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2689,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2690,                return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2692,            return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2695,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2696,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2700,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2701,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2705,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2706,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2707,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2708,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2709,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2710,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2715,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2721,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2722,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2723,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2725,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2726,                double b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2727,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2728,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2730,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2731,                b = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2732,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2733,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2735,                if (remA > 0.0),0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2736,                    break;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2741,                k--;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2742,            },0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2743,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2744,            xa = remA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2745,            xb = remB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2748,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2750,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2751,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2753,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2754,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2755,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2757,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2758,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2759,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2760,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2764,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2765,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2767,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2770,        if (negative) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2771,            result = -result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2774,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2783,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2793,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2796,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2800,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2802,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2803,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2804,            negate = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2807,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2812,        if (xa < 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2813,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2815,            double temp = 1.0/xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2816,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2818,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2819,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2820,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2822,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2823,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2824,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2827,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2828,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2829,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2830,        xa = ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2831,        xb += yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2834,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2837,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2839,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2840,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2841,        } else {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2842,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2843,            double za = 1.0 + temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2844,            double zb = -(za - 1.0 - temp2);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2845,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2846,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2847,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2848,            za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2850,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2851,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2853,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2854,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2855,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2857,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2858,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2859,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2862,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2864,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2865,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2869,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2870,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2873,        double epsA2 = epsA*epsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2884,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2885,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2886,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2887,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2888,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2889,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2890,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2893,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2895,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2896,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2897,        ya = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2900,        yb += epsB / (1.0 + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2906,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2907,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2908,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2909,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2910,        za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2912,        result = za + zb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2913,        resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2915,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2917,            final double pia = 1.5707963267948966*2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2918,            final double pib = 6.123233995736766E-17*2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2920,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2921,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2922,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2924,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2925,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2929,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2930,            result = -result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2933,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2943,        if (x !=x || y != y) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2944,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2947,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2948,            double result = x*y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2949,            double invx = 1.0/x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2950,            double invy = 1.0/y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2952,            if (invx == 0.0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2953,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2954,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2956,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2960,            if (x < 0.0 || invx < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2961,                if (y < 0.0 || invy < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2962,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2964,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2967,                return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2973,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2974,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2975,                return Math.PI/4.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2978,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2979,                return Math.PI*3.0/4.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2982,            return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2985,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2986,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2987,                return -Math.PI/4.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2990,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2991,                return -Math.PI*3.0/4.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2994,            return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2997,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2998,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,2999,                return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3002,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3003,                return -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3007,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3009,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3010,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3013,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3014,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3020,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3021,            if (y > 0.0 || 1/y > 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3022,                return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3025,            if (y < 0.0 || 1/y < 0.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3026,                return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3031,        final double r = y/x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3032,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3033,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3036,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3037,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3040,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3041,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3043,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3045,        double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3046,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3047,        ra = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3049,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3050,"            ra = copySign(0.0, y);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3054,"        double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3056,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3064,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3065,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3068,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3069,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3072,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3073,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3076,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3077,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3080,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3081,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3087,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3088,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3089,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3092,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3093,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3096,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3097,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3099,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3100,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3102,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3103,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3104,      za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3108,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3109,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3110,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3111,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3114,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3117,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3120,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3121,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3122,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3123,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3125,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3126,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3128,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3129,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3130,      ra = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3132,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3140,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3141,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3144,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3145,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3148,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3149,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3152,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3153,          return 0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3156,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3157,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3163,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3164,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3165,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3168,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3169,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3172,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3173,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3175,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3176,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3178,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3179,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3180,      za = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3183,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3184,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3185,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3186,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3189,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3192,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3193,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3194,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3197,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3200,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3201,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3204,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3205,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3207,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3208,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3210,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3211,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3212,      ra = temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3214,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3223,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3224,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3225,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3227,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3228,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3229,              return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3233,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3234,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3235,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3236,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3239,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3241,          return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3245,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3252,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3255,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3256,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3257,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3258,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3259,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3261,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3266,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3267,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3268,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3271,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3272,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3273,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3275,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3276,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3277,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3278,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3279,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3280,      za = temp2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3282,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3283,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3285,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3286,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3287,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3289,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3292,      est *= p2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3294,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3295,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3298,      return est;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3308,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3309,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3313,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3314,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3316,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3317,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3319,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3320,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3321,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3323,        return result;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3333,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3334,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3338,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3339,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3341,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3342,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3344,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3353,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3362,        return (x < 0l) ? -x : x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3371,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3389,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3390,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3392,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3401,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3402,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3404,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3416,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3417,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3421,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3422,            return d;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3424,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3425,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3427,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3432,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3433,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3434,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3435,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3438,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3440,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3442,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3444,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3445,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3449,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3452,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3453,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3454,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3456,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3458,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3462,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3466,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3469,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3470,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3471,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3473,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3474,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3476,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3477,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3479,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3482,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3483,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3485,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3500,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3501,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3505,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3506,            return f;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3508,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3509,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3511,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3512,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3516,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3517,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3518,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3519,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3522,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3524,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3526,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3528,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3529,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3533,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3536,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3537,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3538,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3540,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3542,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3546,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3550,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3553,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3554,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3555,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3557,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3558,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3560,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3561,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3566,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3567,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3569,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3609,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3610,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3611,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3612,            return direction;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3613,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3614,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3615,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3616,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3621,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3622,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3623,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3624,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3626,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3665,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3666,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3667,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3668,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3669,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3670,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3671,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3672,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3677,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3678,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3679,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3680,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3682,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3694,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3695,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3698,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3699,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3702,        y = (long) x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3703,        if (x < 0 && y != x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3704,            y--;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3707,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3708,            return x*y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3711,        return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3721,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3722,            return x;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3725,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3726,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3727,            return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3730,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3732,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3733,            return x*y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3736,        return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3744,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3745,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3747,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3748,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3749,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3751,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3753,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3754,            return y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3758,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3759,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3767,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3775,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3784,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3793,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3802,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3803,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3805,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3806,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3809,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3810,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3814,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3815,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3816,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3818,        return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3827,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3828,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3830,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3831,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3834,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3835,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3839,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3840,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3841,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3843,        return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3852,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3861,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3870,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3871,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3873,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3874,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3877,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3878,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3882,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3883,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3884,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3886,        return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3895,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3896,            return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3898,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3899,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3902,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3903,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3907,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3908,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3909,            return b;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3911,        return a;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3929,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3930,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3931,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3932,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3935,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3936,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3937,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3939,                return abs(x);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3940,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3942,                return abs(y);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3946,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3949,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3950,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3953,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3956,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3984,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3996,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3997,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3998,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,3999,            return magnitude;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,4001,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,4013,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,4014,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,4015,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,4016,            return magnitude;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,4018,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math/util/FastMath,54,4044,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,181,    protected Dfp(final DfpField field) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,182,        mant = new int[field.getRadixDigits()];,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,183,        sign = 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,184,        exp = 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,185,        nans = FINITE;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,186,        this.field = field;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,187,    },0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,194,"        this(field, (long) x);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,195,    },0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,220,            isLongMin = true;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,221,            ++x;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,243,            for (int i = 0; i < mant.length - 1; i++) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,244,                if (mant[i] != 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,245,                    mant[i]++;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,246,                    break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,256,"    protected Dfp(final DfpField field, double x) {",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,259,        mant = new int[field.getRadixDigits()];,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,260,        sign = 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,261,        exp = 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,262,        nans = FINITE;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,263,        this.field = field;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,265,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,266,        long mantissa = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,267,        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,269,        if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,271,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,273,                return;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,276,            exponent++;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,279,            while ( (mantissa & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,280,                exponent--;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,281,                mantissa <<= 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,283,            mantissa &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,286,        if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,288,            if (x != x) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,289,                sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,290,                nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,291,            } else if (x < 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,292,                sign = (byte) -1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,293,                nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,295,                sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,296,                nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,298,            return;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,301,"        Dfp xdfp = new Dfp(field, mantissa);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,302,"        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,303,"        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,305,        if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,306,            xdfp = xdfp.negate();,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,309,"        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,310,        sign = xdfp.sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,311,        exp  = xdfp.exp;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,312,        nans = xdfp.nans;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,314,    },0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,347,            sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,348,            nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,349,            return;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,353,            sign = (byte) -1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,354,            nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,355,            return;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,359,            sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,360,            nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,361,            return;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,374,"            fpdecimal = s.substring(0, p);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,375,            String fpexp = s.substring(p+1);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,376,            boolean negative = false;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,378,            for (int i=0; i<fpexp.length(); i++),0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,380,                if (fpexp.charAt(i) == '-'),0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,382,                    negative = true;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,383,                    continue;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,385,                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9'),0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,386,                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,389,            if (negative) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,390,                sciexp = -sciexp;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,392,        } else {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,452,                p++;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,453,                continue;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,468,                    break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,480,            decimalPos = 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,497,            trailingZeros++;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,498,            p--;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,552,        return new Dfp(getField());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,560,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,568,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,584,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,596,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,597,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,598,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,599,"            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,612,"        return new Dfp(field, s);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,622,"        return field.newDfp(sig, code);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,734,                shiftLeft();,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,755,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,756,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,757,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,758,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,759,            return false;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,764,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,765,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,766,            return false;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,780,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,781,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,782,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,783,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,784,            return false;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,789,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,790,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,791,            return false;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,821,                return false;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,827,        return false;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,837,        return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,846,            return false;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,866,            if (a.sign == -1) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,867,                return -1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,869,                return 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,875,            return a.sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,879,            return -b.sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,883,            return 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,926,        return trunc(DfpField.RoundingMode.ROUND_FLOOR);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,934,        return trunc(DfpField.RoundingMode.ROUND_CEIL);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,943,        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,946,        if (result.mant[mant.length-1] == 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,947,            result.sign = sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,950,        return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,962,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,966,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,971,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,977,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,978,            Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,979,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,980,            return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,988,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1001,            switch (rmode) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1003,                    if (result.sign == -1) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1005,                        result = result.add(newInstance(-1));,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1010,                    if (result.sign == 1) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1012,                        result = result.add(getOne());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1018,"                    final Dfp half = newInstance(""0.5"");",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1019,                    Dfp a = subtract(result);  // difference between this and result,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1020,                    a.sign = 1;            // force positive (take abs),0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1021,                    if (a.greaterThan(half)) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1022,                        a = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1023,                        a.sign = sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1024,                        result = result.add(a);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1028,                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1029,                        a = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1030,                        a.sign = sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1031,                        result = result.add(a);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1036,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1037,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1038,            return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1050,        int result = 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1052,        rounded = rint();,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1054,        if (rounded.greaterThan(newInstance(2147483647))) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1055,            return 2147483647;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1058,        if (rounded.lessThan(newInstance(-2147483648))) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1059,            return -2147483648;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1062,        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1063,            result = result * RADIX + rounded.mant[i];,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1066,        if (rounded.sign == -1) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1067,            result = -result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1070,        return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1079,        return exp - 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1087,        Dfp d = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1088,        d.exp = e + 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1089,        return d;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1097,            return exp * 4 - 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1100,            return exp * 4 - 2;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1103,            return exp * 4 - 3;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1113,        Dfp d = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1115,        if (e >= 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1116,            d.exp = e / 4 + 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1118,            d.exp = (e + 1) / 4;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1121,        switch ((e % 4 + 4) % 4) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1123,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1125,                d = d.multiply(10);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1126,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1128,                d = d.multiply(100);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1129,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1131,                d = d.multiply(1000);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1134,        return d;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1169,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1170,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1171,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1172,"            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1177,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1178,                return this;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1181,            if (x.isNaN()) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1182,                return x;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1185,            if (nans == INFINITE && x.nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1186,                return this;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1189,            if (x.nans == INFINITE && nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1190,                return x;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1193,            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1194,                return x;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1197,            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1198,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1199,                Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1200,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1201,"                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1202,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1335,                inc = false;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1336,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1339,                inc = n != 0;       // round up if n!=0,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1340,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1343,                inc = n >= 5000;  // round half up,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1344,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1347,                inc = n > 5000;  // round half down,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1348,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1355,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1356,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1359,                inc = sign == 1 && n != 0;  // round ceil,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1360,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1364,                inc = sign == -1 && n != 0;  // round floor,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1378,                shiftRight();,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1379,                mant[mant.length-1] = rh;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1386,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1387,            return DfpField.FLAG_UNDERFLOW;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1392,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1393,            return DfpField.FLAG_OVERFLOW;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1414,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1415,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1416,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1417,"            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1424,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1425,                return this;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1428,            if (x.isNaN()) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1429,                return x;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1432,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1433,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1434,                result.sign = (byte) (sign * x.sign);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1435,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1438,            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1439,                result = newInstance(x);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1440,                result.sign = (byte) (sign * x.sign);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1441,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1444,            if (x.nans == INFINITE && nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1445,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1446,                result.sign = (byte) (sign * x.sign);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1447,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1450,            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1452,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1453,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1454,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1455,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1456,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1501,            excp = result.round(0); // has no effect except to check status,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1518,        Dfp result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1521,        if (nans != FINITE) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1522,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1523,                return this;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1526,            if (nans == INFINITE && x != 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1527,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1528,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1531,            if (nans == INFINITE && x == 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1532,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1533,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1534,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1535,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1536,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1541,        if (x < 0 || x >= RADIX) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1542,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1543,            result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1544,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1545,"            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1546,            return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1549,        int rh = 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1550,        for (int i = 0; i < mant.length; i++) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1551,            final int r = mant[i] * x + rh;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1552,            rh = r / RADIX;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1553,            result.mant[i] = r - rh * RADIX;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1556,        int lostdigit = 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1557,        if (rh != 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1558,            lostdigit = result.mant[0];,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1559,            result.shiftRight();,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1560,            result.mant[mant.length-1] = rh;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1563,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1564,            result.exp = 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1567,        final int excp = result.round(lostdigit);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1568,        if (excp != 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1569,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1572,        return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1593,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1594,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1595,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1596,"            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1603,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1604,                return this;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1607,            if (divisor.isNaN()) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1608,                return divisor;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1611,            if (nans == INFINITE && divisor.nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1612,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1613,                result.sign = (byte) (sign * divisor.sign);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1614,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1617,            if (divisor.nans == INFINITE && nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1618,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1619,                result.sign = (byte) (sign * divisor.sign);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1620,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1623,            if (divisor.nans == INFINITE && nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1624,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1625,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1626,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1627,"                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1628,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1739,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1779,            excp = result.round(0);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1798,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1799,                return this;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1802,            if (nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1803,                return newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1809,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1810,            Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1811,            result.sign = sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1812,            result.nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1813,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1814,            return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1819,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1820,            Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1821,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1822,"            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1823,            return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1862,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1866,            if (nans == INFINITE && sign == 1) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1868,                return newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1871,            if (nans == QNAN) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1872,                return newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1875,            if (nans == SNAN) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1878,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1879,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1880,"                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1881,                return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1889,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1890,            result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1891,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1892,"            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1893,            return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1900,            x.exp = this.exp / 2;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1909,                x.mant[mant.length-1] = 1500;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1910,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1912,                x.mant[mant.length-1] = 2200;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1913,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1936,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1957,            if (nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1958,                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1960,                return NAN_STRING;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1965,            return dfp2sci();,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1976,        char rawdigits[]    = new char[mant.length * 4];,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1977,        char outputbuffer[] = new char[mant.length * 4 + 20];,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1985,        p = 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1986,        for (int i = mant.length - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1987,            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1988,            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1989,            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1990,            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1994,        for (p = 0; p < rawdigits.length; p++) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1995,            if (rawdigits[p] != '0') {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1996,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,1999,        shf = p;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2002,        q = 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2003,        if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2004,            outputbuffer[q++] = '-';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2007,        if (p != rawdigits.length) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2009,            outputbuffer[q++] = rawdigits[p++];,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2010,            outputbuffer[q++] = '.';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2012,            while (p<rawdigits.length) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2013,                outputbuffer[q++] = rawdigits[p++];,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2016,            outputbuffer[q++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2017,            outputbuffer[q++] = '.';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2018,            outputbuffer[q++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2019,            outputbuffer[q++] = 'e';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2020,            outputbuffer[q++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2021,"            return new String(outputbuffer, 0, 5);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2024,        outputbuffer[q++] = 'e';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2028,        e = exp * 4 - shf - 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2029,        ae = e;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2030,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2031,            ae = -e;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2035,        for (p = 1000000000; p > ae; p /= 10) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2039,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2040,            outputbuffer[q++] = '-';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2043,        while (p > 0) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2044,            outputbuffer[q++] = (char)(ae / p + '0');,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2045,            ae = ae % p;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2046,            p = p / 10;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2049,"        return new String(outputbuffer, 0, q);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2072,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2073,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2074,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2075,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2076,            e++;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2091,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2092,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2093,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2094,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2095,            e--;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2100,            buffer[p++] = '.';,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2138,                def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2139,                def.sign = result.sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2140,                def.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2141,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2158,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2159,                    def.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2163,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2164,                    def.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2169,                if ( (result.exp+mant.length) < MIN_EXP) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2170,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2171,                    def.sign = result.sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2173,                    def = newInstance(result);  // gradual underflow,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2175,                result.exp = result.exp + ERR_SCALE;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2176,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2179,                result.exp = result.exp - ERR_SCALE;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2180,                def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2181,                def.sign = result.sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2182,                def.nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2183,                break;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2211,        return nans;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2221,        Dfp result = x.newInstance(x);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2222,        result.sign = y.sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2223,        return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2234,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2235,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2236,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2237,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2238,"            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2242,        boolean up = false;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2243,        if (this.lessThan(x)) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2244,            up = true;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2247,"        if (compare(this, x) == 0) {",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2248,            return newInstance(x);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2251,        if (lessThan(getZero())) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2252,            up = !up;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2257,        if (up) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2258,            inc = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2259,            inc.exp = this.exp-mant.length+1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2260,            inc.sign = this.sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2262,            if (this.equals(getZero())) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2263,                inc.exp = MIN_EXP-mant.length;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2266,            result = add(inc);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2268,            inc = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2269,            inc.exp = this.exp;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2270,            inc.sign = this.sign;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2272,            if (this.equals(inc)) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2273,                inc.exp = this.exp-mant.length;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2275,                inc.exp = this.exp-mant.length+1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2278,            if (this.equals(getZero())) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2279,                inc.exp = MIN_EXP-mant.length;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2282,            result = this.subtract(inc);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2285,        if (result.classify() == INFINITE && this.classify() != INFINITE) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2286,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2287,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2290,        if (result.equals(getZero()) && this.equals(getZero()) == false) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2291,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2292,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2295,        return result;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2306,            if (lessThan(getZero())) {,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2307,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2309,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2314,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2320,            y = negate();,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2321,            negate = true;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2333,            tempDfp = tempDfp.multiply(2);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2334,            exponent++;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2346,            return 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2350,            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2361,            mantissa = 0;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2362,            exponent++;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2367,            exponent--;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2371,            exponent++;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2372,            mantissa >>>= 1;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2379,            x = -x;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2391,        double split[] = new double[2];,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2392,        long mask = 0xffffffffc0000000L;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2394,        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2395,        split[1] = subtract(newInstance(split[0])).toDouble();,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,2397,        return split;,0.0,0,-1,0
org/apache/commons/math/dfp/Dfp,54,96,public class Dfp implements FieldElement<Dfp> {,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,259,        rMode = mode;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,260,    },0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,281,        return ieeeFlags;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,310,        ieeeFlags = flags & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,311,    },0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,335,        return new Dfp(this);,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,343,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,351,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,359,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,367,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,375,        return new Dfp(d);,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,421,        return sqr2;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,428,        return sqr2Split.clone();,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,435,        return sqr2Reciprocal;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,442,        return sqr3;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,449,        return sqr3Reciprocal;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,456,        return pi;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,463,        return piSplit.clone();,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,470,        return e;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,477,        return eSplit.clone();,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,484,        return ln2;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,491,        return ln2Split.clone();,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,498,        return ln5;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,505,        return ln5Split.clone();,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,512,        return ln10;,0.0,0,-1,0
org/apache/commons/math/dfp/DfpField,54,26,public class DfpField implements Field<Dfp> {,0.0,0,-1,0
