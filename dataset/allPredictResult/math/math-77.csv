project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,1.0,0,,0,0.2048904334493301,0.79510956655067
org/apache/commons/math/linear/AbstractRealVector,77,211,        Iterator<Entry> it = sparseIterator();,1.0,0,,0,0.9910023347986254,0.008997665201376327
org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,1.0,0,,0,0.571077806295513,0.4289221937044878
org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,1.0,0,,0,0.4277703090584223,0.5722296909415786
org/apache/commons/math/linear/AbstractRealVector,77,215,            sum += value * value;,1.0,0,,0,0.34204770754526825,0.6579522924547325
org/apache/commons/math/linear/AbstractRealVector,77,216,        },1.0,0,,0,0.13477796196683056,0.8652220380331681
org/apache/commons/math/linear/AbstractRealVector,77,217,        return Math.sqrt(sum);,1.0,0,,0,0.24015019098762783,0.7598498090123728
org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,1.0,0,,0,0.20590797623717086,0.7940920237628293
org/apache/commons/math/linear/AbstractRealVector,77,223,        Iterator<Entry> it = sparseIterator();,1.0,0,,0,0.9910023347986254,0.008997665201376327
org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,1.0,0,,0,0.571077806295513,0.4289221937044878
org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,1.0,0,,0,0.29805680064064677,0.7019431993593533
org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,1.0,0,,0,0.22096104611988535,0.7790389538801146
org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,1.0,1,,0,0.2048904334493301,0.79510956655067
org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,1.0,1,,0,0.6606989184155908,0.339301081584408
org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,1.0,1,,0,0.349108651896128,0.6508913481038723
org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,1.0,1,,0,0.18366285424064974,0.8163371457593488
org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,1.0,1,,0,0.36643757020266554,0.633562429797334
org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,1.0,1,,0,0.21993943235778532,0.7800605676422131
org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,1.0,0,,0,0.2048904334493301,0.79510956655067
org/apache/commons/math/linear/ArrayRealVector,77,710,        for (double a : data) {,1.0,0,,0,0.4678917750423427,0.5321082249576579
org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,1.0,0,,0,0.3069437180933145,0.6930562819066861
org/apache/commons/math/linear/ArrayRealVector,77,713,        return sum;,1.0,0,,0,0.21993943235778532,0.7800605676422131
org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,1.0,0,,0,0.2048904334493301,0.79510956655067
org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,1.0,0,,0,0.4678917750423427,0.5321082249576579
org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",1.0,1,,0,0.09897494908250332,0.9010250509174956
org/apache/commons/math/linear/ArrayRealVector,77,723,        return max;,1.0,0,,0,0.21993943235778532,0.7800605676422131
org/apache/commons/math/linear/OpenMapRealVector,77,863,        protected OpenMapSparseIterator() {,0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,866,        },0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,875,            iter.advance();,0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,854,    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {,0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,809,        return new OpenMapSparseIterator();,0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {",0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,825,        protected OpenMapEntry(Iterator iter) {,0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,826,            this.iter = iter;,0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,827,        },0.5,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,832,            return iter.value();,0.5,0,-1,0
org/apache/commons/math/linear/RealVector,77,72,    public abstract class Entry {,0.33333,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,117,"        this(values, DEFAULT_ZERO_TOLERANCE);",0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,118,    },0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,126,"    public OpenMapRealVector(double[] values, double epsilon) {",0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,127,        virtualSize = values.length;,0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,128,        entries = new OpenIntToDoubleHashMap(0.0);,0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,129,        this.epsilon = epsilon;,0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,130,        for (int key = 0; key < values.length; key++) {,0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,131,            double value = values[key];,0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,132,            if (!isDefaultValue(value)) {,0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,133,"                entries.put(key, value);",0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,136,    },0.14286,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,205,        return Math.abs(value) < epsilon;,0.14286,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,699,        double sum = 0;,0.08333,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,700,        for (double a : data) {,0.08333,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,701,            sum += a * a;,0.08333,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,703,        return Math.sqrt(sum);,0.08333,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,248,        return new Iterator();,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,39,public class OpenIntToDoubleHashMap implements Serializable {,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,505,        private Iterator() {,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,508,            referenceCount = count;,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,511,            next = -1;,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,513,                advance();,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,516,            },0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,518,        },0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,491,    public class Iterator {,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,525,            return next >= 0;,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,554,            if (referenceCount != count) {,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,558,            if (current < 0) {,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,561,            return values[current];,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,572,            if (referenceCount != count) {,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,578,            current = next;,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,582,                while (states[++next] != FULL) {,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,590,            },0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,585,            } catch (ArrayIndexOutOfBoundsException e) {,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,586,                next = -2;,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,587,                if (current < 0) {,0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,592,        },0.07143,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,110,"        this(DEFAULT_EXPECTED_SIZE, missingEntries);",0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,111,    },0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,127,                                  final double missingEntries) {,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,128,        final int capacity = computeCapacity(expectedSize);,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,129,        keys   = new int[capacity];,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,130,        values = new double[capacity];,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,131,        states = new byte[capacity];,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,132,        this.missingEntries = missingEntries;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,133,        mask   = capacity - 1;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,134,    },0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,160,        if (expectedSize == 0) {,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,163,        final int capacity   = (int) Math.ceil(expectedSize / LOAD_FACTOR);,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,164,        final int powerOfTwo = Integer.highestOneBit(capacity);,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,165,        if (powerOfTwo == capacity) {,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,166,            return capacity;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,266,"        return findInsertionIndex(keys, states, key, mask);",0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,279,        final int hash = hashOf(key);,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,280,        int index = hash & mask;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,281,        if (states[index] == FREE) {,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,282,            return index;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,417,        int index = findInsertionIndex(key);,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,418,        double previous = missingEntries;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,419,        boolean newMapping = true;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,420,        if (index < 0) {,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,425,        keys[index]   = key;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,426,        states[index] = FULL;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,427,        values[index] = value;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,428,        if (newMapping) {,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,429,            ++size;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,430,            if (shouldGrowTable()) {,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,433,            ++count;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,435,        return previous;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,476,        return size > (mask + 1) * LOAD_FACTOR;,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,485,        final int h = key ^ ((key >>> 20) ^ (key >>> 12));,0.02941,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,486,        return h ^ (h >>> 7) ^ (h >>> 4);,0.02941,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,34,public abstract class AbstractRealVector implements RealVector {,0.02273,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,819,    protected class SparseEntryIterator implements Iterator<Entry> {,0.02273,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,82,    public ArrayRealVector(double[] d) {,0.00813,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,83,        data = d.clone();,0.00813,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,84,    },0.00813,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,41,    private static final RealVectorFormat DEFAULT_FORMAT =,0.00585,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,173,        return getInstance(Locale.getDefault());,0.00585,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,30,public abstract class CompositeFormat extends Format {,0.00546,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,53,        final NumberFormat nf = NumberFormat.getInstance(locale);,0.00546,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,54,        nf.setMaximumFractionDigits(2);,0.00546,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,55,        return nf;,0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,94,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,95,    },0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,117,"                            final String separator, final NumberFormat format) {",0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,118,        this.prefix      = prefix;,0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,119,        this.suffix      = suffix;,0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,120,        this.separator   = separator;,0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,121,        trimmedPrefix    = prefix.trim();,0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,122,        trimmedSuffix    = suffix.trim();,0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,123,        trimmedSeparator = separator.trim();,0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,124,        this.format      = format;,0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,125,    },0.00546,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,182,        return new RealVectorFormat(getDefaultNumberFormat(locale));,0.00546,0,-1,0
org/apache/commons/math/MathRuntimeException,77,405,        return new NoSuchElementException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,413,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,419,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,59,"    public MathRuntimeException(final String pattern, final Object ... arguments) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,60,        this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,61,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,62,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,72,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,73,        this.pattern   = getMessage();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,74,        this.arguments = new Object[0];,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,75,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,88,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,89,        this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,90,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,91,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,102,            ResourceBundle bundle =,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,104,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,106,                return bundle.getString(s);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,111,        },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,109,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,115,        return s;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,128,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,136,        return pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,144,        return arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,154,"        return buildMessage(locale, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,160,        return getMessage(Locale.US);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,166,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,174,        printStackTrace(System.err);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,175,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,184,        synchronized (out) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,185,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,186,            printStackTrace(pw);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,188,            pw.flush();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,189,        },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,190,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,201,        return new ArithmeticException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,230,        return new ArrayIndexOutOfBoundsException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,259,        return new EOFException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,291,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,292,        ioe.initCause(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,293,        return ioe;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,305,        return new IllegalArgumentException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,333,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,334,        iae.initCause(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,335,        return iae;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,347,        return new IllegalStateException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,376,        return new ConcurrentModificationException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,405,        return new NoSuchElementException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,434,        return new NullPointerException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,466,"        return new ParseException(null, offset) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,492,"        final String pattern  = ""internal error, please fill a bug report at {0}"";",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,493,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,495,        return new RuntimeException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,37,public class MathRuntimeException extends RuntimeException {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,434,        return new NullPointerException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,442,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,448,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,347,        return new IllegalStateException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,355,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,361,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,48,"        super(FAILED_EVALUATION_MESSAGE, argument);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,49,        this.argument = new double[] { argument };,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,50,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,60,"        super(FAILED_EVALUATION_MESSAGE, new ArrayRealVector(argument));",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,61,        this.argument = argument.clone();,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,62,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,74,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,75,        this.argument = new double[] { argument };,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,76,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,88,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,89,        this.argument = argument.clone();,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,90,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,100,        super(cause);,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,101,        this.argument = new double[] { argument };,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,102,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,112,        super(cause);,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,113,        this.argument = argument.clone();,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,114,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,128,"        super(cause, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,129,        this.argument = new double[] { argument };,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,130,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,144,"        super(cause, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,145,        this.argument = argument.clone();,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,146,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,77,154,        return argument.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,77,55,    public MathException() {,0.0,0,-1,0
org/apache/commons/math/MathException,77,56,        this.pattern   = null;,0.0,0,-1,0
org/apache/commons/math/MathException,77,57,        this.arguments = new Object[0];,0.0,0,-1,0
org/apache/commons/math/MathException,77,58,    },0.0,0,-1,0
org/apache/commons/math/MathException,77,67,"    public MathException(String pattern, Object ... arguments) {",0.0,0,-1,0
org/apache/commons/math/MathException,77,68,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,77,69,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,77,70,    },0.0,0,-1,0
org/apache/commons/math/MathException,77,80,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathException,77,81,        this.pattern   = getMessage();,0.0,0,-1,0
org/apache/commons/math/MathException,77,82,        this.arguments = new Object[0];,0.0,0,-1,0
org/apache/commons/math/MathException,77,83,    },0.0,0,-1,0
org/apache/commons/math/MathException,77,96,      super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathException,77,97,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,77,98,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,77,99,    },0.0,0,-1,0
org/apache/commons/math/MathException,77,110,            ResourceBundle bundle =,0.0,0,-1,0
org/apache/commons/math/MathException,77,112,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math/MathException,77,114,                return bundle.getString(s);,0.0,0,-1,0
org/apache/commons/math/MathException,77,119,        },0.0,0,-1,0
org/apache/commons/math/MathException,77,117,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math/MathException,77,123,        return s;,0.0,0,-1,0
org/apache/commons/math/MathException,77,133,        return pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,77,142,        return arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,77,153,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);",0.0,0,-1,0
org/apache/commons/math/MathException,77,159,        return getMessage(Locale.US);,0.0,0,-1,0
org/apache/commons/math/MathException,77,165,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/MathException,77,173,        printStackTrace(System.err);,0.0,0,-1,0
org/apache/commons/math/MathException,77,174,    },0.0,0,-1,0
org/apache/commons/math/MathException,77,183,        synchronized (out) {,0.0,0,-1,0
org/apache/commons/math/MathException,77,184,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,-1,0
org/apache/commons/math/MathException,77,185,            printStackTrace(pw);,0.0,0,-1,0
org/apache/commons/math/MathException,77,187,            pw.flush();,0.0,0,-1,0
org/apache/commons/math/MathException,77,188,        },0.0,0,-1,0
org/apache/commons/math/MathException,77,189,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,466,"        return new ParseException(null, offset) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,474,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,480,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,119,    public static final ComposableFunction ASIN = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,122,            return Math.asin(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,28,public abstract class ComposableFunction implements UnivariateRealFunction {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,31,    public static final ComposableFunction ZERO = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,39,    public static final ComposableFunction ONE = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,47,    public static final ComposableFunction IDENTITY = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,55,    public static final ComposableFunction ABS = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,63,    public static final ComposableFunction NEGATE = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,71,    public static final ComposableFunction INVERT = new ComposableFunction () {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,79,    public static final ComposableFunction SIN = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,87,    public static final ComposableFunction SQRT = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,95,    public static final ComposableFunction SINH = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,103,    public static final ComposableFunction EXP = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,111,    public static final ComposableFunction EXPM1 = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,119,    public static final ComposableFunction ASIN = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,127,    public static final ComposableFunction ATAN = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,135,    public static final ComposableFunction TAN = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,143,    public static final ComposableFunction TANH = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,151,    public static final ComposableFunction CBRT = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,159,    public static final ComposableFunction CEIL = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,167,    public static final ComposableFunction FLOOR = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,175,    public static final ComposableFunction LOG = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,183,    public static final ComposableFunction LOG10 = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,191,    public static final ComposableFunction LOG1P = new ComposableFunction () {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,198,    public static final ComposableFunction COS = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,206,    public static final ComposableFunction ACOS = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,214,    public static final ComposableFunction COSH = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,222,    public static final ComposableFunction RINT = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,230,    public static final ComposableFunction SIGNUM = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,238,    public static final ComposableFunction ULP = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,255,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,274,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,295,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,310,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,325,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,340,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,355,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,370,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,384,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,412,        return new MultivariateRealFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,438,"        return asCollector(combiner, 0.0);",0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,455,"        return asCollector(BinaryFunction.ADD, initialValue);",0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,471,"        return asCollector(BinaryFunction.ADD, 0.0);",0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,255,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,259,                return ComposableFunction.this.value(f.value(x));,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,295,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,299,"                return combiner.value(ComposableFunction.this.value(x), f.value(x));",0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,310,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,314,                return ComposableFunction.this.value(x) + f.value(x);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,325,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,329,                return ComposableFunction.this.value(x) + a;,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,31,    public static final ComposableFunction ZERO = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,34,            return 0;,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,39,    public static final ComposableFunction ONE = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,42,            return 1;,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,47,    public static final ComposableFunction IDENTITY = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,50,            return d;,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,55,    public static final ComposableFunction ABS = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,58,            return Math.abs(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,63,    public static final ComposableFunction NEGATE = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,66,            return -d;,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,71,    public static final ComposableFunction INVERT = new ComposableFunction () {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,74,            return 1/d;,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,79,    public static final ComposableFunction SIN = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,82,            return Math.sin(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,87,    public static final ComposableFunction SQRT = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,90,            return Math.sqrt(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,95,    public static final ComposableFunction SINH = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,98,            return Math.sinh(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,103,    public static final ComposableFunction EXP = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,106,            return Math.exp(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,111,    public static final ComposableFunction EXPM1 = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,114,            return Math.expm1(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,127,    public static final ComposableFunction ATAN = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,130,            return Math.atan(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,135,    public static final ComposableFunction TAN = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,138,            return Math.tan(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,143,    public static final ComposableFunction TANH = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,146,            return Math.tanh(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,151,    public static final ComposableFunction CBRT = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,154,            return Math.cbrt(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,159,    public static final ComposableFunction CEIL = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,162,            return Math.ceil(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,167,    public static final ComposableFunction FLOOR = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,170,            return Math.floor(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,175,    public static final ComposableFunction LOG = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,178,            return Math.log(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,183,    public static final ComposableFunction LOG10 = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,186,            return Math.log10(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,191,    public static final ComposableFunction LOG1P = new ComposableFunction () {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,193,            return Math.log1p(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,198,    public static final ComposableFunction COS = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,201,            return Math.cos(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,206,    public static final ComposableFunction ACOS = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,209,            return Math.acos(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,214,    public static final ComposableFunction COSH = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,217,            return Math.cosh(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,222,    public static final ComposableFunction RINT = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,225,            return Math.rint(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,230,    public static final ComposableFunction SIGNUM = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,233,            return Math.signum(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,238,    public static final ComposableFunction ULP = new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,241,            return Math.ulp(d);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,274,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,278,                return f.value(ComposableFunction.this.value(x));,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,355,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,359,                return ComposableFunction.this.value(x) * f.value(x);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,370,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,374,                return ComposableFunction.this.value(x) * scaleFactor;,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,384,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,388,                return ComposableFunction.this.value(x) / f.value(x);,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,340,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,344,                return ComposableFunction.this.value(x) - f.value(x);,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,32,    public static final BinaryFunction ADD = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,35,            return x + y;,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,29,public abstract class BinaryFunction implements BivariateRealFunction {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,32,    public static final BinaryFunction ADD = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,40,    public static final BinaryFunction SUBTRACT = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,48,    public static final BinaryFunction MULTIPLY = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,56,    public static final BinaryFunction DIVIDE = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,64,    public static final BinaryFunction POW = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,72,    public static final BinaryFunction ATAN2 = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,87,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,101,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,40,    public static final BinaryFunction SUBTRACT = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,43,            return x - y;,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,48,    public static final BinaryFunction MULTIPLY = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,51,            return x * y;,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,56,    public static final BinaryFunction DIVIDE = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,59,            return x / y;,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,64,    public static final BinaryFunction POW = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,67,"            return Math.pow(x, y);",0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,72,    public static final BinaryFunction ATAN2 = new BinaryFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,75,"            return Math.atan2(x, y);",0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,101,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,105,"                return BinaryFunction.this.value(x, fixedY);",0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,87,        return new ComposableFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/BinaryFunction,77,91,"                return BinaryFunction.this.value(fixedX, x);",0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,412,        return new MultivariateRealFunction() {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,416,                double result = initialValue;,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,417,                for (final double entry : point) {,0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,418,"                    result = combiner.value(result, ComposableFunction.this.value(entry));",0.0,0,-1,0
org/apache/commons/math/analysis/ComposableFunction,77,420,                return result;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,201,        return new ArithmeticException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,209,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,215,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,230,        return new ArrayIndexOutOfBoundsException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,238,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,244,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,42,        return getDefaultNumberFormat(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,67,"        parseNextCharacter(source, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,68,        pos.setIndex(pos.getIndex() - 1);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,69,    },0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,80,         int index = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,81,         final int n = source.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,82,         char ret = 0;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,84,         if (index < n) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,87,                 c = source.charAt(index++);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,88,             } while (Character.isWhitespace(c) && index < n);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,89,             pos.setIndex(index);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,91,             if (index < n) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,92,                 ret = c;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,96,         return ret;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,110,        Number ret = null;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,112,        StringBuffer sb = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,113,        sb.append('(');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,114,        sb.append(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,115,        sb.append(')');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,117,        final int n = sb.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,118,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,119,        final int endIndex = startIndex + n;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,120,        if (endIndex < source.length()) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,121,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,122,                ret = Double.valueOf(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,123,                pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,127,        return ret;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,142,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,143,"        Number number = format.parse(source, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,144,        final int endIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,147,        if (startIndex == endIndex) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,149,            final double[] special = {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,152,            for (int i = 0; i < special.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,153,"                number = parseNumber(source, special[i], pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,154,                if (number != null) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,155,                    break;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,160,        return number;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,173,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,174,        final int endIndex = startIndex + expected.length();,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,175,        if ((startIndex >= source.length()) ||,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,179,            pos.setIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,180,            pos.setErrorIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,181,            return false;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,185,        pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,186,        return true;,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,210,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,211,            toAppendTo.append('(');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,212,            toAppendTo.append(value);,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,213,            toAppendTo.append(')');,0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,215,"            format.format(value, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/util/CompositeFormat,77,217,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,102,"        this(DEFAULT_EXPECTED_SIZE, Double.NaN);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,103,    },0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,118,"        this(expectedSize, Double.NaN);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,119,    },0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,140,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,141,        final int length = source.keys.length;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,142,        keys = new int[length];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,143,"        System.arraycopy(source.keys, 0, keys, 0, length);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,144,        values = new double[length];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,145,"        System.arraycopy(source.values, 0, values, 0, length);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,146,        states = new byte[length];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,147,"        System.arraycopy(source.states, 0, states, 0, length);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,148,        missingEntries = source.missingEntries;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,149,        size  = source.size;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,150,        mask  = source.mask;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,151,        count = source.count;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,152,    },0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,161,            return 1;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,168,        return nextPowerOfTwo(capacity);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,177,        return Integer.highestOneBit(i) << 1;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,187,        final int hash  = hashOf(key);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,188,        int index = hash & mask;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,189,"        if (containsKey(key, index)) {",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,190,            return values[index];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,193,        if (states[index] == FREE) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,194,            return missingEntries;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,197,        int j = index;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,198,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,199,"            j = probe(perturb, j);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,200,            index = j & mask;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,201,"            if (containsKey(key, index)) {",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,202,                return values[index];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,206,        return missingEntries;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,217,        final int hash  = hashOf(key);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,218,        int index = hash & mask;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,219,"        if (containsKey(key, index)) {",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,220,            return true;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,223,        if (states[index] == FREE) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,224,            return false;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,227,        int j = index;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,228,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,229,"            j = probe(perturb, j);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,230,            index = j & mask;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,231,"            if (containsKey(key, index)) {",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,232,                return true;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,236,        return false;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,257,        return hash & 0x7fffffff;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,283,        } else if (states[index] == FULL && keys[index] == key) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,284,            return changeIndexSign(index);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,287,        int perturb = perturb(hash);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,288,        int j = index;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,289,        if (states[index] == FULL) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,291,"                j = probe(perturb, j);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,292,                index = j & mask;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,293,                perturb >>= PERTURB_SHIFT;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,295,                if (states[index] != FULL || keys[index] == key) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,296,                    break;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,301,        if (states[index] == FREE) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,302,            return index;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,303,        } else if (states[index] == FULL) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,306,            return changeIndexSign(index);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,309,        final int firstRemoved = index;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,311,"            j = probe(perturb, j);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,312,            index = j & mask;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,314,            if (states[index] == FREE) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,315,                return firstRemoved;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,316,            } else if (states[index] == FULL && keys[index] == key) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,317,                return changeIndexSign(index);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,320,            perturb >>= PERTURB_SHIFT;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,333,        return (j << 2) + j + perturb + 1;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,342,        return -index - 1;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,350,        return size;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,361,        final int hash  = hashOf(key);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,362,        int index = hash & mask;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,363,"        if (containsKey(key, index)) {",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,364,            return doRemove(index);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,367,        if (states[index] == FREE) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,368,            return missingEntries;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,371,        int j = index;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,372,        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,373,"            j = probe(perturb, j);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,374,            index = j & mask;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,375,"            if (containsKey(key, index)) {",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,376,                return doRemove(index);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,380,        return missingEntries;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,392,        return (key != 0 || states[index] == FULL) && keys[index] == key;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,401,        keys[index]   = 0;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,402,        states[index] = REMOVED;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,403,        final double previous = values[index];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,404,        values[index] = missingEntries;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,405,        --size;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,406,        ++count;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,407,        return previous;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,421,            index = changeIndexSign(index);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,422,            previous = values[index];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,423,            newMapping = false;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,431,                growTable();,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,444,        final int oldLength      = states.length;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,445,        final int[] oldKeys      = keys;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,446,        final double[] oldValues = values;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,447,        final byte[] oldStates   = states;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,449,        final int newLength = RESIZE_MULTIPLIER * oldLength;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,450,        final int[] newKeys = new int[newLength];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,451,        final double[] newValues = new double[newLength];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,452,        final byte[] newStates = new byte[newLength];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,453,        final int newMask = newLength - 1;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,454,        for (int i = 0; i < oldLength; ++i) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,455,            if (oldStates[i] == FULL) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,456,                final int key = oldKeys[i];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,457,"                final int index = findInsertionIndex(newKeys, newStates, key, newMask);",0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,458,                newKeys[index]   = key;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,459,                newValues[index] = oldValues[i];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,460,                newStates[index] = FULL;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,464,        mask   = newMask;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,465,        keys   = newKeys;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,466,        values = newValues;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,467,        states = newStates;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,469,    },0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,605,        stream.defaultReadObject();,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,606,        count = 0;,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,607,    },0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,514,            } catch (NoSuchElementException nsee) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,536,            if (referenceCount != count) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,537,                throw MathRuntimeException.createConcurrentModificationException(,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,540,            if (current < 0) {,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,541,                throw MathRuntimeException.createNoSuchElementException(EXHAUSTED_ITERATOR_MESSAGE);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,543,            return keys[current];,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,555,                throw MathRuntimeException.createConcurrentModificationException(,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,559,                throw MathRuntimeException.createNoSuchElementException(EXHAUSTED_ITERATOR_MESSAGE);,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,573,                throw MathRuntimeException.createConcurrentModificationException(,0.0,0,-1,0
org/apache/commons/math/util/OpenIntToDoubleHashMap,77,588,                    throw MathRuntimeException.createNoSuchElementException(EXHAUSTED_ITERATOR_MESSAGE);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,495,        return new RuntimeException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,503,"                return buildMessage(Locale.US, pattern, argument);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,509,"                return buildMessage(Locale.getDefault(), pattern, argument);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,259,        return new EOFException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,267,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,273,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,376,        return new ConcurrentModificationException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,384,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,390,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,305,        return new IllegalArgumentException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,313,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,77,319,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,834,        protected SparseEntryIterator() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,825,        private EntryImpl tmp = new EntryImpl();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,835,            dim = getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,836,            current = new EntryImpl();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,837,            if (current.getValue() == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,838,                advance(current);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,840,            if(current.getIndex() >= 0){,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,842,                next = new EntryImpl();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,843,                next.setIndex(current.getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,844,                advance(next);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,847,                current = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,849,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,855,            if (e == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,856,                return;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,859,                e.setIndex(e.getIndex() + 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,860,            } while (e.getIndex() < dim && e.getValue() == 0);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,861,            if (e.getIndex() >= dim) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,862,                e.setIndex(-1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,864,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,868,            return current != null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,873,            tmp.setIndex(current.getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,874,            if (next != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,875,                current.setIndex(next.getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,876,                advance(next);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,877,                if (next.getIndex() < 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,878,                    next = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,881,                current = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,883,            return tmp;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,888,"            throw new UnsupportedOperationException(""Not supported"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,819,    protected class SparseEntryIterator implements Iterator<Entry> {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,43,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,44,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,55,        double d = getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,56,        if (d != n) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,57,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,61,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,70,        if (index < 0 || index >= getDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,71,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,75,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,79,        checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,80,        checkIndex(index + v.getDimension() - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,81,"        setSubVector(index, v.getData());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,82,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,86,        checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,87,        checkIndex(index + v.length - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,88,        for (int i = 0; i < v.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,89,"            setEntry(i + index, v[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,91,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,95,        double[] result = v.clone();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,96,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,98,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,99,            result[e.getIndex()] += e.getValue();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,101,"        return new ArrayRealVector(result, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,106,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,107,            double[] values = ((ArrayRealVector)v).getDataRef();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,108,            return add(values);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,110,        RealVector result = v.copy();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,111,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,113,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,114,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,115,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,116,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,117,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,122,        double[] result = v.clone();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,123,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,125,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,126,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,127,            result[index] = e.getValue() - result[index];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,128,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,129,"        return new ArrayRealVector(result, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,134,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,135,            double[] values = ((ArrayRealVector)v).getDataRef();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,136,            return add(values);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,138,        RealVector result = v.copy();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,139,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,141,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,142,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,143,"            v.setEntry(index, e.getValue() - result.getEntry(index));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,144,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,145,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,150,        return copy().mapAddToSelf(d);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,155,        if (d != 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,157,                return mapToSelf(BinaryFunction.ADD.fix1stArgument(d));,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,158,            } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,159,                throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,162,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,170,"        return dotProduct(new ArrayRealVector(v, false));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,175,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,176,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,177,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,179,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,180,            d += e.getValue() * v.getEntry(e.getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,182,        return d;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,187,"        return ebeDivide(new ArrayRealVector(v, false));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,192,"        return ebeMultiply(new ArrayRealVector(v, false));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,197,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,198,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,199,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,201,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,202,            final double diff = e.getValue() - v.getEntry(e.getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,203,            d += diff * diff;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,204,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,205,        return Math.sqrt(d);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,233,        double norm = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,234,        Iterator<Entry> it = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,236,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,237,"            norm = Math.max(norm, Math.abs(e.getValue()));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,239,        return norm;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,244,"        return getDistance(new ArrayRealVector(v,false));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,249,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,250,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,251,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,253,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,254,            d += Math.abs(e.getValue() - v.getEntry(e.getIndex()));,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,256,        return d;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,261,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,262,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,263,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,265,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,266,            d += Math.abs(e.getValue() - v[e.getIndex()]);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,268,        return d;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,273,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,274,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,275,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,277,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,278,"            d = Math.max(Math.abs(e.getValue() - v.getEntry(e.getIndex())), d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,280,        return d;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,285,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,286,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,287,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,289,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,290,"            d = Math.max(Math.abs(e.getValue() - v[e.getIndex()]), d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,292,        return d;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,297,        return copy().mapAbsToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,303,            return mapToSelf(ComposableFunction.ABS);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,304,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,305,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,311,        return copy().mapAcosToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,317,            return mapToSelf(ComposableFunction.ACOS);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,318,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,319,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,325,        return copy().mapAsinToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,331,            return mapToSelf(ComposableFunction.ASIN);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,332,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,333,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,339,        return copy().mapAtanToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,345,            return mapToSelf(ComposableFunction.ATAN);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,346,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,347,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,353,        return copy().mapCbrtToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,359,            return mapToSelf(ComposableFunction.CBRT);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,360,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,361,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,367,        return copy().mapCeilToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,373,            return mapToSelf(ComposableFunction.CEIL);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,374,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,375,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,381,        return copy().mapCosToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,387,            return mapToSelf(ComposableFunction.COS);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,388,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,389,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,395,        return copy().mapCoshToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,401,            return mapToSelf(ComposableFunction.COSH);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,402,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,403,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,409,        return copy().mapDivideToSelf(d);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,415,            return mapToSelf(BinaryFunction.DIVIDE.fix2ndArgument(d));,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,416,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,417,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,423,        return copy().mapExpToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,429,            return mapToSelf(ComposableFunction.EXP);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,430,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,431,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,437,        return copy().mapExpm1ToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,443,            return mapToSelf(ComposableFunction.EXPM1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,444,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,445,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,451,        return copy().mapFloorToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,457,            return mapToSelf(ComposableFunction.FLOOR);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,458,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,459,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,465,        return copy().mapInvToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,471,            return mapToSelf(ComposableFunction.INVERT);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,472,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,473,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,479,        return copy().mapLogToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,485,            return mapToSelf(ComposableFunction.LOG);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,486,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,487,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,493,        return copy().mapLog10ToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,499,            return mapToSelf(ComposableFunction.LOG10);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,500,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,501,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,507,        return copy().mapLog1pToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,513,            return mapToSelf(ComposableFunction.LOG1P);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,514,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,515,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,521,        return copy().mapMultiplyToSelf(d);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,527,            return mapToSelf(BinaryFunction.MULTIPLY.fix1stArgument(d));,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,528,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,529,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,535,        return copy().mapPowToSelf(d);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,541,            return mapToSelf(BinaryFunction.POW.fix2ndArgument(d));,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,542,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,543,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,549,        return copy().mapRintToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,555,            return mapToSelf(ComposableFunction.RINT);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,556,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,557,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,563,        return copy().mapSignumToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,569,            return mapToSelf(ComposableFunction.SIGNUM);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,570,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,571,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,577,        return copy().mapSinToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,583,            return mapToSelf(ComposableFunction.SIN);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,584,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,585,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,591,        return copy().mapSinhToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,597,            return mapToSelf(ComposableFunction.SINH);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,598,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,599,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,605,        return copy().mapSqrtToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,611,            return mapToSelf(ComposableFunction.SQRT);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,612,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,613,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,619,        return copy().mapSubtractToSelf(d);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,624,        return mapAddToSelf(-d);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,629,        return copy().mapTanToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,635,            return mapToSelf(ComposableFunction.TAN);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,636,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,637,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,643,        return copy().mapTanhToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,649,            return mapToSelf(ComposableFunction.TANH);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,650,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,651,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,657,        return copy().mapUlpToSelf();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,663,            return mapToSelf(ComposableFunction.ULP);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,664,        } catch (FunctionEvaluationException e) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,665,            throw new IllegalArgumentException(e);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,672,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,673,"            product = new OpenMapRealMatrix(this.getDimension(), v.getDimension());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,675,"            product = new Array2DRowRealMatrix(this.getDimension(), v.getDimension());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,677,        Iterator<Entry> thisIt = sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,678,        Entry thisE = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,679,        while (thisIt.hasNext() && (thisE = thisIt.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,680,            Iterator<Entry> otherIt = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,681,            Entry otherE = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,682,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,683,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,686,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,688,        return product;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,694,"        return outerProduct(new ArrayRealVector(v, false));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,699,"        return projection(new ArrayRealVector(v, false));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,704,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,705,        Entry e = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,706,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,707,            e.setValue(value);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,709,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,713,        int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,714,        double[] values = new double[dim];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,715,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,716,            values[i] = getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,718,        return values;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,723,        return toArray();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,728,        RealVector copy = copy();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,729,        copy.unitize();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,730,        return copy;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,735,        mapDivideToSelf(getNorm());,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,736,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,740,        return new SparseEntryIterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,745,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,746,        return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,774,        return copy().mapToSelf(function);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,779,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,781,        while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,782,            e.setValue(function.value(e.getValue()));,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,784,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,77,91,            return index;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,77,98,            this.index = index;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,77,99,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,791,        public EntryImpl() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,792,            setIndex(0);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,793,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,797,            return getEntry(getIndex());,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,802,"            setEntry(getIndex(), newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,803,        },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,315,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,320,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,44,    protected AbstractFieldMatrix() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,45,        field = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,46,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,52,    protected AbstractFieldMatrix(final Field<T> field) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,53,        this.field = field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,54,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,66,        throws IllegalArgumentException {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,67,        if (rowDimension <= 0 ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,68,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,72,        if (columnDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,73,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,77,        this.field = field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,78,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,89,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,90,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,92,        if (d[0].length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,93,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,95,        return d[0][0].getField();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,107,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,108,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,110,        return d[0].getField();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,128,        if (columns < 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,129,"            T[] dummyRow = (T[]) Array.newInstance(field.getZero().getClass(), 0);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,130,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,132,        T[][] array =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,134,        for (int i = 0; i < array.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,135,"            Arrays.fill(array[i], field.getZero());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,137,        return array;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,152,"        T[] array = (T[]) Array.newInstance(field.getZero().getClass(), length);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,153,"        Arrays.fill(array, field.getZero());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,154,        return array;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,159,        return field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,173,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,175,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,176,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,177,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,178,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,179,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,180,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,184,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,192,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,194,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,195,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,196,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,197,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,198,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,199,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,203,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,210,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,211,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,212,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,213,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,214,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,215,"                out.setEntry(row, col, getEntry(row, col).add(d));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,219,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,226,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,227,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,228,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,229,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,230,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,231,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,235,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,244,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,246,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,247,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,248,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,249,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,250,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,251,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,252,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,253,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,254,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,256,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,260,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,267,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,273,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,275,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,276,            final T[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,277,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,278,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,282,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,291,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,293,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,295,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,296,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,297,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,301,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,310,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,313,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,315,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,325,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,336,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,337,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,338,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,340,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,347,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,372,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,379,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,380,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,382,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,389,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,390,            final T[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,391,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,392,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,396,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,402,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,403,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,404,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,407,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,408,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,409,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,412,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,413,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,414,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,420,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,421,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,422,        checkRowIndex(nRows + row - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,423,        checkColumnIndex(nCols + column - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,425,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,426,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,427,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,431,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,437,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,438,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,439,"        final FieldMatrix<T> out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,440,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,441,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,444,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,452,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,453,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,454,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,456,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,460,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,461,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,464,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,470,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,471,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,472,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,473,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,474,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,477,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,485,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,486,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,487,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,489,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,493,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,494,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,497,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,502,"        return new ArrayFieldVector<T>(getRow(row), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,509,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,510,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,511,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,512,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,516,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,517,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,520,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,525,"        return new ArrayFieldVector<T>(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,532,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,533,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,534,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,535,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,539,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,540,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,543,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,549,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,550,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,551,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,552,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,553,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,556,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,564,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,565,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,566,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,567,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,571,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,572,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,575,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,581,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,582,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,583,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,584,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,585,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,588,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,596,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,597,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,598,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,599,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,603,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,604,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,607,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,628,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,629,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,630,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,631,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,641,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,647,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,659,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,660,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,661,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,662,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,664,        T trace = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,665,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,666,"            trace = trace.add(getEntry(i, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,668,        return trace;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,675,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,676,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,677,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,678,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,683,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,684,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,685,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,686,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,687,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,689,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,692,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,700,"            return new ArrayFieldVector<T>(operate(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,701,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,702,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,703,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,704,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,705,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,710,"            final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,711,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,712,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,713,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,714,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,716,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,719,"            return new ArrayFieldVector<T>(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,727,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,728,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,729,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,730,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,735,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,736,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,737,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,738,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,739,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,741,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,744,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,752,"            return new ArrayFieldVector<T>(preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,753,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,755,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,756,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,757,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,758,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,763,"            final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,764,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,765,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,766,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,767,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,769,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,772,            return new ArrayFieldVector<T>(out);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,780,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,781,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,783,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,784,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,785,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,786,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,787,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,790,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,796,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,797,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,798,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,799,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,800,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,801,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,804,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,812,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,813,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,815,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,816,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,817,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,818,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,819,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,822,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,830,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,831,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,833,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,834,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,835,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,838,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,844,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,845,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,846,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,847,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,848,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,849,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,850,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,851,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,854,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,860,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,861,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,862,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,863,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,864,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,865,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,868,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,876,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,877,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,879,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,880,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,881,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,882,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,883,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,886,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,894,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,895,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,897,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,898,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,899,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,902,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,908,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,914,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,922,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,930,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,939,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,940,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,941,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,942,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,943,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,944,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,946,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,947,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,948,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,950,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,951,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,952,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,953,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,955,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,957,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,960,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,961,        return res.toString();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,976,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,977,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,979,        if (object instanceof FieldMatrix == false) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,980,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,982,        FieldMatrix<T> m = (FieldMatrix<T>) object;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,983,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,984,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,985,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,986,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,988,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,989,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,990,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,991,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,995,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1005,        int ret = 322562;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1006,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1007,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1008,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1009,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1010,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1011,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1012,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1015,        return ret;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1024,        if (row < 0 || row >= getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1025,"            throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"",",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1028,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1037,        if (column < 0 || column >= getColumnDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1038,"            throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"",",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1041,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1055,        checkRowIndex(startRow);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1056,        checkRowIndex(endRow);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1057,        if (startRow > endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1058,"            throw new MatrixIndexException(""initial row {0} after final row {1}"",",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1062,        checkColumnIndex(startColumn);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1063,        checkColumnIndex(endColumn);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1064,        if (startColumn > endColumn) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1065,"            throw new MatrixIndexException(""initial column {0} after final column {1}"",",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1070,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1081,        if (selectedRows.length * selectedColumns.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1082,            if (selectedRows.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1083,"                throw new MatrixIndexException(""empty selected row index array"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1085,"            throw new MatrixIndexException(""empty selected column index array"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1088,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1089,            checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1091,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1092,            checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1094,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1102,        if ((getRowDimension()    != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1104,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1109,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1117,        if ((getRowDimension()    != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1119,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1124,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1132,        if (getColumnDimension() != m.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1133,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,1138,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,293,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,43,    protected AbstractRealMatrix() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,44,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,45,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,55,        throws IllegalArgumentException {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,56,        if (rowDimension <= 0 ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,57,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,61,        if (columnDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,62,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,66,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,67,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,80,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,82,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,83,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,84,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,85,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,86,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,87,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,91,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,99,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,101,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,102,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,103,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,104,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,105,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,106,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,110,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,117,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,118,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,119,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,120,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,121,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,122,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,126,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,133,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,134,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,135,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,136,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,137,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,138,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,142,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,151,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,153,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,154,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,155,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,156,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,157,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,158,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,159,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,160,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,161,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,163,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,167,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,174,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,180,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,182,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,183,            final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,184,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,185,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,189,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,264,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,266,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,268,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,269,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,270,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,274,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,283,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,286,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,288,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,298,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,309,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,310,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,311,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,312,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,313,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,345,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,352,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,353,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,355,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,362,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,363,            final double[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,364,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,365,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,369,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,375,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,376,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,377,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,380,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,381,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,382,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,385,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,386,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,387,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,393,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,394,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,395,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,396,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,398,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,399,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,400,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,404,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,406,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,412,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,413,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,414,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,415,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,416,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,419,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,427,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,428,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,429,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,431,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,435,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,436,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,439,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,445,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,446,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,447,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,448,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,449,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,452,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,460,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,461,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,462,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,464,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,468,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,469,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,472,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,477,"        return new ArrayRealVector(getRow(row), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,484,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,485,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,486,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,487,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,491,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,492,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,495,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,500,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,507,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,508,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,509,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,510,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,514,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,515,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,518,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,524,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,525,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,526,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,527,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,528,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,531,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,539,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,540,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,541,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,542,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,546,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,547,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,550,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,556,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,557,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,558,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,559,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,560,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,563,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,571,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,572,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,573,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,574,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,578,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,579,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,582,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,603,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,604,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,605,"        final RealMatrix out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,616,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,624,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,625,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,627,        return lu.getInverse();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,634,"        return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,639,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,645,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,646,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,648,        return !lu.isNonSingular();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,660,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,661,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,662,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,663,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,665,        double trace = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,666,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,667,"            trace += getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,669,        return trace;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,676,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,677,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,678,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,679,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,684,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,685,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,686,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,687,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,688,"                sum += getEntry(row, i) * v[i];",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,690,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,693,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,701,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,702,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,703,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,704,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,705,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,706,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,711,            final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,712,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,713,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,714,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,715,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,717,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,720,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,728,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,729,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,730,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,731,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,736,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,737,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,738,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,739,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,740,"                sum += getEntry(i, col) * v[i];",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,742,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,745,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,753,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,754,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,756,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,757,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,758,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,759,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,764,            final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,765,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,766,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,767,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,768,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,770,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,773,            return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,781,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,782,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,783,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,784,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,785,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,786,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,787,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,788,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,791,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,792,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,798,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,799,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,800,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,801,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,802,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,803,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,806,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,814,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,815,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,817,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,818,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,819,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,820,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,821,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,824,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,825,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,833,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,834,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,836,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,837,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,838,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,841,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,847,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,848,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,849,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,850,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,851,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,852,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,853,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,854,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,857,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,858,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,864,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,865,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,866,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,867,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,868,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,869,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,872,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,880,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,881,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,883,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,884,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,885,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,886,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,887,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,890,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,891,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,899,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,900,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,902,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,903,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,904,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,907,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,913,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,919,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,927,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,935,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,942,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,943,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,945,        return lu.solve(b);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,952,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,953,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,955,        return lu.solve(b);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,980,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,981,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,983,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,991,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,992,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,993,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,994,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,996,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,998,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,999,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1000,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1002,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1003,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1004,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1005,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1007,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1009,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1012,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1013,        return res.toString();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1027,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1028,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1030,        if (object instanceof RealMatrix == false) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1031,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1033,        RealMatrix m = (RealMatrix) object;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1034,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1035,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1036,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1037,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1039,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1040,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1041,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1042,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1046,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1056,        int ret = 7;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1057,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1058,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1059,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1060,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1061,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1062,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1063,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,1067,        return ret;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,101,"        super(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,102,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,103,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,106,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,107,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,110,"        blocks = createBlocksLayout(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,112,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,129,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,130,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,151,"        super(extractField(blockData), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,152,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,153,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,156,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,157,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,159,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,161,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,164,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,167,        int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,168,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,169,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,170,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,171,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,172,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,176,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,177,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,182,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,211,        final int rows         = rawData.length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,212,        final int columns      = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,213,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,214,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,217,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,218,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,219,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,220,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,227,        final Field<T> field = extractField(rawData);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,228,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,229,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,230,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,231,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,232,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,233,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,234,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,235,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,236,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,237,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,240,"                final T[] block = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,241,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,244,                int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,245,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,246,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,247,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,250,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,255,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,277,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,278,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,280,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,281,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,282,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,283,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,284,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,285,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,286,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,287,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,288,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,289,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,290,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,291,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,295,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,303,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,311,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,314,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,315,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,318,        return copied;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,327,            return add((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,328,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,331,            checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,333,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,336,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,337,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,338,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,341,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,342,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,343,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,344,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,345,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,346,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,347,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,348,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,349,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,350,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,351,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,356,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,361,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,377,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,379,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,382,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,383,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,384,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,385,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,386,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,387,                outBlock[k] = tBlock[k].add(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,391,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,400,            return subtract((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,401,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,404,            checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,406,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,409,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,410,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,411,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,414,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,415,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,416,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,417,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,418,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,419,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,420,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,421,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,422,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,423,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,424,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,429,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,434,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,450,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,452,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,455,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,456,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,457,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,458,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,459,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,460,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,464,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,473,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,476,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,477,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,478,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,479,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,480,                outBlock[k] = tBlock[k].add(d);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,484,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,493,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,496,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,497,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,498,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,499,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,500,                outBlock[k] = tBlock[k].multiply(d);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,504,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,513,            return multiply((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,514,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,517,            checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,519,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,520,            final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,523,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,524,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,526,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,527,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,529,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,531,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,532,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,535,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,538,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,539,                        final int kWidth      = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,540,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,541,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,542,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,543,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,544,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,545,                            final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,546,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,547,                                T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,548,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,549,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,550,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,551,                                    ++r;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,553,                                outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,554,                                ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,560,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,565,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,581,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,583,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,584,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,587,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,588,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,590,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,591,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,593,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,594,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,595,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,596,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,597,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,600,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,603,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,604,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,605,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,606,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,607,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,608,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,609,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,610,                        final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,611,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,612,                            T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,613,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,614,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,615,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,616,                                sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,621,                                l += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,622,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,624,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,625,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,626,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,628,                            outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,629,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,635,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,640,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,648,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,649,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,651,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,652,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,653,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,654,            int regularPos   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,655,            int lastPos      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,656,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,657,                final T[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,658,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,659,                int dataPos    = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,660,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,661,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,662,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,664,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,665,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,666,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,670,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,681,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,684,        final BlockFieldMatrix<T> out =,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,688,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,689,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,690,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,691,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,694,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,695,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,696,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,697,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,698,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,699,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,702,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,703,                final T[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,704,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,705,                final int      width    = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,707,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,708,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,709,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,711,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,713,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,714,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,718,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,722,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,726,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,730,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,732,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,736,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,743,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,745,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,746,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,750,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,754,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,756,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,763,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,766,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,770,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,794,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,795,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,796,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,797,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,798,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,799,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,800,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,802,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,810,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,811,        if (refLength < 1) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,812,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,814,        final int endRow    = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,815,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,816,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,817,        for (final T[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,818,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,819,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,826,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,827,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,828,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,829,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,832,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,833,            final int iHeight  = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,834,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,835,"            final int iStart   = Math.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,836,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,838,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,839,                final int jWidth      = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,840,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,841,"                final int jStart      = Math.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,842,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,843,                final int jLength     = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,846,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,847,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,848,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,855,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,862,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,863,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,866,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,867,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,868,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,869,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,870,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,871,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,872,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,873,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,874,            final int available  = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,875,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,876,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,877,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,878,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,879,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,881,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,882,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,886,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,895,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,898,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,896,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,897,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,899,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,915,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,916,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,917,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,919,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,926,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,927,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,928,        int mBlockIndex  = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,929,        int mIndex       = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,930,        T[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,931,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,932,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,933,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,934,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,935,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,936,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,937,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,938,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,939,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,941,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,942,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,946,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,953,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,954,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,957,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,958,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,959,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,960,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,961,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,962,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,963,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,964,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,965,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,966,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,967,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,968,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,969,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,971,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,975,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,984,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,987,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,985,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,986,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,988,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1004,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1005,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1006,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1008,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1015,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1016,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1017,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1018,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1019,        int mIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1020,        T[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1021,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1022,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1023,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1024,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1025,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1026,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1027,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1029,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1033,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1040,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1041,"        final T[] outData = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1044,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1045,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1046,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1047,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1048,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1049,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1050,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1051,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1054,"        return new ArrayFieldVector<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1063,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1066,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1064,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1065,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1067,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1074,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1075,"        final T[] outData = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1078,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1079,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1080,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1081,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1082,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1083,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1084,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1085,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1086,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1090,"        return new ArrayFieldVector<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1099,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1102,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1100,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1101,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1103,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1110,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1111,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1114,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1115,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1116,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1117,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1118,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1119,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1120,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1121,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1124,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1133,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1134,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1135,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1136,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1142,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1143,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1144,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1145,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1146,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1147,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1148,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1149,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1152,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1159,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1160,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1163,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1164,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1165,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1166,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1167,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1168,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1169,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1170,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1171,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1175,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1184,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1185,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1186,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1187,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1193,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1194,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1195,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1196,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1197,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1198,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1199,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1200,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1201,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1205,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1212,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1213,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1214,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1216,            return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1217,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1218,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1229,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1230,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1231,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1233,            blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1238,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1234,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1235,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1239,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1246,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1247,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1248,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1250,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1251,            blockIJ[k] = blockIJ[k].add(increment);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1256,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1252,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1253,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1257,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1264,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1265,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1266,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1268,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1269,            blockIJ[k] = blockIJ[k].multiply(factor);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1274,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1270,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1271,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1275,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1281,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1282,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1283,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1286,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1287,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1288,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1291,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1292,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1293,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1294,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1295,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1296,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1297,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1298,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1299,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1300,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1301,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1302,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1303,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1304,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1309,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1314,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1321,        return rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1327,        return columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1335,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1336,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1340,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1341,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1344,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1345,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1346,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1347,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1348,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1349,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1350,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1351,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1352,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1353,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1354,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1355,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1356,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1361,                        k += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1362,                        q += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1364,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1365,                        sum = sum.add(block[k++].multiply(v[q++]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1367,                    out[p] = out[p].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1372,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1381,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1382,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1386,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1387,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1390,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1391,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1392,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1393,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1394,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1395,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1396,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1397,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1398,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1399,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1400,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1401,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1402,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1403,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1404,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1405,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1406,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1411,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1412,                        p += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1414,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1415,                        sum = sum.add(block[k].multiply(v[p++]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1416,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1418,                    out[q] = out[q].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1423,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1431,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1432,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1433,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1434,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1435,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1436,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1437,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1438,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1439,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1440,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1441,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1442,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1443,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1444,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1449,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1457,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1458,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1459,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1460,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1461,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1462,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1463,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1464,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1465,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1466,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1467,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1468,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1469,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1474,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1483,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1484,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1485,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1486,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1487,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1488,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1489,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1490,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1491,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1492,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1493,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1494,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1495,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1496,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1497,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1498,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1499,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1504,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1513,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1514,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1515,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1516,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1517,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1518,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1519,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1520,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1521,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1522,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1523,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1524,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1525,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1526,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1527,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1528,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1529,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1534,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1541,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1542,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1543,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1544,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1545,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1546,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1547,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1548,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1549,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1550,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1551,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1552,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1553,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1554,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1557,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1560,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1567,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1568,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1569,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1570,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1571,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1572,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1573,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1574,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1575,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1576,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1577,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1578,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1579,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1580,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1583,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1586,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1595,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1596,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1597,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1598,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1599,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1600,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1601,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1602,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1603,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1604,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1605,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1606,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1607,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1608,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1609,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1610,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1611,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1616,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1625,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1626,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1627,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1628,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1629,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1630,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1631,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1632,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1633,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1634,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1635,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1636,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1637,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1638,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1639,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1640,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1641,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1646,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1655,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,77,1664,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixIndexException,77,38,"      super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixIndexException,77,39,    },0.0,0,-1,0
org/apache/commons/math/linear/NonSquareMatrixException,77,37,"        super(""a {0}x{1} matrix was provided instead of a square matrix"",",0.0,0,-1,0
org/apache/commons/math/linear/NonSquareMatrixException,77,39,    },0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,77,40,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,77,41,    },0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,77,50,        super(cause);,0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,77,51,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,44,        super();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,45,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,61,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,83,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,106,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,129,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,142,"        final RealMatrix m = createRealMatrix(dimension, dimension);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,143,        for (int i = 0; i < dimension; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,144,"            m.setEntry(i, i, 1.0);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,146,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,162,        final T zero = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,163,        final T one  = field.getOne();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,164,"        final T[][] d = (T[][]) Array.newInstance(zero.getClass(), new int[] { dimension, dimension });",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,165,        for (int row = 0; row < dimension; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,166,            final T[] dRow = d[row];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,167,"            Arrays.fill(dRow, zero);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,168,            dRow[row] = one;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,170,"        return new Array2DRowFieldMatrix<T>(d, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,184,        final BigDecimal[][] d = new BigDecimal[dimension][dimension];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,185,        for (int row = 0; row < dimension; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,186,            final BigDecimal[] dRow = d[row];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,187,"            Arrays.fill(dRow, BigMatrixImpl.ZERO);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,188,            dRow[row] = BigMatrixImpl.ONE;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,190,"        return new BigMatrixImpl(d, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,203,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,204,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,206,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,220,        final FieldMatrix<T> m =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,222,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,223,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,225,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,241,        return new BigMatrixImpl(data);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,257,        return new BigMatrixImpl(data);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,279,"        return new BigMatrixImpl(data, copyArray);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,295,        return new BigMatrixImpl(data);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,307,"        return new ArrayRealVector(data, true);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,320,"        return new ArrayFieldVector<T>(data, true);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,333,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,334,"        final RealMatrix m = createRealMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,335,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,336,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,338,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,353,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,354,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,355,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,357,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,358,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,359,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,361,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,376,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,377,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,378,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,379,            data[0][i] = new BigDecimal(rowData[i]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,381,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,396,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,397,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,398,"        System.arraycopy(rowData, 0, data[0], 0, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,399,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,414,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,415,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,416,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,417,            data[0][i] = new BigDecimal(rowData[i]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,419,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,432,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,433,"        final RealMatrix m = createRealMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,434,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,435,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,437,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,452,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,453,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,454,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one row"");",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,456,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,457,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,458,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,460,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,475,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,476,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,477,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,478,            data[row][0] = new BigDecimal(columnData[row]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,480,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,495,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,496,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,497,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,498,            data[row][0] = columnData[row];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,500,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,515,        int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,516,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,517,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,518,            data[row][0] = new BigDecimal(columnData[row]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,520,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,530,        if (row < 0 || row >= m.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,531,"            throw new MatrixIndexException(""row index {0} out of allowed range [{1}, {2}]"",",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,534,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,544,        if (column < 0 || column >= m.getColumnDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,545,"            throw new MatrixIndexException(""column index {0} out of allowed range [{1}, {2}]"",",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,548,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,564,"        checkRowIndex(m, startRow);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,565,"        checkRowIndex(m, endRow);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,566,        if (startRow > endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,567,"            throw new MatrixIndexException(""initial row {0} after final row {1}"",",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,571,"        checkColumnIndex(m, startColumn);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,572,"        checkColumnIndex(m, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,573,        if (startColumn > endColumn) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,574,"            throw new MatrixIndexException(""initial column {0} after final column {1}"",",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,579,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,593,        if (selectedRows.length * selectedColumns.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,594,            if (selectedRows.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,595,"                throw new MatrixIndexException(""empty selected row index array"");",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,597,"            throw new MatrixIndexException(""empty selected column index array"");",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,600,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,601,"            checkRowIndex(m, row);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,603,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,604,"            checkColumnIndex(m, column);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,606,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,616,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,618,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,623,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,635,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,640,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,650,        if (left.getColumnDimension() != right.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,651,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,656,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,664,        final FractionMatrixConverter converter = new FractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,665,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,666,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,708,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,709,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,710,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,789,        final int n = vector.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,790,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,791,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,792,            oos.writeDouble(vector.getEntry(i));,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,794,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,820,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,821,            final double[] data = new double[n];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,822,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,823,                data[i] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,827,"            final RealVector vector = new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,830,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,832,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,833,"            f.set(instance, vector);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,843,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,835,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,836,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,837,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,838,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,839,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,840,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,841,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,842,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,845,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,890,        final int n = matrix.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,891,        final int m = matrix.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,892,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,893,        oos.writeInt(m);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,894,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,895,            for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,896,"                oos.writeDouble(matrix.getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,899,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,925,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,926,            final int m = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,927,            final double[][] data = new double[n][m];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,928,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,929,                final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,930,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,931,                    dataI[j] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,936,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,939,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,941,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,942,"            f.set(instance, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,952,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,944,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,945,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,946,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,947,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,948,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,949,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,950,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,951,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,954,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,83,    public Array2DRowRealMatrix() {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,84,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,96,"        super(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,97,        data = new double[rowDimension][columnDimension];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,98,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,114,"        throws IllegalArgumentException, NullPointerException {",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,115,        copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,116,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,134,"        throws IllegalArgumentException, NullPointerException {",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,135,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,136,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,138,            if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,139,                throw new NullPointerException();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,141,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,142,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,143,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,146,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,147,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,148,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,151,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,152,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,153,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,157,            data = d;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,159,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,169,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,170,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,171,        data = new double[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,172,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,173,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,175,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,181,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,187,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,195,            return add((Array2DRowRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,196,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,197,            return super.add(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,212,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,214,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,215,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,216,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,217,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,218,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,219,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,220,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,221,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,222,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,226,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,235,            return subtract((Array2DRowRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,236,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,237,            return super.subtract(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,252,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,254,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,255,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,256,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,257,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,258,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,259,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,260,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,261,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,262,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,266,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,275,            return multiply((Array2DRowRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,276,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,277,            return super.multiply(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,292,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,294,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,295,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,296,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,297,        final double[][] outData = new double[nRows][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,298,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,299,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,300,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,301,            for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,302,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,303,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,304,                    sum += dataRow[i] * m.data[i][col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,306,                outDataRow[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,310,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,317,        return copyOut();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,328,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,335,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,336,            if (row > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,337,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,340,            if (column > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,341,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,344,            final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,345,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,346,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,350,            final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,351,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,352,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,355,            data = new double[subMatrix.length][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,356,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,357,                if (subMatrix[i].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,358,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,361,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,363,        } else {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,364,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,367,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,374,            return data[row][column];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,375,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,376,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,386,            data[row][column] = value;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,390,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,387,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,388,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,391,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,398,            data[row][column] += increment;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,402,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,399,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,400,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,403,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,410,            data[row][column] *= factor;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,414,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,411,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,412,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,415,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,420,        return (data == null) ? 0 : data.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,426,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,433,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,434,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,435,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,436,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,439,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,440,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,441,            final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,442,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,443,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,444,                sum += dataRow[i] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,446,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,448,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,456,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,457,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,458,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,459,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,463,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,464,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,465,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,466,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,467,                sum += data[i][col] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,469,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,472,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,480,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,481,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,482,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,483,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,484,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,485,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,486,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,489,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,496,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,497,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,499,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,500,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,501,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,502,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,505,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,514,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,515,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,517,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,518,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,519,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,520,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,523,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,532,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,533,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,535,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,536,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,537,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,538,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,541,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,548,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,549,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,550,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,551,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,552,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,553,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,554,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,557,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,564,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,565,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,566,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,567,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,568,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,569,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,572,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,581,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,582,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,584,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,585,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,586,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,587,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,590,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,599,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,600,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,602,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,603,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,604,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,607,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,616,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,617,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,619,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,620,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,622,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,636,"        setSubMatrix(in, 0, 0);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,77,637,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,98,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,99,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,100,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,103,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,107,"        blocks = createBlocksLayout(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,109,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,127,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,148,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,149,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,150,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,156,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,158,            blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,161,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,164,        int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,166,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,169,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,173,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,174,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,179,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,206,        final int rows         = rawData.length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,207,        final int columns      = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,212,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,213,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,214,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,215,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,222,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,223,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,225,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,226,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,227,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,228,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,229,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,230,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,231,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,234,                final double[] block = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,235,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,238,                int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,239,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,240,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,241,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,244,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,249,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,267,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,268,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,270,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,271,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,272,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,273,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,274,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,275,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,276,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,277,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,278,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,279,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,280,                blocks[blockIndex] = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,281,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,285,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,293,"        return new BlockRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,301,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,304,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,305,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,308,        return copied;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,317,            return add((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,318,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,321,"            MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,323,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,326,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,327,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,328,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,331,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,332,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,333,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,334,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,335,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,336,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,337,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,338,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,339,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,340,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,341,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,346,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,351,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,367,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,369,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,372,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,373,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,374,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,375,            final double[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,376,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,377,                outBlock[k] = tBlock[k] + mBlock[k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,381,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,390,            return subtract((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,391,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,394,"            MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,396,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,399,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,400,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,401,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,404,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,405,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,406,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,407,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,408,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,409,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,410,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,411,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,412,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,413,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,414,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,419,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,424,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,440,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,442,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,445,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,446,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,447,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,448,            final double[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,449,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,450,                outBlock[k] = tBlock[k] - mBlock[k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,454,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,463,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,466,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,467,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,468,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,469,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,470,                outBlock[k] = tBlock[k] + d;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,474,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,483,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,486,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,487,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,488,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,489,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,490,                outBlock[k] = tBlock[k] * d;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,494,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,503,            return multiply((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,504,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,507,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,509,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,512,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,513,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,515,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,516,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,518,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,520,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,521,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,524,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,527,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,528,                        final int kWidth      = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,529,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,530,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,531,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,532,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,533,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,534,                            final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,535,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,536,                                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,537,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,538,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,539,"                                    sum += tBlock[l] * m.getEntry(r, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,540,                                    ++r;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,542,                                outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,543,                                ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,549,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,554,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,570,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,572,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,575,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,576,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,578,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,579,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,581,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,582,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,583,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,584,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,585,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,588,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,591,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,592,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,593,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,594,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,595,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,596,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,597,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,598,                        final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,599,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,600,                            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,601,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,602,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,603,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,604,                                sum += tBlock[l] * mBlock[n] +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,608,                                l += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,609,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,611,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,612,                                sum += tBlock[l++] * mBlock[n];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,613,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,615,                            outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,616,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,622,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,627,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,635,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,636,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,638,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,639,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,640,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,641,            int regularPos   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,642,            int lastPos      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,643,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,644,                final double[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,645,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,646,                int dataPos    = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,647,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,648,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,649,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,651,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,652,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,653,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,657,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,664,        final double[] colSums = new double[BLOCK_SIZE];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,665,        double maxColSum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,666,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,667,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,668,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,669,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,670,                final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,671,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,672,                for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,673,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,674,                    for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,675,                        sum += Math.abs(block[i * jWidth + j]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,677,                    colSums[j] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,680,            for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,681,"                maxColSum = Math.max(maxColSum, colSums[j]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,684,        return maxColSum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,690,        double sum2 = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,691,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,692,            for (final double entry : blocks[blockIndex]) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,693,                sum2 += entry * entry;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,696,        return Math.sqrt(sum2);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,706,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,709,        final BlockRealMatrix out =,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,713,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,714,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,715,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,716,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,719,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,720,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,721,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,722,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,723,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,724,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,727,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,728,                final double[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,729,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,730,                final int      width    = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,732,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,733,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,734,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,736,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,738,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,739,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,743,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,747,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,751,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,755,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,757,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,761,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,768,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,770,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,771,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,775,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,779,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,781,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,788,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,792,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,796,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,820,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,821,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,822,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,823,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,824,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,825,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,826,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,828,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,836,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,837,        if (refLength < 1) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,838,"            throw MathRuntimeException.createIllegalArgumentException(""matrix must have at least one column"");",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,840,        final int endRow    = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,841,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,842,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,843,        for (final double[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,844,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,845,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,852,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,853,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,854,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,855,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,858,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,859,            final int iHeight  = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,860,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,861,"            final int iStart   = Math.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,862,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,864,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,865,                final int jWidth      = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,866,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,867,"                final int jStart      = Math.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,868,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,869,                final int jLength     = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,872,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,873,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,874,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,881,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,888,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,889,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,892,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,893,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,894,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,895,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,896,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,897,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,898,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,899,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,900,            final int available  = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,901,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,902,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,903,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,904,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,905,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,907,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,908,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,912,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,921,"            setRowMatrix(row, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,924,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,922,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,923,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,925,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,941,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,942,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,943,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,945,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,952,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,953,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,954,        int mBlockIndex  = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,955,        int mIndex       = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,956,        double[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,957,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,958,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,959,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,960,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,961,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,962,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,963,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,964,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,965,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,967,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,968,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,972,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,979,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,980,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,983,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,984,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,985,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,986,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,987,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,988,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,989,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,990,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,991,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,992,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,993,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,994,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,995,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,997,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1001,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1010,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1013,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1011,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1012,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1014,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1030,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1031,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1032,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1034,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1041,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1042,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1043,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1044,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1045,        int mIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1046,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1047,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1048,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1049,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1050,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1051,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1052,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1053,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1055,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1059,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1066,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1067,        final double[] outData = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1070,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1071,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1072,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1073,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1074,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1075,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1076,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1077,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1080,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1089,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1092,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1090,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1091,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1093,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1100,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1101,        final double[] outData = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1104,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1105,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1106,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1107,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1108,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1109,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1110,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1111,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1112,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1116,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1125,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1128,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1126,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1127,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1129,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1136,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1137,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1140,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1141,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1142,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1143,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1144,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1145,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1146,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1147,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1150,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1159,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1160,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1161,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1162,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1168,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1169,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1170,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1171,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1172,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1173,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1174,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1175,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1178,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1185,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1186,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1189,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1190,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1191,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1192,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1193,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1194,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1195,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1196,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1197,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1201,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1210,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1211,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1212,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1213,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1219,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1220,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1221,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1222,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1223,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1224,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1225,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1226,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1227,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1231,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1238,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1239,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1240,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1242,            return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1243,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1244,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1255,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1256,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1264,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1260,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1261,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1265,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1272,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1273,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1274,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1276,            blocks[iBlock * blockColumns + jBlock][k] += increment;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1281,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1277,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1278,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1282,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1289,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1290,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1291,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1293,            blocks[iBlock * blockColumns + jBlock][k] *= factor;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1298,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1294,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1295,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1299,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1305,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1306,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1307,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1310,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1311,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1312,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1315,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1316,                final double[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1317,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1318,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1319,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1320,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1321,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1322,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1323,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1324,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1325,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1326,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1327,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1328,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1333,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1338,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1345,        return rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1351,        return columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1359,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1360,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1364,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1367,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1368,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1369,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1370,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1371,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1372,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1373,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1374,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1375,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1376,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1377,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1378,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1379,                        sum += block[k]     * v[q]     +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1383,                        k += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1384,                        q += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1386,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1387,                        sum += block[k++] * v[q++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1389,                    out[p] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1394,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1403,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1404,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1408,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1411,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1412,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1413,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1414,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1415,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1416,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1417,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1418,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1419,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1420,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1421,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1422,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1423,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1424,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1425,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1426,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1427,                        sum += block[k]           * v[p]     +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1431,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1432,                        p += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1434,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1435,                        sum += block[k] * v[p++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1436,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1438,                    out[q] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1443,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1451,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1452,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1453,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1454,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1455,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1456,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1457,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1458,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1459,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1460,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1461,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1462,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1463,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1464,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1469,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1476,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1477,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1478,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1479,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1480,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1481,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1482,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1483,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1484,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1485,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1486,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1487,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1488,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1489,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1494,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1503,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1504,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1505,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1506,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1507,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1508,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1509,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1510,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1511,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1512,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1513,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1514,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1515,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1516,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1517,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1518,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1519,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1524,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1533,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1534,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1535,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1536,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1537,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1538,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1539,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1540,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1541,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1542,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1543,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1544,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1545,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1546,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1547,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1548,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1549,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1554,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1561,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1562,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1563,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1564,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1565,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1566,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1567,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1568,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1569,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1570,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1571,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1572,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1573,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1574,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1577,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1580,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1587,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1588,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1589,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1590,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1591,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1592,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1593,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1594,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1595,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1596,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1597,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1598,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1599,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1600,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1603,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1606,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1615,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1616,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1617,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1618,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1619,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1620,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1621,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1622,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1623,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1624,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1625,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1626,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1627,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1628,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1629,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1630,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1631,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1636,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1645,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1646,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1647,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1648,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1649,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1650,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1651,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1652,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1653,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1654,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1655,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1656,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1657,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1658,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1659,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1660,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1661,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1666,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1675,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,1684,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,77,64,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,70,        super(field);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,71,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,85,"        super(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,86,"        data = buildArray(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,87,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,104,        super(extractField(d));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,105,        copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,106,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,125,        super(extractField(d));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,126,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,127,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,129,            if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,130,                throw new NullPointerException();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,132,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,133,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,134,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,137,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,138,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,139,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,142,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,143,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,144,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,148,            data = d;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,150,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,161,        super(extractField(v));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,162,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,163,"        data = buildArray(getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,164,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,165,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,167,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,173,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,179,"        return new Array2DRowFieldMatrix<T>(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,187,            return add((Array2DRowFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,188,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,189,            return super.add(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,204,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,206,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,207,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,208,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,209,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,210,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,211,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,212,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,213,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,214,                outDataRow[col] = dataRow[col].add(mRow[col]);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,218,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,227,            return subtract((Array2DRowFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,228,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,229,            return super.subtract(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,244,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,246,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,247,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,248,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,249,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,250,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,251,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,252,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,253,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,254,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,258,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,267,            return multiply((Array2DRowFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,268,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,269,            return super.multiply(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,284,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,286,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,287,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,288,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,289,"        final T[][] outData = buildArray(getField(), nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,290,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,291,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,292,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,293,            for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,294,                T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,295,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,296,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,298,                outDataRow[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,302,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,309,        return copyOut();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,320,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,327,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,328,            if (row > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,329,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,332,            if (column > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,333,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,336,            final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,337,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,338,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,342,            final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,343,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,344,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,347,"            data = buildArray(getField(), subMatrix.length, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,348,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,349,                if (subMatrix[i].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,350,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,353,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,355,        } else {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,356,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,359,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,366,            return data[row][column];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,367,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,368,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,378,            data[row][column] = value;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,382,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,379,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,380,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,383,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,390,            data[row][column] = data[row][column].add(increment);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,394,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,391,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,392,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,395,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,402,            data[row][column] = data[row][column].multiply(factor);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,406,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,403,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,404,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,407,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,412,        return (data == null) ? 0 : data.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,418,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,425,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,426,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,427,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,428,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,431,"        final T[] out = buildArray(getField(), nRows);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,432,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,433,            final T[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,434,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,435,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,436,                sum = sum.add(dataRow[i].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,438,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,440,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,448,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,449,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,450,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,451,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,455,"        final T[] out = buildArray(getField(), nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,456,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,457,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,458,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,459,                sum = sum.add(data[i][col].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,461,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,464,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,472,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,473,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,474,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,475,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,476,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,477,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,478,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,481,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,488,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,489,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,490,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,491,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,492,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,493,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,494,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,497,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,506,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,507,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,509,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,510,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,511,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,512,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,515,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,524,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,525,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,527,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,528,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,529,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,530,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,533,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,540,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,541,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,542,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,543,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,544,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,545,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,546,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,549,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,556,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,557,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,558,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,559,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,560,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,561,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,564,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,573,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,574,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,576,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,577,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,578,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,579,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,582,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,591,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,592,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,594,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,595,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,596,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,599,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,608,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,609,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,611,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,612,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,614,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,628,"        setSubMatrix(in, 0, 0);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,77,629,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,881,"            throw new UnsupportedOperationException(""Not supported"");",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,57,"        this(0, DEFAULT_ZERO_TOLERANCE);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,58,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,65,"        this(dimension, DEFAULT_ZERO_TOLERANCE);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,66,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,73,"    public OpenMapRealVector(int dimension, double epsilon) {",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,74,        virtualSize = dimension;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,75,        entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,76,        this.epsilon = epsilon;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,77,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,84,"    protected OpenMapRealVector(OpenMapRealVector v, int resize) {",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,85,        virtualSize = v.getDimension() + resize;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,86,        entries = new OpenIntToDoubleHashMap(v.entries);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,87,        epsilon = v.epsilon;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,88,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,96,"        this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,97,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,105,"    public OpenMapRealVector(int dimension, int expectedSize, double epsilon) {",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,106,        virtualSize = dimension;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,107,"        entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,108,        this.epsilon = epsilon;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,109,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,144,"        this(values, DEFAULT_ZERO_TOLERANCE);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,145,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,153,"    public OpenMapRealVector(Double[] values, double epsilon) {",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,154,        virtualSize = values.length;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,155,        entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,156,        this.epsilon = epsilon;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,157,        for (int key = 0; key < values.length; key++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,158,            double value = values[key].doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,159,            if (!isDefaultValue(value)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,160,"                entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,163,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,169,    public OpenMapRealVector(OpenMapRealVector v) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,170,        virtualSize = v.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,171,        entries = new OpenIntToDoubleHashMap(v.getEntries());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,172,        epsilon = v.epsilon;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,173,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,179,    public OpenMapRealVector(RealVector v) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,180,        virtualSize = v.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,181,        entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,182,        epsilon = DEFAULT_ZERO_TOLERANCE;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,183,        for (int key = 0; key < virtualSize; key++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,184,            double value = v.getEntry(key);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,185,            if (!isDefaultValue(value)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,186,"                entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,189,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,196,        return entries;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,210,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,211,        if (v instanceof OpenMapRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,212,            return add((OpenMapRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,214,            return super.add(v);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,225,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,226,        boolean copyThis = entries.size() > v.entries.size();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,227,        OpenMapRealVector res = copyThis ? this.copy() : v.copy();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,228,        Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,229,        OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,230,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,231,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,232,            int key = iter.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,233,            if (randomAccess.containsKey(key)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,234,"                res.setEntry(key, randomAccess.get(key) + iter.value());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,236,"                res.setEntry(key, iter.value());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,238,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,239,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,248,"        OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,249,        Iterator iter = v.entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,250,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,251,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,252,"            res.setEntry(iter.key() + virtualSize, iter.value());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,254,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,259,        if (v instanceof OpenMapRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,260,            return append((OpenMapRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,262,        return append(v.getData());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,267,"        OpenMapRealVector res = new OpenMapRealVector(this, 1);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,268,"        res.setEntry(virtualSize, d);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,269,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,274,"        OpenMapRealVector res = new OpenMapRealVector(this, a.length);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,275,        for (int i = 0; i < a.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,276,"            res.setEntry(i + virtualSize, a[i]);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,278,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,283,        return new OpenMapRealVector(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,294,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,295,        boolean thisIsSmaller  = entries.size() < v.entries.size();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,296,        Iterator iter = thisIsSmaller  ? entries.iterator() : v.entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,297,        OpenIntToDoubleHashMap larger = thisIsSmaller  ? v.entries : entries;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,298,        double d = 0;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,299,        while(iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,300,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,301,            d += iter.value() * larger.get(iter.key());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,303,        return d;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,308,        if(v instanceof OpenMapRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,309,            return dotProduct((OpenMapRealVector)v);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,311,            return super.dotProduct(v);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,317,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,318,        OpenMapRealVector res = new OpenMapRealVector(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,319,        Iterator iter = res.entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,320,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,321,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,322,"            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,324,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,329,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,330,        OpenMapRealVector res = new OpenMapRealVector(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,331,        Iterator iter = res.entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,332,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,333,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,334,"            res.setEntry(iter.key(), iter.value() / v[iter.key()]);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,336,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,341,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,342,        OpenMapRealVector res = new OpenMapRealVector(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,343,        Iterator iter = res.entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,344,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,345,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,346,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,348,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,353,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,354,        OpenMapRealVector res = new OpenMapRealVector(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,355,        Iterator iter = res.entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,356,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,357,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,358,"            res.setEntry(iter.key(), iter.value() * v[iter.key()]);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,360,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,365,        checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,366,        checkIndex(index + n - 1);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,367,        OpenMapRealVector res = new OpenMapRealVector(n);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,368,        int end = index + n;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,369,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,370,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,371,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,372,            int key = iter.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,373,            if (key >= index && key < end) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,374,"                res.setEntry(key - index, iter.value());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,376,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,377,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,382,        double[] res = new double[virtualSize];,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,383,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,384,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,385,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,386,            res[iter.key()] = iter.value();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,388,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,393,        return virtualSize;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,403,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,404,        double res = 0;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,405,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,406,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,407,            int key = iter.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,409,            delta = iter.value() - v.getEntry(key);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,410,            res += delta * delta;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,411,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,412,        iter = v.getEntries().iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,413,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,414,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,415,            int key = iter.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,416,            if (!entries.containsKey(key)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,417,                final double value = iter.value();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,418,                res += value * value;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,420,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,421,        return Math.sqrt(res);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,426,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,427,        if (v instanceof OpenMapRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,428,            return getDistance((OpenMapRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,430,        return getDistance(v.getData());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,435,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,436,        double res = 0;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,437,        for (int i = 0; i < v.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,438,            double delta = entries.get(i) - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,439,            res += delta * delta;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,441,        return Math.sqrt(res);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,446,        checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,447,        return entries.get(index);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,459,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,460,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,461,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,462,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,463,            double delta = Math.abs(iter.value() - v.getEntry(iter.key()));,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,464,            max += delta;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,465,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,466,        iter = v.getEntries().iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,467,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,468,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,469,            int key = iter.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,470,            if (!entries.containsKey(key)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,471,                double delta = Math.abs(iter.value());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,472,                max +=  Math.abs(delta);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,474,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,475,        return max;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,480,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,481,        if (v instanceof OpenMapRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,482,            return getL1Distance((OpenMapRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,484,        return getL1Distance(v.getData());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,489,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,490,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,491,        for (int i = 0; i < v.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,492,            double delta = Math.abs(getEntry(i) - v[i]);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,493,            max += delta;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,495,        return max;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,513,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,514,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,515,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,516,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,517,            double delta = Math.abs(iter.value() - v.getEntry(iter.key()));,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,518,            if (delta > max) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,519,                max = delta;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,521,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,522,        iter = v.getEntries().iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,523,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,524,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,525,            int key = iter.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,526,            if (!entries.containsKey(key)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,527,                if (iter.value() > max) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,528,                    max = iter.value();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,531,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,532,        return max;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,537,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,538,        if (v instanceof OpenMapRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,539,            return getLInfDistance((OpenMapRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,541,        return getLInfDistance(v.getData());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,546,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,547,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,548,        for (int i = 0; i < v.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,549,            double delta = Math.abs(getEntry(i) - v[i]);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,550,            if (delta > max) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,551,                max = delta;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,554,        return max;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,559,        boolean infiniteFound = false;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,560,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,561,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,562,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,563,            final double value = iter.value();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,564,            if (Double.isNaN(value)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,565,                return false;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,567,            if (Double.isInfinite(value)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,568,                infiniteFound = true;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,570,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,571,        return infiniteFound;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,576,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,577,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,578,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,579,            if (Double.isNaN(iter.value())) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,580,                return true;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,583,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,588,        return copy().mapAddToSelf(d);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,593,        for (int i = 0; i < virtualSize; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,594,"            setEntry(i, getEntry(i) + d);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,596,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,601,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,602,"        RealMatrix res = new OpenMapRealMatrix(virtualSize, virtualSize);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,603,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,604,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,605,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,606,            int row = iter.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,607,            double value = iter.value();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,608,            for (int col = 0; col < virtualSize; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,609,"                res.setEntry(row, col, value * v[col]);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,611,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,612,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,617,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,618,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,623,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,624,        return (OpenMapRealVector) projection(new OpenMapRealVector(v));,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,629,        checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,630,        if (!isDefaultValue(value)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,631,"            entries.put(index, value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,632,        } else if (entries.containsKey(index)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,633,            entries.remove(index);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,635,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,639,        checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,640,        checkIndex(index + v.getDimension() - 1);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,641,"        setSubVector(index, v.getData());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,642,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,646,        checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,647,        checkIndex(index + v.length - 1);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,648,        for (int i = 0; i < v.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,649,"            setEntry(i + index, v[i]);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,651,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,655,        for (int i = 0; i < virtualSize; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,656,"            setEntry(i, value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,658,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,667,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,668,        OpenMapRealVector res = copy();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,669,        Iterator iter = v.getEntries().iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,670,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,671,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,672,            int key = iter.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,673,            if (entries.containsKey(key)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,674,"                res.setEntry(key, entries.get(key) - iter.value());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,676,"                res.setEntry(key, -iter.value());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,678,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,679,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,684,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,685,        if (v instanceof OpenMapRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,686,            return subtract((OpenMapRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,688,        return subtract(v.getData());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,693,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,694,        OpenMapRealVector res = new OpenMapRealVector(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,695,        for (int i = 0; i < v.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,696,            if (entries.containsKey(i)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,697,"                res.setEntry(i, entries.get(i) - v[i]);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,699,"                res.setEntry(i, -v[i]);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,702,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,708,        OpenMapRealVector res = copy();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,709,        res.unitize();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,710,        return res;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,715,        double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,716,        if (isDefaultValue(norm)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,717,"            throw  MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,719,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,720,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,721,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,722,"            entries.put(iter.key(), iter.value() / norm);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,725,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,730,        return getData();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,740,        final int prime = 31;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,741,        int result = 1;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,743,        temp = Double.doubleToLongBits(epsilon);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,744,        result = prime * result + (int) (temp ^ (temp >>> 32));,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,745,        result = prime * result + virtualSize;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,746,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,747,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,748,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,749,            temp = Double.doubleToLongBits(iter.value());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,750,            result = prime * result + (int) (temp ^ (temp >>32));,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,752,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,763,        if (this == obj) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,764,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,766,        if (obj == null) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,767,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,769,        if (!(obj instanceof OpenMapRealVector)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,770,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,772,        OpenMapRealVector other = (OpenMapRealVector) obj;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,773,        if (virtualSize != other.virtualSize) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,774,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,776,        if (Double.doubleToLongBits(epsilon) !=,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,778,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,780,        Iterator iter = entries.iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,781,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,782,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,783,            double test = other.getEntry(iter.key());,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,784,            if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,785,                return false;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,787,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,788,        iter = other.getEntries().iterator();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,789,        while (iter.hasNext()) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,790,            iter.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,791,            double test = iter.value();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,792,            if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,793,                return false;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,795,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,796,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,804,        return (double)entries.size()/(double)getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,838,"            entries.put(iter.key(), value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,839,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealVector,77,844,            return iter.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,50,"        super(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,51,        this.rows    = rowDimension;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,52,        this.columns = columnDimension;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,53,        this.entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,54,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,60,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,61,        this.rows    = matrix.rows;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,62,        this.columns = matrix.columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,63,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,64,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,69,        return new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,76,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,82,        return columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,90,            return add((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,91,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,92,            return (OpenMapRealMatrix) super.add(m);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,106,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,108,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,109,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,110,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,111,            final int row = iterator.key() / columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,112,            final int col = iterator.key() - row * columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,113,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,114,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,116,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,125,            return subtract((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,126,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,127,            return (OpenMapRealMatrix) super.subtract(m);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,141,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,143,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,144,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,145,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,146,            final int row = iterator.key() / columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,147,            final int col = iterator.key() - row * columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,148,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,149,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,151,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,160,            return multiply((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,161,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,164,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,166,            final int outCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,167,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,168,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,169,                iterator.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,170,                final double value = iterator.value();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,171,                final int key      = iterator.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,172,                final int i        = key / columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,173,                final int k        = key % columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,174,                for (int j = 0; j < outCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,175,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,177,            },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,179,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,195,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,197,        final int outCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,198,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,199,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,200,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,201,            final double value = iterator.value();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,202,            final int key      = iterator.key();,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,203,            final int i        = key / columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,204,            final int k        = key % columns;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,205,            for (int j = 0; j < outCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,206,"                final int rightKey = m.computeKey(k, j);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,207,                if (m.entries.containsKey(rightKey)) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,208,"                    final int outKey = out.computeKey(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,209,                    final double outValue =,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,211,                    if (outValue == 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,212,                        out.entries.remove(outKey);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,214,"                        out.entries.put(outKey, outValue);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,218,        },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,220,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,227,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,228,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,229,"        return entries.get(computeKey(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,235,        return rows;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,242,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,243,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,244,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,245,"            entries.remove(computeKey(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,247,"            entries.put(computeKey(row, column), value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,249,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,255,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,256,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,257,"        final int key = computeKey(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,258,        final double value = entries.get(key) + increment;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,259,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,260,            entries.remove(key);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,262,"            entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,264,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,270,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,271,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,272,"        final int key = computeKey(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,273,        final double value = entries.get(key) * factor;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,274,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,275,            entries.remove(key);,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,277,"            entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,279,    },0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,288,        return row * columns + column;,0.0,0,-1,0
org/apache/commons/math/linear/OpenMapRealMatrix,77,30,"public class OpenMapRealMatrix extends AbstractRealMatrix implements SparseRealMatrix, Serializable {",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,210,                this.endRow = endRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,211,                columnSum   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,212,                maxColSum   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,213,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,217,                columnSum += Math.abs(value);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,218,                if (row == endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,219,"                    maxColSum = Math.max(maxColSum, columnSum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,220,                    columnSum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,222,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,226,                return maxColSum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,746,        return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,749,            private int i = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,752,            private EntryImpl e = new EntryImpl();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,756,                return i < dim;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,761,                e.setIndex(i++);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,762,                return e;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealVector,77,767,"                throw new UnsupportedOperationException(""Not supported"");",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,56,    public ArrayRealVector() {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,57,        data = new double[0];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,58,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,64,    public ArrayRealVector(int size) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,65,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,66,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,73,"    public ArrayRealVector(int size, double preset) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,74,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,75,"        Arrays.fill(data, preset);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,76,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,101,"        throws NullPointerException, IllegalArgumentException {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,102,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,103,            throw new NullPointerException();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,105,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,106,"            throw MathRuntimeException.createIllegalArgumentException(""vector must have at least one element"");",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,108,        data = copyArray ? d.clone() :  d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,109,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,117,"    public ArrayRealVector(double[] d, int pos, int size) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,118,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,119,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,122,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,123,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,124,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,130,    public ArrayRealVector(Double[] d) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,131,        data = new double[d.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,132,        for (int i = 0; i < d.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,133,            data[i] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,135,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,143,"    public ArrayRealVector(Double[] d, int pos, int size) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,144,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,145,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,148,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,149,        for (int i = pos; i < pos + size; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,150,            data[i-pos] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,152,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,158,    public ArrayRealVector(RealVector v) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,159,        data = new double[v.getDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,160,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,161,            data[i] = v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,163,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,170,"        this(v, true);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,171,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,178,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,179,        data = deep ? v.data.clone() : v.data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,180,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,187,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,188,        data = new double[v1.data.length + v2.data.length];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,189,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,190,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,191,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,198,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,199,        final int l1 = v1.data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,200,        final int l2 = v2.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,201,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,202,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,203,        for (int i = 0; i < l2; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,204,            data[l1 + i] = v2.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,206,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,213,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,214,        final int l1 = v1.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,215,        final int l2 = v2.data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,216,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,217,        for (int i = 0; i < l1; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,218,            data[i] = v1.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,220,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,221,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,228,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,229,        final int l1 = v1.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,230,        final int l2 = v2.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,231,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,232,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,233,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,234,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,241,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,242,        final int l1 = v1.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,243,        final int l2 = v2.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,244,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,245,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,246,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,247,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,254,"    public ArrayRealVector(double[] v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,255,        final int l1 = v1.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,256,        final int l2 = v2.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,257,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,258,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,259,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,260,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,264,"        return new ArrayRealVector(this, true);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,270,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,271,            return add((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,273,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,274,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,275,            Iterator<Entry> it = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,277,            while (it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,278,                out[e.getIndex()] += e.getValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,280,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,287,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,288,        double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,289,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,290,            out[i] += v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,292,"        return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,303,        return (ArrayRealVector) add(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,309,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,310,            return subtract((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,312,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,313,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,314,            Iterator<Entry> it = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,316,            while(it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,317,                out[e.getIndex()] -= e.getValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,319,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,326,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,327,        double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,328,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,329,            out[i] -= v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,331,"        return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,342,        return (ArrayRealVector) subtract(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,347,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,348,            data[i] = data[i] + d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,350,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,355,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,356,            data[i] = data[i] - d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,358,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,363,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,364,            data[i] = data[i] * d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,366,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,371,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,372,            data[i] = data[i] / d;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,374,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,379,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,380,"            data[i] = Math.pow(data[i], d);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,382,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,387,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,388,            data[i] = Math.exp(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,390,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,395,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,396,            data[i] = Math.expm1(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,398,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,403,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,404,            data[i] = Math.log(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,406,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,411,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,412,            data[i] = Math.log10(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,414,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,419,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,420,            data[i] = Math.log1p(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,422,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,427,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,428,            data[i] = Math.cosh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,430,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,435,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,436,            data[i] = Math.sinh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,438,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,443,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,444,            data[i] = Math.tanh(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,446,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,451,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,452,            data[i] = Math.cos(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,454,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,459,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,460,            data[i] = Math.sin(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,462,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,467,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,468,            data[i] = Math.tan(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,470,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,475,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,476,            data[i] = Math.acos(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,478,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,483,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,484,            data[i] = Math.asin(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,486,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,491,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,492,            data[i] = Math.atan(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,494,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,499,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,500,            data[i] = 1.0 / data[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,502,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,507,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,508,            data[i] = Math.abs(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,510,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,515,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,516,            data[i] = Math.sqrt(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,518,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,523,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,524,            data[i] = Math.cbrt(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,526,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,531,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,532,            data[i] = Math.ceil(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,534,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,539,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,540,            data[i] = Math.floor(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,542,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,547,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,548,            data[i] = Math.rint(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,550,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,555,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,556,            data[i] = Math.signum(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,558,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,563,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,564,            data[i] = Math.ulp(data[i]);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,566,        return this;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,572,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,573,            return ebeMultiply((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,575,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,576,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,577,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,578,                out[i] *= v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,580,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,587,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,588,        double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,589,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,590,            out[i] *= v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,592,"        return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,603,        return (ArrayRealVector) ebeMultiply(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,609,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,610,            return ebeDivide((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,612,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,613,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,614,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,615,                out[i] /= v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,617,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,624,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,625,        double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,626,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,627,                out[i] /= v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,629,"        return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,640,        return (ArrayRealVector) ebeDivide(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,645,        return data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,654,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,660,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,661,            return dotProduct((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,663,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,664,            double dot = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,665,            Iterator<Entry> it = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,667,            while(it.hasNext() && (e = it.next()) != null) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,668,                dot += data[e.getIndex()] * e.getValue();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,670,            return dot;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,677,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,678,        double dot = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,679,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,680,            dot += data[i] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,682,        return dot;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,693,        return dotProduct(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,729,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,730,            return getDistance((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,732,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,733,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,734,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,735,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,736,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,738,            return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,745,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,746,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,747,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,748,            final double delta = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,749,            sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,751,        return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,769,        return getDistance(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,775,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,776,            return getL1Distance((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,778,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,779,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,780,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,781,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,782,                sum += Math.abs(delta);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,784,            return sum;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,791,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,792,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,793,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,794,            final double delta = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,795,            sum += Math.abs(delta);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,797,        return sum;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,815,        return getL1Distance(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,821,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,822,            return getLInfDistance((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,824,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,825,            double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,826,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,827,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,828,"                max = Math.max(max, Math.abs(delta));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,830,            return max;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,837,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,838,        double max = 0;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,839,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,840,            final double delta = data[i] - v[i];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,841,"            max = Math.max(max, Math.abs(delta));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,843,        return max;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,861,        return getLInfDistance(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,866,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,867,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,868,"            throw MathRuntimeException.createArithmeticException(""zero norm"");",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,870,        return mapDivide(norm);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,875,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,876,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,877,"            throw MathRuntimeException.createArithmeticException(""cannot normalize a zero norm vector"");",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,879,        mapDivideToSelf(norm);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,880,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,884,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,889,"        return projection(new ArrayRealVector(v, false));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,898,        return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,904,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,905,            return outerProduct((ArrayRealVector) v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,907,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,908,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,909,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,910,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,911,                for (int j = 0; j < data.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,912,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,915,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,927,        return outerProduct(v.data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,933,        checkVectorDimensions(v.length);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,934,        final int m = data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,935,"        final RealMatrix out = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,936,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,937,            for (int j = 0; j < data.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,938,"                out.setEntry(i, j, data[i] * v[j]);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,941,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,946,        return data[index];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,951,        return data.length;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,957,"            return new ArrayRealVector(this, (ArrayRealVector) v);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,958,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,959,"            return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,969,"        return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,974,        final double[] out = new double[data.length + 1];,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,975,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,976,        out[data.length] = in;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,977,"        return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,982,"        return new ArrayRealVector(this, in);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,987,        ArrayRealVector out = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,989,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,993,        },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,990,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,991,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,992,            checkIndex(index + n - 1);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,994,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1000,            data[index] = value;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1003,        },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1001,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1002,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1004,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1010,"                set(index, (ArrayRealVector) v);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1015,            },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1011,            } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1012,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1013,                    data[i] = v.getEntry(i-index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1019,        },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1016,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1017,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1018,            checkIndex(index + v.getDimension() - 1);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1020,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1025,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1029,        },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1026,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1027,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1028,            checkIndex(index + v.length - 1);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1030,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1042,"        setSubVector(index, v.data);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1043,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1047,"        Arrays.fill(data, value);",0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1048,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1052,        return data.clone();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1058,        return DEFAULT_FORMAT.format(this);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1069,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1070,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1081,        if (data.length != n) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1082,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1086,    },0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1093,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1094,            if (Double.isNaN(v)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1095,                return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1098,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1109,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1110,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1113,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1114,            if (Double.isInfinite(v)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1115,                return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1119,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1145,      if (this == other) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1146,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1149,      if (other == null || !(other instanceof RealVector)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1150,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1154,      RealVector rhs = (RealVector) other;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1155,      if (data.length != rhs.getDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1156,        return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1159,      if (rhs.isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1160,        return this.isNaN();,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1163,      for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1164,        if (data[i] != rhs.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1165,          return false;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1168,      return true;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1178,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1179,            return 9;,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,1181,        return MathUtils.hash(data);,0.0,0,-1,0
org/apache/commons/math/linear/ArrayRealVector,77,31,public class ArrayRealVector extends AbstractRealVector implements Serializable {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,234,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,243,                sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,244,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,248,                sum += value * value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,249,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,253,                return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,611,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,612,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,320,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,333,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,334,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,335,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,340,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,77,341,            },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,721,            super(BigFraction.ZERO);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,722,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,728,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,729,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,734,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,735,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,741,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,714,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,86,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, getDefaultNumberFormat());",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,87,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,105,"        this(prefix, suffix, separator, getDefaultNumberFormat());",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,106,    },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,133,        return NumberFormat.getAvailableLocales();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,141,        return prefix;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,149,        return suffix;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,157,        return separator;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,165,        return format;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,193,        return getInstance().format(v);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,207,        pos.setBeginIndex(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,208,        pos.setEndIndex(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,211,        toAppendTo.append(prefix);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,214,        for (int i = 0; i < vector.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,215,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,216,                toAppendTo.append(separator);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,218,"            formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,222,        toAppendTo.append(suffix);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,224,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,244,        if (obj instanceof RealVector) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,245,"            return format( (RealVector)obj, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,248,        throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,262,        ParsePosition parsePosition = new ParsePosition(0);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,263,"        ArrayRealVector result = parse(source, parsePosition);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,264,        if (parsePosition.getIndex() == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,265,            throw MathRuntimeException.createParseException(,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,269,        return result;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,279,        int initialIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,282,"        parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,283,"        if (!parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,284,            return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,288,        List<Number> components = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,289,        for (boolean loop = true; loop;){,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,291,            if (!components.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,292,"                parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,293,"                if (!parseFixedstring(source, trimmedSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,294,                    loop = false;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,298,            if (loop) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,299,"                parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,300,"                Number component = parseNumber(source, format, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,301,                if (component != null) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,302,                    components.add(component);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,306,                    pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,307,                    return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,309,            },0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,314,"        parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,315,"        if (!parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,316,            return null;,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,320,        double[] data = new double[components.size()];,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,321,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,322,            data[i] = components.get(i).doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,324,"        return new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/RealVectorFormat,77,337,"        return parse(source, pos);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,347,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,360,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,361,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,362,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,367,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,368,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,631,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,636,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,77,637,            },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,677,            super(Fraction.ZERO);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,678,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,684,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,685,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,690,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,691,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,697,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,77,670,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,0.0,0,-1,0
