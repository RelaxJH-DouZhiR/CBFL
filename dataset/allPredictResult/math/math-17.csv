project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,1.0,0,1,0
org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,1.0,0,1,0
org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,1.0,0,1,0
org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,1.0,0,0,0
org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,1.0,0,0,0
org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,1.0,0,1,0
org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,1.0,0,1,0
org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,1.0,0,0,0
org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,0.33333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,0.33333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0.25,1,-1,1
org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,0.25,1,-1,1
org/apache/commons/math3/dfp/Dfp,17,2279,                def = newInstance(getZero());,0.25,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,0.25,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2281,                def.nans = INFINITE;,0.25,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2282,                break;,0.25,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2268,                if ( (result.exp+mant.length) < MIN_EXP) {,0.2,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2272,                    def = newInstance(result);  // gradual underflow,0.2,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2274,                result.exp = result.exp + ERR_SCALE;,0.2,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2275,                break;,0.2,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,0.16667,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1473,            return DfpField.FLAG_UNDERFLOW;,0.16667,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,385,                    negative = true;,0.14286,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,386,                    continue;,0.14286,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,394,                sciexp = -sciexp;,0.14286,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,907,                return false;,0.125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,932,            return false;,0.125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2056,            if (nans == INFINITE) {,0.125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2059,                return NAN_STRING;,0.125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,377,"            fpdecimal = s.substring(0, p);",0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,378,            String fpexp = s.substring(p+1);,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,379,            boolean negative = false;,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,381,            for (int i=0; i<fpexp.length(); i++),0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,383,                if (fpexp.charAt(i) == '-'),0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,388,                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,389,                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,393,            if (negative) {,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,396,        } else {,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,961,            return a.sign;,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,969,            return 0;,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2237,                def = newInstance(getZero());,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2238,                def.sign = result.sign;,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2239,                def.nans = QNAN;,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2240,                break;,0.11111,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,500,            p--;,0.08333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2218,            buffer[--q] = '-';,0.08333,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,284,        return ieeeFlags;,0.05,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1652,            lostdigit = result.mant[0];,0.04762,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1653,            result.shiftRight();,0.04762,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1654,            result.mant[mant.length-1] = rh;,0.04762,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1603,            return multiplyFast(x);,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1612,        Dfp result = newInstance(this);,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1615,        if (nans != FINITE) {,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1635,        if (x < 0 || x >= RADIX) {,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1643,        int rh = 0;,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1644,        for (int i = 0; i < mant.length; i++) {,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1645,            final int r = mant[i] * x + rh;,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1646,            rh = r / RADIX;,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1647,            result.mant[i] = r - rh * RADIX;,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1650,        int lostdigit = 0;,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1651,        if (rh != 0) {,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1657,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1661,        final int excp = result.round(lostdigit);,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1662,        if (excp != 0) {,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1666,        return result;,0.03846,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2252,                    def = newInstance(getZero());,0.03704,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2253,                    def.nans = QNAN;,0.03704,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,386,"        return new Dfp(this, s);",0.03571,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,396,"        return new Dfp(this, sign, nans);",0.03448,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,541,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {",0.03448,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,542,        this.field = field;,0.03448,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,543,        this.mant    = new int[field.getRadixDigits()];,0.03448,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,544,        this.sign    = sign;,0.03448,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,545,        this.exp     = 0;,0.03448,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,546,        this.nans    = nans;,0.03448,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,547,    },0.03448,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,298,        ieeeFlags = 0;,0.03333,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,299,    },0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1728,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1729,            result = newInstance(getZero());,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1730,            result.sign = (byte) (sign * divisor.sign);,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1731,            result.nans = INFINITE;,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1732,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1733,            return result;,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2243,                if (nans == FINITE && mant[mant.length-1] != 0) {,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2245,                    def = newInstance(getZero());,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2246,                    def.sign = (byte)(sign*oper.sign);,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2247,                    def.nans = INFINITE;,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2250,                if (nans == FINITE && mant[mant.length-1] == 0) {,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2256,                if (nans == INFINITE || nans == QNAN) {,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2261,                if (nans == INFINITE || nans == SNAN) {,0.03333,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,953,                return -1;,0.0303,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,952,            if (a.sign == -1) {,0.02941,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,403,            sign = -1;,0.02778,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,427,                break;,0.02778,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,489,            decimalPos = q-offset;,0.02778,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,177,"        this(decimalDigits, true);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,178,    },0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,191,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,193,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,194,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,195,        this.ieeeFlags   = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,196,"        this.zero        = new Dfp(this, 0);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,197,"        this.one         = new Dfp(this, 1);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,198,"        this.two         = new Dfp(this, 2);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,200,        if (computeConstants) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,202,            synchronized (DfpField.class) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,208,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,211,"                sqr2           = new Dfp(this, sqr2String);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,212,                sqr2Split      = split(sqr2String);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,214,"                sqr3           = new Dfp(this, sqr3String);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,216,"                pi             = new Dfp(this, piString);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,217,                piSplit        = split(piString);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,218,"                e              = new Dfp(this, eString);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,219,                eSplit         = split(eString);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,220,"                ln2            = new Dfp(this, ln2String);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,221,                ln2Split       = split(ln2String);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,222,"                ln5            = new Dfp(this, ln5String);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,223,                ln5Split       = split(ln5String);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,224,"                ln10           = new Dfp(this, ln10String);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,226,            },0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,229,            sqr2           = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,230,            sqr2Split      = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,231,            sqr2Reciprocal = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,232,            sqr3           = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,233,            sqr3Reciprocal = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,234,            pi             = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,235,            piSplit        = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,236,            e              = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,237,            eSplit         = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,238,            ln2            = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,239,            ln2Split       = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,240,            ln5            = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,241,            ln5Split       = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,242,            ln10           = null;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,245,    },0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,251,        return radixDigits;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,269,        return rMode;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,331,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,332,    },0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,403,        return zero;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,530,      Dfp result[] = new Dfp[2];,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,531,      boolean leading = true;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,532,      int sp = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,533,      int sig = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,535,      char[] buf = new char[a.length()];,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,537,      for (int i = 0; i < buf.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,538,        buf[i] = a.charAt(i);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,540,        if (buf[i] >= '1' && buf[i] <= '9') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,541,            leading = false;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,544,        if (buf[i] == '.') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,545,          sig += (400 - sig) % 4;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,546,          leading = false;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,549,        if (sig == (radixDigits / 2) * 4) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,550,          sp = i;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,551,          break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,554,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,555,            sig ++;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,561,      for (int i = 0; i < buf.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,562,        buf[i] = a.charAt(i);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,563,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,564,            buf[i] = '0';,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,568,"      result[1] = new Dfp(this, new String(buf));",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,570,      return result;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,578,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,584,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,586,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,587,            sqr2String           = highPrecisionSqr2.toString();,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,588,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,590,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,591,            sqr3String           = highPrecisionSqr3.toString();,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,592,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,594,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,595,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,596,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,598,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,601,    },0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,611,        Dfp sqrt2   = two.sqrt();,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,612,        Dfp yk      = sqrt2.subtract(one);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,613,        Dfp four    = two.add(two);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,614,        Dfp two2kp3 = two;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,615,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,623,        for (int i = 1; i < 20; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,624,            final Dfp ykM1 = yk;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,626,            final Dfp y2         = yk.multiply(yk);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,627,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,628,            final Dfp s          = oneMinusY4.sqrt().sqrt();,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,629,            yk = one.subtract(s).divide(one.add(s));,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,631,            two2kp3 = two2kp3.multiply(four);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,633,            final Dfp p = one.add(yk);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,634,            final Dfp p2 = p.multiply(p);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,635,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,637,            if (yk.equals(ykM1)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,638,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,642,        return one.divide(ak);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,653,        Dfp y  = new Dfp(one);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,654,        Dfp py = new Dfp(one);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,655,        Dfp f  = new Dfp(one);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,656,        Dfp fi = new Dfp(one);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,657,        Dfp x  = new Dfp(one);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,659,        for (int i = 0; i < 10000; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,660,            x = x.multiply(a);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,661,            y = y.add(x.divide(f));,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,662,            fi = fi.add(one);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,663,            f = f.multiply(fi);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,664,            if (y.equals(py)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,665,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,667,            py = new Dfp(y);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,670,        return y;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,736,        int den = 1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,739,        Dfp y = new Dfp(x);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,740,        Dfp num = new Dfp(x);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,741,        Dfp py = new Dfp(y);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,742,        for (int i = 0; i < 10000; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,743,            num = num.multiply(x);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,744,            num = num.multiply(x);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,745,            den = den + 2;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,746,            Dfp t = num.divide(den);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,747,            y = y.add(t);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,748,            if (y.equals(py)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,749,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,751,            py = new Dfp(y);,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,754,        return y.multiply(two);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,202,"        this(field, (long) x);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,203,    },0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,209,"    protected Dfp(final DfpField field, long x) {",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,212,        mant = new int[field.getRadixDigits()];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,213,        nans = FINITE;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,214,        this.field = field;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,216,        boolean isLongMin = false;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,217,        if (x == Long.MIN_VALUE) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,225,        if (x < 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,226,            sign = -1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,227,            x = -x;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,229,            sign = 1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,232,        exp = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,233,        while (x != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,235,            mant[mant.length - 1] = (int) (x % RADIX);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,236,            x /= RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,237,            exp++;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,240,        if (isLongMin) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,250,    },0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,322,    public Dfp(final Dfp d) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,323,        mant  = d.mant.clone();,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,324,        sign  = d.sign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,325,        exp   = d.exp;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,326,        nans  = d.nans;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,327,        field = d.field;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,328,    },0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,334,"    protected Dfp(final DfpField field, final String s) {",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,337,        mant = new int[field.getRadixDigits()];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,338,        sign = 1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,339,        exp = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,340,        nans = FINITE;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,341,        this.field = field;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,343,        boolean decimalFound = false;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,344,        final int rsize = 4;   // size of radix in decimal digits,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,345,        final int offset = 4;  // Starting offset into Striped,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,349,        if (s.equals(POS_INFINITY_STRING)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,355,        if (s.equals(NEG_INFINITY_STRING)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,361,        if (s.equals(NAN_STRING)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,368,"        int p = s.indexOf(""e"");",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,369,        if (p == -1) { // try upper case?,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,370,"            p = s.indexOf(""E"");",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,374,        int sciexp = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,375,        if (p != -1) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,398,            fpdecimal = s;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,407,        p = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,410,        int decimalPos = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,413,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,417,                decimalPos--;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,420,            if (fpdecimal.charAt(p) == '.') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,421,                decimalFound = true;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,424,            p++;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,426,            if (p == fpdecimal.length()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,432,        int q = offset;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,433,        striped[0] = '0';,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,434,        striped[1] = '0';,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,435,        striped[2] = '0';,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,436,        striped[3] = '0';,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,437,        int significantDigits=0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,439,            if (p == (fpdecimal.length())) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,440,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,444,            if (q == mant.length*rsize+offset+1) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,445,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,448,            if (fpdecimal.charAt(p) == '.') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,449,                decimalFound = true;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,450,                decimalPos = significantDigits;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,451,                p++;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,452,                continue;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,460,            striped[q] = fpdecimal.charAt(p);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,461,            q++;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,462,            p++;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,463,            significantDigits++;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,468,        if (decimalFound && q != offset) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,470,                q--;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,471,                if (q == offset) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,474,                if (striped[q] == '0') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,475,                    significantDigits--;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,483,        if (decimalFound && significantDigits == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,488,        if (!decimalFound) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,493,        q = offset;  // set q to point to first sig digit,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,494,        p = significantDigits-1+offset;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,496,        while (p > q) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,497,            if (striped[p] != '0') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,498,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,505,        q -= i;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,506,        decimalPos += i;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,509,        while ((p - q) < (mant.length * rsize)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,510,            for (i = 0; i < rsize; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,511,                striped[++p] = '0';,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,517,        for (i = mant.length - 1; i >= 0; i--) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,518,            mant[i] = (striped[q]   - '0') * 1000 +,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,522,            q += 4;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,526,        exp = (decimalPos+sciexp) / rsize;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,528,        if (q < striped.length) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,530,            round((striped[q] - '0')*1000);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,533,    },0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,604,        return new Dfp(d);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,635,        return field;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,642,        return field.getRadixDigits();,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,649,        return field.getZero();,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,669,        for (int i = mant.length - 1; i > 0; i--) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,670,            mant[i] = mant[i-1];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,672,        mant[0] = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,673,        exp--;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,674,    },0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,681,        for (int i = 0; i < mant.length - 1; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,682,            mant[i] = mant[i+1];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,684,        mant[mant.length - 1] = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,685,        exp++;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,686,    },0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,697,        int lostdigit = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,698,        boolean inexact = false;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,700,        int diff = exp - e;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,702,        int adiff = diff;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,703,        if (adiff < 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,704,            adiff = -adiff;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,707,        if (diff == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,708,            return 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,711,        if (adiff > (mant.length + 1)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,713,"            Arrays.fill(mant, 0);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,714,            exp = e;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,719,            return 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,722,        for (int i = 0; i < adiff; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,723,            if (diff < 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,728,                if (lostdigit != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,729,                    inexact = true;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,732,                lostdigit = mant[0];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,734,                shiftRight();,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,740,        if (inexact) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,745,        return lostdigit;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,765,        if (isNaN() || x.isNaN()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,771,"        return compare(this, x) < 0;",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,790,        if (isNaN() || x.isNaN()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,796,"        return compare(this, x) > 0;",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,879,        return (nans == QNAN) || (nans == SNAN);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,904,        if (other instanceof Dfp) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,905,            final Dfp x = (Dfp) other;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,910,"            return compare(this, x) == 0;",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,935,        return greaterThan(x) || lessThan(x);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,948,            return 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,951,        if (a.sign != b.sign) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,960,        if (a.nans == INFINITE && b.nans == FINITE) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,964,        if (a.nans == FINITE && b.nans == INFINITE) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,974,            if (a.exp < b.exp) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,975,                return -a.sign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,978,            if (a.exp > b.exp) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,979,                return a.sign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,985,            if (a.mant[i] > b.mant[i]) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,986,                return a.sign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,989,            if (a.mant[i] < b.mant[i]) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,990,                return -a.sign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,994,        return 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1231,        extra = RADIX-extra;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1232,        for (int i = 0; i < mant.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1233,            mant[i] = RADIX-mant[i]-1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1236,        int rh = extra / RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1237,        extra = extra - rh * RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1238,        for (int i = 0; i < mant.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1239,            final int r = mant[i] + rh;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1240,            rh = r / RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1241,            mant[i] = r - rh * RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1244,        return extra;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1262,        if (nans != FINITE || x.nans != FINITE) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1293,        Dfp a = newInstance(this);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1294,        Dfp b = newInstance(x);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1297,        Dfp result = newInstance(getZero());,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1300,        final byte asign = a.sign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1301,        final byte bsign = b.sign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1303,        a.sign = 1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1304,        b.sign = 1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1307,        byte rsign = bsign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1308,"        if (compare(a, b) > 0) {",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1309,            rsign = asign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1315,        if (b.mant[mant.length-1] == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1316,            b.exp = a.exp;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1319,        if (a.mant[mant.length-1] == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1324,        int aextradigit = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1325,        int bextradigit = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1326,        if (a.exp < b.exp) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1327,            aextradigit = a.align(b.exp);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1329,            bextradigit = b.align(a.exp);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1333,        if (asign != bsign) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1334,            if (asign == rsign) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1335,                bextradigit = b.complement(bextradigit);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1337,                aextradigit = a.complement(aextradigit);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1342,        int rh = 0; /* acts as a carry */,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1343,        for (int i = 0; i < mant.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1344,            final int r = a.mant[i]+b.mant[i]+rh;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1345,            rh = r / RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1346,            result.mant[i] = r - rh * RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1348,        result.exp = a.exp;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1349,        result.sign = rsign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1354,        if (rh != 0 && (asign == bsign)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1355,            final int lostdigit = result.mant[0];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1356,            result.shiftRight();,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1357,            result.mant[mant.length-1] = rh;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1358,            final int excp = result.round(lostdigit);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1359,            if (excp != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1365,        for (int i = 0; i < mant.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1366,            if (result.mant[mant.length-1] != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1367,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1369,            result.shiftLeft();,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1370,            if (i == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1371,                result.mant[0] = aextradigit+bextradigit;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1372,                aextradigit = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1373,                bextradigit = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1378,        if (result.mant[mant.length-1] == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1379,            result.exp = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1381,            if (asign != bsign) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1383,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1388,        final int excp = result.round(aextradigit + bextradigit);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1389,        if (excp != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1390,"            result = dotrap(excp, ADD_TRAP, x, result);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1393,        return result;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1400,        Dfp result = newInstance(this);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1401,        result.sign = (byte) - result.sign;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1402,        return result;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1410,        return add(x.negate());,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1418,        boolean inc = false;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1419,        switch (field.getRoundingMode()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1437,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1438,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1454,        if (inc) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1456,            int rh = 1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1457,            for (int i = 0; i < mant.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1458,                final int r = mant[i] + rh;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1459,                rh = r / RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1460,                mant[i] = r - rh * RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1463,            if (rh != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1470,        if (exp < MIN_EXP) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1476,        if (exp > MAX_EXP) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1482,        if (n != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1484,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1485,            return DfpField.FLAG_INEXACT;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1488,        return 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1499,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1506,        Dfp result = newInstance(getZero());,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1509,        if (nans != FINITE || x.nans != FINITE) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1546,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1548,        for (int i = 0; i < mant.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1549,            int rh = 0;  // acts as a carry,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1550,            for (int j=0; j<mant.length; j++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1551,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1552,                r = r + product[i+j] + rh;  // add to the product digit with carry in,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1554,                rh = r / RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1555,                product[i+j] = r - rh * RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1557,            product[i+mant.length] = rh;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1561,"        int md = mant.length * 2 - 1;  // default, in case result is zero",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1562,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1563,            if (product[i] != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1564,                md = i;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1565,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1570,        for (int i = 0; i < mant.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1571,            result.mant[mant.length - i - 1] = product[md - i];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1575,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1576,        result.sign = (byte)((sign == x.sign)?1:-1);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1578,        if (result.mant[mant.length-1] == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1580,            result.exp = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1584,        if (md > (mant.length-1)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1585,            excp = result.round(product[md-mant.length]);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1590,        if (excp != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1591,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1594,        return result;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1679,        int trial=0;    // trial quotient digit,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1682,        int md=0;       // most sig digit in result,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1686,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1693,        Dfp result = newInstance(getZero());,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1696,        if (nans != FINITE || divisor.nans != FINITE) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1727,        if (divisor.mant[mant.length-1] == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1736,        dividend = new int[mant.length+1];  // one extra digit needed,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1737,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1738,        remainder = new int[mant.length+1]; // one extra digit needed,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1742,        dividend[mant.length] = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1743,        quotient[mant.length] = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1744,        quotient[mant.length+1] = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1745,        remainder[mant.length] = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1750,        for (int i = 0; i < mant.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1751,            dividend[i] = mant[i];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1752,            quotient[i] = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1753,            remainder[i] = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1757,        nsqd = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1758,        for (qd = mant.length+1; qd >= 0; qd--) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1762,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1763,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1764,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1766,            trialgood = false;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1767,            while (!trialgood) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1769,                trial = (min+max)/2;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1772,                int rh = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1773,                for (int i = 0; i < mant.length + 1; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1774,                    int dm = (i<mant.length)?divisor.mant[i]:0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1775,                    final int r = (dm * trial) + rh;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1776,                    rh = r / RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1777,                    remainder[i] = r - rh * RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1781,                rh = 1;  // carry in to aid the subtraction,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1782,                for (int i = 0; i < mant.length + 1; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1783,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1784,                    rh = r / RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1785,                    remainder[i] = r - rh * RADIX;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1789,                if (rh == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1791,                    max = trial-1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1792,                    continue;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1796,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1797,                minadj = minadj / (divisor.mant[mant.length-1]+1);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1799,                if (minadj >= 2) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1800,                    min = trial+minadj;  // update the minimum,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1801,                    continue;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1806,                trialgood = false;  // assume false,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1807,                for (int i = mant.length - 1; i >= 0; i--) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1808,                    if (divisor.mant[i] > remainder[i]) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1809,                        trialgood = true;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1811,                    if (divisor.mant[i] < remainder[i]) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1812,                        break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1816,                if (remainder[mant.length] != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1817,                    trialgood = false;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1820,                if (trialgood == false) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1821,                    min = trial+1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1823,            },0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1826,            quotient[qd] = trial;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1827,            if (trial != 0 || nsqd != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1828,                nsqd++;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1831,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1836,            if (nsqd > mant.length) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1838,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1842,            dividend[0] = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1843,            for (int i = 0; i < mant.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1844,                dividend[i + 1] = remainder[i];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1849,        md = mant.length;  // default,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1850,        for (int i = mant.length + 1; i >= 0; i--) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1851,            if (quotient[i] != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1852,                md = i;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1853,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1858,        for (int i=0; i<mant.length; i++) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1859,            result.mant[mant.length-i-1] = quotient[md-i];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1863,        result.exp = exp - divisor.exp + md - mant.length;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1864,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1866,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1867,            result.exp = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1870,        if (md > (mant.length-1)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1871,            excp = result.round(quotient[md-mant.length]);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1876,        if (excp != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1877,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1880,        return result;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1891,        if (nans != FINITE) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1902,        if (divisor == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1912,        if (divisor < 0 || divisor >= RADIX) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1920,        Dfp result = newInstance(this);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1922,        int rl = 0;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1923,        for (int i = mant.length-1; i >= 0; i--) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1924,            final int r = rl*RADIX + result.mant[i];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1925,            final int rh = r / divisor;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1926,            rl = r - rh * divisor;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1927,            result.mant[i] = rh;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1930,        if (result.mant[mant.length-1] == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1932,            result.shiftLeft();,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1933,            final int r = rl * RADIX;        // compute the next digit and put it in,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1934,            final int rh = r / divisor;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1935,            rl = r - rh * divisor;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1936,            result.mant[0] = rh;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1939,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1940,        if (excp != 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1941,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1944,        return result;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1959,        if (nans == FINITE && mant[mant.length-1] == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1964,        if (nans != FINITE) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1984,        if (sign == -1) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1995,        Dfp x = newInstance(this);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1998,        if (x.exp < -1 || x.exp > 1) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2003,        switch (x.mant[mant.length-1] / 2000) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2005,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2006,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2014,                x.mant[mant.length-1] = 3000;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2017,        Dfp dx = newInstance(x);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2022,        Dfp px  = getZero();,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2023,        Dfp ppx = getZero();,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2024,        while (x.unequal(px)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2025,            dx = newInstance(x);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2026,            dx.sign = -1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2027,            dx = dx.add(this.divide(x));,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2028,            dx = dx.divide(2);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2029,            ppx = px;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2030,            px = x;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2031,            x = x.add(dx);,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2033,            if (x.equals(ppx)) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2040,            if (dx.mant[mant.length-1] == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2041,                break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2045,        return x;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2054,        if (nans != FINITE) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2063,        if (exp > mant.length || exp < -1) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2067,        return dfp2string();,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2156,        char buffer[] = new char[mant.length*4 + 20];,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2157,        int p = 1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2159,        int e = exp;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2160,        boolean pointInserted = false;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2162,        buffer[0] = ' ';,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2164,        if (e <= 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2165,            buffer[p++] = '0';,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2166,            buffer[p++] = '.';,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2167,            pointInserted = true;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2170,        while (e < 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2178,        for (int i = mant.length - 1; i >= 0; i--) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2179,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2180,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2181,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2182,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2183,            if (--e == 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2184,                buffer[p++] = '.';,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2185,                pointInserted = true;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2189,        while (e > 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2197,        if (!pointInserted) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2203,        q = 1;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2204,        while (buffer[q] == '0') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2205,            q++;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2207,        if (buffer[q] == '.') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2208,            q--;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2212,        while (buffer[p-1] == '0') {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2213,            p--;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2217,        if (sign < 0) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2221,"        return new String(buffer, q, p - q);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2233,        Dfp def = result;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2235,        switch (type) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2284,            default: def = result; break;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2287,"        return trap(type, what, oper, def, result);",0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2303,        return def;,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,30,    public enum RoundingMode {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,33,"        ROUND_DOWN,",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,36,"        ROUND_UP,",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,39,"        ROUND_HALF_UP,",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,42,"        ROUND_HALF_DOWN,",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,47,"        ROUND_HALF_EVEN,",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,50,"        ROUND_HALF_ODD,",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,53,"        ROUND_CEIL,",0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,56,        ROUND_FLOOR;,0.0125,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1087,            switch (rmode) {,0.0125,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,262,        rMode = mode;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,263,    },0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,313,        ieeeFlags = flags & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,314,    },0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,338,        return new Dfp(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,346,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,354,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,362,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,370,"        return new Dfp(this, x);",0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,378,        return new Dfp(d);,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,410,        return one;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,415,        return Dfp.class;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,422,        return two;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,429,        return sqr2;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,436,        return sqr2Split.clone();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,443,        return sqr2Reciprocal;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,450,        return sqr3;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,457,        return sqr3Reciprocal;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,464,        return pi;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,471,        return piSplit.clone();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,478,        return e;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,485,        return eSplit.clone();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,492,        return ln2;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,499,        return ln2Split.clone();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,506,        return ln5;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,513,        return ln5Split.clone();,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,520,        return ln10;,0.0,0,-1,0
org/apache/commons/math3/dfp/DfpField,17,27,public class DfpField implements Field<Dfp> {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,181,    protected Dfp(final DfpField field) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,182,        mant = new int[field.getRadixDigits()];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,183,        sign = 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,184,        exp = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,185,        nans = FINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,186,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,187,    },0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,194,"        this(field, (long) x);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,195,    },0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,220,            isLongMin = true;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,221,            ++x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,243,            for (int i = 0; i < mant.length - 1; i++) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,244,                if (mant[i] != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,245,                    mant[i]++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,246,                    break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,256,"    protected Dfp(final DfpField field, double x) {",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,259,        mant = new int[field.getRadixDigits()];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,260,        sign = 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,261,        exp = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,262,        nans = FINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,263,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,265,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,266,        long mantissa = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,267,        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,269,        if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,271,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,273,                if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,274,                    sign = -1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,276,                return;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,279,            exponent++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,282,            while ( (mantissa & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,283,                exponent--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,284,                mantissa <<= 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,286,            mantissa &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,289,        if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,291,            if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,292,                sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,293,                nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,294,            } else if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,295,                sign = (byte) -1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,296,                nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,298,                sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,299,                nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,301,            return;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,304,"        Dfp xdfp = new Dfp(field, mantissa);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,305,"        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,306,"        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,308,        if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,309,            xdfp = xdfp.negate();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,312,"        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,313,        sign = xdfp.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,314,        exp  = xdfp.exp;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,315,        nans = xdfp.nans;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,317,    },0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,350,            sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,351,            nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,352,            return;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,356,            sign = (byte) -1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,357,            nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,358,            return;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,362,            sign = (byte) 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,363,            nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,364,            return;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,456,                p++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,457,                continue;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,472,                    break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,484,            decimalPos = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,554,        return new Dfp(getField());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,562,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,570,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,578,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,586,"        return new Dfp(getField(), x);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,598,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,599,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,600,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,601,"            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,614,"        return new Dfp(field, s);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,624,"        return field.newDfp(sig, code);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,656,        return field.getOne();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,663,        return field.getTwo();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,736,                shiftLeft();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,757,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,758,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,759,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,760,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,761,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,766,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,767,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,768,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,782,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,783,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,784,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,785,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,786,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,791,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,792,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,793,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,804,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,805,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,806,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,807,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,810,        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,819,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,820,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,821,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,822,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,825,        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,834,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,835,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,836,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,837,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,840,        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,849,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,850,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,851,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,852,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,855,        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,863,        Dfp result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,864,        result.sign = 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,865,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,872,        return nans == INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,887,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,888,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,889,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,890,            return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,893,        return (mant[mant.length - 1] == 0) && !isInfinite();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,913,        return false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,923,        return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,955,                return 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,965,            return -b.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1004,        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1012,        return trunc(DfpField.RoundingMode.ROUND_FLOOR);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1020,        return trunc(DfpField.RoundingMode.ROUND_CEIL);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1029,        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1032,        if (result.mant[mant.length-1] == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1033,            result.sign = sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1036,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1045,        boolean changed = false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1047,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1048,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1051,        if (nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1052,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1055,        if (mant[mant.length-1] == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1057,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1062,        if (exp < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1063,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1064,            Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1065,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1066,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1073,        if (exp >= mant.length) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1074,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1080,        Dfp result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1081,        for (int i = 0; i < mant.length-result.exp; i++) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1082,            changed |= result.mant[i] != 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1083,            result.mant[i] = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1086,        if (changed) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1087,            switch (rmode) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1089,                    if (result.sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1091,                        result = result.add(newInstance(-1));,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1096,                    if (result.sign == 1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1098,                        result = result.add(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1104,"                    final Dfp half = newInstance(""0.5"");",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1105,                    Dfp a = subtract(result);  // difference between this and result,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1106,                    a.sign = 1;            // force positive (take abs),0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1107,                    if (a.greaterThan(half)) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1108,                        a = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1109,                        a.sign = sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1110,                        result = result.add(a);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1114,                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1115,                        a = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1116,                        a.sign = sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1117,                        result = result.add(a);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1122,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1123,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1124,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1127,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1136,        int result = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1138,        rounded = rint();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1140,        if (rounded.greaterThan(newInstance(2147483647))) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1141,            return 2147483647;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1144,        if (rounded.lessThan(newInstance(-2147483648))) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1145,            return -2147483648;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1148,        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1149,            result = result * RADIX + rounded.mant[i];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1152,        if (rounded.sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1153,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1156,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1165,        return exp - 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1173,        Dfp d = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1174,        d.exp = e + 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1175,        return d;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1182,        if (mant[mant.length-1] > 1000) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1183,            return exp * 4 - 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1185,        if (mant[mant.length-1] > 100) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1186,            return exp * 4 - 2;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1188,        if (mant[mant.length-1] > 10) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1189,            return exp * 4 - 3;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1191,        return exp * 4 - 4;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1199,        Dfp d = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1201,        if (e >= 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1202,            d.exp = e / 4 + 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1204,            d.exp = (e + 1) / 4;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1207,        switch ((e % 4 + 4) % 4) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1209,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1211,                d = d.multiply(10);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1212,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1214,                d = d.multiply(100);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1215,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1217,                d = d.multiply(1000);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1220,        return d;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1255,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1256,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1257,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1258,"            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1263,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1264,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1267,            if (x.isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1268,                return x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1271,            if (nans == INFINITE && x.nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1272,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1275,            if (x.nans == INFINITE && nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1276,                return x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1279,            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1280,                return x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1283,            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1284,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1285,                Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1286,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1287,"                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1288,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1320,            a.exp = b.exp;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1421,                inc = false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1422,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1425,                inc = n != 0;       // round up if n!=0,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1426,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1429,                inc = n >= 5000;  // round half up,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1430,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1433,                inc = n > 5000;  // round half down,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1434,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1441,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1442,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1445,                inc = sign == 1 && n != 0;  // round ceil,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1446,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1450,                inc = sign == -1 && n != 0;  // round floor,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1464,                shiftRight();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1465,                mant[mant.length-1] = rh;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1500,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1501,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1502,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1503,"            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1524,            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1525,                result = newInstance(x);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1526,                result.sign = (byte) (sign * x.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1527,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1530,            if (x.nans == INFINITE && nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1531,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1532,                result.sign = (byte) (sign * x.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1533,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1536,            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1538,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1539,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1540,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1541,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1542,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1587,            excp = result.round(0); // has no effect except to check status,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1616,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1617,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1620,            if (nans == INFINITE && x != 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1621,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1622,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1625,            if (nans == INFINITE && x == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1626,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1627,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1628,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1629,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1630,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1636,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1637,            result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1638,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1639,"            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1640,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1658,            result.exp = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1687,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1688,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1689,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1690,"            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1697,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1698,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1701,            if (divisor.isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1702,                return divisor;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1705,            if (nans == INFINITE && divisor.nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1706,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1707,                result.sign = (byte) (sign * divisor.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1708,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1711,            if (divisor.nans == INFINITE && nans == FINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1712,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1713,                result.sign = (byte) (sign * divisor.sign);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1714,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1717,            if (divisor.nans == INFINITE && nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1718,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1719,                result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1720,                result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1721,"                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1722,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1833,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1873,            excp = result.round(0);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1892,            if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1893,                return this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1896,            if (nans == INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1897,                return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1903,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1904,            Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1905,            result.sign = sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1906,            result.nans = INFINITE;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1907,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1908,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1913,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1914,            Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1915,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1916,"            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1917,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1950,        return field.getOne().divide(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1961,            return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1965,            if (nans == INFINITE && sign == 1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1967,                return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1970,            if (nans == QNAN) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1971,                return newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1974,            if (nans == SNAN) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1977,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1978,                result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1979,"                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1980,                return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1988,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1989,            result = newInstance(this);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1990,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1991,"            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1992,            return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,1999,            x.exp = this.exp / 2;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2008,                x.mant[mant.length-1] = 1500;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2009,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2011,                x.mant[mant.length-1] = 2200;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2012,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2035,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2057,                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2064,            return dfp2sci();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2075,        char rawdigits[]    = new char[mant.length * 4];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2076,        char outputbuffer[] = new char[mant.length * 4 + 20];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2084,        p = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2085,        for (int i = mant.length - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2086,            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2087,            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2088,            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2089,            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2093,        for (p = 0; p < rawdigits.length; p++) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2094,            if (rawdigits[p] != '0') {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2095,                break;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2098,        shf = p;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2101,        q = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2102,        if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2103,            outputbuffer[q++] = '-';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2106,        if (p != rawdigits.length) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2108,            outputbuffer[q++] = rawdigits[p++];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2109,            outputbuffer[q++] = '.';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2111,            while (p<rawdigits.length) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2112,                outputbuffer[q++] = rawdigits[p++];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2115,            outputbuffer[q++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2116,            outputbuffer[q++] = '.';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2117,            outputbuffer[q++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2118,            outputbuffer[q++] = 'e';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2119,            outputbuffer[q++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2120,"            return new String(outputbuffer, 0, 5);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2123,        outputbuffer[q++] = 'e';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2127,        e = exp * 4 - shf - 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2128,        ae = e;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2129,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2130,            ae = -e;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2134,        for (p = 1000000000; p > ae; p /= 10) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2138,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2139,            outputbuffer[q++] = '-';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2142,        while (p > 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2143,            outputbuffer[q++] = (char)(ae / p + '0');,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2144,            ae = ae % p;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2145,            p = p / 10;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2148,"        return new String(outputbuffer, 0, q);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2171,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2172,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2173,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2174,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2175,            e++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2190,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2191,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2192,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2193,            buffer[p++] = '0';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2194,            e--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2199,            buffer[p++] = '.';,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2257,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2258,                    def.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2262,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2263,                    def.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2269,                    def = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2270,                    def.sign = result.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2310,        return nans;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2320,        Dfp result = x.newInstance(x);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2321,        result.sign = y.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2322,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2333,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2334,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2335,            final Dfp result = newInstance(getZero());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2336,            result.nans = QNAN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2337,"            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2341,        boolean up = false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2342,        if (this.lessThan(x)) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2343,            up = true;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2346,"        if (compare(this, x) == 0) {",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2347,            return newInstance(x);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2350,        if (lessThan(getZero())) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2351,            up = !up;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2356,        if (up) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2357,            inc = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2358,            inc.exp = this.exp-mant.length+1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2359,            inc.sign = this.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2361,            if (this.equals(getZero())) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2362,                inc.exp = MIN_EXP-mant.length;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2365,            result = add(inc);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2367,            inc = newInstance(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2368,            inc.exp = this.exp;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2369,            inc.sign = this.sign;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2371,            if (this.equals(inc)) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2372,                inc.exp = this.exp-mant.length;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2374,                inc.exp = this.exp-mant.length+1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2377,            if (this.equals(getZero())) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2378,                inc.exp = MIN_EXP-mant.length;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2381,            result = this.subtract(inc);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2384,        if (result.classify() == INFINITE && this.classify() != INFINITE) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2385,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2386,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2389,        if (result.equals(getZero()) && this.equals(getZero()) == false) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2390,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2391,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2394,        return result;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2404,        if (isInfinite()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2405,            if (lessThan(getZero())) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2406,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2408,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2412,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2413,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2416,        Dfp y = this;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2417,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2418,"        int cmp0 = compare(this, getZero());",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2419,        if (cmp0 == 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2420,            return sign < 0 ? -0.0 : +0.0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2421,        } else if (cmp0 < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2422,            y = negate();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2423,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2428,        int exponent = (int)(y.log10() * 3.32);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2429,        if (exponent < 0) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2430,            exponent--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2433,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2434,        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2435,            tempDfp = tempDfp.multiply(2);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2436,            exponent++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2438,        exponent--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2442,"        y = y.divide(DfpMath.pow(getTwo(), exponent));",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2443,        if (exponent > -1023) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2444,            y = y.subtract(getOne());,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2447,        if (exponent < -1074) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2448,            return 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2451,        if (exponent > 1023) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2452,            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2456,        y = y.multiply(newInstance(4503599627370496l)).rint();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2457,        String str = y.toString();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2458,"        str = str.substring(0, str.length()-1);",0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2459,        long mantissa = Long.parseLong(str);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2461,        if (mantissa == 4503599627370496L) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2463,            mantissa = 0;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2464,            exponent++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2468,        if (exponent <= -1023) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2469,            exponent--;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2472,        while (exponent < -1023) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2473,            exponent++;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2474,            mantissa >>>= 1;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2477,        long bits = mantissa | ((exponent + 1023L) << 52);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2478,        double x = Double.longBitsToDouble(bits);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2480,        if (negate) {,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2481,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2484,        return x;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2493,        double split[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2494,        long mask = 0xffffffffc0000000L;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2496,        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2497,        split[1] = subtract(newInstance(split[0])).toDouble();,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,2499,        return split;,0.0,0,-1,0
org/apache/commons/math3/dfp/Dfp,17,96,public class Dfp implements FieldElement<Dfp> {,0.0,0,-1,0
