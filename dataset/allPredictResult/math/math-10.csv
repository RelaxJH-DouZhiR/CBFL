project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/util/FastMath,10,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.5,0,0,0
org/apache/commons/math3/util/FastMath,10,2479,            ya = epsA * denom;,0.5,0,1,0
org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,0.5,0,1,0
org/apache/commons/math3/util/FastMath,10,2481,        } else {,0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,0.5,0,0,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,0.5,0,0,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2",0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0.5,0,0,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)",0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))",0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,            for (int i = 0; i < tmp2.length; ++i) {,0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),0.5,0,0,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,    },0.5,1,1,1
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,        final DerivativeStructure result = new DerivativeStructure(y.compiler);,0.5,0,0,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);",0.5,0,1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,        return result;,0.5,0,0,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1347,                double v = 0;,0.33333,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,                q[n - 1] = -n * q[n - 2];,0.33333,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,                for (int k = n - 1; k >= 0; k -= 2) {,0.33333,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,                    v = v * x2 + q[k];,0.33333,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,                    if (k > 2) {,0.33333,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,                    } else if (k == 2) {,0.33333,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,                if ((n & 0x1) == 0) {,0.33333,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1358,                    v *= x;,0.33333,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,                coeff *= f;,0.33333,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1362,                function[n] = coeff * v;,0.33333,0,-1,0
org/apache/commons/math3/util/FastMath,10,2423,"        return atan(x, 0.0, false);",0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,        double[] function = new double[1 + order];,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,        final double x = operand[operandOffset];,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,        function[0] = FastMath.atan(x);,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1330,        if (order > 0) {,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,            final double[] q = new double[order];,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1339,            q[0] = 1;,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1340,            final double x2    = x * x;,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1341,            final double f     = 1.0 / (1 + x2);,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1342,            double coeff = f;,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1343,            function[1] = coeff * q[0];,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1344,            for (int n = 2; n <= order; ++n) {,0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1368,"        compose(operand, operandOffset, function, result, resultOffset);",0.25,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1370,    },0.25,0,-1,0
org/apache/commons/math3/util/FastMath,10,2455,            final double oneOverXa = 1 / xa;,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,10,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,10,2433,        boolean negate = false;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2440,        if (xa < 0) {,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2447,        if (xa > 1.633123935319537E16) { // Very large input,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2452,        if (xa < 1) {,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2460,        epsB += xb - TANGENT_TABLE_B[idx];,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2462,        double temp = epsA + epsB;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2463,        epsB = -(temp - epsA - epsB);,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2464,        epsA = temp;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2467,        temp = xa * HEX_40000000;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2468,        double ya = xa + temp - temp;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2469,        double yb = xb + xa - ya;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2470,        xa = ya;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2471,        xb += yb;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2474,        if (idx == 0) {,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2509,        epsA = ya;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2510,        epsB = yb;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2513,        final double epsA2 = epsA * epsA;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2524,        yb = 0.07490822288864472;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2525,        yb = yb * epsA2 + -0.09088450866185192;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2526,        yb = yb * epsA2 + 0.11111095942313305;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2527,        yb = yb * epsA2 + -0.1428571423679182;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2528,        yb = yb * epsA2 + 0.19999999999923582;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2529,        yb = yb * epsA2 + -0.33333333333333287;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2530,        yb = yb * epsA2 * epsA;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2533,        ya = epsA;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2535,        temp = ya + yb;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2536,        yb = -(temp - ya - yb);,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2537,        ya = temp;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2540,        yb += epsB / (1d + epsA * epsA);,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2543,        double za = EIGHTHS[idx] + ya;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2544,        double zb = -(za - EIGHTHS[idx] - ya);,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2545,        temp = za + yb;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2546,        zb += -(temp - za - yb);,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2547,        za = temp;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2549,        double result = za + zb;,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2550,        double resultb = -(result - za - zb);,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2552,        if (leftPlane) {,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2566,        if (negate ^ leftPlane) {,0.09091,0,-1,0
org/apache/commons/math3/util/FastMath,10,2570,        return result;,0.09091,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,796,        final double[] reciprocal = new double[getSize()];,0.05882,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,797,"        pow(rhs, lhsOffset, -1, reciprocal, 0);",0.05882,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,798,"        multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);",0.05882,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,799,    },0.05882,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,894,            final double inv = 1.0 / operand[operandOffset];,0.03448,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,895,"            double xk = FastMath.pow(inv, -n);",0.03448,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,896,            for (int i = 0; i <= order; ++i) {,0.03448,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,897,                function[i] = xk;,0.03448,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,898,                xk *= inv;,0.03448,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,950,            function[0] = FastMath.sqrt(operand[operandOffset]);,0.03448,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,951,            xk          = 0.5 / function[0];,0.03448,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,872,        if (n == 0) {,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,881,        double[] function = new double[1 + order];,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,883,        if (n > 0) {,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,902,        double coefficient = n;,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,903,        for (int i = 1; i <= order; ++i) {,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,904,            function[i] *= coefficient;,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,905,            coefficient *= n - i;,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,909,"        compose(operand, operandOffset, function, result, resultOffset);",0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,911,    },0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,947,        double[] function = new double[1 + order];,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,949,        if (n == 2) {,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,959,        final double nReciprocal = 1.0 / n;,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,960,        final double xReciprocal = 1.0 / operand[operandOffset];,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,961,        for (int i = 1; i <= order; ++i) {,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,962,            function[i] = xk;,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,963,            xk *= xReciprocal * (nReciprocal - i);,0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,967,"        compose(operand, operandOffset, function, result, resultOffset);",0.03226,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,969,    },0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,10,1613,        if (e == 0) {,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1615,        } else if (e < 0) {,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1622,        final int splitFactor = 0x8000001;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1623,        final double cd       = splitFactor * d;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1624,        final double d1High   = cd - (cd - d);,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1625,        final double d1Low    = d - d1High;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1628,        double resultHigh = 1;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1629,        double resultLow  = 0;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1632,        double d2p     = d;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1633,        double d2pHigh = d1High;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1634,        double d2pLow  = d1Low;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1636,        while (e != 0) {,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1638,            if ((e & 0x1) != 0) {,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1641,                final double tmpHigh = resultHigh * d2p;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1642,                final double cRH     = splitFactor * resultHigh;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1643,                final double rHH     = cRH - (cRH - resultHigh);,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1644,                final double rHL     = resultHigh - rHH;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1645,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1646,                resultHigh = tmpHigh;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1647,                resultLow  = resultLow * d2p + tmpLow;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1652,            final double tmpHigh = d2pHigh * d2p;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1653,            final double cD2pH   = splitFactor * d2pHigh;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1654,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1655,            final double d2pHL   = d2pHigh - d2pHH;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1656,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1657,            final double cTmpH   = splitFactor * tmpHigh;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1658,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1659,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1660,            d2p     = d2pHigh + d2pLow;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1662,            e = e >> 1;,0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1664,        },0.02857,0,-1,0
org/apache/commons/math3/util/FastMath,10,1666,        return resultHigh + resultLow;,0.02857,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,315,        final int vSize = valueCompiler.lowerIndirection.length;,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,316,        final int dSize = derivativeCompiler.lowerIndirection.length;,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,317,        final int[] lowerIndirection = new int[vSize + dSize];,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,318,"        System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);",0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,319,        for (int i = 0; i < dSize; ++i) {,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,320,            lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,323,        return lowerIndirection;,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,373,                            termJ[0] += termK[0];,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,375,                            termK[0] = 0;,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,441,"                    derivedTermF[j] = convertIndex(term[j], parameters,",0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,450,                    int[] derivedTermG = new int[term.length];,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,451,                    derivedTermG[0] = term[0];,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,452,                    derivedTermG[1] = term[1];,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,453,                    for (int j = 2; j < term.length; ++j) {,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,456,"                        derivedTermG[j] = convertIndex(term[j], parameters,",0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,459,                        if (j == l) {,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,461,"                            System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);",0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,462,                            orders[parameters - 1]++;,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,463,"                            derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);",0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,466,"                    Arrays.sort(derivedTermG, 2, derivedTermG.length);",0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,467,                    row.add(derivedTermG);,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,478,                        final int[] termK = row.get(k);,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,479,                        boolean equals = termJ.length == termK.length;,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,480,                        for (int l = 1; equals && l < termJ.length; ++l) {,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,483,                        if (equals) {,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,603,        int[] orders = new int[destP];,0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,604,"        System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));",0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,605,"        return getPartialDerivativeIndex(destP, destO, destSizes, orders);",0.01176,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,771,        for (int i = 0; i < multIndirection.length; ++i) {,0.01124,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,772,            final int[][] mappingI = multIndirection[i];,0.01124,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,773,            double r = 0;,0.01124,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,774,            for (int j = 0; j < mappingI.length; ++j) {,0.01124,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,775,                r += mappingI[j][0] *,0.01124,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,779,            result[resultOffset + i] = r;,0.01124,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,781,    },0.01124,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1712,        for (int i = 0; i < compIndirection.length; ++i) {,0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1713,            final int[][] mappingI = compIndirection[i];,0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1714,            double r = 0;,0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1715,            for (int j = 0; j < mappingI.length; ++j) {,0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1716,                final int[] mappingIJ = mappingI[j];,0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1717,                double product = mappingIJ[0] * f[mappingIJ[1]];,0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1718,                for (int k = 2; k < mappingIJ.length; ++k) {,0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1719,                    product *= operand[operandOffset + mappingIJ[k]];,0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1721,                r += product;,0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1723,            result[resultOffset + i] = r;,0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1725,    },0.01042,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,737,        for (int i = 0; i < getSize(); ++i) {,0.00901,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,738,            result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];,0.00901,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,740,    },0.00901,0,-1,0
org/apache/commons/math3/util/FastMath,10,379,        return Math.sqrt(a);,0.00813,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1760,    },0.0068,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1757,        if (order != compiler.order) {,0.00676,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1754,        if (parameters != compiler.parameters) {,0.00671,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,231,        return data[0];,0.00671,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,119,"            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;",0.00463,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,117,        if (order > 0) {,0.00459,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,122,    },0.00459,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,111,"        this(parameters, order, value);",0.00457,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,113,        if (index >= parameters) {,0.00457,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,192,                return cache[parameters][order];,0.00455,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,92,"        this(parameters, order);",0.00455,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,93,        this.data[0] = value;,0.00455,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,94,    },0.00455,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,72,    private DerivativeStructure(final DSCompiler compiler) {,0.0045,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,73,        this.compiler = compiler;,0.0045,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,74,        this.data     = new double[compiler.getSize()];,0.0045,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,75,    },0.0045,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,82,"        this(DSCompiler.getCompiler(parameters, order));",0.0045,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,83,    },0.0045,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,190,            if (cache[parameters][order] != null) {,0.00446,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,243,                sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,266,        final int vSize = valueCompiler.derivativesIndirection.length;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,267,        final int dSize = derivativeCompiler.derivativesIndirection.length;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,268,        final int[][] derivativesIndirection = new int[vSize + dSize][parameters];,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,271,        for (int i = 0; i < vSize; ++i) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,273,"            System.arraycopy(valueCompiler.derivativesIndirection[i], 0,",0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,279,        for (int i = 0; i < dSize; ++i) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,282,"            System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0,",0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,287,            derivativesIndirection[vSize + i][parameters - 1]++;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,291,        return derivativesIndirection;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,350,        final int vSize = valueCompiler.multIndirection.length;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,351,        final int dSize = derivativeCompiler.multIndirection.length;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,352,        final int[][][] multIndirection = new int[vSize + dSize][][];,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,354,"        System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize);",0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,356,        for (int i = 0; i < dSize; ++i) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,357,            final int[][] dRow = derivativeCompiler.multIndirection[i];,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,358,            List<int[]> row = new ArrayList<int[]>();,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,359,            for (int j = 0; j < dRow.length; ++j) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,360,"                row.add(new int[] { dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });",0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,361,"                row.add(new int[] { dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });",0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,365,            final List<int[]> combined = new ArrayList<int[]>(row.size());,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,366,            for (int j = 0; j < row.size(); ++j) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,367,                final int[] termJ = row.get(j);,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,368,                if (termJ[0] > 0) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,369,                    for (int k = j + 1; k < row.size(); ++k) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,370,                        final int[] termK = row.get(k);,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,371,                        if (termJ[1] == termK[1] && termJ[2] == termK[2]) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,378,                    combined.add(termJ);,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,382,            multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,386,        return multIndirection;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,414,        final int vSize = valueCompiler.compIndirection.length;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,415,        final int dSize = derivativeCompiler.compIndirection.length;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,416,        final int[][][] compIndirection = new int[vSize + dSize][][];,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,419,"        System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize);",0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,425,        for (int i = 0; i < dSize; ++i) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,426,            List<int[]> row = new ArrayList<int[]>();,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,427,            for (int[] term : derivativeCompiler.compIndirection[i]) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,432,                int[] derivedTermF = new int[term.length + 1];,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,433,                derivedTermF[0] = term[0];     // p,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,434,                derivedTermF[1] = term[1] + 1; // f_(k+1),0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,435,                int[] orders = new int[parameters];,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,436,                orders[parameters - 1] = 1;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,437,"                derivedTermF[term.length] = getPartialDerivativeIndex(parameters, order, sizes, orders);  // g_1",0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,438,                for (int j = 2; j < term.length; ++j) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,445,"                Arrays.sort(derivedTermF, 2, derivedTermF.length);",0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,446,                row.add(derivedTermF);,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,449,                for (int l = 2; l < term.length; ++l) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,473,            final List<int[]> combined = new ArrayList<int[]>(row.size());,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,474,            for (int j = 0; j < row.size(); ++j) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,475,                final int[] termJ = row.get(j);,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,476,                if (termJ[0] > 0) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,477,                    for (int k = j + 1; k < row.size(); ++k) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,490,                    combined.add(termJ);,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,494,            compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,498,        return compIndirection;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,576,            while (derivativeOrder-- > 0) {,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,580,                index += sizes[i][m--];,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,585,        return index;,0.00441,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,562,        int index     = 0;,0.00439,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,563,        int m         = order;,0.00439,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,564,        int ordersSum = 0;,0.00439,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,565,        for (int i = parameters - 1; i >= 0; --i) {,0.00439,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,568,            int derivativeOrder = orders[i];,0.00439,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,571,            ordersSum += derivativeOrder;,0.00439,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,572,            if (ordersSum > order) {,0.00439,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,159,"                       final DSCompiler valueCompiler, final DSCompiler derivativeCompiler) {",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,161,        this.parameters = parameters;,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,162,        this.order      = order;,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,163,"        this.sizes      = compileSizes(parameters, order, valueCompiler);",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,164,        this.derivativesIndirection =,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,167,        this.lowerIndirection =,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,170,        this.multIndirection =,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,173,        this.compIndirection =,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,178,    },0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,128,    private static AtomicReference<DSCompiler[][]> compilers =,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,188,        final DSCompiler[][] cache = compilers.get();,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,189,        if (cache != null && cache.length > parameters && cache[parameters].length > order) {,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,197,"        final int maxParameters = FastMath.max(parameters, cache == null ? 0 : cache.length);",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,198,"        final int maxOrder      = FastMath.max(order,     cache == null ? 0 : cache[0].length);",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,199,        final DSCompiler[][] newCache = new DSCompiler[maxParameters + 1][maxOrder + 1];,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,201,        if (cache != null) {,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,209,        for (int diag = 0; diag <= parameters + order; ++diag) {,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,210,"            for (int o = FastMath.max(0, diag - parameters); o <= FastMath.min(order, diag); ++o) {",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,211,                final int p = diag - o;,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,212,                if (newCache[p][o] == null) {,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,213,                    final DSCompiler valueCompiler      = (p == 0) ? null : newCache[p - 1][o];,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,214,                    final DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,215,"                    newCache[p][o] = new DSCompiler(p, o, valueCompiler, derivativeCompiler);",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,221,"        compilers.compareAndSet(cache, newCache);",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,223,        return newCache[parameters][order];,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,236,        final int[][] sizes = new int[parameters + 1][order + 1];,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,237,        if (parameters == 0) {,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,238,"            Arrays.fill(sizes[0], 1);",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,240,"            System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,241,            sizes[parameters][0] = 1;,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,242,            for (int i = 0; i < order; ++i) {,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,247,        return sizes;,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,262,        if (parameters == 0 || order == 0) {,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,263,            return new int[1][parameters];,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,310,        if (parameters == 0 || order <= 1) {,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,311,            return new int[] { 0 };,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,345,        if ((parameters == 0) || (order == 0)) {,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,346,"            return new int[][][] { { { 1, 0, 0 } } };",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,410,        if ((parameters == 0) || (order == 0)) {,0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,411,"            return new int[][][] { { { 1, 0 } } };",0.00437,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,642,        return sizes[parameters][order];,0.00437,0,-1,0
org/apache/commons/math3/util/FastMath,10,3489,        return (a <= b) ? b : a;,0.00433,0,-1,0
org/apache/commons/math3/util/FastMath,10,3421,        return (a <= b) ? a : b;,0.00424,0,-1,0
org/apache/commons/math3/util/FastMath,10,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,115,    private static final double LN_QUICK_COEF[][] = {,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,128,    private static final double LN_HI_PREC_COEF[][] = {,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,141,    private static final double SINE_TABLE_A[] =,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,160,    private static final double SINE_TABLE_B[] =,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,179,    private static final double COSINE_TABLE_A[] =,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,198,    private static final double COSINE_TABLE_B[] =,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,218,    private static final double TANGENT_TABLE_A[] =,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,237,    private static final double TANGENT_TABLE_B[] =,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,256,    private static final long RECIP_2PI[] = new long[] {,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,277,    private static final long PI_O_4_BITS[] = new long[] {,0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.0034,0,-1,0
org/apache/commons/math3/util/FastMath,10,3808,        CodyWaite(double xa) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3811,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3817,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3818,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3819,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3821,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3822,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3823,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3824,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3826,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3827,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3828,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3829,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3831,                if (remA > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3832,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3838,                --k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3839,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3841,            this.finalK = k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3842,            this.finalRemA = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3843,            this.finalRemB = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3844,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3850,            return finalK;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3856,            return finalRemA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3862,            return finalRemB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,353,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,365,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,366,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,368,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,369,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,370,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,387,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,388,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,396,      if (x > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,397,          if (x >= LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,399,              final double t = exp(0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,400,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,402,              return 0.5 * exp(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,404,      } else if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,405,          if (x <= -LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,407,              final double t = exp(-0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,408,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,410,              return 0.5 * exp(-x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,414,      final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,415,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,416,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,418,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,420,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,421,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,423,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,424,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,425,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,428,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,429,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,430,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,431,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,434,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,436,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,439,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,440,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,441,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,442,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,443,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,444,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,446,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,447,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,448,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,456,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,457,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,458,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,466,      if (x > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,467,          if (x >= LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,469,              final double t = exp(0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,470,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,472,              return 0.5 * exp(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,474,      } else if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,475,          if (x <= -LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,477,              final double t = exp(-0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,478,              return (-0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,480,              return -0.5 * exp(-x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,484,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,485,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,488,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,489,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,490,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,495,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,496,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,497,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,499,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,500,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,502,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,503,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,504,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,507,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,508,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,509,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,510,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,513,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,515,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,517,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,518,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,521,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,522,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,523,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,524,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,525,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,526,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,528,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,529,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,530,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,532,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,533,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,535,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,536,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,539,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,540,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,541,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,542,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,543,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,544,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,545,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,547,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,548,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,549,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,551,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,554,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,555,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,558,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,559,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,560,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,561,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,562,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,563,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,565,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,566,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,569,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,570,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,573,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,581,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,583,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,584,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,593,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,594,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,597,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,598,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,601,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,602,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,605,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,606,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,607,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,611,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,612,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,614,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,616,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,617,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,620,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,621,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,622,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,623,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,624,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,627,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,628,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,629,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,630,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,631,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,633,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,634,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,635,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,638,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,639,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,640,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,641,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,644,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,647,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,649,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,651,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,652,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,654,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,656,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,658,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,659,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,662,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,663,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,666,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,667,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,668,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,669,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,670,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,672,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,673,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,674,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,677,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,678,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,679,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,680,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,683,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,686,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,688,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,690,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,693,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,694,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,697,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,705,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,713,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,714,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,715,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,716,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,720,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,721,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,723,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,724,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,725,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,726,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,727,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,728,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,729,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,735,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,743,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,744,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,745,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,746,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,750,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,751,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,753,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,754,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,755,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,756,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,757,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,758,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,759,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,765,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,774,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,783,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,807,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,831,"        return exp(x, 0.0, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,850,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,851,            intVal = (int) -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,853,            if (intVal > 746) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,854,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,855,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,856,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,858,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,861,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,864,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,865,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,866,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,868,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,871,            if (intVal == 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,874,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,875,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,876,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,878,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,881,            intVal++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,886,            intVal = -intVal;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,888,            intVal = (int) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,890,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,891,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,892,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,893,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,895,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,923,        double z = 0.04168701738764507;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,924,        z = z * epsilon + 0.1666666505023083;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,925,        z = z * epsilon + 0.5000000000042687;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,926,        z = z * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,927,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,934,        double tempA = intPartA * fracPartA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,941,        final double tempC = tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,943,        if (extra != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,944,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,946,            result = tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,949,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,951,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,952,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,955,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,963,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,972,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,973,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,976,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,979,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,980,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,981,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,982,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,984,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,985,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,986,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,987,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,994,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,996,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,997,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,998,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1002,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1003,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1004,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1006,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1007,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1008,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1010,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1011,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1012,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1014,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1019,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1020,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1021,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1022,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1023,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1024,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1026,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1027,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1028,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1029,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1031,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1032,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1033,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1034,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1037,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1039,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1040,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1043,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1044,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1045,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1047,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1048,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1049,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1053,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1054,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1055,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1057,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1059,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1060,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1062,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1064,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1065,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1067,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1069,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1070,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1072,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1074,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1075,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1076,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1077,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1078,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1079,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1080,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1082,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1083,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1084,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1086,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1097,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1098,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1101,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1102,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1105,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1106,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1107,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1110,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1120,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1130,        if (x==0) { // Handle special case of +0/-0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1131,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1133,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1137,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1139,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1142,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1147,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1148,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1149,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1152,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1156,        int exp = (int)(bits >> 52)-1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1160,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1162,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1163,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1166,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1170,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1171,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1172,                --exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1173,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1178,        if (exp == -1 || exp == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1184,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1185,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1186,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1187,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1188,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1189,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1190,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1193,                double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1194,                double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1198,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1199,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1201,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1202,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1203,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1207,                    aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1208,                    ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1210,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1211,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1212,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1216,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1217,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1219,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1220,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1221,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1223,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1241,        double lnza = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1242,        double lnzb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1244,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1246,            double tmp = epsilon * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1247,            double aa = epsilon + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1248,            double ab = epsilon - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1249,            double xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1250,            double xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1253,            final double numer = bits & 0x3ffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1255,            aa = numer - xa*denom - xb * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1256,            xb += aa / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1260,            double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1261,            double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1265,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1266,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1268,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1269,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1270,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1274,                aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1275,                ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1277,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1278,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1279,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1283,            aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1284,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1292,            lnza = aa + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1293,            lnzb = -(lnza - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1294,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1297,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1298,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1299,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1300,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1301,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1302,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1303,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1320,        double a = LN_2_A*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1321,        double b = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1322,        double c = a+lnm[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1323,        double d = -(c-a-lnm[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1324,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1325,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1327,        c = a + lnza;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1328,        d = -(c - a - lnza);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1329,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1330,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1332,        c = a + LN_2_B*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1333,        d = -(c - a - LN_2_B*exp);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1334,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1335,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1337,        c = a + lnm[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1338,        d = -(c - a - lnm[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1339,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1340,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1342,        c = a + lnzb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1343,        d = -(c - a - lnzb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1344,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1345,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1347,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1348,            hiPrec[0] = a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1349,            hiPrec[1] = b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1352,        return a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1362,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1363,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1366,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1367,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1370,        if (x > 1e-6 ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1372,            final double xpa = 1 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1373,            final double xpb = -(xpa - 1 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1375,            final double[] hiPrec = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1376,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1377,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1378,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1383,            final double fx1 = xpb / xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1384,            final double epsilon = 0.5 * fx1 + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1385,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1388,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1389,            return y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1398,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1400,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1401,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1402,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1405,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1406,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1407,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1409,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1410,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1412,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1432,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1443,        final double lns[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1445,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1446,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1449,        if (x != x) { // X is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1450,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1454,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1455,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1456,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1458,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1460,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1461,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1464,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1465,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1469,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1470,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1472,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1473,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1476,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1479,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1480,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1481,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1483,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1484,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1486,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1490,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1491,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1492,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1495,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1496,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1498,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1502,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1503,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1504,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1507,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1508,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1509,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1510,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1513,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1516,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1517,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1518,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1519,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1522,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1526,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1528,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1529,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1532,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1533,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1535,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1540,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1542,            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1543,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1546,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1548,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1550,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1557,        if (y < 8e298 && y > -8e298) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1558,            double tmp1 = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1559,            ya = y + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1560,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1561,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1562,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1563,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1564,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1565,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1569,"        final double lores = log(x, lns);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1571,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1574,        double lna = lns[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1575,        double lnb = lns[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1578,        double tmp1 = lna * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1579,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1580,        lnb += lna - tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1581,        lna = tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1584,        final double aa = lna * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1587,        lna = aa+ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1588,        lnb = -(lna - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1590,        double z = 1.0 / 120.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1591,        z = z * lnb + (1.0 / 24.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1592,        z = z * lnb + (1.0 / 6.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1593,        z = z * lnb + 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1594,        z = z * lnb + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1595,        z = z * lnb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1597,"        final double result = exp(lna, z, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1599,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1614,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1616,            e = -e;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1617,            d = 1.0 / d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1678,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1680,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1681,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1682,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1683,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1686,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1688,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1698,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1700,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1701,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1702,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1703,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1704,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1706,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1717,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1718,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1721,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1722,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1723,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1724,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1727,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1728,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1729,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1730,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1733,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1734,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1735,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1736,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1762,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1763,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1765,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1766,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1767,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1768,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1769,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1771,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1772,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1773,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1774,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1775,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1777,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1792,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1819,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1822,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1823,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1824,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1825,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1828,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1830,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1841,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1842,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1844,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1845,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1846,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1848,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1861,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1862,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1865,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1866,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1867,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1868,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1871,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1872,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1873,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1874,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1877,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1878,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1879,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1880,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1905,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1906,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1909,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1910,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1911,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1912,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1913,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1915,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1916,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1917,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1918,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1919,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1921,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1922,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1924,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1925,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1929,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1931,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1932,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1933,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1934,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1935,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1937,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1938,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1939,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1940,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1941,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1943,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1944,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1946,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1947,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1949,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1951,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1952,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1966,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1969,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1970,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1971,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1973,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1974,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1975,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1978,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1979,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1980,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1982,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1985,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1986,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1987,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1990,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,1993,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2010,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2011,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2014,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2015,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2018,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2019,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2025,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2026,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2028,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2029,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2030,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2031,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2032,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2034,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2035,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2036,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2040,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2041,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2043,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2044,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2046,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2047,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2048,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2049,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2051,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2052,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2054,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2055,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2056,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2059,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2061,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2064,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2065,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2067,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2068,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2070,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2073,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2075,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2079,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2080,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2081,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2082,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2083,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2086,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2088,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2089,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2090,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2091,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2093,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2095,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2099,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2100,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2102,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2103,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2104,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2106,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2118,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2121,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2122,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2123,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2126,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2127,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2129,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2130,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2132,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2133,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2134,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2135,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2137,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2138,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2140,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2141,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2142,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2145,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2147,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2150,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2151,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2153,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2154,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2156,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2159,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2161,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2165,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2166,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2167,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2168,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2169,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2172,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2174,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2175,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2176,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2177,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2179,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2181,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2185,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2186,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2187,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2188,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2189,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2190,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2191,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2194,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2196,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2197,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2198,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2199,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2201,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2203,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2207,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2208,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2210,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2211,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2214,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2215,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2216,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2217,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2226,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2227,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2229,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2232,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2233,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2234,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2235,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2239,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2240,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2241,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2242,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2244,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2247,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2248,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2252,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2256,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2257,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2258,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2259,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2260,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2261,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2262,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2263,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2264,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2265,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2268,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2269,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2272,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2274,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2276,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2278,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2280,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2282,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2293,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2296,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2297,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2298,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2302,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2306,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2307,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2311,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2312,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2313,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2314,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2315,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2316,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2317,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2318,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2319,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2320,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2326,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2328,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2330,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2332,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2334,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2336,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2347,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2348,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2351,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2352,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2353,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2354,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2358,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2359,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2360,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2361,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2363,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2366,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2367,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2371,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2372,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2376,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2377,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2378,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2379,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2380,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2381,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2382,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2383,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2384,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2385,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2388,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2390,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2391,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2393,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2394,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2395,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2397,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2398,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2399,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2400,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2404,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2405,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2407,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2410,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2411,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2414,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2437,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2442,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2443,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2444,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2448,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2453,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2482,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2483,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2484,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2485,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2486,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2487,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2488,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2490,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2491,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2493,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2494,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2495,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2497,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2498,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2499,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2502,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2504,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2505,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2554,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2555,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2557,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2558,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2559,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2561,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2562,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2567,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2580,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2581,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2584,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2585,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2586,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2587,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2589,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2590,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2591,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2593,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2597,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2598,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2599,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2601,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2604,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2610,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2611,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2612,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2615,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2616,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2619,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2622,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2623,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2624,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2627,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2628,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2631,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2634,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2635,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2636,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2639,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2640,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2644,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2646,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2647,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2650,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2651,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2657,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2658,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2659,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2662,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2663,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2668,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2669,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2670,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2673,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2674,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2677,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2678,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2680,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2682,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2683,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2684,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2686,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2687,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2691,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2693,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2701,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2702,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2705,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2706,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2709,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2710,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2713,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2714,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2717,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2718,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2724,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2725,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2726,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2729,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2730,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2733,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2734,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2736,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2737,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2739,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2740,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2741,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2745,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2746,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2747,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2748,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2751,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2754,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2757,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2758,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2759,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2760,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2762,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2763,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2765,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2766,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2767,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2769,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2777,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2778,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2781,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2782,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2785,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2786,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2789,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2790,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2793,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2794,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2800,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2801,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2802,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2805,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2806,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2809,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2810,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2812,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2813,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2815,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2816,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2817,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2820,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2821,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2822,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2823,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2826,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2829,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2830,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2831,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2834,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2837,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2838,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2841,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2842,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2844,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2845,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2847,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2848,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2849,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2851,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2860,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2861,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2862,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2864,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2865,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2866,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2870,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2871,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2872,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2873,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2876,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2878,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2882,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2885,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2889,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2892,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2893,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2894,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2895,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2896,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2898,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2903,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2904,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2905,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2908,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2909,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2910,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2912,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2913,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2914,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2915,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2916,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2917,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2919,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2920,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2922,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2923,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2924,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2926,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2929,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2931,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2932,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2935,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2945,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2946,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2950,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2951,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2953,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2954,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2956,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2957,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2958,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2960,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2970,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2971,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2975,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2976,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2978,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2979,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2990,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,2999,        return (x < 0l) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3008,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3026,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3027,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3029,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3038,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3039,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3041,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3053,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3054,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3058,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3059,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3061,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3062,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3064,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3065,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3069,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3070,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3071,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3072,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3075,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3077,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3079,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3081,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3082,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3086,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3089,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3090,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3091,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3093,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3095,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3099,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3103,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3106,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3107,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3108,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3110,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3111,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3113,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3114,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3116,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3119,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3120,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3122,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3137,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3138,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3142,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3143,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3145,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3146,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3148,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3149,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3153,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3154,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3155,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3156,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3159,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3161,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3163,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3165,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3166,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3170,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3173,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3174,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3175,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3177,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3179,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3183,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3187,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3190,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3191,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3192,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3194,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3195,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3197,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3198,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3200,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3203,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3204,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3206,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3246,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3247,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3248,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3249,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3250,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3251,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3252,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3253,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3258,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3259,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3260,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3261,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3263,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3302,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3303,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3304,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3305,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3306,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3307,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3308,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3309,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3314,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3315,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3316,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3317,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3319,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3331,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3332,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3335,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3336,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3339,        y = (long) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3340,        if (x < 0 && y != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3341,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3344,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3345,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3348,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3358,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3359,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3362,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3363,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3364,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3367,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3369,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3370,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3373,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3381,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3382,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3384,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3385,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3386,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3388,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3390,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3391,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3395,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3396,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3404,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3412,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3430,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3439,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3440,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3442,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3443,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3446,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3447,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3451,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3452,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3453,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3455,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3464,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3465,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3467,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3468,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3471,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3472,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3476,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3477,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3478,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3480,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3498,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3507,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3508,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3510,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3511,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3514,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3515,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3519,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3520,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3521,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3523,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3532,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3533,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3535,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3536,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3539,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3540,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3544,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3545,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3546,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3548,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3566,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3567,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3568,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3569,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3572,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3573,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3574,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3576,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3577,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3579,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3583,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3586,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3587,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3590,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3593,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3621,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3633,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3634,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3635,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3636,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3638,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3650,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3651,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3652,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3653,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3655,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3668,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3681,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3690,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3691,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3692,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3693,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3694,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3695,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3696,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3697,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3698,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3699,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3700,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3701,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3702,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3777,    private static class lnMant {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3793,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3744,    private static class ExpFracTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3773,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3705,    private static class ExpIntTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,10,3740,        },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,10,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,10,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,10,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,10,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,10,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,10,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,10,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,10,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,10,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,10,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,10,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,10,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,10,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,10,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,10,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,10,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,10,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,10,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,10,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,10,44,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,10,45,        dimension = expected;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,10,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,10,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,10,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,10,63,        return dimension;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,880,"        public DataTransferObject(final int variables, final int order, final double[] data) {",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,881,            this.variables = variables;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,882,            this.order     = order;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,883,            this.data      = data;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,884,        },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,890,"            return new DerivativeStructure(variables, order, data);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,203,            for (int i = 0; i < cache.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,204,"                System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,481,                            equals &= termJ[l] == termK[l];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,485,                            termJ[0] += termK[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,487,                            termK[0] = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,538,        if (orders.length != getFreeParameters()) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,539,"            throw new DimensionMismatchException(orders.length, getFreeParameters());",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,542,"        return getPartialDerivativeIndex(parameters, order, sizes, orders);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,573,"                throw new NumberIsTooLargeException(ordersSum, order, true);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,617,        return derivativesIndirection[index];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,624,        return parameters;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,631,        return order;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,660,        for (int i = 0; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,661,            result[resultOffset + i] =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,664,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,685,        for (int i = 0; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,686,            result[resultOffset + i] =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,691,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,716,        for (int i = 0; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,717,            result[resultOffset + i] =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,723,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,753,        for (int i = 0; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,754,            result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,756,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,815,        final double rem = lhs[lhsOffset] % rhs[rhsOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,816,        final double k   = FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,819,        result[resultOffset] = rem;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,822,        for (int i = 1; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,823,            result[resultOffset + i] = lhs[lhsOffset + i] - k * rhs[rhsOffset + i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,826,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,842,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,843,"        double xk = FastMath.pow(operand[operandOffset], p - order);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,844,        for (int i = order; i > 0; --i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,845,            function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,846,            xk *= operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,848,        function[0] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,849,        double coefficient = p;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,850,        for (int i = 1; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,851,            function[i] *= coefficient;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,852,            coefficient *= p - i;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,856,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,858,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,874,            result[resultOffset] = 1.0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,875,"            Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,876,            return;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,885,"            final int maxOrder = FastMath.min(order, n);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,886,"            double xk = FastMath.pow(operand[operandOffset], n - maxOrder);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,887,            for (int i = maxOrder; i > 0; --i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,888,                function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,889,                xk *= operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,891,            function[0] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,892,        } else {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,926,        final double[] logX = new double[getSize()];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,927,"        log(x, xOffset, logX, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,928,        final double[] yLogX = new double[getSize()];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,929,"        multiply(logX, 0, y, yOffset, yLogX, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,930,"        exp(yLogX, 0, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,931,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,952,        } else if (n == 3) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,953,            function[0] = FastMath.cbrt(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,954,            xk          = 1.0 / (3.0 * function[0] * function[0]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,956,"            function[0] = FastMath.pow(operand[operandOffset], 1.0 / n);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,957,"            xk          = 1.0 / (n * FastMath.pow(function[0], n - 1));",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,983,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,984,"        Arrays.fill(function, FastMath.exp(operand[operandOffset]));",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,987,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,989,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1003,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1004,        function[0] = FastMath.expm1(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1005,"        Arrays.fill(function, 1, 1 + order, FastMath.exp(operand[operandOffset]));",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1008,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1010,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1024,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1025,        function[0] = FastMath.log(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1026,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1027,            double inv = 1.0 / operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1028,            double xk  = inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1029,            for (int i = 1; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1030,                function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1031,                xk *= -i * inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1036,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1038,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1051,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1052,        function[0] = FastMath.log1p(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1053,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1054,            double inv = 1.0 / (1.0 + operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1055,            double xk  = inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1056,            for (int i = 1; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1057,                function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1058,                xk *= -i * inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1063,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1065,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1078,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1079,        function[0] = FastMath.log10(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1080,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1081,            double inv = 1.0 / operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1082,            double xk  = inv / FastMath.log(10.0);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1083,            for (int i = 1; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1084,                function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1085,                xk *= -i * inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1090,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1092,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1106,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1107,        function[0] = FastMath.cos(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1108,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1109,            function[1] = -FastMath.sin(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1110,            for (int i = 2; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1111,                function[i] = -function[i - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1116,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1118,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1132,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1133,        function[0] = FastMath.sin(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1134,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1135,            function[1] = FastMath.cos(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1136,            for (int i = 2; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1137,                function[i] = -function[i - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1142,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1144,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1158,        final double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1159,        final double t = FastMath.tan(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1160,        function[0] = t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1162,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1171,            final double[] p = new double[order + 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1172,            p[1] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1173,            final double t2 = t * t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1174,            for (int n = 1; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1177,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1178,                p[n + 1] = n * p[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1179,                for (int k = n + 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1180,                    v = v * t2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1181,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1182,                        p[k - 2] = (k - 1) * p[k - 1] + (k - 3) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1183,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1184,                        p[0] = p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1187,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1188,                    v *= t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1191,                function[n] = v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1197,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1199,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1213,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1214,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1215,        function[0] = FastMath.acos(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1216,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1224,            final double[] p = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1225,            p[0] = -1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1226,            final double x2    = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1227,            final double f     = 1.0 / (1 - x2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1228,            double coeff = FastMath.sqrt(f);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1229,            function[1] = coeff * p[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1230,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1233,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1234,                p[n - 1] = (n - 1) * p[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1235,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1236,                    v = v * x2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1237,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1238,                        p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1239,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1240,                        p[0] = p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1243,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1244,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1247,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1248,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1254,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1256,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1270,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1271,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1272,        function[0] = FastMath.asin(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1273,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1281,            final double[] p = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1282,            p[0] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1283,            final double x2    = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1284,            final double f     = 1.0 / (1 - x2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1285,            double coeff = FastMath.sqrt(f);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1286,            function[1] = coeff * p[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1287,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1290,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1291,                p[n - 1] = (n - 1) * p[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1292,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1293,                    v = v * x2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1294,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1295,                        p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1296,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1297,                        p[0] = p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1300,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1301,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1304,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1305,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1311,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1313,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1352,                        q[k - 2] = (k - 1) * q[k - 1] + (k - 1 - 2 * n) * q[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1354,                        q[0] = q[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1407,"            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1408,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1409,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1410,            result[resultOffset] =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1412,            for (int i = 1; i < tmp2.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1413,                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x)),0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1434,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1435,        function[0] = FastMath.cosh(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1436,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1437,            function[1] = FastMath.sinh(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1438,            for (int i = 2; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1439,                function[i] = function[i - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1444,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1446,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1460,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1461,        function[0] = FastMath.sinh(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1462,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1463,            function[1] = FastMath.cosh(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1464,            for (int i = 2; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1465,                function[i] = function[i - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1470,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1472,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1486,        final double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1487,        final double t = FastMath.tanh(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1488,        function[0] = t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1490,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1499,            final double[] p = new double[order + 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1500,            p[1] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1501,            final double t2 = t * t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1502,            for (int n = 1; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1505,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1506,                p[n + 1] = -n * p[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1507,                for (int k = n + 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1508,                    v = v * t2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1509,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1510,                        p[k - 2] = (k - 1) * p[k - 1] - (k - 3) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1511,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1512,                        p[0] = p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1515,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1516,                    v *= t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1519,                function[n] = v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1525,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1527,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1541,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1542,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1543,        function[0] = FastMath.acosh(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1544,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1552,            final double[] p = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1553,            p[0] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1554,            final double x2  = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1555,            final double f   = 1.0 / (x2 - 1);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1556,            double coeff = FastMath.sqrt(f);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1557,            function[1] = coeff * p[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1558,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1561,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1562,                p[n - 1] = (1 - n) * p[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1563,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1564,                    v = v * x2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1565,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1566,                        p[k - 2] = (1 - k) * p[k - 1] + (k - 2 * n) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1567,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1568,                        p[0] = -p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1571,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1572,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1575,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1576,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1582,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1584,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1598,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1599,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1600,        function[0] = FastMath.asinh(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1601,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1609,            final double[] p = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1610,            p[0] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1611,            final double x2    = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1612,            final double f     = 1.0 / (1 + x2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1613,            double coeff = FastMath.sqrt(f);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1614,            function[1] = coeff * p[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1615,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1618,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1619,                p[n - 1] = (1 - n) * p[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1620,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1621,                    v = v * x2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1622,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1623,                        p[k - 2] = (k - 1) * p[k - 1] + (k - 2 * n) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1624,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1625,                        p[0] = p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1628,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1629,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1632,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1633,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1639,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1641,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1655,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1656,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1657,        function[0] = FastMath.atanh(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1658,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1666,            final double[] q = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1667,            q[0] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1668,            final double x2 = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1669,            final double f  = 1.0 / (1 - x2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1670,            double coeff = f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1671,            function[1] = coeff * q[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1672,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1675,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1676,                q[n - 1] = n * q[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1677,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1678,                    v = v * x2 + q[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1679,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1680,                        q[k - 2] = (k - 1) * q[k - 1] + (2 * n - k + 1) * q[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1681,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1682,                        q[0] = q[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1685,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1686,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1689,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1690,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1696,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1698,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1734,        double value = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1735,        for (int i = getSize() - 1; i >= 0; --i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1736,            final int[] orders = getPartialDerivativeOrders(i);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1737,            double term = ds[dsOffset + i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1738,            for (int k = 0; k < orders.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1739,                if (orders[k] > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1740,"                    term *= FastMath.pow(delta[k], orders[k]) / ArithmeticUtils.factorial(orders[k]);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1743,            value += term;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1745,        return value;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1755,"            throw new DimensionMismatchException(parameters, compiler.parameters);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1758,"            throw new DimensionMismatchException(order, compiler.order);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,596,        return new Field<DerivativeStructure>() {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,600,"                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,605,"                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,610,                return DerivativeStructure.class;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,114,"            throw new NumberIsTooLargeException(index, parameters, false);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,135,        this(ds1.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,136,        compiler.checkCompatibility(ds2.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,137,"        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,138,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,154,        this(ds1.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,155,        compiler.checkCompatibility(ds2.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,156,        compiler.checkCompatibility(ds3.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,157,"        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,158,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,177,        this(ds1.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,178,        compiler.checkCompatibility(ds2.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,179,        compiler.checkCompatibility(ds3.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,180,        compiler.checkCompatibility(ds4.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,181,"        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,184,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,197,"        this(parameters, order);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,198,        if (derivatives.length != data.length) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,199,"            throw new DimensionMismatchException(derivatives.length, data.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,201,"        System.arraycopy(derivatives, 0, data, 0, data.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,202,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,207,    private DerivativeStructure(final DerivativeStructure ds) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,208,        this.compiler = ds.compiler;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,209,        this.data     = ds.data.clone();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,210,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,216,        return compiler.getFreeParameters();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,223,        return compiler.getOrder();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,246,        return data[compiler.getPartialDerivativeIndex(orders)];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,254,        return data.clone();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,262,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,263,        ds.data[0] += a;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,264,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,274,        compiler.checkCompatibility(a.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,275,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,276,"        compiler.add(data, 0, a.data, 0, ds.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,277,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,285,        return add(-a);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,295,        compiler.checkCompatibility(a.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,296,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,297,"        compiler.subtract(data, 0, a.data, 0, ds.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,298,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,303,        return multiply((double) n);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,311,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,312,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,313,            ds.data[i] *= a;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,315,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,325,        compiler.checkCompatibility(a.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,326,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,327,"        compiler.multiply(data, 0, a.data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,328,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,336,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,337,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,338,            ds.data[i] /= a;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,340,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,350,        compiler.checkCompatibility(a.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,351,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,352,"        compiler.divide(data, 0, a.data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,353,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,361,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,362,        ds.data[0] = ds.data[0] % a;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,363,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,373,        compiler.checkCompatibility(a.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,374,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,375,"        compiler.remainder(data, 0, a.data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,376,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,383,        final DerivativeStructure ds = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,384,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,385,            ds.data[i] = -data[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,387,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,394,        if (Double.doubleToLongBits(data[0]) < 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,396,            return negate();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,398,            return this;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,406,"        return new DerivativeStructure(compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,415,"        return new DerivativeStructure(compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,424,"        return new DerivativeStructure(compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,433,        return FastMath.round(data[0]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,441,"        return new DerivativeStructure(compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,454,        long m = Double.doubleToLongBits(data[0]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,455,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,456,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,457,            return this;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,459,        return negate(); // flip sign,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,471,        return FastMath.getExponent(data[0]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,480,        final DerivativeStructure ds = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,481,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,482,"            ds.data[i] = FastMath.scalb(data[i], n);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,484,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,505,        x.compiler.checkCompatibility(y.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,507,        if (Double.isInfinite(x.data[0]) || Double.isInfinite(y.data[0])) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,508,"            return new DerivativeStructure(x.compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,511,        } else if (Double.isNaN(x.data[0]) || Double.isNaN(y.data[0])) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,512,"            return new DerivativeStructure(x.compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,517,            final int expX = x.getExponent();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,518,            final int expY = y.getExponent();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,519,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,521,                return x.abs();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,522,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,524,                return y.abs();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,528,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,531,                final DerivativeStructure scaledX = x.scalb(-middleExp);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,532,                final DerivativeStructure scaledY = y.scalb(-middleExp);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,535,                final DerivativeStructure scaledH =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,539,                return scaledH.scalb(middleExp);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,555,        if (f.length != getOrder() + 1) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,556,"            throw new DimensionMismatchException(f.length, getOrder() + 1);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,558,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,559,"        compiler.compose(data, 0, f, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,560,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,565,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,566,"        compiler.pow(data, 0, -1, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,567,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,574,        return rootN(2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,581,        return rootN(3);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,589,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,590,"        compiler.rootN(data, 0, n, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,591,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,596,        return new Field<DerivativeStructure>() {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,621,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,622,"        compiler.pow(data, 0, p, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,623,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,631,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,632,"        compiler.pow(data, 0, n, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,633,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,643,        compiler.checkCompatibility(e.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,644,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,645,"        compiler.pow(data, 0, e.data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,646,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,653,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,654,"        compiler.exp(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,655,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,662,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,663,"        compiler.expm1(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,664,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,671,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,672,"        compiler.log(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,673,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,680,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,681,"        compiler.log1p(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,682,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,689,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,690,"        compiler.log10(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,691,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,698,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,699,"        compiler.cos(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,700,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,707,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,708,"        compiler.sin(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,709,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,716,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,717,"        compiler.tan(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,718,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,725,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,726,"        compiler.acos(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,727,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,734,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,735,"        compiler.asin(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,736,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,743,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,744,"        compiler.atan(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,745,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,766,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,767,"        compiler.cosh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,768,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,775,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,776,"        compiler.sinh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,777,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,784,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,785,"        compiler.tanh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,786,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,793,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,794,"        compiler.acosh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,795,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,802,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,803,"        compiler.asinh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,804,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,811,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,812,"        compiler.atanh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,813,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,820,        final DerivativeStructure ds = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,821,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,822,            ds.data[i] = FastMath.toDegrees(data[i]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,824,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,831,        final DerivativeStructure ds = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,832,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,833,            ds.data[i] = FastMath.toRadians(data[i]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,835,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,843,"        return compiler.taylor(data, 0, delta);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,851,"        return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,58,"public class DerivativeStructure implements FieldElement<DerivativeStructure>, Serializable {",0.0,0,-1,0
