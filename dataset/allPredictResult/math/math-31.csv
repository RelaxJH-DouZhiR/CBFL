project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/exception/MathIllegalStateException,31,80,        return context.getMessage();,1.0,0,1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,86,        return context.getLocalizedMessage();,1.0,0,1,0
org/apache/commons/math3/distribution/FDistribution,31,178,        return solverAbsoluteAccuracy;,0.2,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,0.2,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,0.2,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,0.2,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,0.2,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,145,            ret = 0;,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,191,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,227,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,248,        return 0;,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,0.16667,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,114,        return numberOfTrials * probabilityOfSuccess;,0.16667,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,0.16667,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,0.16667,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,137,        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;,0.16667,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,149,        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;,0.16667,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,172,        return denominatorDegreesOfFreedom;,0.14286,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,96,        if (x < 0) {,0.14286,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,98,        } else if (x >= numberOfTrials) {,0.14286,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,101,"            ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,",0.14286,0,-1,0
org/apache/commons/math3/special/Beta,31,129,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);",0.10256,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,147,            double n = numeratorDegreesOfFreedom;,0.1,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,148,            double m = denominatorDegreesOfFreedom;,0.1,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,150,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",0.1,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,49,"    public BinomialDistribution(int trials, double p) {",0.1,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,50,        if (trials < 0) {,0.1,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,54,        if (p < 0 || p > 1) {,0.1,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,58,        probabilityOfSuccess = p;,0.1,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,59,        numberOfTrials = trials;,0.1,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,60,    },0.1,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,144,        if (x <= 0) {,0.09091,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,154,        return ret;,0.09091,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,104,            double k = FastMath.sqrt((1.0 - p) / p);,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,105,            double tmp = mu - k * sigma;,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,106,            if (tmp > lower) {,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,107,                lower = ((int) Math.ceil(tmp)) - 1;,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,109,            k = 1.0 / k;,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,110,            tmp = mu + k * sigma;,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,111,            if (tmp < upper) {,0.08333,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,112,                upper = ((int) Math.ceil(tmp)) - 1;,0.08333,0,-1,0
org/apache/commons/math3/special/Beta,31,138,                        m = n / 2.0;,0.08,0,-1,0
org/apache/commons/math3/special/Beta,31,139,                        ret = (m * (b - m) * x) /,0.08,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,133,            int xm = (lower + upper) / 2;,0.07143,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,134,            if (xm < lower || xm > upper) {,0.07143,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,143,            double pm = checkedCumulativeProbability(xm);,0.07143,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,200,        double result = Double.NaN;,0.07143,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,201,        result = cumulativeProbability(argument);,0.07143,0,-1,0
org/apache/commons/math3/special/Beta,31,128,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,0.07018,0,-1,0
org/apache/commons/math3/special/Beta,31,131,            ContinuedFraction fraction = new ContinuedFraction() {,0.07018,0,-1,0
org/apache/commons/math3/special/Beta,31,154,            ret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -,0.07018,0,-1,0
org/apache/commons/math3/special/Beta,31,131,            ContinuedFraction fraction = new ContinuedFraction() {,0.07018,0,-1,0
org/apache/commons/math3/special/Beta,31,137,                    if (n % 2 == 0) { // even,0.07018,0,-1,0
org/apache/commons/math3/special/Beta,31,142,                        m = (n - 1.0) / 2.0;,0.07018,0,-1,0
org/apache/commons/math3/special/Beta,31,143,                        ret = -((a + m) * (a + b + m) * x) /,0.07018,0,-1,0
org/apache/commons/math3/special/Beta,31,146,                    return ret;,0.07018,0,-1,0
org/apache/commons/math3/special/Beta,31,151,                    return 1.0;,0.07018,0,-1,0
org/apache/commons/math3/special/Beta,31,201,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,0.0678,0,-1,0
org/apache/commons/math3/special/Beta,31,50,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.06154,0,-1,0
org/apache/commons/math3/special/Beta,31,120,        if (Double.isNaN(x) ||,0.06154,0,-1,0
org/apache/commons/math3/special/Beta,31,195,        if (Double.isNaN(a) ||,0.06154,0,-1,0
org/apache/commons/math3/special/Beta,31,205,        return ret;,0.06154,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,68,"        this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,",0.05882,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,70,    },0.05882,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,88,        throws NotStrictlyPositiveException {,0.05882,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,52,    private double numericalVariance = Double.NaN;,0.05882,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,55,    private boolean numericalVarianceIsCalculated = false;,0.05882,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,89,        if (numeratorDegreesOfFreedom <= 0) {,0.05882,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,93,        if (denominatorDegreesOfFreedom <= 0) {,0.05882,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,97,        this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;,0.05882,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,98,        this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;,0.05882,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,99,        solverAbsoluteAccuracy = inverseCumAccuracy;,0.05882,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,100,    },0.05882,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,108,        double yMax = computeObjectiveValue(max);,0.05882,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,99,        final double mu = getNumericalMean();,0.05263,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,100,        final double sigma = FastMath.sqrt(getNumericalVariance());,0.05263,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,101,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,0.05263,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,103,        if (chebyshevApplies) {,0.05263,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,116,"        return solveInverseCumulativeProbability(p, lower, upper);",0.05263,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,132,        while (lower + 1 < upper) {,0.05263,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,0.04762,0,-1,0
org/apache/commons/math3/util/FastMath,31,830,                if (hiPrec != null) {,0.04762,0,-1,0
org/apache/commons/math3/util/FastMath,31,834,                return 0.0;,0.04762,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,139,            if (chebyshevApplies) {,0.04348,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,185,            dPrev = q1;,0.04082,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,186,            cPrev = cN / q2;,0.04082,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,187,            p0 = hPrev;,0.04082,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,188,            hPrev = cN;,0.04082,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,189,            q1 = q2;,0.04082,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,190,            n++;,0.04082,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,191,        },0.04082,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,79,        int lower = getSupportLowerBound();,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,80,        if (p == 0.0) {,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,83,        if (lower == Integer.MIN_VALUE) {,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,88,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,92,        int upper = getSupportUpperBound();,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,93,        if (p == 1.0) {,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,152,                return cumulativeProbability(x) - p;,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,121,        final double mu = getNumericalMean();,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,122,        final double sig = FastMath.sqrt(getNumericalVariance());,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,138,        if (upperBound == Double.POSITIVE_INFINITY) {,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,0.03846,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,156,"        double x = UnivariateSolverUtils.solve(toSolve,",0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,52,        this(0);,0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,53,    },0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,61,"        this(max,",0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,68,    },0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,78,                       MaxCountExceededCallback cb) {,0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,40,    private int count = 0;,0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,79,        maximalCount = max;,0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,80,        maxCountCallback = cb;,0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,81,    },0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,91,        maximalCount = max;,0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,92,    },0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,150,        if (++count > maximalCount) {,0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,153,    },0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,159,        count = 0;,0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,160,    },0.03846,0,-1,0
org/apache/commons/math3/util/Incrementor,31,62,             new MaxCountExceededCallback() {,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,73,        if (function == null) {,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,76,        final UnivariateSolver solver = new BrentSolver(absoluteAccuracy);,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,77,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,336,        if (lower >= upper) {,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,340,    },0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,354,"        verifyInterval(lower, initial);",0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,355,"        verifyInterval(initial, upper);",0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,356,    },0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,53,        super(absoluteAccuracy);,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,54,    },0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,83,        double min = getMin();,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,84,        double max = getMax();,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,85,        final double initial = getStartValue();,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,86,        final double functionValueAccuracy = getFunctionValueAccuracy();,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,88,"        verifySequence(min, initial, max);",0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,91,        double yInitial = computeObjectiveValue(initial);,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,92,        if (FastMath.abs(yInitial) <= functionValueAccuracy) {,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,97,        double yMin = computeObjectiveValue(min);,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,98,        if (FastMath.abs(yMin) <= functionValueAccuracy) {,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,103,        if (yInitial * yMin < 0) {,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,37,        super(absoluteAccuracy);,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,38,    },0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,65,"        this(DEFAULT_RELATIVE_ACCURACY,",0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,68,    },0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,92,                                               final double functionValueAccuracy) {,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,49,    private final Incrementor evaluations = new Incrementor();,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,93,        this.absoluteAccuracy = absoluteAccuracy;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,94,        this.relativeAccuracy = relativeAccuracy;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,95,        this.functionValueAccuracy = functionValueAccuracy;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,96,    },0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,110,        return searchMin;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,116,        return searchMax;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,122,        return searchStart;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,140,        return functionValueAccuracy;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,153,        incrementEvaluationCount();,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,154,        return function.value(point);,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,173,        MathUtils.checkNotNull(f);,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,176,        searchMin = min;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,177,        searchMax = max;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,178,        searchStart = startValue;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,179,        function = f;,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,180,        evaluations.setMaximalCount(maxEval);,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,181,        evaluations.resetCount();,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,182,    },0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,187,"        setup(maxEval, f, min, max, startValue);",0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,190,        return doSolve();,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,268,"        UnivariateSolverUtils.verifySequence(lower, initial, upper);",0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,269,    },0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,294,            evaluations.incrementCount();,0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,297,        },0.03846,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,298,    },0.03846,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,45,        super();,0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,46,    },0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,124,        final double small = 1e-50;,0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,125,"        double hPrev = getA(0, x);",0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,128,"        if (Precision.equals(hPrev, 0.0, small)) {",0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,132,        int n = 1;,0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,133,        double dPrev = 0.0;,0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,134,        double p0 = 1.0;,0.03774,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,135,        double q1 = 1.0;,0.03774,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,136,        double cPrev = hPrev;,0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,137,        double hN = hPrev;,0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,139,        while (n < maxIterations) {,0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,140,"            final double a = getA(n, x);",0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,141,"            final double b = getB(n, x);",0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,143,            double cN = a * hPrev + b * p0;,0.03774,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,144,            double q2 = a * q1 + b * dPrev;,0.03774,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,145,            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {,0.03774,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,169,            final double deltaN = cN / q2 / cPrev;,0.03774,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,170,            hN = cPrev * deltaN;,0.03774,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,172,            if (Double.isInfinite(hN)) {,0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,176,            if (Double.isNaN(hN)) {,0.03774,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,181,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,0.03774,0,-1,0
org/apache/commons/math3/util/Precision,31,265,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.03774,0,-1,0
org/apache/commons/math3/util/FastMath,31,3002,        return (x < 0l) ? -x : x;,0.03604,0,-1,0
org/apache/commons/math3/util/Precision,31,301,        long xInt = Double.doubleToLongBits(x);,0.03604,0,-1,0
org/apache/commons/math3/util/Precision,31,302,        long yInt = Double.doubleToLongBits(y);,0.03604,0,-1,0
org/apache/commons/math3/util/Precision,31,305,        if (xInt < 0) {,0.03604,0,-1,0
org/apache/commons/math3/util/Precision,31,308,        if (yInt < 0) {,0.03604,0,-1,0
org/apache/commons/math3/util/Precision,31,312,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.03604,0,-1,0
org/apache/commons/math3/util/Precision,31,314,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.03604,0,-1,0
org/apache/commons/math3/util/Precision,31,63,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0.03571,0,-1,0
org/apache/commons/math3/util/Precision,31,70,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,0.03571,0,-1,0
org/apache/commons/math3/util/Precision,31,71,    },0.03571,0,-1,0
org/apache/commons/math3/util/MathUtils,31,257,        if (o == null) {,0.03333,0,-1,0
org/apache/commons/math3/util/MathUtils,31,260,    },0.03333,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,111,        double lowerBound = getSupportLowerBound();,0.03226,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,112,        if (p == 0.0) {,0.03226,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,116,        double upperBound = getSupportUpperBound();,0.03226,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,117,        if (p == 1.0) {,0.03226,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,75,        if (p < 0.0 || p > 1.0) {,0.03125,0,-1,0
org/apache/commons/math3/special/Gamma,31,98,            double g = 607.0 / 128.0;,0.02941,0,-1,0
org/apache/commons/math3/special/Gamma,31,99,            double sum = lanczos(x);,0.02941,0,-1,0
org/apache/commons/math3/special/Gamma,31,100,            double tmp = x + g + .5;,0.02941,0,-1,0
org/apache/commons/math3/special/Gamma,31,101,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,0.02941,0,-1,0
org/apache/commons/math3/special/Gamma,31,95,        if (Double.isNaN(x) || (x <= 0.0)) {,0.02878,0,-1,0
org/apache/commons/math3/special/Gamma,31,105,        return ret;,0.02878,0,-1,0
org/apache/commons/math3/special/Gamma,31,350,        double sum = 0.0;,0.02685,0,-1,0
org/apache/commons/math3/special/Gamma,31,351,        for (int i = LANCZOS.length - 1; i > 0; --i) {,0.02685,0,-1,0
org/apache/commons/math3/special/Gamma,31,352,            sum = sum + (LANCZOS[i] / (x + i));,0.02685,0,-1,0
org/apache/commons/math3/special/Gamma,31,354,        return sum + LANCZOS[0];,0.02685,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,107,        if (p < 0.0 || p > 1.0) {,0.02632,0,-1,0
org/apache/commons/math3/util/FastMath,31,375,        return Math.sqrt(a);,0.02516,0,-1,0
org/apache/commons/math3/special/Gamma,31,45,    private static final double[] LANCZOS = {,0.02469,0,-1,0
org/apache/commons/math3/special/Gamma,31,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,0.02469,0,-1,0
org/apache/commons/math3/util/FastMath,31,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.02395,0,-1,0
org/apache/commons/math3/util/FastMath,31,807,"        return exp(x, 0.0, null);",0.02353,0,-1,0
org/apache/commons/math3/util/FastMath,31,922,            result = tempC*z + tempB + tempA;,0.02326,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,168,    public RandomDataImpl() {,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,126,    private RandomGenerator rand = null;,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,129,    private SecureRandom secRand = null;,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,169,    },0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,139,        final double LN2 = FastMath.log(2);,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,140,        double qi = 0;,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,141,        int i = 1;,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,151,        while (qi < 1) {,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,153,            ra.addElement(qi);,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,154,            ++i;,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,157,        EXPONENTIAL_SA_QI = ra.getElements();,0.016,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,158,    },0.016,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,35,    static final long[] FACTORIALS = new long[] {,0.016,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,299,        if (n < 0) {,0.016,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,303,        if (n > 20) {,0.016,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,306,        return FACTORIALS[n];,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,3334,        if (x != x) { // NaN,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,3342,        y = (long) x;,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,3343,        if (x < 0 && y != x) {,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,3347,        if (y == 0) {,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,3351,        return y;,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,3361,        if (x != x) { // NaN,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,3365,        y = floor(x);,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,3366,        if (y == x) {,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,3367,            return y;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,93,    private float contractionCriteria = 2.5f;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,103,    private float expansionFactor = 2.0f;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,109,    private int expansionMode = MULTIPLICATIVE_MODE;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,115,    private int initialCapacity = 16;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,126,    private int numElements = 0;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,134,    private int startIndex = 0;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,160,    public ResizableDoubleArray(int initialCapacity) {,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,161,        setInitialCapacity(initialCapacity);,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,162,        internalArray = new double[this.initialCapacity];,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,163,    },0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,301,        numElements++;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,302,        if ((startIndex + numElements) > internalArray.length) {,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,303,            expand();,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,305,        internalArray[startIndex + (numElements - 1)] = value;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,306,        if (shouldContract()) {,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,307,            contract();,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,309,    },0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,432,        double[] tempArray = new double[numElements + 1];,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,435,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,436,        internalArray = tempArray;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,439,        startIndex = 0;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,440,    },0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,532,        int newSize = 0;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,533,        if (expansionMode == MULTIPLICATIVE_MODE) {,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,534,            newSize = (int) FastMath.ceil(internalArray.length * expansionFactor);,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,538,        double[] tempArray = new double[newSize];,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,541,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,542,        internalArray = tempArray;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,543,    },0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,599,        double[] elementArray = new double[numElements];,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,600,"        System.arraycopy( internalArray, startIndex, elementArray, 0,",0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,602,        return elementArray;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,755,        if (initialCapacity > 0) {,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,756,            synchronized(this) {,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,757,                this.initialCapacity = initialCapacity;,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,758,            },0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,764,    },0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,800,        if (expansionMode == MULTIPLICATIVE_MODE) {,0.016,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,801,            return (internalArray.length / ((float) numElements)) > contractionCriteria;,0.016,0,-1,0
org/apache/commons/math3/util/FastMath,31,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1220,            double tmp = epsilon * HEX_40000000;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1221,            double aa = epsilon + tmp - tmp;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1222,            double ab = epsilon - aa;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1223,            double xa = aa;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1224,            double xb = ab;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1227,            double numer = bits & 0x3ffffffffffL;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1229,            aa = numer - xa*denom - xb * denom;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1230,            xb += aa / denom;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1238,                aa = ya * xa;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1239,                ab = ya * xb + yb * xa + yb * xb;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1241,                tmp = aa * HEX_40000000;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1242,                ya = aa + tmp - tmp;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1243,                yb = aa - ya + ab;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1249,                tmp = aa * HEX_40000000;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1250,                ya = aa + tmp - tmp;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1251,                yb = aa - ya + ab;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1255,            aa = ya * xa;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1256,            ab = ya * xb + yb * xa + yb * xb;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1264,            lnza = aa + ab;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1265,            lnzb = -(lnza - aa - ab);,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1266,        } else {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1320,            hiPrec[0] = a;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1321,            hiPrec[1] = b;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1420,        final double lns[] = new double[2];,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1422,        if (y == 0.0) {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1426,        if (x != x) { // X is NaN,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1431,        if (x == 0) {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1456,        if (x == Double.POSITIVE_INFINITY) {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1467,        if (y == Double.POSITIVE_INFINITY) {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1479,        if (x == Double.NEGATIVE_INFINITY) {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1503,        if (y == Double.NEGATIVE_INFINITY) {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1517,        if (x < 0) {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1534,        if (y < 8e298 && y > -8e298) {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1535,            double tmp1 = y * HEX_40000000;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1536,            ya = y + tmp1 - tmp1;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1537,            yb = y - ya;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1538,        } else {,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1546,"        final double lores = log(x, lns);",0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1551,        double lna = lns[0];,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1552,        double lnb = lns[1];,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1555,        double tmp1 = lna * HEX_40000000;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1556,        double tmp2 = lna + tmp1 - tmp1;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1557,        lnb += lna - tmp2;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1558,        lna = tmp2;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1561,        final double aa = lna * ya;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1564,        lna = aa+ab;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1565,        lnb = -(lna - aa - ab);,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1567,        double z = 1.0 / 120.0;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1568,        z = z * lnb + (1.0 / 24.0);,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1569,        z = z * lnb + (1.0 / 6.0);,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1570,        z = z * lnb + 0.5;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1571,        z = z * lnb + 1.0;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1572,        z = z * lnb;,0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1574,"        final double result = exp(lna, z, null);",0.01594,0,-1,0
org/apache/commons/math3/util/FastMath,31,1576,        return result;,0.01594,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,47,    protected AbstractIntegerDistribution() { },0.01587,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,44,    protected final RandomDataImpl randomData = new RandomDataImpl();,0.01587,0,-1,0
org/apache/commons/math3/util/FastMath,31,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.01533,0,-1,0
org/apache/commons/math3/util/FastMath,31,837,            if (intVal > 709) {,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,847,            if (intVal == 709) {,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,857,            intVal++;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,862,            intVal = -intVal;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,899,        double z = 0.04168701738764507;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,900,        z = z * epsilon + 0.1666666505023083;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,901,        z = z * epsilon + 0.5000000000042687;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,902,        z = z * epsilon + 1.0;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,903,        z = z * epsilon + -3.940510424527919E-20;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,910,        double tempA = intPartA * fracPartA;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,917,        final double tempC = tempB + tempA;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,919,        if (extra != 0.0) {,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,925,        if (hiPrec != null) {,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,931,        return result;,0.01527,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,6142,        return EXP_INT_A.clone();,0.01527,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,6150,        return EXP_INT_B.clone();,0.01527,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,6158,        return EXP_FRAC_A.clone();,0.01527,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,6166,        return EXP_FRAC_B.clone();,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,3708,    private static class ExpIntTable {,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,3740,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,3741,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,3743,        },0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,3747,    private static class ExpFracTable {,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,3776,        },0.01527,0,-1,0
org/apache/commons/math3/util/FastMath,31,826,        if (x < 0.0) {,0.01521,0,-1,0
org/apache/commons/math3/util/FastMath,31,827,            intVal = (int) -x;,0.01521,0,-1,0
org/apache/commons/math3/util/FastMath,31,829,            if (intVal > 746) {,0.01521,0,-1,0
org/apache/commons/math3/special/Beta,31,159,        return ret;,0.01515,0,-1,0
org/apache/commons/math3/util/FastMath,31,3780,    private static class lnMant {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,3794,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,3796,        },0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1096,"        return log(x, null);",0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1106,        if (x==0) { // Handle special case of +0/-0,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1109,        long bits = Double.doubleToLongBits(x);,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1123,        if (x == Double.POSITIVE_INFINITY) {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1132,        int exp = (int)(bits >> 52)-1023;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1154,        if (exp == -1 || exp == 0) {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1215,        double lnza = 0.0;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1216,        double lnzb = 0.0;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1218,        if (hiPrec != null) {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1269,            lnza = -0.16624882440418567;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1270,            lnza = lnza * epsilon + 0.19999954120254515;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1272,            lnza = lnza * epsilon + 0.3333333333332802;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1273,            lnza = lnza * epsilon + -0.5;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1274,            lnza = lnza * epsilon + 1.0;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1275,            lnza = lnza * epsilon;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1292,        double a = LN_2_A*exp;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1293,        double b = 0.0;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1294,        double c = a+lnm[0];,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1295,        double d = -(c-a-lnm[0]);,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1296,        a = c;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1297,        b = b + d;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1299,        c = a + lnza;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1300,        d = -(c - a - lnza);,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1301,        a = c;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1302,        b = b + d;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1304,        c = a + LN_2_B*exp;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1305,        d = -(c - a - LN_2_B*exp);,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1306,        a = c;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1307,        b = b + d;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1309,        c = a + lnm[1];,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1310,        d = -(c - a - lnm[1]);,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1311,        a = c;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1312,        b = b + d;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1314,        c = a + lnzb;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1315,        d = -(c - a - lnzb);,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1316,        a = c;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1317,        b = b + d;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1319,        if (hiPrec != null) {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,1324,        return a + b;,0.01444,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,29,    private static final double[] EXP_INT_A = new double[] {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,1535,    private static final double[] EXP_INT_B = new double[] {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,3043,    private static final double[] EXP_FRAC_A = new double[] {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,4074,    private static final double[] EXP_FRAC_B = new double[] {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,5103,    private static final double[][] LN_MANT = new double[][] {,0.01444,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,6174,        return LN_MANT.clone();,0.01444,0,-1,0
org/apache/commons/math3/util/FastMath,31,113,    private static final double LN_QUICK_COEF[][] = {,0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,126,    private static final double LN_HI_PREC_COEF[][] = {,0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,139,    private static final double SINE_TABLE_A[] =,0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,158,    private static final double SINE_TABLE_B[] =,0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,177,    private static final double COSINE_TABLE_A[] =,0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,196,    private static final double COSINE_TABLE_B[] =,0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,216,    private static final double TANGENT_TABLE_A[] =,0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,235,    private static final double TANGENT_TABLE_B[] =,0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,254,    private static final long RECIP_2PI[] = new long[] {,0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,275,    private static final long PI_O_4_BITS[] = new long[] {,0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.01361,0,-1,0
org/apache/commons/math3/util/FastMath,31,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.01361,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,182,                break;,0.00935,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,193,        if (n >= maxIterations) {,0.00935,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,198,        return hN;,0.00935,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,53,    protected AbstractRealDistribution() { },0.00485,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,47,    protected final RandomDataImpl randomData = new RandomDataImpl();,0.00485,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0.00485,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,31,37,"        super(value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,31,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,31,47,"        super(specific, value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,31,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,31,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,31,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,31,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,31,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,31,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,31,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,31,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,31,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,31,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,31,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,31,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,31,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,31,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,31,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,31,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,31,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,31,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,31,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,31,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,31,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,31,42,    },0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,31,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,31,51,    },0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,51,"        this(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS, lo, hi, fLo, fHi);",0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,52,    },0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,68,"        super(specific, lo, hi, fLo, fHi, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,69,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,70,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,71,        this.fLo = fLo;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,72,        this.fHi = fHi;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,73,    },0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,81,        return lo;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,89,        return hi;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,97,        return fLo;,0.0,0,-1,0
org/apache/commons/math3/exception/NoBracketingException,31,105,        return fHi;,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,31,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,31,43,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,31,53,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,31,54,"        getContext().addMessage(specific, max, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,31,55,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,31,56,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,31,62,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,31,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,59,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,63,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,31,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,31,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,31,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,31,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,31,49,    },0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,31,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,31,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,31,48,                                Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,31,49,"        getContext().addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,31,50,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,31,37,    public MathInternalError() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,31,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,31,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,31,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,31,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,31,56,"        super(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,31,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,31,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,31,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,31,62,"        super(specific, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,31,63,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,31,64,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,31,65,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,31,71,        return lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,31,77,        return hi;,0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,31,37,        super(max);,0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,31,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,31,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,31,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,31,41,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,31,53,"        super(specific, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,31,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,31,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,31,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,31,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,31,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,31,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,31,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,31,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,31,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,180,        super();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,181,        this.rand = rand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,182,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,201,        if (len <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,202,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,206,        RandomGenerator ran = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,209,        StringBuilder outBuffer = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,212,        byte[] randomBytes = new byte[(len / 2) + 1];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,213,        ran.nextBytes(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,216,        for (int i = 0; i < randomBytes.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,217,            Integer c = Integer.valueOf(randomBytes[i]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,224,            String hex = Integer.toHexString(c.intValue() + 128);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,227,            if (hex.length() == 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,228,"                hex = ""0"" + hex;",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,230,            outBuffer.append(hex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,232,"        return outBuffer.toString().substring(0, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,237,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,238,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,241,        double r = getRan().nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,242,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,243,        return (int) FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,248,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,249,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,252,        double r = getRan().nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,253,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,254,        return (long)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,274,        if (len <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,275,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,279,        SecureRandom secRan = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,280,        MessageDigest alg = null;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,282,"            alg = MessageDigest.getInstance(""SHA-1"");",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,286,        },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,283,        } catch (NoSuchAlgorithmException ex) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,285,            throw new MathInternalError(ex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,287,        alg.reset();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,290,        int numIter = (len / 40) + 1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,292,        StringBuilder outBuffer = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,293,        for (int iter = 1; iter < numIter + 1; iter++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,294,            byte[] randomBytes = new byte[40];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,295,            secRan.nextBytes(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,296,            alg.update(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,299,            byte[] hash = alg.digest();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,302,            for (int i = 0; i < hash.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,303,                Integer c = Integer.valueOf(hash[i]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,310,                String hex = Integer.toHexString(c.intValue() + 128);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,313,                if (hex.length() == 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,314,"                    hex = ""0"" + hex;",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,316,                outBuffer.append(hex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,319,"        return outBuffer.toString().substring(0, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,324,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,325,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,328,        SecureRandom sec = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,329,        double r = sec.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,330,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,331,        return (int)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,337,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,338,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,341,        SecureRandom sec = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,342,        double r = sec.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,343,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,344,        return (long)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,361,        if (mean <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,362,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,365,        final double pivot = 40.0d;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,366,        if (mean < pivot) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,367,            final RandomGenerator generator = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,368,            double p = FastMath.exp(-mean);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,369,            long n = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,370,            double r = 1.0d;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,371,            double rnd = 1.0d;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,373,            while (n < 1000 * mean) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,374,                rnd = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,375,                r = r * rnd;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,376,                if (r >= p) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,377,                    n++;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,379,                    return n;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,382,            return n;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,384,            final double lambda = FastMath.floor(mean);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,385,            final double lambdaFractional = mean - lambda;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,386,            final double logLambda = FastMath.log(lambda);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,387,            final double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,388,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,389,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,390,            final double halfDelta = delta / 2;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,391,            final double twolpd = 2 * lambda + delta;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,392,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,393,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,394,            final double aSum = a1 + a2 + 1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,395,            final double p1 = a1 / aSum;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,396,            final double p2 = a2 / aSum;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,397,            final double c1 = 1 / (8 * lambda);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,399,            double x = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,400,            double y = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,401,            double v = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,402,            int a = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,403,            double t = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,404,            double qr = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,405,            double qa = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,407,"                final double u = nextUniform(0.0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,408,                if (u <= p1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,409,"                    final double n = nextGaussian(0d, 1d);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,410,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,411,                    if (x > delta || x < -lambda) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,412,                        continue;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,414,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,415,                    final double e = nextExponential(1d);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,416,                    v = -e - (n * n / 2) + c1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,417,                } else {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,418,                    if (u > p1 + p2) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,419,                        y = lambda;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,420,                        break;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,422,                        x = delta + (twolpd / delta) * nextExponential(1d);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,423,                        y = FastMath.ceil(x);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,424,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,427,                a = x < 0 ? 1 : 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,428,                t = y * (y + 1) / (2 * lambda);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,429,                if (v < -t && a == 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,430,                    y = lambda + y;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,431,                    break;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,433,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,434,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,435,                if (v < qa) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,436,                    y = lambda + y;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,437,                    break;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,439,                if (v > qr) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,440,                    continue;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,442,                if (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,443,                    y = lambda + y;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,444,                    break;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,446,            },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,447,            return y2 + (long) y;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,454,        if (sigma <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,455,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,457,        return sigma * getRan().nextGaussian() + mu;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,473,        if (mean <= 0.0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,474,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,478,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,479,"        double u = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,482,        while (u < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,483,            a += EXPONENTIAL_SA_QI[0];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,484,            u *= 2;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,488,        u += u - 1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,491,        if (u <= EXPONENTIAL_SA_QI[0]) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,492,            return mean * (a + u);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,496,"        int i = 0; // Should be 1, be we iterate before it in while using 0",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,497,"        double u2 = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,498,        double umin = u2;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,502,            ++i;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,503,"            u2 = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,505,            if (u2 < umin) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,506,                umin = u2;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,510,        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,512,        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,530,"        return nextUniform(lower, upper, false);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,551,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,552,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,556,        if (Double.isInfinite(lower) || Double.isInfinite(upper)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,557,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,560,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,561,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,564,        final RandomGenerator generator = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,567,        double u = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,568,        while (!lowerInclusive && u <= 0.0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,569,            u = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,572,        return u * upper + (1.0 - u) * lower;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,586,"        return nextInversionDeviate(new BetaDistribution(alpha, beta));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,600,"        return nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,614,"        return nextInversionDeviate(new CauchyDistribution(median, scale));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,627,        return nextInversionDeviate(new ChiSquaredDistribution(df));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,641,"        return nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,666,        if (shape < 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,671,"                final double u = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,672,                final double bGS = 1 + shape/FastMath.E;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,673,                final double p = bGS*u;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,675,                if (p <= 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,678,"                    final double x = FastMath.pow(p, 1/shape);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,679,"                    final double u2 = this.nextUniform(0.0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,681,                    if (u2 > FastMath.exp(-x)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,683,                        continue;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,685,                        return scale*x;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,690,                    final double x = -1 * FastMath.log((bGS-p)/shape);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,691,"                    final double u2 = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,693,"                    if (u2 > FastMath.pow(x, shape - 1)) {",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,695,                        continue;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,697,                        return scale*x;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,705,        final RandomGenerator generator = this.getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,706,        final double d = shape - 0.333333333333333333;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,707,        final double c = 1.0 / (3*FastMath.sqrt(d));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,710,            final double x = generator.nextGaussian();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,711,            final double v = (1+c*x)*(1+c*x)*(1+c*x);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,713,            if (v <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,714,                continue;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,717,            final double xx = x*x;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,718,"            final double u = this.nextUniform(0, 1);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,721,            if (u < 1 - 0.0331*xx*xx) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,722,                return scale*d*v;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,725,            if (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,726,                return scale*d*v;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,728,        },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,743,"        return nextInversionDeviate(new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,757,"        return nextInversionDeviate(new PascalDistribution(r, p));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,770,        return nextInversionDeviate(new TDistribution(df));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,784,"        return nextInversionDeviate(new WeibullDistribution(shape, scale));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,798,"        return nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,812,        if (rand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,813,            initRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,815,        return rand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,823,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,824,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,836,        if (secRand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,837,            secRand = new SecureRandom();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,838,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,840,        return secRand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,853,        if (rand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,854,            initRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,856,        rand.setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,857,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,867,        if (secRand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,868,            secRand = new SecureRandom();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,870,        secRand.setSeed(System.currentTimeMillis());,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,871,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,883,        if (secRand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,884,            secRand = new SecureRandom();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,886,        secRand.setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,887,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,894,        if (rand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,895,            initRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,897,        rand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,898,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,922,"        secRand = SecureRandom.getInstance(algorithm, provider);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,923,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,935,        if (k > n) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,936,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,939,        if (k <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,940,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,944,        int[] index = getNatural(n);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,945,"        shuffle(index, n - k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,946,        int[] result = new int[k];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,947,        for (int i = 0; i < k; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,948,            result[i] = index[n - i - 1];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,951,        return result;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,969,        int len = c.size();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,970,        if (k > len) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,971,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,974,        if (k <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,975,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,978,        Object[] objects = c.toArray();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,979,"        int[] index = nextPermutation(len, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,980,        Object[] result = new Object[k];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,981,        for (int i = 0; i < k; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,982,            result[i] = objects[index[i]];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,984,        return result;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,996,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1009,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1024,        int target = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1025,        for (int i = list.length - 1; i >= end; i--) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1026,            if (i == 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1027,                target = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1029,"                target = nextInt(0, i);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1031,            int temp = list[target];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1032,            list[target] = list[i];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1033,            list[i] = temp;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1035,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1045,        int[] natural = new int[n];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1046,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1047,            natural[i] = i;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,31,1049,        return natural;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,56,        if (x1 < x0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,57,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,60,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,76,"            throw new OutOfRangeException(p, 0, 1);",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,81,            return lower;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,84,            if (checkedCumulativeProbability(lower) >= p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,85,                return lower;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,94,            return upper;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,140,                xm = lower + (upper - lower) / 2;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,144,            if (pm >= p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,145,                upper = xm;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,147,                lower = xm;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,149,        },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,150,        return upper;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,155,        randomData.reSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,156,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,166,        return randomData.nextInversionDeviate(this);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,176,        if (sampleSize <= 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,177,            throw new NotStrictlyPositiveException(,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,180,        int[] out = new int[sampleSize];,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,181,        for (int i = 0; i < sampleSize; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,182,            out[i] = sample();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,184,        return out;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,202,        if (Double.isNaN(result)) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,203,            throw new MathInternalError(LocalizedFormats,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,206,        return result;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,62,        if (x0 > x1) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,63,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,66,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,108,"            throw new OutOfRangeException(p, 0, 1);",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,113,            return lowerBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,118,            return upperBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,128,            if (chebyshevApplies) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,129,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,131,                lowerBound = -1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,132,                while (cumulativeProbability(lowerBound) >= p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,133,                    lowerBound *= 2.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,142,                upperBound = 1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,143,                while (cumulativeProbability(upperBound) < p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,144,                    upperBound *= 2.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,161,        if (!isSupportConnected()) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,163,            final double dx = getSolverAbsoluteAccuracy();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,164,            if (x - dx >= getSupportLowerBound()) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,165,                double px = cumulativeProbability(x);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,166,                if (cumulativeProbability(x - dx) == px) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,167,                    upperBound = x;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,168,                    while (upperBound - lowerBound > dx) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,169,                        final double midPoint = 0.5 * (lowerBound + upperBound);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,170,                        if (cumulativeProbability(midPoint) < px) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,171,                            lowerBound = midPoint;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,173,                            upperBound = midPoint;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,175,                    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,176,                    return upperBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,180,        return x;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,191,        return solverAbsoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,196,        randomData.reSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,197,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,208,        return randomData.nextInversionDeviate(this);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,218,        if (sampleSize <= 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,219,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,222,        double[] out = new double[sampleSize];,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,223,        for (int i = 0; i < sampleSize; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,224,            out[i] = sample();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,31,226,        return out;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,90,"            throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,",0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,94,"            throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,",0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,110,        return 0.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,119,        final double nhalf = numeratorDegreesOfFreedom / 2;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,120,        final double mhalf = denominatorDegreesOfFreedom / 2;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,121,        final double logx = FastMath.log(x);,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,122,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,123,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,124,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,126,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,197,        return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,237,        return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,265,        return true;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,270,        return false;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,31,281,        return true;,0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,51,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_TRIALS,",0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,55,"            throw new OutOfRangeException(p, 0, 1);",0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,68,        return numberOfTrials;,0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,77,        return probabilityOfSuccess;,0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,83,        if (x < 0 || x > numberOfTrials) {,0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,84,            ret = 0.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,86,"            ret = FastMath.exp(SaddlePointExpansion.logBinomialProbability(x,",0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,90,        return ret;,0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,97,            ret = 0.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,99,            ret = 1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,104,        return ret;,0.0,0,-1,0
org/apache/commons/math3/distribution/BinomialDistribution,31,160,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,31,100,        return maximalCount;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,31,109,        return count;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,31,120,        return count < maximalCount;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,31,131,        for (int i = 0; i < value; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,31,132,            incrementCount();,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,31,134,    },0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,31,151,            maxCountCallback.trigger(maximalCount);,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,73,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,84,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,95,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,129,            hPrev = small;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,146,                double scaleFactor = 1d;,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,147,                double lastScaleFactor = 1d;,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,148,                final int maxPower = 5;,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,149,"                final double scale = FastMath.max(a,b);",0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,150,                if (scale <= 0) {  // Can't scale,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,151,"                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);",0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,153,                for (int i = 0; i < maxPower; i++) {,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,154,                    lastScaleFactor = scaleFactor;,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,155,                    scaleFactor *= scale;,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,156,                    if (a != 0.0 && a > b) {,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,157,                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,158,                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,159,                    } else if (b != 0) {,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,160,                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,161,                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,163,                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,164,                        break;,0.0,1,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,173,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,177,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,31,194,"            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,46,        super();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,47,    },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,60,        long s = (long)x + (long)y;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,64,        return (int)s;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,108,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,109,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,110,            return 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,112,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,113,            return n;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,116,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,117,"            return binomialCoefficient(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,125,        long result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,126,        if (n <= 61) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,128,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,129,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,130,                result = result * i / j;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,131,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,133,        } else if (n <= 66) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,136,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,137,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,144,"                final long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,145,                result = (result / (j / d)) * (i / d);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,146,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,148,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,152,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,153,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,154,"                final long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,155,"                result = mulAndCheck(result / (j / d), i / d);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,156,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,159,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,186,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,187,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,188,            return 1d;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,190,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,191,            return n;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,193,        if (k > n/2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,194,"            return binomialCoefficientDouble(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,196,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,197,"            return binomialCoefficient(n,k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,200,        double result = 1d;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,201,        for (int i = 1; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,202,             result *= (double)(n - k + i) / (double)i;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,205,        return FastMath.floor(result + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,228,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,229,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,230,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,232,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,233,            return FastMath.log(n);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,240,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,241,"            return FastMath.log(binomialCoefficient(n,k));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,248,        if (n < 1030) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,252,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,253,"            return binomialCoefficientLog(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,259,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,262,        for (int i = n - k + 1; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,263,            logSum += FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,267,        for (int i = 2; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,268,            logSum -= FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,271,        return logSum;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,304,            throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,323,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,327,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,328,            return factorial(n);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,341,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,345,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,346,            return FastMath.log(factorial(n));,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,348,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,349,        for (int i = 2; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,350,            logSum += FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,352,        return logSum;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,385,        int u = p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,386,        int v = q;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,387,        if ((u == 0) || (v == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,392,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,399,        if (u > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,400,            u = -u;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,402,        if (v > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,403,            v = -v;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,406,        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,409,            u /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,410,            v /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,411,            k++; // cast out twos.,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,413,        if (k == 31) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,425,            while ((t & 1) == 0) { // while t is even..,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,426,                t /= 2; // cast out twos,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,429,            if (t > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,430,                u = -t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,432,                v = t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,435,            t = (v - u) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,438,        } while (t != 0);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,439,        return -u * (1 << k); // gcd is u*2^k,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,472,        long u = p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,473,        long v = q;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,474,        if ((u == 0) || (v == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,479,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,486,        if (u > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,487,            u = -u;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,489,        if (v > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,490,            v = -v;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,493,        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,496,            u /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,497,            v /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,498,            k++; // cast out twos.,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,500,        if (k == 63) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,512,            while ((t & 1) == 0) { // while t is even..,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,513,                t /= 2; // cast out twos,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,516,            if (t > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,517,                u = -t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,519,                v = t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,522,            t = (v - u) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,525,        } while (t != 0);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,526,        return -u * (1L << k); // gcd is u*2^k,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,552,        if (a == 0 || b == 0){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,553,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,556,        if (lcm == Integer.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,560,        return lcm;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,586,        if (a == 0 || b == 0){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,587,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,590,        if (lcm == Long.MIN_VALUE){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,594,        return lcm;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,608,        long m = ((long)x) * ((long)y);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,610,            throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,612,        return (int)m;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,627,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,629,"            ret = mulAndCheck(b, a);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,631,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,632,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,634,                    if (a >= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,635,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,637,                        throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,639,                } else if (b > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,641,                    if (Long.MIN_VALUE / b <= a) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,642,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,644,                        throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,649,                    ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,651,            } else if (a > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,656,                if (a <= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,657,                    ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,659,                    throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,663,                ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,666,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,680,        long s = (long)x - (long)y;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,684,        return (int)s;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,699,        if (b == Long.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,700,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,701,                ret = a - b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,709,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,721,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,725,        int result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,726,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,727,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,728,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,729,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,731,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,732,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,735,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,747,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,751,        int result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,752,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,753,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,754,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,755,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,757,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,758,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,761,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,773,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,777,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,778,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,779,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,780,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,781,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,783,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,784,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,787,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,799,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,803,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,804,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,805,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,806,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,807,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,809,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,810,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,813,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,825,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,829,        return k.pow(e);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,841,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,845,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,846,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,847,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,848,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,849,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,851,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,852,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,855,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,872,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,873,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,874,        while (!BigInteger.ZERO.equals(e)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,875,            if (e.testBit(0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,876,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,878,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,879,            e = e.shiftRight(1);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,882,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,898,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,900,"            ret = addAndCheck(b, a, pattern);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,904,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,905,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,907,                    if (Long.MIN_VALUE - b <= a) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,908,                        ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,910,"                        throw new MathArithmeticException(pattern, a, b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,914,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,921,                if (a <= Long.MAX_VALUE - b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,922,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,924,"                    throw new MathArithmeticException(pattern, a, b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,928,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,940,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,944,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,947,    },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,31,956,        return (n > 0) && ((n & (n - 1)) == 0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,349,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,362,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,364,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,366,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,383,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,384,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,392,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,393,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,396,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,397,          return exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,400,      double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,401,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,402,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,404,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,409,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,410,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,411,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,414,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,415,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,416,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,417,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,422,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,425,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,426,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,427,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,428,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,429,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,430,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,432,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,433,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,434,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,442,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,443,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,444,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,452,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,453,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,456,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,457,          return -exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,460,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,461,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,464,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,465,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,466,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,471,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,472,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,473,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,478,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,479,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,480,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,483,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,484,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,485,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,486,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,491,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,493,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,494,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,497,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,498,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,499,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,500,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,501,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,502,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,504,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,505,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,506,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,508,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,509,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,515,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,516,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,518,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,519,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,520,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,521,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,523,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,524,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,525,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,530,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,534,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,535,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,536,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,537,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,538,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,539,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,541,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,542,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,545,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,546,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,549,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,557,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,559,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,560,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,569,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,570,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,573,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,574,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,577,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,578,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,581,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,582,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,583,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,587,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,588,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,596,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,597,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,598,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,599,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,600,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,603,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,604,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,605,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,606,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,607,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,609,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,610,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,611,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,614,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,615,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,616,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,617,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,623,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,625,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,627,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,628,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,630,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,632,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,638,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,639,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,642,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,643,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,644,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,645,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,646,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,648,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,649,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,650,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,653,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,654,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,655,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,656,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,662,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,664,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,666,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,669,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,670,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,673,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,689,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,690,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,691,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,692,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,696,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,699,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,700,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,702,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,704,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,711,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,719,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,720,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,721,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,722,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,726,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,729,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,730,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,732,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,734,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,741,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,783,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,831,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,832,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,840,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,844,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,850,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,854,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,864,            intVal = (int) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,866,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,867,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,869,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,871,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,927,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,939,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,955,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,956,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,957,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,962,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,963,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,970,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,972,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,973,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,974,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,978,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,982,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,983,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,984,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,986,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,987,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,988,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,990,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,995,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,999,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1000,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1002,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1003,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1004,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1005,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1007,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1008,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1009,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1010,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1013,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1015,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1017,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1019,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1021,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1023,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1025,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1029,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1030,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1031,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1033,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1035,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1036,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1038,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1040,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1043,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1045,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1046,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1048,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1050,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1051,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1053,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1054,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1055,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1056,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1058,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1059,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1060,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1073,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1077,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1078,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1081,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1082,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1083,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1086,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1113,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1114,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1115,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1118,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1124,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1128,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1136,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1146,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1148,                exp--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1149,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1160,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1161,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1162,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1163,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1164,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1165,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1166,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1173,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1174,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1176,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1177,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1178,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1184,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1185,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1186,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1190,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1191,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1193,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1194,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1195,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1197,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1333,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1334,            return x/0.0;   // -Infinity,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1338,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1341,        if (x>1e-6 || x<-1e-6) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1342,            double xpa = 1.0 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1343,            double xpb = -(xpa - 1.0 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1345,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1347,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1349,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1354,            double fx1 = xpb/xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1356,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1357,            epsilon = epsilon * fx1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1359,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1363,        double y = x * F_1_3 - F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1364,        y = y * x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1365,        y = y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1367,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1375,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1377,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1379,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1383,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1386,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1387,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1409,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1423,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1427,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1432,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1433,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1435,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1438,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1442,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1446,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1447,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1449,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1450,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1453,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1457,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1458,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1460,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1461,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1463,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1468,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1469,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1472,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1473,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1475,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1480,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1481,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1484,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1485,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1486,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1487,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1490,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1493,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1494,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1495,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1496,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1499,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1505,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1506,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1509,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1510,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1512,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1520,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1523,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1527,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1542,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1548,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1588,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1590,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1591,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1592,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1593,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1596,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1598,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1608,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1610,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1611,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1612,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1613,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1614,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1616,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1627,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1631,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1632,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1633,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1634,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1637,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1638,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1639,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1640,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1643,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1644,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1645,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1646,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1672,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1673,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1675,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1676,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1677,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1678,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1679,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1681,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1682,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1683,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1684,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1685,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1729,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1732,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1733,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1734,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1735,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1738,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1740,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1751,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1752,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1754,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1755,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1756,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1758,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1775,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1776,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1777,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1778,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1781,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1782,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1783,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1784,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1787,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1788,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1789,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1790,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1815,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1816,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1819,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1820,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1821,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1822,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1823,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1825,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1826,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1827,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1828,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1829,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1834,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1835,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1839,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1841,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1842,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1843,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1844,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1845,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1847,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1848,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1849,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1850,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1851,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1856,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1857,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1859,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1861,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1876,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1879,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1880,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1881,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1883,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1884,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1885,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1889,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1892,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1895,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1896,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1897,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1900,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1903,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1920,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1924,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1925,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1928,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1929,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1935,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1936,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1938,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1945,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1946,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1950,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1951,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1953,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1954,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1956,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1957,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1958,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1959,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1961,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1962,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1969,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1971,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1975,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1977,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1978,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1983,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1985,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1989,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1990,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1991,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1992,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1993,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1996,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2000,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2003,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2005,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2009,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2010,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2012,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2013,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2014,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2016,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2028,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2031,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2032,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2033,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2036,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2037,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2039,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2042,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2043,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2044,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2045,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2047,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2048,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2050,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2051,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2055,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2057,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2061,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2063,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2064,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2069,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2071,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2075,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2077,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2078,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2079,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2082,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2086,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2089,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2091,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2095,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2096,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2097,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2099,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2100,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2101,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2104,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2108,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2111,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2113,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2120,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2121,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2124,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2125,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2126,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2127,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2135,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2136,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2138,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2141,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2142,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2143,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2144,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2148,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2149,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2150,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2151,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2153,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2157,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2161,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2165,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2166,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2167,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2168,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2169,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2170,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2175,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2181,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2182,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2183,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2185,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2186,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2187,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2188,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2190,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2191,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2192,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2193,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2195,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2196,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2202,                k--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2203,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2204,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2205,            xa = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2206,            xb = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2209,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2210,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2213,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2215,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2217,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2219,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2221,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2223,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2233,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2236,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2237,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2238,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2242,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2246,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2247,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2251,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2252,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2253,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2254,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2255,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2256,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2261,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2267,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2268,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2269,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2271,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2272,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2273,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2274,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2276,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2277,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2278,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2279,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2281,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2282,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2288,                k--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2289,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2290,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2291,            xa = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2292,            xb = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2298,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2300,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2302,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2304,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2306,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2308,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2318,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2319,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2322,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2323,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2324,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2325,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2329,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2330,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2331,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2332,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2334,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2338,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2342,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2343,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2347,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2348,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2349,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2350,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2351,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2352,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2357,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2363,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2364,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2365,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2367,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2368,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2369,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2370,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2372,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2373,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2374,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2375,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2377,                if (remA > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2378,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2384,                k--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2385,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2386,            quadrant = k & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2387,            xa = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2388,            xb = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2391,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2393,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2394,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2396,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2397,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2398,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2400,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2401,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2402,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2403,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2407,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2408,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2410,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2413,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2414,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2417,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2426,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2436,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2443,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2445,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2446,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2447,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2450,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2451,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2455,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2458,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2463,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2465,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2466,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2467,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2470,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2471,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2472,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2473,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2474,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2477,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2482,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2483,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2484,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2486,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2487,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2489,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2490,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2491,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2493,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2494,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2496,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2497,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2498,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2500,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2501,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2502,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2507,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2508,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2512,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2513,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2516,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2527,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2528,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2529,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2530,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2531,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2532,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2533,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2536,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2538,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2539,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2540,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2543,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2546,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2547,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2548,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2549,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2550,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2552,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2553,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2555,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2557,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2558,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2560,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2561,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2562,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2564,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2565,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2569,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2570,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2573,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2583,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2584,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2587,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2588,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2589,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2590,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2592,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2593,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2594,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2596,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2600,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2601,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2602,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2604,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2607,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2613,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2614,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2615,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2618,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2619,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2622,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2625,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2626,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2627,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2630,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2631,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2634,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2637,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2638,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2639,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2642,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2643,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2647,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2649,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2650,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2653,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2654,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2660,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2661,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2662,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2665,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2666,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2671,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2672,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2673,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2676,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2677,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2680,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2681,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2685,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2686,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2687,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2689,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2690,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2694,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2696,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2704,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2705,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2708,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2709,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2712,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2713,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2716,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2717,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2720,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2721,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2727,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2728,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2729,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2732,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2733,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2736,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2737,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2739,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2740,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2742,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2743,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2744,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2748,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2749,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2750,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2751,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2754,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2757,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2760,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2761,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2762,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2763,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2765,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2766,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2768,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2769,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2770,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2772,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2780,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2781,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2784,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2785,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2788,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2789,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2792,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2793,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2796,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2797,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2803,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2804,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2805,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2808,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2809,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2812,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2813,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2815,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2816,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2818,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2819,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2820,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2823,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2824,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2825,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2826,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2832,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2833,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2834,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2837,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2840,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2841,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2844,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2845,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2847,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2850,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2851,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2852,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2854,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2863,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2864,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2865,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2867,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2868,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2869,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2873,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2874,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2875,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2876,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2879,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2881,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2885,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2888,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2892,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2895,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2896,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2897,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2898,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2899,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2901,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2906,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2907,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2908,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2911,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2912,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2913,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2915,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2916,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2917,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2918,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2919,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2920,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2922,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2923,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2925,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2926,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2927,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2929,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2932,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2934,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2935,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2938,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2953,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2954,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2956,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2957,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2959,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2960,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2961,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2963,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2973,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2974,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2978,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2979,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2981,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2982,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2984,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,2993,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3029,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3030,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3032,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3041,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3042,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3056,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3062,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3064,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3065,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3067,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3068,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3072,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3073,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3075,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3078,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3080,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3082,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3084,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3085,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3089,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3092,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3093,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3094,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3096,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3098,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3102,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3106,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3109,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3110,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3111,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3113,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3114,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3116,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3117,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3122,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3140,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3145,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3146,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3148,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3149,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3151,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3156,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3157,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3158,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3159,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3162,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3164,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3166,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3168,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3169,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3173,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3177,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3178,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3180,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3182,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3186,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3190,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3193,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3194,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3195,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3197,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3198,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3200,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3201,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3206,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3207,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3209,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3249,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3250,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3251,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3252,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3253,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3255,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3261,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3262,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3263,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3264,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3306,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3307,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3308,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3309,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3310,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3311,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3317,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3318,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3319,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3322,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3335,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3339,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3344,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3348,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3362,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3370,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3372,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3373,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3376,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3384,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3385,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3387,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3388,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3389,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3391,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3393,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3394,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3398,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3399,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3407,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3415,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3424,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3433,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3442,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3443,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3445,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3446,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3449,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3450,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3454,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3455,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3456,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3458,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3467,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3468,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3470,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3471,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3474,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3475,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3479,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3480,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3481,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3483,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3492,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3501,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3510,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3511,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3513,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3514,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3517,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3518,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3522,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3523,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3524,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3526,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3535,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3536,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3538,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3539,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3542,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3543,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3547,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3548,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3549,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3551,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3570,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3572,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3575,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3576,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3577,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3579,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3580,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3582,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3586,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3589,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3590,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3596,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3636,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3637,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3639,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3641,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3653,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3654,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3655,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3656,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3658,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3671,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3684,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3693,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3701,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3702,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3703,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,31,3705,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,31,6134,    private FastMathLiteralArrays() {},0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,76,    private Precision() {},0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,89,"        if (equals(x, y, eps)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,90,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,91,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,92,            return -1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,94,        return 1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,115,"        if (equals(x, y, maxUlps)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,116,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,117,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,118,            return -1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,120,        return 1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,132,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,145,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,159,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,174,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,196,        int xInt = Float.floatToIntBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,197,        int yInt = Float.floatToIntBits(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,200,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,201,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,203,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,204,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,207,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,209,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,225,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,237,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,250,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,280,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,306,            xInt = SGN_MASK - xInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,309,            yInt = SGN_MASK - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,330,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,343,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,365,            return (new BigDecimal,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,369,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,370,            if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,371,                return x;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,373,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,388,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,403,"        final float sign = FastMath.copySign(1f, x);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,404,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,405,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,423,        switch (roundingMethod) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,425,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,426,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,428,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,430,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,432,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,433,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,435,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,436,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,438,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,440,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,442,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,443,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,444,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,445,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,447,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,449,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,452,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,453,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,454,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,455,            } else if (fraction < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,456,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,459,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,461,                    unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,463,                    unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,466,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,469,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,470,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,471,            if (fraction >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,472,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,474,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,476,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,479,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,480,                throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,484,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,485,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,487,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,498,        return unscaled;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,31,518,        return x + originalDelta - x;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,47,    private MathUtils() {},0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,57,        return new Double(value).hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,68,        return Arrays.hashCode(value);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,113,        final double p = FastMath.abs(period);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,128,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,130,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,131,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,133,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,135,            return (byte) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,150,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,152,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,153,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,155,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,157,            return (short) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,172,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,174,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,175,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,177,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,179,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,194,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,196,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,197,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,199,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,201,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,212,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,213,            throw new NotFiniteNumberException(x);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,215,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,225,        for (int i = 0; i < val.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,226,            final double x = val[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,227,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,231,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,244,        if (o == null) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,245,"            throw new NullArgumentException(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,247,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,31,258,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,31,65,                     throw new MaxCountExceededException(max);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,145,    public ResizableDoubleArray() {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,146,        internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,147,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,182,    public ResizableDoubleArray(double[] initialArray) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,183,        if (initialArray == null) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,184,            this.internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,186,            this.internalArray = new double[initialArray.length];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,187,"            System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,188,            initialCapacity = initialArray.length;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,189,            numElements = initialArray.length;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,191,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,215,"    public ResizableDoubleArray(int initialCapacity, float expansionFactor) {",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,216,        this.expansionFactor = expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,217,        setInitialCapacity(initialCapacity);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,218,        internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,219,        setContractionCriteria(expansionFactor +0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,220,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,242,        float contractionCriteria) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,243,        this.expansionFactor = expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,244,        setContractionCriteria(contractionCriteria);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,245,        setInitialCapacity(initialCapacity);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,246,        internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,247,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,271,"            float contractionCriteria, int expansionMode) {",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,272,        this.expansionFactor = expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,273,        setContractionCriteria(contractionCriteria);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,274,        setInitialCapacity(initialCapacity);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,275,        setExpansionMode(expansionMode);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,276,        internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,277,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,290,        throws NullArgumentException {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,291,        MathUtils.checkNotNull(original);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,292,"        copy(original, this);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,293,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,318,        final double[] tempArray = new double[numElements + values.length + 1];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,319,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,320,"        System.arraycopy(values, 0, tempArray, numElements, values.length);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,321,        internalArray = tempArray;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,322,        startIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,323,        numElements += values.length;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,324,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,343,        double discarded = internalArray[startIndex];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,345,        if ((startIndex + (numElements + 1)) > internalArray.length) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,346,            expand();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,349,        startIndex += 1;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,352,        internalArray[startIndex + (numElements - 1)] = value;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,355,        if (shouldContract()) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,356,            contract();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,358,        return discarded;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,372,        if (numElements < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,373,            throw new MathIllegalStateException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,377,        double discarded = internalArray[startIndex + (numElements - 1)];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,379,        internalArray[startIndex + (numElements - 1)] = value;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,381,        return discarded;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,397,        if (contraction < expansion) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,398,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,403,        if (contraction <= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,404,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,409,        if (expansion <= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,410,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,414,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,421,        numElements = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,422,        startIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,423,        internalArray = new double[initialCapacity];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,424,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,455,"        discardExtremeElements(i,true);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,457,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,472,"        discardExtremeElements(i,false);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,474,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,496,        if (i > numElements) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,497,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,500,       } else if (i < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,501,           throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,506,            numElements -= i;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,507,            if (front) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,508,                startIndex += i;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,511,        if (shouldContract()) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,512,            contract();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,514,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,536,            newSize = internalArray.length + FastMath.round(expansionFactor);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,551,        double[] tempArray = new double[size];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,553,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,554,        internalArray = tempArray;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,555,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,570,        return contractionCriteria;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,582,        if (index >= numElements) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,583,            throw new ArrayIndexOutOfBoundsException(index);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,584,        } else if (index >= 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,585,            return internalArray[startIndex + index];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,587,            throw new ArrayIndexOutOfBoundsException(index);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,618,        return expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,629,        return expansionMode;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,641,        return internalArray.length;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,651,        return numElements;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,667,        return internalArray;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,676,"        checkContractExpand(contractionCriteria, getExpansionFactor());",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,677,        synchronized(this) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,678,            this.contractionCriteria = contractionCriteria;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,679,        },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,680,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,696,        if (index < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,697,            throw new ArrayIndexOutOfBoundsException(index);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,699,        if (index + 1 > numElements) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,700,            numElements = index + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,702,        if ((startIndex + index) >= internalArray.length) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,703,            expandTo(startIndex + (index + 1));,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,705,        internalArray[startIndex + index] = value;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,706,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,720,"        checkContractExpand(getContractionCriteria(), expansionFactor);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,722,        synchronized(this) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,723,            this.expansionFactor = expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,724,        },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,725,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,735,        if (expansionMode != MULTIPLICATIVE_MODE &&,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,737,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,742,        synchronized(this) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,743,            this.expansionMode = expansionMode;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,744,        },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,745,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,760,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,777,        if (i < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,778,            throw new MathIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,785,        if ((startIndex + i) > internalArray.length) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,786,            expandTo(startIndex + i);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,790,        numElements = i;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,791,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,803,            return (internalArray.length - numElements) > contractionCriteria;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,817,        return startIndex;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,839,        MathUtils.checkNotNull(source);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,840,        MathUtils.checkNotNull(dest);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,841,        synchronized(source) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,842,           synchronized(dest) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,843,               dest.initialCapacity = source.initialCapacity;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,844,               dest.contractionCriteria = source.contractionCriteria;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,845,               dest.expansionFactor = source.expansionFactor;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,846,               dest.expansionMode = source.expansionMode;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,847,               dest.internalArray = new double[source.internalArray.length];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,848,"               System.arraycopy(source.internalArray, 0, dest.internalArray,",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,850,               dest.numElements = source.numElements;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,851,               dest.startIndex = source.startIndex;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,852,           },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,853,       },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,854,    },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,865,        ResizableDoubleArray result = new ResizableDoubleArray();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,866,"        copy(this, result);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,867,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,881,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,882,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,884,       if (object instanceof ResizableDoubleArray == false) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,885,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,887,       synchronized(this) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,888,           synchronized(object) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,889,               boolean result = true;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,890,               ResizableDoubleArray other = (ResizableDoubleArray) object;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,891,               result = result && (other.initialCapacity == initialCapacity);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,892,               result = result && (other.contractionCriteria == contractionCriteria);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,893,               result = result && (other.expansionFactor == expansionFactor);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,894,               result = result && (other.expansionMode == expansionMode);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,895,               result = result && (other.numElements == numElements);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,896,               result = result && (other.startIndex == startIndex);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,897,               if (!result) {,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,898,                   return false;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,900,"                   return Arrays.equals(internalArray, other.internalArray);",0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,902,           },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,903,       },0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,914,        int[] hashData = new int[7];,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,915,        hashData[0] = new Float(expansionFactor).hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,916,        hashData[1] = new Float(contractionCriteria).hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,917,        hashData[2] = expansionMode;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,918,            hashData[3] = Arrays.hashCode(internalArray);,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,919,            hashData[4] = initialCapacity;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,920,            hashData[5] = numElements;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,921,            hashData[6] = startIndex;,0.0,0,-1,0
org/apache/commons/math3/util/ResizableDoubleArray,31,922,        return Arrays.hashCode(hashData);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,242,            ContinuedFraction cf = new ContinuedFraction() {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,246,                    return ((2.0 * n) + 1.0) - a + x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,251,                    return n * (a - n);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,73,    private Gamma() {},0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,96,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,117,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,155,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,156,        } else if (x == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,157,            ret = 0.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,158,        } else if (x >= a + 1) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,161,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,164,            double n = 0.0; // current element index,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,165,            double an = 1.0 / a; // n-th element in the series,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,166,            double sum = an; // partial sum,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,168,                   n < maxIterations &&,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,171,                n = n + 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,172,                an = an * (x / (a + n));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,175,                sum = sum + an;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,177,            if (n >= maxIterations) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,178,                throw new MaxCountExceededException(maxIterations);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,179,            } else if (Double.isInfinite(sum)) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,180,                ret = 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,182,                ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,186,        return ret;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,198,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,232,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,233,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,234,        } else if (x == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,235,            ret = 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,236,        } else if (x < a + 1.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,239,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,242,            ContinuedFraction cf = new ContinuedFraction() {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,255,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,256,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,259,        return ret;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,284,        if (x > 0 && x <= S_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,287,            return -GAMMA - 1 / x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,290,        if (x >= C_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,292,            double inv = 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,296,            return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,299,        return digamma(x + 1) - 1 / x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,314,        if (x > 0 && x <= S_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,315,            return 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,318,        if (x >= C_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,319,            double inv = 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,324,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,31,327,        return trigamma(x + 1) + 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Beta,31,35,    private Beta() {},0.0,0,-1,0
org/apache/commons/math3/special/Beta,31,71,"        return regularizedBeta(x, a, b, epsilon, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/special/Beta,31,88,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Beta,31,127,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Beta,31,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/special/Beta,31,199,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,36,    private UnivariateSolverUtils() {},0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,50,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,51,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,53,        final UnivariateSolver solver = new BrentSolver();,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,54,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,74,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,99,        if (allowedSolution == AllowedSolution.ANY_SIDE) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,101,            return baseRoot;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,105,"        final double step = FastMath.max(bracketing.getAbsoluteAccuracy(),",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,107,"        double xLo        = FastMath.max(min, baseRoot - step);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,108,        double fLo        = f.value(xLo);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,109,"        double xHi        = FastMath.min(max, baseRoot + step);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,110,        double fHi        = f.value(xHi);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,111,        int remainingEval = maxEval - 2;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,112,        while (remainingEval > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,114,            if ((fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0)) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,116,"                return bracketing.solve(remainingEval, f, xLo, xHi, baseRoot, allowedSolution);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,120,            boolean changeLo = false;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,121,            boolean changeHi = false;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,122,            if (fLo < fHi) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,124,                if (fLo >= 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,125,                    changeLo = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,127,                    changeHi = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,129,            } else if (fLo > fHi) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,131,                if (fLo <= 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,132,                    changeLo = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,134,                    changeHi = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,138,                changeLo = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,139,                changeHi = true;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,143,            if (changeLo) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,144,"                xLo = FastMath.max(min, xLo - step);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,145,                fLo  = f.value(xLo);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,146,                remainingEval--;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,150,            if (changeHi) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,151,"                xHi = FastMath.min(max, xHi + step);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,152,                fHi  = f.value(xHi);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,153,                remainingEval--;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,156,        },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,158,"        throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,207,"        return bracket(function, initial, lowerBound, upperBound, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,246,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,247,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,249,        if (maximumIterations <= 0)  {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,250,"            throw new NotStrictlyPositiveException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,252,"        verifySequence(lowerBound, initial, upperBound);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,254,        double a = initial;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,255,        double b = initial;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,258,        int numIterations = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,261,"            a = FastMath.max(a - 1.0, lowerBound);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,262,"            b = FastMath.min(b + 1.0, upperBound);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,263,            fa = function.value(a);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,265,            fb = function.value(b);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,266,            ++numIterations;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,267,        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,270,        if (fa * fb > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,271,"            throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,277,"        return new double[] {a, b};",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,288,        return (a + b) * 0.5;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,305,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,306,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,308,        final double fLo = function.value(lower);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,309,        final double fHi = function.value(upper);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,310,        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,324,        return (start < mid) && (mid < end);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,337,"            throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,371,        if (function == null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,372,            throw new NullArgumentException(LocalizedFormats.FUNCTION);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,374,"        verifyInterval(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,375,"        if (!isBracketing(function, lower, upper)) {",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,376,"            throw new NoBracketingException(lower, upper,",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,31,380,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,45,        this(DEFAULT_ABSOLUTE_ACCURACY);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,46,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,63,"        super(relativeAccuracy, absoluteAccuracy);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,64,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,75,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,76,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,93,            return initial;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,99,            return min;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,104,"            return brent(min, initial, yMin, yInitial);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,109,        if (FastMath.abs(yMax) <= functionValueAccuracy) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,110,            return max;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,114,        if (yInitial * yMax < 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,115,"            return brent(initial, max, yInitial, yMax);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,118,"        throw new NoBracketingException(min, max, yMin, yMax);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,139,        double a = lo;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,140,        double fa = fLo;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,141,        double b = hi;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,142,        double fb = fHi;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,143,        double c = a;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,144,        double fc = fa;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,145,        double d = b - a;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,146,        double e = d;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,148,        final double t = getAbsoluteAccuracy();,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,149,        final double eps = getRelativeAccuracy();,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,152,            if (FastMath.abs(fc) < FastMath.abs(fb)) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,153,                a = b;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,154,                b = c;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,155,                c = a;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,156,                fa = fb;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,157,                fb = fc;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,158,                fc = fa;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,161,            final double tol = 2 * eps * FastMath.abs(b) + t;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,162,            final double m = 0.5 * (c - b);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,164,            if (FastMath.abs(m) <= tol ||,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,166,                return b;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,168,            if (FastMath.abs(e) < tol ||,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,171,                d = m;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,172,                e = d;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,174,                double s = fb / fa;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,180,                if (a == c) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,182,                    p = 2 * m * s;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,183,                    q = 1 - s;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,186,                    q = fa / fc;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,187,                    final double r = fb / fc;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,188,                    p = s * (2 * m * q * (q - r) - (b - a) * (r - 1));,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,189,                    q = (q - 1) * (r - 1) * (s - 1);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,191,                if (p > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,192,                    q = -q;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,194,                    p = -p;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,196,                s = e;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,197,                e = d;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,198,                if (p >= 1.5 * m * q - FastMath.abs(tol * q) ||,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,203,                    d = m;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,204,                    e = d;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,206,                    d = p / q;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,209,            a = b;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,210,            fa = fb;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,212,            if (FastMath.abs(d) > tol) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,213,                b += d;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,214,            } else if (m > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,215,                b += tol;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,217,                b -= tol;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,219,            fb = computeObjectiveValue(b);,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,220,            if ((fb > 0 && fc > 0) ||,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,222,                c = a;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,223,                fc = fa;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,224,                d = b - a;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,225,                e = d;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BrentSolver,31,227,        },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,47,"        super(relativeAccuracy, absoluteAccuracy);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,48,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,31,60,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,78,"        this(relativeAccuracy,",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,81,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,100,        return evaluations.getMaximalCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,104,        return evaluations.getCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,128,        return absoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,134,        return relativeAccuracy;,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,200,"        return solve(maxEval, f, Double.NaN, Double.NaN, startValue);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,226,"        return UnivariateSolverUtils.isBracketing(function, lower, upper);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,240,"        return UnivariateSolverUtils.isSequence(start, mid, end);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,253,"        UnivariateSolverUtils.verifyInterval(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,254,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,282,"        UnivariateSolverUtils.verifyBracketing(function, lower, upper);",0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,283,    },0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,295,        } catch (MaxCountExceededException e) {,0.0,0,-1,0
org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,31,296,            throw new TooManyEvaluationsException(e.getMax());,0.0,0,-1,0
