project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,0.2,0,1,0
org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,0.2,0,1,0
org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,    },0.2,0,1,0
org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",0.2,0,1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,0.2,0,1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,        MathUtils.checkNotNull(c);,0.2,0,1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,0.2,0,1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,        if (n == 0) {,0.2,0,1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,0.2,0,0,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,        this.coefficients = new double[n];,0.2,0,0,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",0.2,0,1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,    },0.2,0,0,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);",0.2,0,1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,0.125,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,0.125,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,0.125,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,        if (n == 0) {,0.125,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,0.125,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,        for (int j = n - 2; j >= 0; j--) {,0.125,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,0.125,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0.05,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {,0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,211,            this.f = f;,0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,        },0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,        double[] target  = new double[observations.size()];,0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,        double[] weights = new double[observations.size()];,0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,        int i = 0;,0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,        for (WeightedObservedPoint point : observations) {,0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,            target[i]  = point.getY();,0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,            weights[i] = point.getWeight();,0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,182,            ++i;,0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,        },0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,187,        if (optimizer == null) {,0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),",0.04348,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,59,        return weight;,0.04348,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,423,"        return optimizeInternal(maxEval,",0.04348,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,0.04348,1,-1,1
org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));",0.04167,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,    },0.04167,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,        return y;,0.04167,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,49,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",0.04,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,50,        this.weight = weight;,0.04,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,51,        this.x      = x;,0.04,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,52,        this.y      = y;,0.04,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,53,    },0.04,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,69,    public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {,0.03846,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,70,        this.oldOptimizer = optimizer;,0.03846,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,71,        this.optimizer    = null;,0.03846,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,72,        observations      = new ArrayList<WeightedObservedPoint>();,0.03846,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,73,    },0.03846,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,158,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0.02381,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,159,    },0.02381,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,270,        super(null); // No custom convergence criterion.,0.01639,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,271,        this.initialStepBoundFactor = initialStepBoundFactor;,0.01639,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,272,        this.costRelativeTolerance = costRelativeTolerance;,0.01639,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,273,        this.parRelativeTolerance = parRelativeTolerance;,0.01639,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,274,        this.orthoTolerance = orthoTolerance;,0.01639,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,275,        this.qrRankingThreshold = threshold;,0.01639,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,276,    },0.01639,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,401,"                final double mij = matrix.getEntry(i, j);",0.01266,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,402,"                final double mji = matrix.getEntry(j, i);",0.01266,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,403,                if (FastMath.abs(mij - mji) >,0.01266,0,-1,0
org/apache/commons/math3/util/FastMath,13,3532,        if (a > b) {,0.0122,0,-1,0
org/apache/commons/math3/util/FastMath,13,3535,        if (a < b) {,0.0122,0,-1,0
org/apache/commons/math3/util/FastMath,13,3539,        if (a != b) {,0.0122,0,-1,0
org/apache/commons/math3/util/FastMath,13,3544,        long bits = Double.doubleToRawLongBits(a);,0.0122,0,-1,0
org/apache/commons/math3/util/FastMath,13,3545,        if (bits == 0x8000000000000000L) {,0.0122,0,-1,0
org/apache/commons/math3/util/FastMath,13,3548,        return a;,0.0122,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,56,    protected AbstractRealMatrix() {},0.01205,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,0.01205,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0.01205,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,51,    },0.01205,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,616,        return getColumnDimension() == getRowDimension();,0.01205,0,-1,0
org/apache/commons/math3/linear/RealLinearOperator,13,53,public abstract class RealLinearOperator {,0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,391,        final int rows = matrix.getRowDimension();,0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,392,        if (rows != matrix.getColumnDimension()) {,0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,399,        for (int i = 0; i < rows; i++) {,0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,400,            for (int j = i + 1; j < rows; j++) {,0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,413,        return true;,0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,440,"        return isSymmetricInternal(matrix, eps, false);",0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,455,"        checkRowIndex(m, row);",0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,456,"        checkColumnIndex(m, column);",0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,457,    },0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,468,        if (row < 0 ||,0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,473,    },0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,484,        if (column < 0 || column >= m.getColumnDimension()) {,0.01205,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,488,    },0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,101,    },0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,117,    },0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,133,                            final NumberFormat format) {,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,134,        this.prefix            = prefix;,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,135,        this.suffix            = suffix;,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,136,        this.rowPrefix         = rowPrefix;,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,137,        this.rowSuffix         = rowSuffix;,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,138,        this.rowSeparator      = rowSeparator;,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,139,        this.columnSeparator   = columnSeparator;,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,140,        this.format            = format;,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,142,        this.format.setGroupingUsed(false);,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,143,    },0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,207,        return format;,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,215,        return getInstance(Locale.getDefault());,0.01205,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0.01205,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,67,    public DiagonalMatrix(final double[] d) {,0.01205,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,68,        data = d.clone();,0.01205,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,69,    },0.01205,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,107,        return new DiagonalMatrix(data);,0.01205,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,203,        final int dim = getRowDimension();,0.01205,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,204,        final double[][] out = new double[dim][dim];,0.01205,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,237,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.01205,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,238,        return row == column ? data[row] : 0;,0.01205,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,290,        return data == null ? 0 : data.length;,0.01205,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,296,        return getRowDimension();,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,115,    private static final double LN_QUICK_COEF[][] = {,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,128,    private static final double LN_HI_PREC_COEF[][] = {,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,141,    private static final double SINE_TABLE_A[] =,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,160,    private static final double SINE_TABLE_B[] =,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,179,    private static final double COSINE_TABLE_A[] =,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,198,    private static final double COSINE_TABLE_B[] =,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,218,    private static final double TANGENT_TABLE_A[] =,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,237,    private static final double TANGENT_TABLE_B[] =,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,256,    private static final long RECIP_2PI[] = new long[] {,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,277,    private static final long PI_O_4_BITS[] = new long[] {,0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.01205,0,-1,0
org/apache/commons/math3/util/FastMath,13,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.01205,0,-1,0
org/apache/commons/math3/util/Incrementor,13,96,        maximalCount = max;,0.01205,0,-1,0
org/apache/commons/math3/util/Incrementor,13,97,    },0.01205,0,-1,0
org/apache/commons/math3/util/Incrementor,13,164,        count = 0;,0.01205,0,-1,0
org/apache/commons/math3/util/Incrementor,13,165,    },0.01205,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,43,        return getDefaultNumberFormat(Locale.getDefault());,0.01205,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0.01205,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,55,        nf.setMaximumFractionDigits(10);,0.01205,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,56,        return nf;,0.01205,0,-1,0
org/apache/commons/math3/util/MathUtils,13,264,        if (o == null) {,0.01205,0,-1,0
org/apache/commons/math3/util/MathUtils,13,267,    },0.01205,0,-1,0
org/apache/commons/math3/optimization/Weight,13,43,    public Weight(double[] weight) {,0.01205,0,-1,0
org/apache/commons/math3/optimization/Weight,13,44,        weightMatrix = new DiagonalMatrix(weight);,0.01205,0,-1,0
org/apache/commons/math3/optimization/Weight,13,45,    },0.01205,0,-1,0
org/apache/commons/math3/optimization/Weight,13,67,        return weightMatrix.copy();,0.01205,0,-1,0
org/apache/commons/math3/optimization/InitialGuess,13,37,    public InitialGuess(double[] startPoint) {,0.01205,0,-1,0
org/apache/commons/math3/optimization/InitialGuess,13,38,        init = startPoint.clone();,0.01205,0,-1,0
org/apache/commons/math3/optimization/InitialGuess,13,39,    },0.01205,0,-1,0
org/apache/commons/math3/optimization/InitialGuess,13,47,        return init.clone();,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,231,        evaluations.setMaximalCount(maxEval);,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,232,        evaluations.resetCount();,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,233,        function = f;,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,235,        parseOptimizationData(optData);,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,237,        checkParameters();,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,239,        setUp();,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,260,        return weightMatrix.copy();,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,321,        final int dim = target.length;,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,322,        weight = new double[dim];,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,323,        for (int i = 0; i < dim; i++) {,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,324,"            weight[i] = weightMatrix.getEntry(i, i);",0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,326,    },0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,342,        for (OptimizationData data : optData) {,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,343,            if (data instanceof Target) {,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,344,                target = ((Target) data).getTarget();,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,345,                continue;,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,347,            if (data instanceof Weight) {,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,348,                weightMatrix = ((Weight) data).getWeight();,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,349,                continue;,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,351,            if (data instanceof InitialGuess) {,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,352,                start = ((InitialGuess) data).getInitialGuess();,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,353,                continue;,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,356,    },0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,365,        if (target.length != weightMatrix.getColumnDimension()) {,0.01205,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,369,    },0.01205,0,-1,0
org/apache/commons/math3/optimization/Target,13,39,    public Target(double[] observations) {,0.01205,0,-1,0
org/apache/commons/math3/optimization/Target,13,40,        target = observations.clone();,0.01205,0,-1,0
org/apache/commons/math3/optimization/Target,13,41,    },0.01205,0,-1,0
org/apache/commons/math3/optimization/Target,13,49,        return target.clone();,0.01205,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,496,"        return super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);",0.01205,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,502,        super.setUp();,0.01205,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,505,        jacobianEvaluations = 0;,0.01205,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,508,        weightMatrixSqrt = squareRoot(getWeight());,0.01205,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,562,            final EigenDecomposition dec = new EigenDecomposition(m);,0.01205,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,0.01205,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,0.01205,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,727,        return new MultivariateDifferentiableVectorFunction() {,0.01205,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,672,        return new DifferentiableMultivariateVectorFunction() {,0.01205,0,-1,0
org/apache/commons/math3/util/Incrementor,13,63,             new MaxCountExceededCallback() {,0.01163,0,-1,0
org/apache/commons/math3/util/Incrementor,13,53,        this(0);,0.01163,0,-1,0
org/apache/commons/math3/util/Incrementor,13,54,    },0.01163,0,-1,0
org/apache/commons/math3/util/Incrementor,13,62,"        this(max,",0.01163,0,-1,0
org/apache/commons/math3/util/Incrementor,13,69,    },0.01163,0,-1,0
org/apache/commons/math3/util/Incrementor,13,80,                       MaxCountExceededCallback cb) {,0.01163,0,-1,0
org/apache/commons/math3/util/Incrementor,13,41,    private int count = 0;,0.01163,0,-1,0
org/apache/commons/math3/util/Incrementor,13,81,        if (cb == null){,0.01163,0,-1,0
org/apache/commons/math3/util/Incrementor,13,84,        maximalCount = max;,0.01163,0,-1,0
org/apache/commons/math3/util/Incrementor,13,85,        maxCountCallback = cb;,0.01163,0,-1,0
org/apache/commons/math3/util/Incrementor,13,86,    },0.01163,0,-1,0
org/apache/commons/math3/util/Precision,13,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0.01163,0,-1,0
org/apache/commons/math3/util/Precision,13,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,0.01163,0,-1,0
org/apache/commons/math3/util/Precision,13,78,    },0.01163,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,79,    protected BaseAbstractMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {,0.01163,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,51,    protected final Incrementor evaluations = new Incrementor();,0.01163,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,80,        this.checker = checker;,0.01163,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,81,    },0.01163,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,134,        super(checker);,0.01163,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,135,    },0.01163,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,630,            super(Fraction.ZERO);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,631,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,637,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,638,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,643,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,644,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,652,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,625,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,48,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,54,        return getWrongDimension(0);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,60,        return getExpectedDimension(0);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,66,        return getWrongDimension(1);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixDimensionMismatchException,13,72,        return getExpectedDimension(1);,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,13,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,13,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,13,59,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,13,60,        this.wrong = wrong.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,13,61,        this.expected = expected.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,13,62,    },0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,13,68,        return wrong.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,13,74,        return expected.clone();,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,13,82,        return wrong[index];,0.0,0,-1,0
org/apache/commons/math3/exception/MultiDimensionMismatchException,13,89,        return expected[index];,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,13,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,13,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,13,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,13,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,13,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,13,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,13,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1303,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1305,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1309,                        return i.hasNext();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1314,                        e.setIndex(i.next().getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1315,                        return e;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1326,                        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1249,        return new RealVector() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1630,            class UnmodifiableEntry extends Entry {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1258,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1264,                return v.map(function);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1270,                final Iterator<Entry> i = v.iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1271,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1301,                final Iterator<Entry> i = v.sparseIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1303,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1334,                return v.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1341,                return v.add(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1348,                return v.subtract(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1354,                return v.mapAdd(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1366,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1372,                return v.mapSubtract(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1384,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1390,                return v.mapMultiply(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1402,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1408,                return v.mapDivide(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1420,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1427,                return v.ebeMultiply(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1434,                return v.ebeDivide(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1441,                return v.dotProduct(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1448,                return v.cosine(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1454,                return v.getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1460,                return v.getL1Norm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1466,                return v.getLInfNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1473,                return v.getDistance(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1480,                return v.getL1Distance(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1487,                return v.getLInfDistance(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1493,                return v.unitVector();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1504,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1510,                return v.outerProduct(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1516,                return v.getEntry(index);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1528,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1540,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1546,                return v.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1552,                return v.append(w);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1558,                return v.append(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1565,"                return v.getSubVector(index, n);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1577,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1589,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1595,                return v.toArray();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1601,                return v.isNaN();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1607,                return v.isInfinite();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1614,"                return v.combine(a, b, y);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1626,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,60,public abstract class RealVector {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1159,    @Deprecated,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,99,"        setEntry(index, getEntry(index) + increment);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,100,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,165,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,166,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,177,        int d = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,178,        if (d != n) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,179,"            throw new DimensionMismatchException(d, n);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,181,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,190,        if (index < 0 ||,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,195,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,208,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,209,        if ((start < 0) || (start >= dim)) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,210,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,213,        if ((end < 0) || (end >= dim)) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,214,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,217,        if (end < start) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,219,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,222,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,234,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,235,        RealVector result = v.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,236,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,237,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,238,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,239,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,240,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,241,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,242,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,255,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,256,        RealVector result = v.mapMultiply(-1d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,257,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,258,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,259,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,260,            final int index = e.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,261,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,262,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,263,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,274,        return copy().mapAddToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,285,        if (d != 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,286,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,288,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,307,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,308,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,309,        final int n = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,310,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,311,            d += getEntry(i) * v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,313,        return d;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,329,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,330,        final double vNorm = v.getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,332,        if (norm == 0 ||,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,334,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,336,        return dotProduct(v) / (norm * vNorm);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,396,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,397,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,398,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,399,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,400,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,401,            final double diff = e.getValue() - v.getEntry(e.getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,402,            d += diff * diff;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,403,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,404,        return FastMath.sqrt(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,418,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,419,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,420,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,421,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,422,            final double value = e.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,423,            sum += value * value;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,424,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,425,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,439,        double norm = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,440,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,441,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,442,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,443,            norm += FastMath.abs(e.getValue());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,444,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,445,        return norm;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,459,        double norm = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,460,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,461,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,462,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,463,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,464,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,465,        return norm;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,481,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,482,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,483,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,484,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,485,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,486,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,487,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,488,        return d;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,507,        checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,508,        double d = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,509,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,510,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,511,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,512,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,513,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,514,        return d;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,524,        int minIndex    = -1;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,525,        double minValue = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,526,        Iterator<Entry> iterator = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,527,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,528,            final Entry entry = iterator.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,529,            if (entry.getValue() <= minValue) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,530,                minIndex = entry.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,531,                minValue = entry.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,533,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,534,        return minIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,544,        final int minIndex = getMinIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,545,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,555,        int maxIndex    = -1;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,556,        double maxValue = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,557,        Iterator<Entry> iterator = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,558,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,559,            final Entry entry = iterator.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,560,            if (entry.getValue() >= maxValue) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,561,                maxIndex = entry.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,562,                maxValue = entry.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,564,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,565,        return maxIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,575,        final int maxIndex = getMaxIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,576,        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,588,        return copy().mapMultiplyToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,599,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,610,        return copy().mapSubtractToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,621,        return mapAddToSelf(-d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,632,        return copy().mapDivideToSelf(d);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,643,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,653,        final int m = this.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,654,        final int n = v.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,656,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,657,"            product = new OpenMapRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,659,"            product = new Array2DRowRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,661,        for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,662,            for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,663,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,666,        return product;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,681,        final double norm2 = v.dotProduct(v);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,682,        if (norm2 == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,683,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,685,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,694,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,695,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,696,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,697,            e.setValue(value);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,698,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,699,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,709,        int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,710,        double[] values = new double[dim];,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,711,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,712,            values[i] = getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,714,        return values;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,725,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,726,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,727,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,729,        return mapDivide(norm);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,739,        final double norm = getNorm();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,740,        if (norm == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,741,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,743,        mapDivideToSelf(getNorm());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,744,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,767,        return new SparseEntryIterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,781,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,782,        return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,827,        return copy().mapToSelf(function);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,844,        Iterator<Entry> it = iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,845,        while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,846,            final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,847,            e.setValue(function.value(e.getValue()));,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,848,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,849,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,867,"        return copy().combineToSelf(a, b, y);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,884,        checkVectorDimensions(y);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,885,        for (int i = 0; i < getDimension(); i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,886,            final double xi = getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,887,            final double yi = y.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,888,"            setEntry(i, a * xi + b * yi);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,890,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,904,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,905,"        visitor.start(dim, 0, dim - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,906,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,907,"            visitor.visit(i, getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,909,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,928,"        checkIndices(start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,929,"        visitor.start(getDimension(), start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,930,        for (int i = start; i <= end; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,931,"            visitor.visit(i, getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,933,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,949,        return walkInDefaultOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,970,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,984,        final int dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,985,"        visitor.start(dim, 0, dim - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,986,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,987,"            setEntry(i, visitor.visit(i, getEntry(i)));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,989,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1008,"        checkIndices(start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1009,"        visitor.start(getDimension(), start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1010,        for (int i = start; i <= end; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1011,"            setEntry(i, visitor.visit(i, getEntry(i)));",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1013,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1029,        return walkInDefaultOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1050,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1125,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1138,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1249,        return new RealVector() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1059,        public Entry() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1060,            setIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1061,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1069,            return getEntry(getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1078,"            setEntry(getIndex(), value);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1079,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1087,            return index;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1096,            this.index = index;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1097,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1630,            class UnmodifiableEntry extends Entry {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1634,                    return v.getEntry(getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1646,                    throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,13,44,        this(LocalizedFormats.UNSUPPORTED_OPERATION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,13,45,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,13,52,                                             Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,13,53,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,13,54,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,13,55,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,13,59,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,13,65,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,13,71,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,606,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,607,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,67,        throws NotStrictlyPositiveException {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,68,        if (rowDimension < 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,69,            throw new NotStrictlyPositiveException(rowDimension);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,71,        if (columnDimension < 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,72,            throw new NotStrictlyPositiveException(columnDimension);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,74,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,79,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,81,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,82,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,84,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,85,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,90,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,98,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,99,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,101,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,102,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,107,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,112,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,113,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,115,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,116,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,117,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,121,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,126,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,127,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,129,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,130,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,131,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,135,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,143,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,144,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,145,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,146,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,147,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,148,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,149,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,150,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,153,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,157,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,163,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,169,        if (p < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,170,"            throw new NotPositiveException(LocalizedFormats.NOT_POSITIVE_EXPONENT, p);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,173,        if (!isSquare()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,174,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,177,        if (p == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,178,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,181,        if (p == 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,182,            return this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,185,        final int power = p - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,194,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,195,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,196,        int maxI = -1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,198,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,199,            if (binaryRepresentation[i] == '1') {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,200,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,201,                nonZeroPositions.add(pos);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,204,                if (maxI == -1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,205,                    maxI = pos;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,210,        RealMatrix[] results = new RealMatrix[maxI + 1];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,211,        results[0] = this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,213,        for (int i = 1; i <= maxI; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,214,            results[i] = results[i-1].multiply(results[i-1]);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,217,        RealMatrix result = this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,219,        for (Integer i : nonZeroPositions) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,220,            result = result.multiply(results[i]);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,221,        },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,223,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,228,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,230,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,231,            final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,232,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,233,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,237,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,242,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,308,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,310,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,312,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,313,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,314,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,318,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,325,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,327,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,329,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,339,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,348,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,349,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,350,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,351,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,352,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,356,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,380,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,387,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,388,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,390,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,394,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,395,            final double[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,396,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,397,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,400,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,406,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,407,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,408,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,409,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,412,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,413,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,414,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,417,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,418,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,419,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,423,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,424,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,425,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,426,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,428,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,429,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,430,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,433,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,437,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,438,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,439,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,440,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,441,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,444,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,450,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,451,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,452,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,454,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,458,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,459,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,461,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,466,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,467,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,468,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,469,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,470,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,473,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,479,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,480,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,481,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,483,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,487,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,488,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,490,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,495,"        return new ArrayRealVector(getRow(row), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,501,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,502,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,503,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,504,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,507,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,508,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,510,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,515,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,521,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,522,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,523,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,524,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,527,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,528,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,530,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,534,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,535,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,536,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,537,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,538,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,541,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,547,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,548,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,549,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,550,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,552,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,553,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,555,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,559,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,560,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,561,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,562,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,563,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,566,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,572,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,573,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,574,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,575,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,577,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,578,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,580,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,585,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,586,"        setEntry(row, column, getEntry(row, column) + increment);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,587,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,592,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,593,"        setEntry(row, column, getEntry(row, column) * factor);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,594,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,598,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,599,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,600,"        final RealMatrix out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,611,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,637,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,638,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,639,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,640,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,642,        double trace = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,643,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,644,"            trace += getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,646,        return trace;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,652,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,653,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,654,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,655,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,658,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,659,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,660,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,661,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,662,"                sum += getEntry(row, i) * v[i];",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,664,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,667,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,675,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,676,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,677,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,678,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,679,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,680,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,683,            final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,684,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,685,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,686,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,687,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,689,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,692,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,699,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,700,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,701,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,702,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,705,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,706,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,707,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,708,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,709,"                sum += getEntry(i, col) * v[i];",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,711,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,714,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,720,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,721,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,723,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,724,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,725,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,726,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,729,            final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,730,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,731,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,732,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,733,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,735,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,738,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,744,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,745,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,746,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,747,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,748,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,749,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,750,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,751,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,754,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,759,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,760,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,761,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,762,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,763,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,764,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,767,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,775,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,776,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,778,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,779,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,780,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,781,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,782,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,785,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,793,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,794,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,796,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,797,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,798,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,801,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,806,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,807,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,808,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,809,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,810,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,811,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,812,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,813,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,816,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,821,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,822,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,823,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,824,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,825,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,826,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,829,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,837,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,838,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,840,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,841,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,842,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,843,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,844,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,847,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,855,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,856,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,858,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,859,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,860,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,863,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,868,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,873,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,882,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,891,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,900,        final StringBuilder res = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,901,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,902,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,903,        res.append(shortClassName);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,904,        res.append(DEFAULT_FORMAT.format(this));,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,905,        return res.toString();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,918,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,919,            return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,921,        if (object instanceof RealMatrix == false) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,922,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,924,        RealMatrix m = (RealMatrix) object;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,925,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,926,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,927,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,928,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,930,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,931,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,932,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,933,                    return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,937,        return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,947,        int ret = 7;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,948,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,949,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,950,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,951,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,952,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,953,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,954,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,958,        return ret;,0.0,0,-1,0
org/apache/commons/math3/linear/RealLinearOperator,13,95,        throw new UnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealLinearOperator,13,108,        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1169,        protected SparseEntryIterator() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1170,            dim = getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1171,            current = new Entry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1172,            next = new Entry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1173,            if (next.getValue() == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1174,                advance(next);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1176,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1184,            if (e == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1185,                return;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1188,                e.setIndex(e.getIndex() + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1189,            } while (e.getIndex() < dim && e.getValue() == 0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1190,            if (e.getIndex() >= dim) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1191,                e.setIndex(-1);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1193,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1197,            return next.getIndex() >= 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1202,            int index = next.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1203,            if (index < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1204,                throw new NoSuchElementException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1206,            current.setIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1207,            advance(next);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1208,            return current;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1217,            throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1159,    @Deprecated,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,73,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,75,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,83,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,93,"        this(prefix, suffix, separator,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,95,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,106,"                            final String separator, final NumberFormat format) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,107,        this.prefix      = prefix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,108,        this.suffix      = suffix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,109,        this.separator   = separator;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,110,        trimmedPrefix    = prefix.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,111,        trimmedSuffix    = suffix.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,112,        trimmedSeparator = separator.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,113,        this.format      = format;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,114,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,122,        return NumberFormat.getAvailableLocales();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,130,        return prefix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,138,        return suffix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,146,        return separator;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,154,        return format;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,162,        return getInstance(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,181,"        return format(v, new StringBuffer(), new FieldPosition(0)).toString();",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,195,        pos.setBeginIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,196,        pos.setEndIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,199,        toAppendTo.append(prefix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,202,        for (int i = 0; i < vector.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,203,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,204,                toAppendTo.append(separator);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,206,"            CompositeFormat.formatDouble(vector.getEntry(i), format, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,210,        toAppendTo.append(suffix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,212,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,224,        final ParsePosition parsePosition = new ParsePosition(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,225,"        final ArrayRealVector result = parse(source, parsePosition);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,226,        if (parsePosition.getIndex() == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,227,"            throw new MathParseException(source,",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,231,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,242,        int initialIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,245,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,246,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,247,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,251,        List<Number> components = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,252,        for (boolean loop = true; loop;){,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,254,            if (!components.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,255,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,256,"                if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,257,                    loop = false;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,261,            if (loop) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,262,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,263,"                Number component = CompositeFormat.parseNumber(source, format, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,264,                if (component != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,265,                    components.add(component);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,269,                    pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,270,                    return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,272,            },0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,277,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,278,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,279,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,283,        double[] data = new double[components.size()];,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,284,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,285,            data[i] = components.get(i).doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVectorFormat,13,287,"        return new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,13,42,                              Class<?> type) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,13,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,13,45,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,13,53,                              int position) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,13,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,",0.0,0,-1,0
org/apache/commons/math3/exception/MathParseException,13,56,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,13,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,56,    public ArrayRealVector() {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,57,        data = new double[0];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,58,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,65,    public ArrayRealVector(int size) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,66,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,67,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,75,"    public ArrayRealVector(int size, double preset) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,76,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,77,"        Arrays.fill(data, preset);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,78,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,85,    public ArrayRealVector(double[] d) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,86,        data = d.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,87,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,104,        throws NullArgumentException {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,105,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,106,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,108,        data = copyArray ? d.clone() :  d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,109,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,122,"        throws NullArgumentException, NumberIsTooLargeException {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,123,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,124,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,126,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,127,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,129,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,130,"        System.arraycopy(d, pos, data, 0, size);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,131,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,138,    public ArrayRealVector(Double[] d) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,139,        data = new double[d.length];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,140,        for (int i = 0; i < d.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,141,            data[i] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,143,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,156,"        throws NullArgumentException, NumberIsTooLargeException {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,157,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,158,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,160,        if (d.length < pos + size) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,161,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,163,        data = new double[size];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,164,        for (int i = pos; i < pos + size; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,165,            data[i - pos] = d[i].doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,167,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,175,    public ArrayRealVector(RealVector v) throws NullArgumentException {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,176,        if (v == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,177,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,179,        data = new double[v.getDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,180,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,181,            data[i] = v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,183,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,192,"        this(v, true);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,193,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,203,        data = deep ? v.data.clone() : v.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,204,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,211,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,212,        data = new double[v1.data.length + v2.data.length];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,213,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,214,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,215,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,222,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,223,        final int l1 = v1.data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,224,        final int l2 = v2.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,225,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,226,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,227,        for (int i = 0; i < l2; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,228,            data[l1 + i] = v2.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,230,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,237,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,238,        final int l1 = v1.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,239,        final int l2 = v2.data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,240,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,241,        for (int i = 0; i < l1; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,242,            data[i] = v1.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,244,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,245,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,252,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,253,        final int l1 = v1.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,254,        final int l2 = v2.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,255,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,256,"        System.arraycopy(v1.data, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,257,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,258,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,265,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,266,        final int l1 = v1.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,267,        final int l2 = v2.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,268,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,269,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,270,"        System.arraycopy(v2.data, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,271,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,278,"    public ArrayRealVector(double[] v1, double[] v2) {",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,279,        final int l1 = v1.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,280,        final int l2 = v2.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,281,        data = new double[l1 + l2];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,282,"        System.arraycopy(v1, 0, data, 0, l1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,283,"        System.arraycopy(v2, 0, data, l1, l2);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,284,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,289,"        return new ArrayRealVector(this, true);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,296,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,297,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,298,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,299,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,300,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,301,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,302,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,303,                resultData[i] = data[i] + vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,305,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,307,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,308,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,309,            Iterator<Entry> it = v.iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,310,            while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,311,                final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,312,                out[e.getIndex()] += e.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,313,            },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,314,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,322,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,323,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,324,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,325,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,326,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,327,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,328,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,329,                resultData[i] = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,331,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,333,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,334,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,335,            Iterator<Entry> it = v.iterator();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,336,            while (it.hasNext()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,337,                final Entry e = it.next();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,338,                out[e.getIndex()] -= e.getValue();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,339,            },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,340,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,347,        return copy().mapToSelf(function);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,353,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,354,            data[i] = function.value(data[i]);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,356,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,362,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,363,            data[i] = data[i] + d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,365,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,371,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,372,            data[i] = data[i] - d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,374,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,380,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,381,            data[i] = data[i] * d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,383,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,389,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,390,            data[i] = data[i] / d;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,392,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,399,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,400,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,401,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,402,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,403,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,404,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,405,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,406,                resultData[i] = data[i] * vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,408,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,410,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,411,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,412,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,413,                out[i] *= v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,415,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,423,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,424,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,425,            final int dim = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,426,            checkVectorDimensions(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,427,            ArrayRealVector result = new ArrayRealVector(dim);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,428,            double[] resultData = result.data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,429,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,430,                resultData[i] = data[i] / vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,432,            return result;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,434,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,435,            double[] out = data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,436,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,437,                out[i] /= v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,439,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,450,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,456,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,457,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,458,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,459,            double dot = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,460,            for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,461,                dot += data[i] * vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,463,            return dot;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,465,        return super.dotProduct(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,471,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,472,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,473,            sum += a * a;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,475,        return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,481,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,482,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,483,            sum += FastMath.abs(a);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,485,        return sum;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,491,        double max = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,492,        for (double a : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,493,"            max = FastMath.max(max, FastMath.abs(a));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,495,        return max;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,501,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,502,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,503,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,504,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,505,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,506,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,507,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,509,            return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,511,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,512,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,513,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,514,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,515,                sum += delta * delta;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,517,            return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,525,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,526,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,527,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,528,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,529,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,530,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,531,                sum += FastMath.abs(delta);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,533,            return sum;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,535,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,536,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,537,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,538,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,539,                sum += FastMath.abs(delta);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,541,            return sum;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,549,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,550,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,551,            checkVectorDimensions(vData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,552,            double max = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,553,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,554,                final double delta = data[i] - vData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,555,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,557,            return max;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,559,            checkVectorDimensions(v);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,560,            double max = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,561,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,562,                final double delta = data[i] - v.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,563,"                max = FastMath.max(max, FastMath.abs(delta));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,565,            return max;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,572,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,573,            final double[] vData = ((ArrayRealVector) v).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,574,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,575,            final int n = vData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,576,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,577,            for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,578,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,579,"                    out.setEntry(i, j, data[i] * vData[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,582,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,584,            final int m = data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,585,            final int n = v.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,586,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,587,            for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,588,                for (int j = 0; j < n; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,589,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,592,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,600,            return data[index];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,601,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,602,"            throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0,",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,610,        return data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,617,"            return new ArrayRealVector(this, (ArrayRealVector) v);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,618,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,619,"            return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,630,"        return new ArrayRealVector(this, v);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,636,        final double[] out = new double[data.length + 1];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,637,"        System.arraycopy(data, 0, out, 0, data.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,638,        out[data.length] = in;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,639,"        return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,646,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,647,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,649,        ArrayRealVector out = new ArrayRealVector(n);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,651,"            System.arraycopy(data, index, out.data, 0, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,655,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,652,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,653,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,654,            checkIndex(index + n - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,656,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,663,            data[index] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,666,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,664,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,665,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,667,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,674,        data[index] += increment;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,678,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,675,        } catch(IndexOutOfBoundsException e){,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,676,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,679,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,685,        if (v instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,686,"            setSubVector(index, ((ArrayRealVector) v).data);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,689,                for (int i = index; i < index + v.getDimension(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,690,                    data[i] = v.getEntry(i - index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,695,            },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,692,            } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,693,                checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,694,                checkIndex(index + v.getDimension() - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,697,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,710,"            System.arraycopy(v, 0, data, index, v.length);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,714,        },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,711,        } catch (IndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,712,            checkIndex(index);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,713,            checkIndex(index + v.length - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,715,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,720,"        Arrays.fill(data, value);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,721,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,726,        return data.clone();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,732,        return DEFAULT_FORMAT.format(this);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,745,        checkVectorDimensions(v.getDimension());,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,746,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,758,        if (data.length != n) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,759,"            throw new DimensionMismatchException(data.length, n);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,761,    },0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,771,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,772,            if (Double.isNaN(v)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,773,                return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,776,        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,788,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,789,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,792,        for (double v : data) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,793,            if (Double.isInfinite(v)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,794,                return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,798,        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,804,        if (this == other) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,805,            return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,808,        if (!(other instanceof RealVector)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,809,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,812,        RealVector rhs = (RealVector) other;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,813,        if (data.length != rhs.getDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,814,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,817,        if (rhs.isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,818,            return this.isNaN();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,821,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,822,            if (data[i] != rhs.getEntry(i)) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,823,                return false;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,826,        return true;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,834,        if (isNaN()) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,835,            return 9;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,837,        return MathUtils.hash(data);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,844,"        return copy().combineToSelf(a, b, y);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,851,        if (y instanceof ArrayRealVector) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,852,            final double[] yData = ((ArrayRealVector) y).data;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,853,            checkVectorDimensions(yData.length);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,854,            for (int i = 0; i < this.data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,855,                data[i] = a * data[i] + b * yData[i];,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,857,        } else {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,858,            checkVectorDimensions(y);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,859,            for (int i = 0; i < this.data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,860,                data[i] = a * data[i] + b * y.getEntry(i);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,863,        return this;,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,869,"        visitor.start(data.length, 0, data.length - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,870,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,871,"            visitor.visit(i, data[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,873,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,881,"        checkIndices(start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,882,"        visitor.start(data.length, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,883,        for (int i = start; i <= end; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,884,"            visitor.visit(i, data[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,886,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,896,        return walkInDefaultOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,908,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,914,"        visitor.start(data.length, 0, data.length - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,915,        for (int i = 0; i < data.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,916,"            data[i] = visitor.visit(i, data[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,918,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,926,"        checkIndices(start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,927,"        visitor.start(data.length, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,928,        for (int i = start; i <= end; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,929,"            data[i] = visitor.visit(i, data[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,931,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,941,        return walkInDefaultOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,953,"        return walkInDefaultOrder(visitor, start, end);",0.0,0,-1,0
org/apache/commons/math3/linear/ArrayRealVector,13,39,public class ArrayRealVector extends RealVector implements Serializable {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,329,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,334,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,13,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,13,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,13,62,"        super(specific, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,13,63,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,13,64,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,13,65,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,13,71,        return lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,13,77,        return hi;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,13,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,13,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,13,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,13,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,13,44,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,13,45,        dimension = expected;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,13,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,13,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,13,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,13,63,        return dimension;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,13,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,13,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,13,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,13,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,13,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,13,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,13,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,13,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,63,"        super(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,64,        long lRow = rowDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,65,        long lCol = columnDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,66,        if (lRow * lCol >= Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,67,"            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,69,        this.rows = rowDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,70,        this.columns = columnDimension;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,71,        this.entries = new OpenIntToDoubleHashMap(0.0);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,72,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,79,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,80,        this.rows = matrix.rows;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,81,        this.columns = matrix.columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,82,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,83,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,88,        return new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,100,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,106,        return columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,120,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,122,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,123,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,124,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,125,            final int row = iterator.key() / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,126,            final int col = iterator.key() - row * columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,127,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,128,        },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,130,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,139,            return subtract((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,140,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,141,            return (OpenMapRealMatrix) super.subtract(m);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,155,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,157,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,158,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,159,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,160,            final int row = iterator.key() / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,161,            final int col = iterator.key() - row * columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,162,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,163,        },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,165,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,179,            return multiply((OpenMapRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,180,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,182,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,184,            final int outCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,185,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,186,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,187,                iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,188,                final double value = iterator.value();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,189,                final int key      = iterator.key();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,190,                final int i        = key / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,191,                final int k        = key % columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,192,                for (int j = 0; j < outCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,193,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,195,            },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,197,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,214,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,216,        final int outCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,217,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,218,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,219,            iterator.advance();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,220,            final double value = iterator.value();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,221,            final int key      = iterator.key();,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,222,            final int i        = key / columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,223,            final int k        = key % columns;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,224,            for (int j = 0; j < outCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,225,"                final int rightKey = m.computeKey(k, j);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,226,                if (m.entries.containsKey(rightKey)) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,227,"                    final int outKey = out.computeKey(i, j);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,228,                    final double outValue =,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,230,                    if (outValue == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,231,                        out.entries.remove(outKey);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,233,"                        out.entries.put(outKey, outValue);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,237,        },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,239,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,245,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,246,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,247,"        return entries.get(computeKey(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,253,        return rows;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,260,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,261,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,262,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,263,"            entries.remove(computeKey(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,265,"            entries.put(computeKey(row, column), value);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,267,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,273,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,274,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,275,"        final int key = computeKey(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,276,        final double value = entries.get(key) + increment;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,277,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,278,            entries.remove(key);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,280,"            entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,282,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,288,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,289,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,290,"        final int key = computeKey(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,291,        final double value = entries.get(key) * factor;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,292,        if (value == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,293,            entries.remove(key);,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,295,"            entries.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,297,    },0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,306,        return row * columns + column;,0.0,0,-1,0
org/apache/commons/math3/linear/OpenMapRealMatrix,13,39,@Deprecated,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,48,    public Array2DRowRealMatrix() {},0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,61,"        super(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,62,        data = new double[rowDimension][columnDimension];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,63,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,80,        copyIn(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,81,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,101,        NullArgumentException {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,102,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,103,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,105,            if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,106,                throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,108,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,109,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,110,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,112,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,113,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,114,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,116,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,117,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,118,"                    throw new DimensionMismatchException(d[r].length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,121,            data = d;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,123,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,132,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,133,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,134,        data = new double[nRows][1];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,135,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,136,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,138,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,151,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,165,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,167,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,168,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,169,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,170,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,171,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,172,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,173,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,174,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,175,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,179,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,192,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,194,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,195,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,196,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,197,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,198,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,199,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,200,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,201,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,202,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,206,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,219,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,221,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,222,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,223,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,225,        final double[][] outData = new double[nRows][nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,227,        final double[] mCol = new double[nSum];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,228,        final double[][] mData = m.data;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,231,        for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,234,            for (int mRow = 0; mRow < nSum; mRow++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,235,                mCol[mRow] = mData[mRow][col];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,238,            for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,239,                final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,240,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,241,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,242,                    sum += dataRow[i] * mCol[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,244,                outData[row][col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,248,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,254,        return copyOut();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,263,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,272,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,273,            if (row > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,274,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,276,            if (column > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,277,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,279,            MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,280,            final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,281,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,282,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,285,            final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,286,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,287,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,289,            data = new double[subMatrix.length][nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,290,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,291,                if (subMatrix[i].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,292,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,296,        } else {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,297,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,300,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,307,        return data[row][column];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,314,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,315,        data[row][column] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,316,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,323,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,324,        data[row][column] += increment;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,325,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,332,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,333,        data[row][column] *= factor;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,334,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,339,        return (data == null) ? 0 : data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,352,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,353,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,354,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,355,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,357,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,358,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,359,            final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,360,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,361,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,362,                sum += dataRow[i] * v[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,364,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,366,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,373,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,374,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,375,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,376,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,379,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,380,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,381,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,382,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,383,                sum += data[i][col] * v[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,385,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,388,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,395,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,396,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,397,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,398,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,399,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,400,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,401,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,404,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,410,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,411,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,413,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,414,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,415,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,416,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,419,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,428,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,429,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,431,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,432,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,433,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,434,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,437,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,446,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,447,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,449,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,450,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,451,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,452,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,455,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,461,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,462,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,463,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,464,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,465,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,466,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,467,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,470,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,476,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,477,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,478,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,479,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,480,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,481,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,484,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,493,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,494,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,496,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,497,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,498,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,499,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,502,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,511,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,512,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,514,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,515,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,516,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,519,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,528,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,531,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,534,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,547,"        setSubMatrix(in, 0, 0);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowRealMatrix,13,548,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,59,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,63,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,13,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,13,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,13,42,    },0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,13,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,13,51,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,13,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,13,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,13,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,13,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,13,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,13,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,13,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,13,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,13,37,"        super(value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,13,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,13,47,"        super(specific, value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,13,48,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,64,        super();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,65,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,81,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,103,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,130,        if (data == null ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,132,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,134,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,159,        if (data == null ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,161,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,163,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,176,"        final RealMatrix m = createRealMatrix(dimension, dimension);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,177,        for (int i = 0; i < dimension; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,178,"            m.setEntry(i, i, 1.0);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,180,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,195,        final T zero = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,196,        final T one  = field.getOne();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,198,"        final T[][] d = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { dimension, dimension });",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,199,        for (int row = 0; row < dimension; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,200,            final T[] dRow = d[row];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,201,"            Arrays.fill(dRow, zero);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,202,            dRow[row] = one;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,204,"        return new Array2DRowFieldMatrix<T>(field, d, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,217,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,218,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,220,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,234,        final FieldMatrix<T> m =,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,236,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,237,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,239,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,252,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,253,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,255,"        return new ArrayRealVector(data, true);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,270,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,271,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,273,        if (data.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,274,            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,276,"        return new ArrayFieldVector<T>(data[0].getField(), data, true);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,290,        if (rowData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,291,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,293,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,294,"        final RealMatrix m = createRealMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,295,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,296,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,298,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,314,        if (rowData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,315,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,317,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,318,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,319,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,321,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,322,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,323,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,325,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,339,        if (columnData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,340,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,342,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,343,"        final RealMatrix m = createRealMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,344,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,345,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,347,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,363,        if (columnData == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,364,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,366,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,367,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,368,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,370,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,371,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,372,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,374,        return m;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,393,            if (raiseException) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,394,"                throw new NonSquareMatrixException(rows, matrix.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,396,                return false;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,405,                    if (raiseException) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,406,"                        throw new NonSymmetricMatrixException(i, j, relativeTolerance);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,408,                        return false;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,427,"        isSymmetricInternal(matrix, eps, true);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,428,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,470,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,485,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,507,"        checkRowIndex(m, startRow);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,508,"        checkRowIndex(m, endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,509,        if (endRow < startRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,510,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,514,"        checkColumnIndex(m, startColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,515,"        checkColumnIndex(m, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,516,        if (endColumn < startColumn) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,517,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,522,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,541,        if (selectedRows == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,542,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,544,        if (selectedColumns == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,545,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,547,        if (selectedRows.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,548,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,550,        if (selectedColumns.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,551,            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,554,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,555,"            checkRowIndex(m, row);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,557,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,558,"            checkColumnIndex(m, column);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,560,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,572,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,574,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,577,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,589,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,591,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,594,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,607,        if (left.getColumnDimension() != right.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,608,"            throw new DimensionMismatchException(left.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,611,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,619,        final FractionMatrixConverter converter = new FractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,620,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,621,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,664,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,665,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,666,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,744,        final int n = vector.getDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,745,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,746,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,747,            oos.writeDouble(vector.getEntry(i));,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,749,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,775,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,776,            final double[] data = new double[n];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,777,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,778,                data[i] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,782,"            final RealVector vector = new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,785,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,787,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,788,"            f.set(instance, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,798,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,790,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,791,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,792,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,793,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,794,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,795,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,796,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,797,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,800,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,845,        final int n = matrix.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,846,        final int m = matrix.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,847,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,848,        oos.writeInt(m);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,849,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,850,            for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,851,"                oos.writeDouble(matrix.getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,854,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,880,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,881,            final int m = ois.readInt();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,882,            final double[][] data = new double[n][m];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,883,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,884,                final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,885,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,886,                    dataI[j] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,891,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,894,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,896,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,897,"            f.set(instance, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,907,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,899,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,900,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,901,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,902,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,903,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,904,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,905,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,906,            throw ioe;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,908,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,931,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,932,            throw new DimensionMismatchException(,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,936,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,937,"            throw new NonSquareMatrixException(rm.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,940,        int rows = rm.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,941,        for( int i = 0 ; i < rows ; i++ ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,942,"            double diag = rm.getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,943,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,944,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,946,            double bi = b.getEntry(i)/diag;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,947,"            b.setEntry(i,  bi );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,948,            for( int j = i+1; j< rows; j++ ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,949,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,952,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,976,        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,977,            throw new DimensionMismatchException(,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,981,        if( rm.getColumnDimension() != rm.getRowDimension() ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,982,"            throw new NonSquareMatrixException(rm.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,985,        int rows = rm.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,986,        for( int i = rows-1 ; i >-1 ; i-- ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,987,"            double diag = rm.getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,988,            if( FastMath.abs(diag) < Precision.SAFE_MIN ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,989,                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,991,            double bi = b.getEntry(i)/diag;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,992,"            b.setEntry(i,  bi );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,993,            for( int j = i-1; j>-1; j-- ){,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,994,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,997,    },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1013,        final int n = m.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1014,        if (m.getColumnDimension() != n) {,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1015,"            throw new NonSquareMatrixException(m.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1019,        final int splitIndex1 = splitIndex + 1;,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1021,"        final RealMatrix a = m.getSubMatrix(0, splitIndex, 0, splitIndex);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1022,"        final RealMatrix b = m.getSubMatrix(0, splitIndex, splitIndex1, n - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1023,"        final RealMatrix c = m.getSubMatrix(splitIndex1, n - 1, 0, splitIndex);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1024,"        final RealMatrix d = m.getSubMatrix(splitIndex1, n - 1, splitIndex1, n - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1026,        final SingularValueDecomposition aDec = new SingularValueDecomposition(a);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1027,        final RealMatrix aInv = aDec.getSolver().getInverse();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1029,        final SingularValueDecomposition dDec = new SingularValueDecomposition(d);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1030,        final RealMatrix dInv = dDec.getSolver().getInverse();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1032,        final RealMatrix tmp1 = a.subtract(b.multiply(dInv).multiply(c));,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1033,        final SingularValueDecomposition tmp1Dec = new SingularValueDecomposition(tmp1);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1034,        final RealMatrix result00 = tmp1Dec.getSolver().getInverse();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1036,        final RealMatrix tmp2 = d.subtract(c.multiply(aInv).multiply(b));,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1037,        final SingularValueDecomposition tmp2Dec = new SingularValueDecomposition(tmp2);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1038,        final RealMatrix result11 = tmp2Dec.getSolver().getInverse();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1040,        final RealMatrix result01 = aInv.multiply(b).multiply(result11).scalarMultiply(-1);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1041,        final RealMatrix result10 = dInv.multiply(c).multiply(result00).scalarMultiply(-1);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1043,"        final RealMatrix result = new Array2DRowRealMatrix(n, n);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1044,"        result.setSubMatrix(result00.getData(), 0, 0);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1045,"        result.setSubMatrix(result01.getData(), 0, splitIndex1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1046,"        result.setSubMatrix(result10.getData(), splitIndex1, 0);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1047,"        result.setSubMatrix(result11.getData(), splitIndex1, splitIndex1);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,1049,        return result;,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,13,37,        this(LocalizedFormats.NO_DATA);,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,13,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,13,45,        super(specific);,0.0,0,-1,0
org/apache/commons/math3/exception/NoDataException,13,46,    },0.0,0,-1,0
org/apache/commons/math3/linear/NonSquareMatrixException,13,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/linear/NonSquareMatrixException,13,41,    },0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,13,48,"        super(LocalizedFormats.NON_SYMMETRIC_MATRIX, row, column, threshold);",0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,13,49,        this.row = row;,0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,13,50,        this.column = column;,0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,13,51,        this.threshold = threshold;,0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,13,52,    },0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,13,58,        return row;,0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,13,64,        return column;,0.0,0,-1,0
org/apache/commons/math3/linear/NonSymmetricMatrixException,13,70,        return threshold;,0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,13,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,13,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,13,47,"        super(specific, 0, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/ZeroException,13,48,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,98,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,99,        this.rows = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,100,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,107,"        blocks = createBlocksLayout(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,108,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,127,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,128,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,149,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,150,        this.rows = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,151,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,154,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,155,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,157,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,159,            blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,162,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,165,        int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,166,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,167,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,168,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,169,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,170,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,173,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,174,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,178,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,203,        final int rows = rawData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,204,        final int columns = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,205,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,206,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,209,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,210,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,211,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,212,"                throw new DimensionMismatchException(columns, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,217,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,218,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,219,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,220,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,221,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,222,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,223,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,224,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,225,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,226,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,229,                final double[] block = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,230,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,233,                int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,234,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,235,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,236,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,238,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,242,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,258,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,259,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,261,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,262,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,264,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,266,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,268,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,270,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,271,                blocks[blockIndex] = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,272,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,276,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,284,"        return new BlockRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,291,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,294,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,295,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,298,        return copied;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,306,            return add((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,307,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,309,"            MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,311,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,314,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,315,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,316,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,319,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,320,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,321,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,322,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,323,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,324,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,325,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,326,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,327,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,328,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,329,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,333,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,337,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,352,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,354,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,357,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,358,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,359,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,360,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,361,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,362,                outBlock[k] = tBlock[k] + mBlock[k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,366,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,374,            return subtract((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,375,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,377,"            MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,379,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,382,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,383,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,384,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,387,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,388,                    final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,389,                    final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,390,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,391,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,392,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,393,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,394,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,395,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,396,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,397,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,401,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,405,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,420,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,422,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,425,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,426,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,427,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,428,            final double[] mBlock = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,429,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,430,                outBlock[k] = tBlock[k] - mBlock[k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,434,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,441,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,444,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,445,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,446,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,447,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,448,                outBlock[k] = tBlock[k] + d;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,452,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,458,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,461,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,462,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,463,            final double[] tBlock = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,464,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,465,                outBlock[k] = tBlock[k] * d;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,469,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,477,            return multiply((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,478,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,480,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,482,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,485,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,486,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,487,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,488,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,490,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,491,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,492,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,495,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,498,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,499,                        final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,500,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,501,                        final int rStart = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,502,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,503,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,504,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,505,                            final int lEnd = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,506,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,507,                                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,508,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,509,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,510,"                                    sum += tBlock[l] * m.getEntry(r, q);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,511,                                    ++r;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,513,                                outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,514,                                ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,519,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,523,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,537,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,539,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,542,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,543,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,545,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,546,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,548,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,549,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,550,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,551,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,552,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,555,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,558,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,559,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,560,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,561,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,562,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,563,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,564,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,565,                        final int lEnd = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,566,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,567,                            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,568,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,569,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,570,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,571,                                sum += tBlock[l] * mBlock[n] +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,575,                                l += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,576,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,578,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,579,                                sum += tBlock[l++] * mBlock[n];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,580,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,582,                            outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,583,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,588,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,592,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,598,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,599,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,601,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,602,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,603,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,604,            int regularPos = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,605,            int lastPos = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,606,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,607,                final double[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,608,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,609,                int dataPos = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,610,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,611,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,612,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,614,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,615,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,616,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,620,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,626,        final double[] colSums = new double[BLOCK_SIZE];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,627,        double maxColSum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,628,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,629,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,630,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,631,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,632,                final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,633,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,634,                for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,635,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,636,                    for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,637,                        sum += FastMath.abs(block[i * jWidth + j]);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,639,                    colSums[j] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,642,            for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,643,"                maxColSum = FastMath.max(maxColSum, colSums[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,646,        return maxColSum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,652,        double sum2 = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,653,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,654,            for (final double entry : blocks[blockIndex]) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,655,                sum2 += entry * entry;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,658,        return FastMath.sqrt(sum2);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,668,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,671,        final BlockRealMatrix out =,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,675,        final int blockStartRow = startRow / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,676,        final int rowsShift = startRow % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,677,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,678,        final int columnsShift = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,681,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,682,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,683,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,684,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,685,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,686,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,689,                final int outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,690,                final double[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,691,                final int index = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,692,                final int width = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,694,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,695,                final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,696,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,698,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,700,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,701,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,705,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,709,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,713,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,717,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,719,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,723,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,730,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,732,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,733,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,737,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,741,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,743,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,749,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,751,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,754,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,777,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,778,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,779,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,780,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,781,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,782,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,783,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,785,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,794,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,795,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,796,        if (refLength == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,797,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,799,        final int endRow = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,800,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,801,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,802,        for (final double[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,803,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,804,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,809,        final int blockStartRow = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,810,        final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,811,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,812,        final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,815,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,816,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,817,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,818,"            final int iStart = FastMath.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,819,"            final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,821,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,822,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,823,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,824,"                final int jStart = FastMath.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,825,"                final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,826,                final int jLength = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,829,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,830,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,831,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,838,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,844,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,845,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,848,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,849,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,850,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,851,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,852,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,853,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,854,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,855,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,856,            final int available = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,857,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,858,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,859,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,860,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,861,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,863,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,864,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,868,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,876,"            setRowMatrix(row, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,879,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,877,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,878,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,880,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,895,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,896,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,897,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,899,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,905,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,906,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,907,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,908,        int mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,909,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,910,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,911,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,912,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,913,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,914,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,915,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,916,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,917,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,918,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,920,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,921,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,924,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,930,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,931,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,934,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,935,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,936,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,937,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,938,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,939,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,940,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,941,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,942,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,943,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,944,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,945,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,946,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,948,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,952,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,960,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,963,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,961,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,962,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,964,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,979,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,980,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,981,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,983,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,989,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,990,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,991,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,992,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,993,        int mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,994,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,995,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,996,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,997,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,998,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,999,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1000,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1001,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1003,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1006,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1012,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1013,        final double[] outData = new double[columns];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1016,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1017,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1018,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1019,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1020,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1021,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1022,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1023,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1026,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1034,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1037,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1035,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1036,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1038,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1044,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1045,        final double[] outData = new double[rows];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1048,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1049,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1050,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1051,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1052,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1053,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1054,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1055,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1056,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1060,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1068,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1071,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1069,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1070,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1072,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1077,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1078,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1081,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1082,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1083,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1084,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1085,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1086,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1087,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1088,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1091,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1098,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1099,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1100,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1101,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1105,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1106,        final int iRow = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1107,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1108,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1109,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1110,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1111,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1112,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1114,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1119,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1120,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1123,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1124,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1125,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1126,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1127,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1128,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1129,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1130,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1131,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1135,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1142,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1143,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1144,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1145,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1149,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1150,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1151,        final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1152,        int outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1153,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1154,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1155,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1156,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1157,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1160,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1166,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1167,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1168,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1169,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1171,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1178,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1179,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1180,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1181,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1183,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1184,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1191,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1192,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1193,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1194,        final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1196,        blocks[iBlock * blockColumns + jBlock][k] += increment;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1197,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1204,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1205,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1206,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1207,        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1209,        blocks[iBlock * blockColumns + jBlock][k] *= factor;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1210,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1215,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1216,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1217,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1220,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1221,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1222,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1224,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1225,                final double[] tBlock = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1226,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1227,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1228,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1229,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1230,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1231,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1232,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1233,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1234,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1235,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1236,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1237,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1241,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1245,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1251,        return rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1257,        return columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1264,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1265,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1267,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1270,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1271,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1272,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1273,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1274,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1275,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1276,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1277,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1278,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1279,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1280,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1281,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1282,                        sum += block[k]     * v[q]     +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1286,                        k += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1287,                        q += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1289,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1290,                        sum += block[k++] * v[q++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1292,                    out[p] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1297,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1304,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1305,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1307,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1310,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1311,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1312,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1313,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1314,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1315,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1316,"            final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1317,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1318,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1319,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1320,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1321,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1322,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1323,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1324,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1325,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1326,                        sum += block[k]           * v[p]     +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1330,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1331,                        p += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1333,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1334,                        sum += block[k] * v[p++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1335,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1337,                    out[q] += sum;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1342,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1348,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1349,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1350,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1351,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1352,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1353,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1354,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1355,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1356,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1357,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1358,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1359,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1360,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1361,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1366,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1372,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1373,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1374,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1375,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1376,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1377,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1378,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1379,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1380,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1381,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1382,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1383,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1384,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1385,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1390,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1399,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1400,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1401,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1402,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1403,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1404,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1405,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1406,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1407,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1408,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1409,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1410,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1411,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1412,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1413,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1414,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1415,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1420,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1429,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1430,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1431,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1432,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1433,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1434,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1435,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1436,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1437,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1438,                    final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1439,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1440,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1441,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1442,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1443,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1444,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1445,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1450,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1457,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1458,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1459,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1460,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1461,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1462,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1463,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1464,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1465,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1466,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1467,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1468,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1469,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1472,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1475,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1481,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1482,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1483,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1484,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1485,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1486,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1487,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1488,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1489,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1490,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1491,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1492,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1493,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1494,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1497,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1500,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1510,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1511,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1512,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1513,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1514,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1515,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1516,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1517,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1518,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1519,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1520,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1521,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1522,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1523,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1524,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1525,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1526,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1531,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1541,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1542,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1543,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1544,            final int p0 = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1545,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1546,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1547,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1548,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1549,                final int q0 = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1550,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1551,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1552,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1553,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1554,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1555,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1556,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1557,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1562,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1571,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,1580,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockRealMatrix,13,72,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,58,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,59,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,72,"        super(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,73,"        data = buildArray(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,74,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,92,"        this(extractField(d), d);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,93,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,112,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,113,        copyIn(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,114,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,134,"        this(extractField(d), d, copyArray);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,135,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,155,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,156,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,157,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,159,            MathUtils.checkNotNull(d);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,160,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,161,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,162,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,164,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,165,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,166,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,168,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,169,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,170,"                    throw new DimensionMismatchException(nCols, d[r].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,173,            data = d;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,175,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,186,"        this(extractField(v), v);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,187,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,198,        super(field);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,199,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,200,"        data = buildArray(getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,201,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,202,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,204,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,211,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,217,"        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,231,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,233,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,234,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,235,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,236,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,237,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,238,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,239,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,240,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,241,                outDataRow[col] = dataRow[col].add(mRow[col]);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,245,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,259,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,261,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,262,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,263,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,264,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,265,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,266,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,267,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,268,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,269,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,273,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,288,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,290,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,291,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,292,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,293,"        final T[][] outData = buildArray(getField(), nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,294,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,295,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,296,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,297,            for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,298,                T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,299,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,300,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,302,                outDataRow[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,306,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,313,        return copyOut();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,323,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,332,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,333,            if (row > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,334,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,336,            if (column > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,337,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,339,            final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,340,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,341,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,344,            final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,345,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,346,                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,348,"            data = buildArray(getField(), subMatrix.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,349,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,350,                if (subMatrix[i].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,351,"                    throw new DimensionMismatchException(nCols, subMatrix[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,353,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,355,        } else {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,356,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,359,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,365,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,366,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,368,        return data[row][column];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,375,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,376,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,378,        data[row][column] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,379,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,385,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,386,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,388,        data[row][column] = data[row][column].add(increment);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,389,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,395,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,396,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,398,        data[row][column] = data[row][column].multiply(factor);,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,399,    },0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,404,        return (data == null) ? 0 : data.length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,410,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,416,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,417,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,418,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,419,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,421,"        final T[] out = buildArray(getField(), nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,422,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,423,            final T[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,424,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,425,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,426,                sum = sum.add(dataRow[i].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,428,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,430,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,436,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,437,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,438,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,439,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,442,"        final T[] out = buildArray(getField(), nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,443,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,444,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,445,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,446,                sum = sum.add(data[i][col].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,448,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,451,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,457,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,458,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,459,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,460,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,461,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,462,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,463,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,466,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,472,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,473,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,474,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,475,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,476,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,477,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,478,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,481,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,490,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,491,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,493,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,494,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,495,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,496,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,499,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,508,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,509,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,511,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,512,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,513,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,514,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,517,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,523,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,524,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,525,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,526,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,527,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,528,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,529,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,532,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,538,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,539,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,540,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,541,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,542,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,543,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,546,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,555,"    checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,556,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,558,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,559,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,560,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,561,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,564,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,573,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,574,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,576,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,577,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,578,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,581,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,590,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,591,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,593,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,594,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,596,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,610,"        setSubMatrix(in, 0, 0);",0.0,0,-1,0
org/apache/commons/math3/linear/Array2DRowFieldMatrix,13,611,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,53,    protected AbstractFieldMatrix() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,54,        field = null;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,55,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,61,    protected AbstractFieldMatrix(final Field<T> field) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,62,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,63,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,77,        throws NotStrictlyPositiveException {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,78,        if (rowDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,79,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,82,        if (columnDimension <= 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,83,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,86,        this.field = field;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,87,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,100,        if (d == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,101,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,103,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,104,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,106,        if (d[0].length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,107,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,109,        return d[0][0].getField();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,122,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,123,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,125,        return d[0].getField();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,143,        if (columns < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,144,"            T[] dummyRow = (T[]) Array.newInstance(field.getRuntimeClass(), 0);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,145,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,147,        T[][] array =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,149,        for (int i = 0; i < array.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,150,"            Arrays.fill(array[i], field.getZero());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,152,        return array;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,167,"        T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,168,"        Arrays.fill(array, field.getZero());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,169,        return array;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,174,        return field;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,189,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,191,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,192,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,193,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,194,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,195,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,196,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,200,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,207,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,209,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,210,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,211,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,212,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,213,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,214,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,218,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,224,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,225,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,226,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,227,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,228,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,229,"                out.setEntry(row, col, getEntry(row, col).add(d));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,233,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,238,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,239,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,240,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,241,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,242,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,243,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,247,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,254,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,256,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,257,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,258,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,259,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,260,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,261,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,262,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,263,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,264,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,266,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,270,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,276,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,282,        if (p < 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,283,            throw new NotPositiveException(p);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,286,        if (!isSquare()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,287,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,290,        if (p == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,291,"            return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,294,        if (p == 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,295,            return this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,298,        final int power = p - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,307,        final char[] binaryRepresentation = Integer.toBinaryString(power),0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,309,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,311,        for (int i = 0; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,312,            if (binaryRepresentation[i] == '1') {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,313,                final int pos = binaryRepresentation.length - i - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,314,                nonZeroPositions.add(pos);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,318,        ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,321,"        results.add(0, this.copy());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,323,        for (int i = 1; i < binaryRepresentation.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,324,            final FieldMatrix<T> s = results.get(i - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,325,            final FieldMatrix<T> r = s.multiply(s);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,326,"            results.add(i, r);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,329,        FieldMatrix<T> result = this.copy();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,331,        for (Integer i : nonZeroPositions) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,332,            result = result.multiply(results.get(i));,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,333,        },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,335,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,340,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,342,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,343,            final T[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,344,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,345,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,349,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,356,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,358,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,360,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,361,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,362,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,366,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,376,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,379,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,381,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,391,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,402,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,403,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,404,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,405,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,406,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,413,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,438,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,445,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,446,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,448,"            throw new MatrixDimensionMismatchException(destination.length,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,455,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,456,            final T[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,457,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,458,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,462,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,469,        if (subMatrix == null) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,470,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,472,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,473,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,474,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,477,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,478,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,479,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,482,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,483,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,484,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,488,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,489,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,490,        checkRowIndex(nRows + row - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,491,        checkColumnIndex(nCols + column - 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,493,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,494,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,495,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,498,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,502,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,503,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,504,"        final FieldMatrix<T> out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,505,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,506,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,509,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,516,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,517,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,518,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,520,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,524,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,525,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,528,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,534,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,535,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,536,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,537,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,538,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,541,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,548,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,549,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,550,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,552,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,556,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,557,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,560,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,565,"        return new ArrayFieldVector<T>(field, getRow(row), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,571,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,572,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,573,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,574,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,577,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,578,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,581,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,586,"        return new ArrayFieldVector<T>(field, getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,593,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,594,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,595,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,596,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,599,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,600,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,603,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,607,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,608,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,609,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,610,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,611,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,614,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,621,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,622,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,623,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,624,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,626,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,627,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,630,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,634,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,635,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,636,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,637,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,638,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,641,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,648,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,649,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,650,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,651,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,653,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,654,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,656,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,672,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,673,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,674,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,675,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,683,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,688,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,699,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,700,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,701,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,702,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,704,        T trace = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,705,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,706,"            trace = trace.add(getEntry(i, i));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,708,        return trace;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,714,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,715,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,716,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,717,"            throw new DimensionMismatchException(v.length, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,720,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,721,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,722,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,723,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,724,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,726,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,729,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,736,"            return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,737,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,738,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,739,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,740,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,741,"                throw new DimensionMismatchException(v.getDimension(), nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,744,"            final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,745,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,746,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,747,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,748,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,750,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,753,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,760,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,761,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,762,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,763,"            throw new DimensionMismatchException(v.length, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,766,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,767,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,768,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,769,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,770,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,772,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,775,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,782,"            return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,783,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,784,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,785,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,786,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,787,"                throw new DimensionMismatchException(v.getDimension(), nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,790,"            final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,791,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,792,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,793,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,794,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,796,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,799,"            return new ArrayFieldVector<T>(field, out, false);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,805,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,806,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,807,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,808,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,809,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,810,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,811,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,812,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,815,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,820,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,821,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,822,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,823,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,824,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,825,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,828,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,836,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,837,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,839,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,840,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,841,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,842,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,843,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,846,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,854,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,855,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,857,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,858,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,859,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,862,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,867,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,868,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,869,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,870,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,871,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,872,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,873,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,874,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,877,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,882,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,883,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,884,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,885,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,886,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,887,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,890,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,898,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,899,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,901,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,902,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,903,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,904,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,905,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,908,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,916,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,917,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,919,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,920,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,921,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,924,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,929,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,934,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,942,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,950,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,959,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,960,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,961,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,962,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,963,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,964,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,966,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,967,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,968,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,970,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,971,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,972,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,973,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,975,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,977,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,980,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,981,        return res.toString();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,994,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,995,            return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,997,        if (object instanceof FieldMatrix<?> == false) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,998,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1000,        FieldMatrix<?> m = (FieldMatrix<?>) object;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1001,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1002,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1003,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1004,            return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1006,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1007,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1008,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1009,                    return false;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1013,        return true;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1023,        int ret = 322562;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1024,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1025,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1026,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1027,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1028,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1029,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1030,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1033,        return ret;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1043,        if (row < 0 || row >= getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1044,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1047,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1057,        if (column < 0 || column >= getColumnDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1058,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1061,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1078,        checkRowIndex(startRow);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1079,        checkRowIndex(endRow);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1080,        if (endRow < startRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1081,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1085,        checkColumnIndex(startColumn);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1086,        checkColumnIndex(endColumn);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1087,        if (endColumn < startColumn) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1088,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1091,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1105,        if (selectedRows == null ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1107,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1109,        if (selectedRows.length == 0 ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1111,            throw new NoDataException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1114,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1115,            checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1117,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1118,            checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1120,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1131,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1133,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1136,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1147,        if ((getRowDimension() != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1149,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1152,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1163,        if (getColumnDimension() != m.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1164,"            throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,1166,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,102,"        super(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,103,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,104,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,107,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,108,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,111,"        blocks = createBlocksLayout(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,112,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,129,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,130,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,152,"        super(extractField(blockData), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,153,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,154,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,157,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,158,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,160,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,162,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,165,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,168,        int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,169,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,170,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,171,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,172,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,173,"                    throw new DimensionMismatchException(blockData[index].length,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,176,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,177,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,181,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,210,        final int rows         = rawData.length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,211,        final int columns      = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,212,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,213,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,216,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,217,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,218,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,219,"                throw new DimensionMismatchException(columns, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,224,        final Field<T> field = extractField(rawData);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,225,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,226,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,227,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,228,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,229,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,230,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,231,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,232,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,233,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,234,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,237,"                final T[] block = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,238,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,241,                int index = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,242,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,243,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,244,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,247,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,251,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,271,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,272,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,274,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,275,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,276,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,277,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,278,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,279,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,280,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,281,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,282,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,283,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,284,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,285,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,289,        return blocks;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,297,"        return new BlockFieldMatrix<T>(getField(), rowDimension,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,306,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,309,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,310,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,313,        return copied;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,321,            return add((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,322,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,325,            checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,327,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,330,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,331,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,332,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,335,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,336,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,337,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,338,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,339,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,340,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,341,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,342,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,343,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,344,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,345,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,350,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,355,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,371,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,373,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,376,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,377,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,378,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,379,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,380,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,381,                outBlock[k] = tBlock[k].add(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,385,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,393,            return subtract((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,394,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,397,            checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,399,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,402,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,403,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,404,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,407,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,408,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,409,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,410,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,411,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,412,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,413,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,414,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,415,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,416,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,417,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,422,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,427,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,441,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,443,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,446,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,447,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,448,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,449,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,450,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,451,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,455,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,461,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,464,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,465,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,466,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,467,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,468,                outBlock[k] = tBlock[k].add(d);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,472,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,479,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,482,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,483,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,484,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,485,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,486,                outBlock[k] = tBlock[k].multiply(d);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,490,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,498,            return multiply((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,499,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,502,            checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,504,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,505,            final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,508,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,509,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,511,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,512,"                final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,514,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,516,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,517,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,520,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,523,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,524,                        final int kWidth      = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,525,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,526,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,527,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,528,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,529,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,530,                            final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,531,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,532,                                T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,533,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,534,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,535,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,536,                                    ++r;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,538,                                outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,539,                                ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,545,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,550,            return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,565,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,567,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,568,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,571,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,572,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,574,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,575,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,577,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,578,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,579,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,580,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,581,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,584,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,587,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,588,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,589,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,590,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,591,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,592,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,593,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,594,                        final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,595,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,596,                            T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,597,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,598,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,599,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,600,                                sum = sum.,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,605,                                l += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,606,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,608,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,609,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,610,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,612,                            outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,613,                            ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,619,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,623,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,630,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,631,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,633,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,634,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,635,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,636,            int regularPos   = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,637,            int lastPos      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,638,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,639,                final T[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,640,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,641,                int dataPos    = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,642,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,643,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,644,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,646,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,647,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,648,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,652,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,662,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,665,        final BlockFieldMatrix<T> out =,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,669,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,670,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,671,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,672,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,675,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,676,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,677,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,678,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,679,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,680,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,683,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,684,                final T[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,685,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,686,                final int      width    = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,688,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,689,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,690,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,692,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,694,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,695,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,699,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,703,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,707,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,711,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,713,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,717,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,724,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,726,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,727,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,731,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,735,                    } else {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,737,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,743,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,745,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,748,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,771,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,772,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,773,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,774,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,775,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,776,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,777,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,779,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,788,        MathUtils.checkNotNull(subMatrix);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,789,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,790,        if (refLength == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,791,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,793,        final int endRow    = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,794,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,795,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,796,        for (final T[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,797,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,798,"                throw new DimensionMismatchException(refLength, subRow.length);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,803,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,804,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,805,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,806,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,809,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,810,            final int iHeight  = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,811,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,812,"            final int iStart   = FastMath.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,813,"            final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,815,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,816,                final int jWidth      = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,817,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,818,"                final int jStart      = FastMath.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,819,"                final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,820,                final int jLength     = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,823,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,824,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,825,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,832,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,838,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,839,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,842,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,843,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,844,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,845,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,846,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,847,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,848,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,849,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,850,            final int available  = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,851,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,852,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,853,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,854,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,855,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,857,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,858,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,862,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,870,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,873,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,871,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,872,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,874,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,889,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,890,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,891,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,893,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,899,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,900,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,901,        int mBlockIndex  = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,902,        int mIndex       = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,903,        T[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,904,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,905,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,906,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,907,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,908,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,909,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,910,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,911,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,912,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,914,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,915,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,918,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,924,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,925,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,928,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,929,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,930,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,931,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,932,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,933,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,934,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,935,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,936,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,937,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,938,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,939,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,940,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,942,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,946,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,954,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,957,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,955,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,956,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,958,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,973,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,974,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,975,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,977,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,983,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,984,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,985,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,986,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,987,        int mIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,988,        T[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,989,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,990,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,991,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,992,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,993,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,994,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,995,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,997,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1000,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1006,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1007,"        final T[] outData = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1010,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1011,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1012,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1013,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1014,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1015,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1016,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1017,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1020,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1028,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1031,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1029,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1030,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1032,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1038,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1039,"        final T[] outData = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1042,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1043,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1044,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1045,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1046,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1047,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1048,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1049,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1050,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1054,"        return new ArrayFieldVector<T>(getField(), outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1062,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1065,        },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1063,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1064,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1066,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1071,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1072,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1075,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1076,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1077,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1078,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1079,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1080,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1081,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1082,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1085,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1092,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1093,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1094,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1095,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1099,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1100,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1101,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1102,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1103,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1104,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1105,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1106,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1108,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1113,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1114,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1117,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1118,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1119,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1120,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1121,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1122,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1123,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1124,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1125,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1129,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1136,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1137,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1138,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1139,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1143,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1144,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1145,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1146,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1147,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1148,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1149,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1150,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1151,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1154,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1160,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1161,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1163,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1164,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1165,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1168,        return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1175,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1176,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1178,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1179,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1180,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1183,        blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1184,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1190,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1191,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1193,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1194,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1195,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1197,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1199,        blockIJ[k] = blockIJ[k].add(increment);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1200,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1206,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1207,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1209,        final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1210,        final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1211,        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1213,        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1215,        blockIJ[k] = blockIJ[k].multiply(factor);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1216,    },0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1221,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1222,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1223,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1226,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1227,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1228,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1231,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1232,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1233,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1234,"                final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1235,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1236,"                final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1237,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1238,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1239,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1240,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1241,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1242,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1243,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1244,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1249,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1254,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1260,        return rows;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1266,        return columns;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1272,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1273,"            throw new DimensionMismatchException(v.length, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1275,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1276,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1279,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1280,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1281,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1282,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1283,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1284,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1285,"                final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1286,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1287,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1288,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1289,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1290,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1291,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1296,                        k += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1297,                        q += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1299,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1300,                        sum = sum.add(block[k++].multiply(v[q++]));,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1302,                    out[p] = out[p].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1307,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1314,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1315,"            throw new DimensionMismatchException(v.length, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1317,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1318,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1321,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1322,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1323,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1324,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1325,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1326,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1327,"            final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1328,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1329,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1330,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1331,"                final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1332,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1333,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1334,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1335,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1336,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1337,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1342,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1343,                        p += 4;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1345,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1346,                        sum = sum.add(block[k].multiply(v[p++]));,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1347,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1349,                    out[q] = out[q].add(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1354,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1360,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1361,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1362,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1363,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1364,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1365,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1366,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1367,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1368,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1369,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1370,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1371,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1372,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1373,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1378,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1384,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1385,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1386,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1387,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1388,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1389,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1390,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1391,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1392,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1393,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1394,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1395,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1396,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1397,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1402,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1411,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1412,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1413,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1414,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1415,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1416,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1417,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1418,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1419,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1420,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1421,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1422,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1423,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1424,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1425,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1426,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1427,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1432,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1441,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1442,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1443,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1444,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1445,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1446,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1447,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1448,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1449,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1450,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1451,"                    final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1452,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1453,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1454,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1455,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1456,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1457,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1462,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1468,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1469,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1470,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1471,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1472,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1473,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1474,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1475,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1476,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1477,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1478,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1479,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1480,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1481,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1484,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1487,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1493,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1494,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1495,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1496,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1497,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1498,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1499,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1500,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1501,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1502,                int k = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1503,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1504,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1505,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1506,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1509,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1512,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1521,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1522,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1523,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1524,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1525,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1526,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1527,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1528,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1529,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1530,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1531,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1532,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1533,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1534,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1535,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1536,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1537,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1542,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1551,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1552,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1553,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1554,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1555,"            final int pStart = FastMath.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1556,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1557,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1558,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1559,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1560,"                final int qStart = FastMath.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1561,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1562,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1563,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1564,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1565,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1566,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1567,                        ++k;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1572,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1581,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/BlockFieldMatrix,13,1590,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,90,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,92,    },0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,151,        return NumberFormat.getAvailableLocales();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,159,        return prefix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,167,        return suffix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,175,        return rowPrefix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,183,        return rowSuffix;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,191,        return rowSeparator;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,199,        return columnSeparator;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,234,"        return format(m, new StringBuffer(), new FieldPosition(0)).toString();",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,248,        pos.setBeginIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,249,        pos.setEndIndex(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,252,        toAppendTo.append(prefix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,255,        final int rows = matrix.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,256,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,257,            toAppendTo.append(rowPrefix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,258,            for (int j = 0; j < matrix.getColumnDimension(); ++j) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,259,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,260,                    toAppendTo.append(columnSeparator);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,262,"                CompositeFormat.formatDouble(matrix.getEntry(i, j), format, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,264,            toAppendTo.append(rowSuffix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,265,            if (i < rows - 1) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,266,                toAppendTo.append(rowSeparator);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,271,        toAppendTo.append(suffix);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,273,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,285,        final ParsePosition parsePosition = new ParsePosition(0);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,286,"        final RealMatrix result = parse(source, parsePosition);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,287,        if (parsePosition.getIndex() == 0) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,288,"            throw new MathParseException(source,",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,292,        return result;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,303,        int initialIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,305,        final String trimmedPrefix = prefix.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,306,        final String trimmedSuffix = suffix.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,307,        final String trimmedRowPrefix = rowPrefix.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,308,        final String trimmedRowSuffix = rowSuffix.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,309,        final String trimmedColumnSeparator = columnSeparator.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,310,        final String trimmedRowSeparator = rowSeparator.trim();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,313,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,314,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,315,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,319,        List<List<Number>> matrix = new ArrayList<List<Number>>();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,320,        List<Number> rowComponents = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,321,        for (boolean loop = true; loop;){,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,323,            if (!rowComponents.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,324,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,325,"                if (!CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,326,                    if (trimmedRowSuffix.length() != 0 &&,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,328,                        return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,330,"                        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,331,"                        if (CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,332,                            matrix.add(rowComponents);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,333,                            rowComponents = new ArrayList<Number>();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,334,                            continue;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,336,                            loop = false;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,341,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,342,                if (trimmedRowPrefix.length() != 0 &&,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,344,                    return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,348,            if (loop) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,349,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,350,"                Number component = CompositeFormat.parseNumber(source, format, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,351,                if (component != null) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,352,                    rowComponents.add(component);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,354,                    if (rowComponents.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,355,                        loop = false;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,359,                        pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,360,                        return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,363,            },0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,367,        if (!rowComponents.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,368,            matrix.add(rowComponents);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,372,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,373,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {",0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,374,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,378,        if (matrix.isEmpty()) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,379,            pos.setIndex(initialIndex);,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,380,            return null;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,384,        double[][] data = new double[matrix.size()][];,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,385,        int row = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,386,        for (List<Number> rowList : matrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,387,            data[row] = new double[rowList.size()];,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,388,            for (int i = 0; i < rowList.size(); i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,389,                data[row][i] = rowList.get(i).doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,391,            row++;,0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,392,        },0.0,0,-1,0
org/apache/commons/math3/linear/RealMatrixFormat,13,393,        return MatrixUtils.createRealMatrix(data);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,289,                sum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,290,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,294,                sum += value * value;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,295,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,299,                return FastMath.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,675,            super(BigFraction.ZERO);,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,676,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,682,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,683,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,688,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,689,        },0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,697,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math3/linear/MatrixUtils,13,670,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,13,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,13,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,13,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,13,49,    },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,381,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,386,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,242,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,257,                this.endRow = endRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,258,                columnSum   = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,259,                maxColSum   = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,260,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,264,                columnSum += FastMath.abs(value);,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,265,                if (row == endRow) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,266,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,267,                    columnSum = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,269,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,273,                return maxColSum;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1271,                return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1273,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1277,                        return i.hasNext();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1282,                        e.setIndex(i.next().getIndex());,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1283,                        return e;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,1293,                        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,782,        return new Iterator<Entry>() {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,785,            private int i = 0;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,788,            private Entry e = new Entry();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,792,                return i < dim;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,797,                if (i < dim) {,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,798,                    e.setIndex(i++);,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,799,                    return e;,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,801,                    throw new NoSuchElementException();,0.0,0,-1,0
org/apache/commons/math3/linear/RealVector,13,811,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,44,    public DiagonalMatrix() {},0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,56,"        super(dimension, dimension);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,57,        data = new double[dimension];,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,58,    },0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,83,"    public DiagonalMatrix(final double[] d, final boolean copyArray) {",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,84,        data = copyArray ? d.clone() : d;,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,85,    },0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,97,        if (rowDimension != columnDimension) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,98,"            throw new DimensionMismatchException(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,101,        return new DiagonalMatrix(rowDimension);,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,121,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,123,        final int dim = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,124,        final double[] outData = new double[dim];,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,125,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,126,            outData[i] = data[i] + m.data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,129,"        return new DiagonalMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,142,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,144,        final int dim = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,145,        final double[] outData = new double[dim];,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,146,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,147,            outData[i] = data[i] - m.data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,150,"        return new DiagonalMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,163,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,165,        final int dim = getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,166,        final double[] outData = new double[dim];,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,167,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,168,            outData[i] = data[i] * m.data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,171,"        return new DiagonalMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,184,        if (m instanceof DiagonalMatrix) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,185,            return multiply((DiagonalMatrix) m);,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,187,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,188,            final int nRows = m.getRowDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,189,            final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,190,            final double[][] product = new double[nRows][nCols];,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,191,            for (int r = 0; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,192,                for (int c = 0; c < nCols; c++) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,193,"                    product[r][c] = data[r] * m.getEntry(r, c);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,196,"            return new Array2DRowRealMatrix(product, false);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,206,        for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,207,            out[i][i] = data[i];,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,210,        return out;,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,219,        return data;,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,230,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,248,        if (row != column) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,249,            throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,251,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,252,        data[row] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,253,    },0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,264,        if (row != column) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,265,            throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,267,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,268,        data[row] += increment;,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,269,    },0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,280,        if (row != column) {,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,281,            throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,283,"        MatrixUtils.checkMatrixIndex(this, row, column);",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,284,        data[row] *= factor;,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,285,    },0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,303,"        return multiply(new DiagonalMatrix(v, false)).getDataRef();",0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,310,        return operate(v);,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,317,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,324,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,333,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,342,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,349,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,356,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,365,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/DiagonalMatrix,13,374,        throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,413,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,426,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,427,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,428,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,433,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,434,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,356,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,369,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,370,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,371,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,376,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractRealMatrix,13,377,            },0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,675,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,679,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math3/linear/AbstractFieldMatrix,13,680,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3744,    private static class ExpFracTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3773,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3777,    private static class lnMant {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3793,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,353,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,365,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,366,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,368,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,369,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,370,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,379,        return Math.sqrt(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,387,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,388,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,396,      if (x > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,397,          if (x >= LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,399,              final double t = exp(0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,400,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,402,              return 0.5 * exp(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,404,      } else if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,405,          if (x <= -LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,407,              final double t = exp(-0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,408,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,410,              return 0.5 * exp(-x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,414,      final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,415,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,416,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,418,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,420,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,421,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,423,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,424,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,425,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,428,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,429,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,430,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,431,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,434,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,436,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,439,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,440,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,441,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,442,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,443,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,444,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,446,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,447,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,448,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,456,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,457,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,458,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,466,      if (x > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,467,          if (x >= LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,469,              final double t = exp(0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,470,              return (0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,472,              return 0.5 * exp(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,474,      } else if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,475,          if (x <= -LOG_MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,477,              final double t = exp(-0.5 * x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,478,              return (-0.5 * t) * t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,480,              return -0.5 * exp(-x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,484,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,485,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,488,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,489,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,490,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,495,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,496,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,497,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,499,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,500,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,502,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,503,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,504,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,507,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,508,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,509,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,510,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,513,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,515,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,517,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,518,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,521,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,522,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,523,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,524,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,525,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,526,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,528,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,529,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,530,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,532,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,533,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,535,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,536,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,539,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,540,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,541,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,542,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,543,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,544,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,545,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,547,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,548,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,549,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,551,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,554,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,555,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,558,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,559,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,560,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,561,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,562,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,563,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,565,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,566,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,569,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,570,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,573,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,581,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,583,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,584,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,593,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,594,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,597,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,598,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,601,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,602,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,605,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,606,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,607,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,611,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,612,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,614,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,616,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,617,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,620,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,621,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,622,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,623,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,624,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,627,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,628,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,629,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,630,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,631,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,633,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,634,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,635,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,638,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,639,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,640,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,641,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,644,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,647,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,649,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,651,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,652,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,654,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,656,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,658,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,659,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,662,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,663,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,666,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,667,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,668,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,669,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,670,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,672,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,673,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,674,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,677,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,678,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,679,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,680,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,683,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,686,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,688,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,690,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,693,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,694,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,697,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,705,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,713,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,714,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,715,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,716,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,720,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,721,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,723,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,724,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,725,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,726,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,727,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,728,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,729,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,731,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,735,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,743,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,744,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,745,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,746,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,750,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,751,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,753,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,754,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,755,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,756,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,757,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,758,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,759,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,761,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,765,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,774,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,783,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,807,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,831,"        return exp(x, 0.0, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,850,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,851,            intVal = (int) -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,853,            if (intVal > 746) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,854,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,855,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,856,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,858,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,861,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,864,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,865,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,866,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,868,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,871,            if (intVal == 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,874,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,875,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,876,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,878,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,881,            intVal++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,886,            intVal = -intVal;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,888,            intVal = (int) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,890,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,891,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,892,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,893,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,895,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,923,        double z = 0.04168701738764507;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,924,        z = z * epsilon + 0.1666666505023083;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,925,        z = z * epsilon + 0.5000000000042687;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,926,        z = z * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,927,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,934,        double tempA = intPartA * fracPartA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,941,        final double tempC = tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,943,        if (extra != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,944,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,946,            result = tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,949,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,951,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,952,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,955,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,963,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,972,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,973,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,976,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,979,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,980,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,981,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,982,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,984,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,985,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,986,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,987,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,994,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,996,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,997,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,998,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1002,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1003,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1004,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1006,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1007,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1008,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1010,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1011,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1012,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1014,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1019,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1020,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1021,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1022,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1023,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1024,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1026,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1027,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1028,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1029,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1031,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1032,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1033,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1034,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1037,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1039,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1040,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1043,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1044,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1045,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1047,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1048,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1049,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1053,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1054,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1055,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1057,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1059,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1060,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1062,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1064,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1065,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1067,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1069,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1070,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1072,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1074,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1075,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1076,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1077,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1078,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1079,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1080,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1082,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1083,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1084,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1086,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1097,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1098,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1101,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1102,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1105,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1106,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1107,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1110,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1120,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1130,        if (x==0) { // Handle special case of +0/-0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1131,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1133,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1137,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1139,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1142,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1147,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1148,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1149,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1152,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1156,        int exp = (int)(bits >> 52)-1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1160,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1162,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1163,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1166,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1170,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1171,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1172,                --exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1173,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1178,        if (exp == -1 || exp == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1184,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1185,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1186,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1187,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1188,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1189,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1190,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1193,                double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1194,                double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1198,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1199,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1201,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1202,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1203,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1207,                    aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1208,                    ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1210,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1211,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1212,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1216,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1217,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1219,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1220,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1221,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1223,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1241,        double lnza = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1242,        double lnzb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1244,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1246,            double tmp = epsilon * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1247,            double aa = epsilon + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1248,            double ab = epsilon - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1249,            double xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1250,            double xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1253,            final double numer = bits & 0x3ffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1255,            aa = numer - xa*denom - xb * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1256,            xb += aa / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1260,            double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1261,            double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1265,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1266,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1268,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1269,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1270,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1274,                aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1275,                ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1277,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1278,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1279,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1283,            aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1284,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1292,            lnza = aa + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1293,            lnzb = -(lnza - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1294,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1297,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1298,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1299,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1300,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1301,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1302,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1303,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1320,        double a = LN_2_A*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1321,        double b = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1322,        double c = a+lnm[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1323,        double d = -(c-a-lnm[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1324,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1325,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1327,        c = a + lnza;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1328,        d = -(c - a - lnza);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1329,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1330,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1332,        c = a + LN_2_B*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1333,        d = -(c - a - LN_2_B*exp);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1334,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1335,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1337,        c = a + lnm[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1338,        d = -(c - a - lnm[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1339,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1340,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1342,        c = a + lnzb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1343,        d = -(c - a - lnzb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1344,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1345,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1347,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1348,            hiPrec[0] = a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1349,            hiPrec[1] = b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1352,        return a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1362,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1363,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1366,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1367,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1370,        if (x > 1e-6 ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1372,            final double xpa = 1 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1373,            final double xpb = -(xpa - 1 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1375,            final double[] hiPrec = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1376,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1377,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1378,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1383,            final double fx1 = xpb / xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1384,            final double epsilon = 0.5 * fx1 + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1385,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1388,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1389,            return y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1398,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1400,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1401,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1402,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1405,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1406,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1407,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1409,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1410,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1412,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1432,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1443,        final double lns[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1445,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1446,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1449,        if (x != x) { // X is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1450,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1454,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1455,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1456,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1458,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1460,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1461,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1464,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1465,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1469,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1470,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1472,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1473,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1476,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1479,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1480,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1481,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1483,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1484,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1486,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1490,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1491,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1492,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1495,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1496,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1498,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1502,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1503,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1504,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1507,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1508,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1509,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1510,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1513,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1516,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1517,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1518,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1519,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1522,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1526,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1528,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1529,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1532,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1533,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1535,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1540,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1542,            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1543,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1546,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1548,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1550,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1557,        if (y < 8e298 && y > -8e298) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1558,            double tmp1 = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1559,            ya = y + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1560,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1561,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1562,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1563,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1564,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1565,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1569,"        final double lores = log(x, lns);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1571,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1574,        double lna = lns[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1575,        double lnb = lns[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1578,        double tmp1 = lna * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1579,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1580,        lnb += lna - tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1581,        lna = tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1584,        final double aa = lna * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1587,        lna = aa+ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1588,        lnb = -(lna - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1590,        double z = 1.0 / 120.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1591,        z = z * lnb + (1.0 / 24.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1592,        z = z * lnb + (1.0 / 6.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1593,        z = z * lnb + 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1594,        z = z * lnb + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1595,        z = z * lnb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1597,"        final double result = exp(lna, z, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1599,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1613,        if (e == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1614,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1615,        } else if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1616,            e = -e;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1617,            d = 1.0 / d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1622,        final int splitFactor = 0x8000001;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1623,        final double cd       = splitFactor * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1624,        final double d1High   = cd - (cd - d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1625,        final double d1Low    = d - d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1628,        double resultHigh = 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1629,        double resultLow  = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1632,        double d2p     = d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1633,        double d2pHigh = d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1634,        double d2pLow  = d1Low;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1636,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1638,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1641,                final double tmpHigh = resultHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1642,                final double cRH     = splitFactor * resultHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1643,                final double rHH     = cRH - (cRH - resultHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1644,                final double rHL     = resultHigh - rHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1645,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1646,                resultHigh = tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1647,                resultLow  = resultLow * d2p + tmpLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1652,            final double tmpHigh = d2pHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1653,            final double cD2pH   = splitFactor * d2pHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1654,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1655,            final double d2pHL   = d2pHigh - d2pHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1656,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1657,            final double cTmpH   = splitFactor * tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1658,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1659,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1660,            d2p     = d2pHigh + d2pLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1662,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1664,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1666,        return resultHigh + resultLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1678,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1680,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1681,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1682,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1683,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1686,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1688,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1698,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1700,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1701,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1702,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1703,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1704,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1706,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1717,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1718,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1721,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1722,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1723,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1724,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1727,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1728,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1729,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1730,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1733,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1734,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1735,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1736,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1762,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1763,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1765,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1766,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1767,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1768,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1769,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1771,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1772,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1773,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1774,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1775,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1777,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1792,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1819,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1820,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1822,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1823,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1824,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1825,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1828,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1830,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1841,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1842,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1844,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1845,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1846,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1848,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1861,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1862,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1865,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1866,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1867,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1868,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1871,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1872,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1873,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1874,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1877,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1878,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1879,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1880,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1905,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1906,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1909,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1910,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1911,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1912,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1913,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1915,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1916,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1917,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1918,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1919,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1921,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1922,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1924,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1925,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1929,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1931,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1932,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1933,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1934,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1935,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1937,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1938,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1939,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1940,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1941,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1943,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1944,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1946,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1947,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1949,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1951,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1952,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1966,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1969,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1970,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1971,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1973,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1974,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1975,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1978,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1979,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1980,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1982,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1985,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1986,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1987,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1990,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,1993,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2010,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2011,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2014,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2015,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2018,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2019,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2025,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2026,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2028,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2029,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2030,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2031,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2032,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2034,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2035,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2036,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2040,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2041,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2043,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2044,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2046,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2047,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2048,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2049,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2051,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2052,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2054,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2055,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2056,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2059,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2061,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2064,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2065,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2067,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2068,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2070,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2073,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2075,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2079,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2080,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2081,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2082,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2083,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2086,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2088,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2089,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2090,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2091,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2093,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2095,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2099,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2100,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2102,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2103,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2104,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2106,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2118,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2121,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2122,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2123,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2126,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2127,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2129,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2130,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2132,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2133,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2134,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2135,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2137,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2138,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2140,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2141,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2142,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2145,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2147,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2150,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2151,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2153,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2154,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2156,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2159,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2161,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2165,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2166,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2167,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2168,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2169,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2172,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2174,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2175,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2176,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2177,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2179,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2181,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2185,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2186,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2187,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2188,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2189,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2190,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2191,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2194,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2196,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2197,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2198,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2199,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2201,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2203,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2207,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2208,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2210,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2211,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2214,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2215,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2216,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2217,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2226,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2227,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2229,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2232,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2233,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2234,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2235,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2239,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2240,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2241,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2242,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2244,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2247,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2248,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2252,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2256,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2257,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2258,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2259,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2260,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2261,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2262,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2263,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2264,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2265,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2268,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2269,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2272,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2274,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2276,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2278,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2280,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2282,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2293,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2296,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2297,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2298,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2301,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2302,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2306,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2307,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2311,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2312,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2313,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2314,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2315,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2316,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2317,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2318,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2319,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2320,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2326,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2328,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2330,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2332,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2334,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2336,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2347,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2348,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2351,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2352,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2353,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2354,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2358,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2359,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2360,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2361,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2363,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2366,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2367,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2371,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2372,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2376,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2377,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2378,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2379,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2380,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2381,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2382,            final CodyWaite cw = new CodyWaite(xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2383,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2384,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2385,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2388,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2390,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2391,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2393,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2394,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2395,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2397,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2398,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2399,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2400,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2404,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2405,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2407,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2410,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2411,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2414,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2423,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2433,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2437,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2440,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2442,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2443,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2444,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2447,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2448,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2452,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2453,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2455,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2460,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2462,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2463,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2464,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2467,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2468,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2469,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2470,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2471,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2474,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2479,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2480,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2481,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2482,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2483,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2484,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2485,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2486,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2487,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2488,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2490,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2491,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2493,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2494,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2495,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2497,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2498,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2499,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2502,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2504,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2505,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2509,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2510,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2513,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2524,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2525,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2526,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2527,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2528,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2529,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2530,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2533,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2535,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2536,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2537,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2540,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2543,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2544,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2545,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2546,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2547,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2549,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2550,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2552,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2554,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2555,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2557,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2558,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2559,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2561,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2562,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2566,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2567,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2570,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2580,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2581,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2584,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2585,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2586,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2587,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2589,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2590,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2591,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2593,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2597,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2598,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2599,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2601,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2604,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2610,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2611,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2612,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2615,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2616,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2619,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2622,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2623,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2624,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2627,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2628,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2631,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2634,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2635,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2636,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2639,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2640,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2644,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2646,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2647,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2650,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2651,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2657,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2658,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2659,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2662,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2663,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2668,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2669,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2670,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2673,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2674,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2677,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2678,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2680,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2682,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2683,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2684,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2686,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2687,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2691,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2693,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2701,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2702,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2705,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2706,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2709,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2710,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2713,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2714,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2717,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2718,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2724,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2725,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2726,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2729,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2730,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2733,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2734,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2736,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2737,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2739,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2740,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2741,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2745,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2746,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2747,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2748,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2751,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2754,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2757,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2758,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2759,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2760,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2762,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2763,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2765,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2766,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2767,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2769,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2777,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2778,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2781,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2782,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2785,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2786,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2789,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2790,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2793,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2794,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2800,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2801,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2802,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2805,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2806,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2809,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2810,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2812,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2813,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2815,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2816,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2817,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2820,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2821,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2822,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2823,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2826,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2829,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2830,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2831,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2834,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2837,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2838,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2841,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2842,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2844,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2845,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2847,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2848,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2849,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2851,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2860,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2861,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2862,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2864,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2865,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2866,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2870,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2871,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2872,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2873,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2876,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2878,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2882,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2885,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2889,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2892,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2893,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2894,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2895,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2896,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2898,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2903,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2904,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2905,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2908,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2909,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2910,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2912,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2913,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2914,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2915,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2916,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2917,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2919,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2920,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2922,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2923,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2924,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2926,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2929,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2931,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2932,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2935,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2945,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2946,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2950,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2951,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2953,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2954,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2956,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2957,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2958,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2960,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2970,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2971,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2975,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2976,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2978,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2979,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2990,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,2999,        return (x < 0l) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3008,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3026,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3027,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3029,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3038,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3039,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3041,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3053,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3054,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3058,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3059,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3061,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3062,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3064,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3065,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3069,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3070,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3071,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3072,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3075,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3077,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3079,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3081,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3082,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3086,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3089,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3090,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3091,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3093,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3095,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3099,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3103,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3106,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3107,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3108,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3110,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3111,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3113,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3114,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3116,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3119,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3120,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3122,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3137,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3138,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3142,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3143,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3145,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3146,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3148,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3149,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3153,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3154,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3155,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3156,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3159,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3161,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3163,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3165,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3166,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3170,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3173,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3174,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3175,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3177,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3179,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3183,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3187,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3190,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3191,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3192,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3194,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3195,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3197,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3198,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3200,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3203,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3204,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3206,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3246,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3247,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3248,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3249,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3250,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3251,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3252,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3253,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3258,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3259,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3260,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3261,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3263,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3302,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3303,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3304,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3305,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3306,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3307,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3308,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3309,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3314,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3315,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3316,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3317,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3319,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3331,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3332,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3335,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3336,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3339,        y = (long) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3340,        if (x < 0 && y != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3341,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3344,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3345,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3348,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3358,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3359,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3362,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3363,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3364,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3367,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3369,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3370,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3373,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3381,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3382,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3384,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3385,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3386,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3388,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3390,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3391,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3395,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3396,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3404,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3412,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3421,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3430,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3439,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3440,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3442,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3443,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3446,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3447,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3451,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3452,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3453,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3455,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3464,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3465,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3467,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3468,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3471,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3472,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3476,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3477,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3478,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3480,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3489,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3498,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3507,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3508,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3510,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3511,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3514,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3515,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3519,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3520,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3521,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3523,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3533,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3536,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3540,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3546,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3566,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3567,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3568,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3569,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3572,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3573,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3574,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3576,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3577,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3579,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3583,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3586,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3587,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3590,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3593,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3621,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3633,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3634,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3635,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3636,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3638,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3650,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3651,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3652,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3653,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3655,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3668,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3681,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3690,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3691,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3692,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3693,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3694,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3695,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3696,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3697,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3698,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3699,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3700,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3701,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3702,    },0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,66,                     throw new MaxCountExceededException(max);,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,82,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,105,        return maximalCount;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,114,        return count;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,125,        return count < maximalCount;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,136,        for (int i = 0; i < value; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,137,            incrementCount();,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,139,    },0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,155,        if (++count > maximalCount) {,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,156,            maxCountCallback.trigger(maximalCount);,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,13,158,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,13,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,13,43,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,13,53,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,13,54,"        getContext().addMessage(specific, max, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,13,55,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,13,56,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,13,62,        return max;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,83,    private Precision() {},0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,96,"        if (equals(x, y, eps)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,97,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,98,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,99,            return -1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,101,        return 1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,122,"        if (equals(x, y, maxUlps)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,123,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,124,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,125,            return -1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,127,        return 1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,139,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,152,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,166,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,181,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,203,        int xInt = Float.floatToIntBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,204,        int yInt = Float.floatToIntBits(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,207,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,208,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,210,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,211,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,214,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,216,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,232,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,244,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,257,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,288,"        if (equals(x, y, 1)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,289,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,292,"        final double absoluteMax = FastMath.max(FastMath.abs(x), FastMath.abs(y));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,293,        final double relativeDifference = FastMath.abs((x - y) / absoluteMax);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,295,        return relativeDifference <= eps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,310,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,331,        long xInt = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,332,        long yInt = Double.doubleToLongBits(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,335,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,336,            xInt = SGN_MASK - xInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,338,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,339,            yInt = SGN_MASK - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,360,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,373,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,395,            return (new BigDecimal,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,399,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,400,            if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,401,                return x;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,403,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,418,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,436,"        final float sign = FastMath.copySign(1f, x);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,437,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,438,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,458,        switch (roundingMethod) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,460,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,461,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,463,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,465,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,467,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,468,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,470,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,471,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,473,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,475,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,477,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,478,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,479,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,480,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,482,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,484,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,487,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,488,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,489,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,490,            } else if (fraction < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,491,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,494,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,496,                    unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,498,                    unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,501,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,504,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,505,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,506,            if (fraction >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,507,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,509,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,511,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,514,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,515,                throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,519,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,520,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,522,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,533,        return unscaled;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,13,553,        return x + originalDelta - x;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,45,"    public Pair(K k, V v) {",0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,46,        key = k;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,47,        value = v;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,48,    },0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,56,"        this(entry.getKey(), entry.getValue());",0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,57,    },0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,65,        return key;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,74,        return value;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,84,        return key;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,94,        return value;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,106,        if (this == o) {,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,107,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,109,        if (!(o instanceof Pair)) {,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,110,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,112,"            Pair<?, ?> oP = (Pair<?, ?>) o;",0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,113,            return (key == null ?,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,129,        int result = key == null ? 0 : key.hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,131,        final int h = value == null ? 0 : value.hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,132,        result = 37 * result + h ^ (h >>> 16);,0.0,0,-1,0
org/apache/commons/math3/util/Pair,13,134,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3705,    private static class ExpIntTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3740,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3808,        CodyWaite(double xa) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3811,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3817,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3818,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3819,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3821,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3822,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3823,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3824,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3826,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3827,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3828,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3829,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3831,                if (remA > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3832,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3838,                --k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3839,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3841,            this.finalK = k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3842,            this.finalRemA = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3843,            this.finalRemB = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3844,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3850,            return finalK;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3856,            return finalRemA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,13,3862,            return finalRemB;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,34,    private CompositeFormat() {},0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,68,"        parseNextCharacter(source, pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,69,        pos.setIndex(pos.getIndex() - 1);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,70,    },0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,81,         int index = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,82,         final int n = source.length();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,83,         char ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,85,         if (index < n) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,88,                 c = source.charAt(index++);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,89,             } while (Character.isWhitespace(c) && index < n);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,90,             pos.setIndex(index);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,92,             if (index < n) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,93,                 ret = c;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,97,         return ret;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,111,        Number ret = null;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,113,        StringBuilder sb = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,114,        sb.append('(');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,115,        sb.append(value);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,116,        sb.append(')');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,118,        final int n = sb.length();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,119,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,120,        final int endIndex = startIndex + n;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,121,        if (endIndex < source.length()) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,123,                ret = Double.valueOf(value);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,124,                pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,128,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,143,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,144,"        Number number = format.parse(source, pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,145,        final int endIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,148,        if (startIndex == endIndex) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,150,            final double[] special = {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,153,            for (int i = 0; i < special.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,154,"                number = parseNumber(source, special[i], pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,155,                if (number != null) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,156,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,161,        return number;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,175,        final int startIndex = pos.getIndex();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,176,        final int endIndex = startIndex + expected.length();,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,177,        if ((startIndex >= source.length()) ||,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,181,            pos.setIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,182,            pos.setErrorIndex(startIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,183,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,187,        pos.setIndex(endIndex);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,188,        return true;,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,211,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,212,            toAppendTo.append('(');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,213,            toAppendTo.append(value);,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,214,            toAppendTo.append(')');,0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,216,"            format.format(value, toAppendTo, pos);",0.0,0,-1,0
org/apache/commons/math3/util/CompositeFormat,13,218,        return toAppendTo;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,47,    private MathUtils() {},0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,57,        return new Double(value).hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,68,        return Arrays.hashCode(value);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,113,        final double p = FastMath.abs(period);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,129,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,131,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,132,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,134,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,136,            return (byte) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,152,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,154,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,155,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,157,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,159,            return (short) -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,175,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,177,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,178,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,180,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,182,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,198,        if ((magnitude >= 0 && sign >= 0) ||,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,200,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,201,        } else if (sign >= 0 &&,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,203,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,205,            return -magnitude; // Flip sign.,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,217,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,218,            throw new NotFiniteNumberException(x);,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,220,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,231,        for (int i = 0; i < val.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,232,            final double x = val[i];,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,233,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,234,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,237,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,251,        if (o == null) {,0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,252,"            throw new NullArgumentException(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,254,    },0.0,0,-1,0
org/apache/commons/math3/util/MathUtils,13,265,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,13,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,13,41,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,13,53,"        super(specific, wrong, args);",0.0,0,-1,0
org/apache/commons/math3/exception/NotFiniteNumberException,13,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,13,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,13,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,13,48,                                Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,13,49,"        getContext().addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,13,50,    },0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,13,37,        super(max);,0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,13,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,13,39,    },0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,140,"        public DataTransferObject(final double[] point, final double[] value) {",0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,141,            this.point = point.clone();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,142,            this.value = value.clone();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,143,        },0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,149,"            return new PointVectorValuePair(point, value, false);",0.0,0,-1,0
org/apache/commons/math3/optimization/Weight,13,52,    public Weight(RealMatrix weight) {,0.0,0,-1,0
org/apache/commons/math3/optimization/Weight,13,53,        if (weight.getColumnDimension() != weight.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math3/optimization/Weight,13,54,"            throw new NonSquareMatrixException(weight.getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math3/optimization/Weight,13,58,        weightMatrix = weight.copy();,0.0,0,-1,0
org/apache/commons/math3/optimization/Weight,13,59,    },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,216,            return new MultivariateMatrixFunction() {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,233,            final double[] values = new double[observations.size()];,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,234,            int i = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,235,            for (WeightedObservedPoint observed : observations) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,236,"                values[i++] = f.value(observed.getX(), point);",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,237,            },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,239,            return values;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,202,    private class OldTheoreticalValuesFunction,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,79,    public CurveFitter(final MultivariateDifferentiableVectorOptimizer optimizer) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,80,        this.oldOptimizer = null;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,81,        this.optimizer    = optimizer;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,82,        observations      = new ArrayList<WeightedObservedPoint>();,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,83,    },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,96,"        addObservedPoint(1.0, x, y);",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,97,    },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,119,        observations.add(observed);,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,120,    },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,129,        return observations.toArray(new WeightedObservedPoint[observations.size()]);,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,136,        observations.clear();,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,137,    },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,192,"            optimum = optimizer.optimize(maxEval, new TheoreticalValuesFunction(f),",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,197,        return optimum.getPointRef();,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,51,public class CurveFitter<T extends ParametricUnivariateFunction> {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,66,        return x;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,252,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,253,            this.f = f;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,254,        },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,259,            final double[] values = new double[observations.size()];,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,260,            int i = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,261,            for (WeightedObservedPoint observed : observations) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,262,"                values[i++] = f.value(observed.getX(), point);",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,263,            },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,265,            return values;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,272,            final double[] parameters = new double[point.length];,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,273,            for (int k = 0; k < point.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,274,                parameters[k] = point[k].getValue();,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,278,            final DerivativeStructure[] values = new DerivativeStructure[observations.size()];,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,279,            int i = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,280,            for (WeightedObservedPoint observed : observations) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,284,"                DerivativeStructure vi = new DerivativeStructure(point.length, 1, f.value(observed.getX(), parameters));",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,285,                for (int k = 0; k < point.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,286,"                    vi = vi.add(new DerivativeStructure(point.length, 1, k, 0.0));",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,289,                values[i++] = vi;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,291,            },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,293,            return values;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,72,    private DerivativeStructure(final DSCompiler compiler) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,73,        this.compiler = compiler;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,74,        this.data     = new double[compiler.getSize()];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,75,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,82,"        this(DSCompiler.getCompiler(parameters, order));",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,83,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,92,"        this(parameters, order);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,93,        this.data[0] = value;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,94,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,111,"        this(parameters, order, value);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,113,        if (index >= parameters) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,114,"            throw new NumberIsTooLargeException(index, parameters, false);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,117,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,119,"            data[DSCompiler.getCompiler(index, order).getSize()] = 1.0;",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,122,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,135,        this(ds1.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,136,        compiler.checkCompatibility(ds2.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,137,"        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,138,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,154,        this(ds1.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,155,        compiler.checkCompatibility(ds2.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,156,        compiler.checkCompatibility(ds3.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,157,"        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0, a3, ds3.data, 0, data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,158,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,177,        this(ds1.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,178,        compiler.checkCompatibility(ds2.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,179,        compiler.checkCompatibility(ds3.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,180,        compiler.checkCompatibility(ds4.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,181,"        compiler.linearCombination(a1, ds1.data, 0, a2, ds2.data, 0,",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,184,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,197,"        this(parameters, order);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,198,        if (derivatives.length != data.length) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,199,"            throw new DimensionMismatchException(derivatives.length, data.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,201,"        System.arraycopy(derivatives, 0, data, 0, data.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,202,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,207,    private DerivativeStructure(final DerivativeStructure ds) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,208,        this.compiler = ds.compiler;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,209,        this.data     = ds.data.clone();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,210,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,216,        return compiler.getFreeParameters();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,223,        return compiler.getOrder();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,231,        return data[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,246,        return data[compiler.getPartialDerivativeIndex(orders)];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,254,        return data.clone();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,262,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,263,        ds.data[0] += a;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,264,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,274,        compiler.checkCompatibility(a.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,275,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,276,"        compiler.add(data, 0, a.data, 0, ds.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,277,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,285,        return add(-a);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,295,        compiler.checkCompatibility(a.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,296,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,297,"        compiler.subtract(data, 0, a.data, 0, ds.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,298,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,303,        return multiply((double) n);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,311,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,312,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,313,            ds.data[i] *= a;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,315,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,325,        compiler.checkCompatibility(a.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,326,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,327,"        compiler.multiply(data, 0, a.data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,328,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,336,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,337,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,338,            ds.data[i] /= a;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,340,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,350,        compiler.checkCompatibility(a.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,351,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,352,"        compiler.divide(data, 0, a.data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,353,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,361,        final DerivativeStructure ds = new DerivativeStructure(this);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,362,        ds.data[0] = ds.data[0] % a;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,363,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,373,        compiler.checkCompatibility(a.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,374,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,375,"        compiler.remainder(data, 0, a.data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,376,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,383,        final DerivativeStructure ds = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,384,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,385,            ds.data[i] = -data[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,387,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,394,        if (Double.doubleToLongBits(data[0]) < 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,396,            return negate();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,398,            return this;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,406,"        return new DerivativeStructure(compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,415,"        return new DerivativeStructure(compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,424,"        return new DerivativeStructure(compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,433,        return FastMath.round(data[0]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,441,"        return new DerivativeStructure(compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,454,        long m = Double.doubleToLongBits(data[0]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,455,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,456,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,457,            return this;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,459,        return negate(); // flip sign,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,471,        return FastMath.getExponent(data[0]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,480,        final DerivativeStructure ds = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,481,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,482,"            ds.data[i] = FastMath.scalb(data[i], n);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,484,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,505,        x.compiler.checkCompatibility(y.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,507,        if (Double.isInfinite(x.data[0]) || Double.isInfinite(y.data[0])) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,508,"            return new DerivativeStructure(x.compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,511,        } else if (Double.isNaN(x.data[0]) || Double.isNaN(y.data[0])) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,512,"            return new DerivativeStructure(x.compiler.getFreeParameters(),",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,517,            final int expX = x.getExponent();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,518,            final int expY = y.getExponent();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,519,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,521,                return x.abs();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,522,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,524,                return y.abs();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,528,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,531,                final DerivativeStructure scaledX = x.scalb(-middleExp);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,532,                final DerivativeStructure scaledY = y.scalb(-middleExp);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,535,                final DerivativeStructure scaledH =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,539,                return scaledH.scalb(middleExp);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,555,        if (f.length != getOrder() + 1) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,556,"            throw new DimensionMismatchException(f.length, getOrder() + 1);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,558,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,559,"        compiler.compose(data, 0, f, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,560,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,565,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,566,"        compiler.pow(data, 0, -1, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,567,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,574,        return rootN(2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,581,        return rootN(3);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,589,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,590,"        compiler.rootN(data, 0, n, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,591,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,596,        return new Field<DerivativeStructure>() {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,621,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,622,"        compiler.pow(data, 0, p, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,623,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,631,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,632,"        compiler.pow(data, 0, n, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,633,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,643,        compiler.checkCompatibility(e.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,644,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,645,"        compiler.pow(data, 0, e.data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,646,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,653,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,654,"        compiler.exp(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,655,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,662,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,663,"        compiler.expm1(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,664,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,671,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,672,"        compiler.log(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,673,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,680,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,681,"        compiler.log1p(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,682,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,689,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,690,"        compiler.log10(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,691,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,698,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,699,"        compiler.cos(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,700,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,707,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,708,"        compiler.sin(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,709,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,716,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,717,"        compiler.tan(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,718,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,725,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,726,"        compiler.acos(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,727,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,734,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,735,"        compiler.asin(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,736,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,743,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,744,"        compiler.atan(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,745,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,756,        y.compiler.checkCompatibility(x.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,757,        final DerivativeStructure result = new DerivativeStructure(y.compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,759,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,766,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,767,"        compiler.cosh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,768,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,775,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,776,"        compiler.sinh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,777,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,784,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,785,"        compiler.tanh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,786,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,793,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,794,"        compiler.acosh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,795,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,802,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,803,"        compiler.asinh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,804,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,811,        final DerivativeStructure result = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,812,"        compiler.atanh(data, 0, result.data, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,813,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,820,        final DerivativeStructure ds = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,821,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,822,            ds.data[i] = FastMath.toDegrees(data[i]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,824,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,831,        final DerivativeStructure ds = new DerivativeStructure(compiler);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,832,        for (int i = 0; i < ds.data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,833,            ds.data[i] = FastMath.toRadians(data[i]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,835,        return ds;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,843,"        return compiler.taylor(data, 0, delta);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,851,"        return new DataTransferObject(compiler.getFreeParameters(), compiler.getOrder(), data);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,58,"public class DerivativeStructure implements FieldElement<DerivativeStructure>, Serializable {",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,216,            return new MultivariateMatrixFunction() {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,218,                    final double[][] jacobian = new double[observations.size()][];,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,220,                    int i = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,221,                    for (WeightedObservedPoint observed : observations) {,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,222,"                        jacobian[i++] = f.gradient(observed.getX(), point);",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,223,                    },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/CurveFitter,13,225,                    return jacobian;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,52,        super(optimizer);,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,53,        this.degree = degree;,0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,54,    },0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,77,"        return fit(new PolynomialFunction.Parametric(), new double[degree + 1]);",0.0,0,-1,0
org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,95,"        return fit(maxEval, new PolynomialFunction.Parametric(), guess);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,74,        this(new SimpleVectorValueChecker());,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,75,    },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,85,        return evaluations.getMaximalCount();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,90,        return evaluations.getCount();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,95,        return checker;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,108,            evaluations.incrementCount();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,111,        },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,109,        } catch (MaxCountExceededException e) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,110,            throw new TooManyEvaluationsException(e.getMax());,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,112,        return function.value(point);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,124,"        return optimizeInternal(maxEval, f, t, w, startPoint);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,152,"        return optimizeInternal(maxEval, f, optData);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,183,        if (f == null) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,184,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,186,        if (t == null) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,187,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,189,        if (w == null) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,190,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,192,        if (startPoint == null) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,193,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,195,        if (t.length != w.length) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,196,"            throw new DimensionMismatchException(t.length, w.length);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,199,"        return optimizeInternal(maxEval, f,",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,241,        return doOptimize();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,250,        return start.clone();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,270,        return target.clone();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,281,        return function;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,298,        return target;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,306,        return weight;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer,13,366,"            throw new DimensionMismatchException(target.length,",0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,128,    protected AbstractLeastSquaresOptimizer() {},0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,141,        return jacobianEvaluations;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,154,        final RealMatrix weightedJacobian = computeWeightedJacobian(point);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,155,        weightedResidualJacobian = weightedJacobian.scalarMultiply(-1).getData();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,156,    },0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,168,        ++jacobianEvaluations;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,170,        final DerivativeStructure[] dsPoint = new DerivativeStructure[params.length];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,171,        final int nC = params.length;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,172,        for (int i = 0; i < nC; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,173,"            dsPoint[i] = new DerivativeStructure(nC, 1, i, params[i]);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,175,        final DerivativeStructure[] dsValue = jF.value(dsPoint);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,176,        final int nR = getTarget().length;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,177,        if (dsValue.length != nR) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,178,"            throw new DimensionMismatchException(dsValue.length, nR);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,180,        final double[][] jacobianData = new double[nR][nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,181,        for (int i = 0; i < nR; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,182,            int[] orders = new int[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,183,            for (int j = 0; j < nC; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,184,                orders[j] = 1;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,185,                jacobianData[i][j] = dsValue[i].getPartialDerivative(orders);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,186,                orders[j] = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,190,        return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobianData));,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,205,        objective = computeObjectiveValue(point);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,206,        final double[] res = computeResiduals(objective);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,209,        cost = computeCost(res);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,212,        final ArrayRealVector residuals = new ArrayRealVector(res);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,213,        weightedResiduals = weightMatrixSqrt.operate(residuals).toArray();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,214,    },0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,225,        final ArrayRealVector r = new ArrayRealVector(residuals);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,226,        return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,240,        return FastMath.sqrt(getChiSquare() / rows);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,250,        return cost * cost;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,260,        return weightMatrixSqrt.copy();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,270,        this.cost = cost;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,271,    },0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,285,        return getCovariances(DEFAULT_SINGULARITY_THRESHOLD);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,307,"        return computeCovariances(point, threshold);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,330,        final RealMatrix j = computeWeightedJacobian(params);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,333,        final RealMatrix jTj = j.transpose().multiply(j);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,336,        final DecompositionSolver solver,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,338,        return solver.getInverse().getData();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,372,        if (rows <= cols) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,373,"            throw new NumberIsTooSmallException(LocalizedFormats.NO_DEGREES_OF_FREEDOM,",0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,376,        double[] errors = new double[cols];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,377,        final double c = FastMath.sqrt(getChiSquare() / (rows - cols));,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,378,"        double[][] covar = computeCovariances(point, 1e-14);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,379,        for (int i = 0; i < errors.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,380,            errors[i] = FastMath.sqrt(covar[i][i]) * c;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,382,        return errors;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,402,        final int nC = params.length;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,403,        final double[] sig = new double[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,404,"        final double[][] cov = computeCovariances(params, covarianceSingularityThreshold);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,405,        for (int i = 0; i < nC; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,406,            sig[i] = FastMath.sqrt(cov[i][i]);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,408,        return sig;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,459,"        return optimizeInternal(maxEval, f,",0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,516,        jF = FunctionUtils.toMultivariateDifferentiableVectorFunction((DifferentiableMultivariateVectorFunction) getObjectiveFunction());,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,519,        point = getStartPoint();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,520,        rows = getTarget().length;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,521,        cols = point.length;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,522,    },0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,541,        final double[] target = getTarget();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,542,        if (objectiveValue.length != target.length) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,543,"            throw new DimensionMismatchException(target.length,",0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,547,        final double[] residuals = new double[target.length];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,548,        for (int i = 0; i < target.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,549,            residuals[i] = target[i] - objectiveValue[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,552,        return residuals;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,563,            return dec.getSquareRoot();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,177,"        this(100, checker, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,178,    },0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,208,        super(checker);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,209,        this.initialStepBoundFactor = initialStepBoundFactor;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,210,        this.costRelativeTolerance = costRelativeTolerance;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,211,        this.parRelativeTolerance = parRelativeTolerance;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,212,        this.orthoTolerance = orthoTolerance;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,213,        this.qrRankingThreshold = threshold;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,214,    },0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,237,"        this(100,",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,240,    },0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,281,        final int nR = getTarget().length; // Number of observed data.,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,282,        final double[] currentPoint = getStartPoint();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,283,        final int nC = currentPoint.length; // Number of parameters.,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,286,"        solvedCols  = FastMath.min(nR, nC);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,287,        diagR       = new double[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,288,        jacNorm     = new double[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,289,        beta        = new double[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,290,        permutation = new int[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,291,        lmDir       = new double[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,294,        double   delta   = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,295,        double   xNorm   = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,296,        double[] diag    = new double[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,297,        double[] oldX    = new double[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,298,        double[] oldRes  = new double[nR];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,299,        double[] oldObj  = new double[nR];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,300,        double[] qtf     = new double[nR];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,301,        double[] work1   = new double[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,302,        double[] work2   = new double[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,303,        double[] work3   = new double[nC];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,305,        final RealMatrix weightMatrixSqrt = getWeightSquareRoot();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,308,        double[] currentObjective = computeObjectiveValue(currentPoint);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,309,        double[] currentResiduals = computeResiduals(currentObjective);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,310,"        PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,311,        double currentCost = computeCost(currentResiduals);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,314,        lmPar = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,315,        boolean firstIteration = true;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,316,        int iter = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,317,        final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,319,            ++iter;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,320,            final PointVectorValuePair previous = current;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,323,            qrDecomposition(computeWeightedJacobian(currentPoint));,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,325,            weightedResidual = weightMatrixSqrt.operate(currentResiduals);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,326,            for (int i = 0; i < nR; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,327,                qtf[i] = weightedResidual[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,331,            qTy(qtf);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,335,            for (int k = 0; k < solvedCols; ++k) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,336,                int pk = permutation[k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,337,                weightedJacobian[k][pk] = diagR[pk];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,340,            if (firstIteration) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,343,                xNorm = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,344,                for (int k = 0; k < nC; ++k) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,345,                    double dk = jacNorm[k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,346,                    if (dk == 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,347,                        dk = 1.0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,349,                    double xk = dk * currentPoint[k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,350,                    xNorm  += xk * xk;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,351,                    diag[k] = dk;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,353,                xNorm = FastMath.sqrt(xNorm);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,356,                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,360,            double maxCosine = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,361,            if (currentCost != 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,362,                for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,363,                    int    pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,364,                    double s  = jacNorm[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,365,                    if (s != 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,366,                        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,367,                        for (int i = 0; i <= j; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,368,                            sum += weightedJacobian[i][pj] * qtf[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,370,"                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * currentCost));",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,374,            if (maxCosine <= orthoTolerance) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,376,                setCost(currentCost);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,378,                point = current.getPoint();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,379,                return current;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,383,            for (int j = 0; j < nC; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,384,"                diag[j] = FastMath.max(diag[j], jacNorm[j]);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,388,            for (double ratio = 0; ratio < 1.0e-4;) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,391,                for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,392,                    int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,393,                    oldX[pj] = currentPoint[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,395,                final double previousCost = currentCost;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,396,                double[] tmpVec = weightedResidual;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,397,                weightedResidual = oldRes;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,398,                oldRes    = tmpVec;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,399,                tmpVec    = currentObjective;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,400,                currentObjective = oldObj;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,401,                oldObj    = tmpVec;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,404,"                determineLMParameter(qtf, delta, diag, work1, work2, work3);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,407,                double lmNorm = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,408,                for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,409,                    int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,410,                    lmDir[pj] = -lmDir[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,411,                    currentPoint[pj] = oldX[pj] + lmDir[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,412,                    double s = diag[pj] * lmDir[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,413,                    lmNorm  += s * s;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,415,                lmNorm = FastMath.sqrt(lmNorm);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,417,                if (firstIteration) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,418,"                    delta = FastMath.min(delta, lmNorm);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,422,                currentObjective = computeObjectiveValue(currentPoint);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,423,                currentResiduals = computeResiduals(currentObjective);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,424,"                current = new PointVectorValuePair(currentPoint, currentObjective);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,425,                currentCost = computeCost(currentResiduals);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,428,                double actRed = -1.0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,429,                if (0.1 * currentCost < previousCost) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,430,                    double r = currentCost / previousCost;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,431,                    actRed = 1.0 - r * r;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,436,                for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,437,                    int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,438,                    double dirJ = lmDir[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,439,                    work1[j] = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,440,                    for (int i = 0; i <= j; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,441,                        work1[i] += weightedJacobian[i][pj] * dirJ;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,444,                double coeff1 = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,445,                for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,446,                    coeff1 += work1[j] * work1[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,448,                double pc2 = previousCost * previousCost;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,449,                coeff1 = coeff1 / pc2;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,450,                double coeff2 = lmPar * lmNorm * lmNorm / pc2;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,451,                double preRed = coeff1 + 2 * coeff2;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,452,                double dirDer = -(coeff1 + coeff2);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,455,                ratio = (preRed == 0) ? 0 : (actRed / preRed);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,458,                if (ratio <= 0.25) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,459,                    double tmp =,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,461,                        if ((0.1 * currentCost >= previousCost) || (tmp < 0.1)) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,462,                            tmp = 0.1;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,464,"                        delta = tmp * FastMath.min(delta, 10.0 * lmNorm);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,465,                        lmPar /= tmp;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,466,                } else if ((lmPar == 0) || (ratio >= 0.75)) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,467,                    delta = 2 * lmNorm;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,468,                    lmPar *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,472,                if (ratio >= 1.0e-4) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,474,                    firstIteration = false;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,475,                    xNorm = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,476,                    for (int k = 0; k < nC; ++k) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,477,                        double xK = diag[k] * currentPoint[k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,478,                        xNorm += xK * xK;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,480,                    xNorm = FastMath.sqrt(xNorm);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,483,                    if (checker != null) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,485,"                        if (checker.converged(iter, previous, current)) {",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,486,                            setCost(currentCost);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,488,                            point = current.getPoint();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,489,                            return current;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,494,                    currentCost = previousCost;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,495,                    for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,496,                        int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,497,                        currentPoint[pj] = oldX[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,499,                    tmpVec    = weightedResidual;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,500,                    weightedResidual = oldRes;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,501,                    oldRes    = tmpVec;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,502,                    tmpVec    = currentObjective;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,503,                    currentObjective = oldObj;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,504,                    oldObj    = tmpVec;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,506,"                    current = new PointVectorValuePair(currentPoint, currentObjective);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,510,                if ((FastMath.abs(actRed) <= costRelativeTolerance &&,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,514,                    setCost(currentCost);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,516,                    point = current.getPoint();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,517,                    return current;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,522,                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,523,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,525,                } else if (delta <= 2.2204e-16 * xNorm) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,526,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,528,                } else if (maxCosine <= 2.2204e-16)  {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,529,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,532,            },0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,533,        },0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,560,        final int nC = weightedJacobian[0].length;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,564,        for (int j = 0; j < rank; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,565,            lmDir[permutation[j]] = qy[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,567,        for (int j = rank; j < nC; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,568,            lmDir[permutation[j]] = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,570,        for (int k = rank - 1; k >= 0; --k) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,571,            int pk = permutation[k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,572,            double ypk = lmDir[pk] / diagR[pk];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,573,            for (int i = 0; i < k; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,574,                lmDir[permutation[i]] -= ypk * weightedJacobian[i][pk];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,576,            lmDir[pk] = ypk;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,581,        double dxNorm = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,582,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,583,            int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,584,            double s = diag[pj] * lmDir[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,585,            work1[pj] = s;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,586,            dxNorm += s * s;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,588,        dxNorm = FastMath.sqrt(dxNorm);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,589,        double fp = dxNorm - delta;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,590,        if (fp <= 0.1 * delta) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,591,            lmPar = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,592,            return;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,599,        double parl = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,600,        if (rank == solvedCols) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,601,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,602,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,603,                work1[pj] *= diag[pj] / dxNorm;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,605,            sum2 = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,606,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,607,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,608,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,609,                for (int i = 0; i < j; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,610,                    sum += weightedJacobian[i][pj] * work1[permutation[i]];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,612,                double s = (work1[pj] - sum) / diagR[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,613,                work1[pj] = s;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,614,                sum2 += s * s;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,616,            parl = fp / (delta * sum2);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,620,        sum2 = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,621,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,622,            int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,623,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,624,            for (int i = 0; i <= j; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,625,                sum += weightedJacobian[i][pj] * qy[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,627,            sum /= diag[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,628,            sum2 += sum * sum;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,630,        double gNorm = FastMath.sqrt(sum2);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,631,        double paru = gNorm / delta;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,632,        if (paru == 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,634,"            paru = 2.2251e-308 / FastMath.min(delta, 0.1);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,639,"        lmPar = FastMath.min(paru, FastMath.max(lmPar, parl));",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,640,        if (lmPar == 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,641,            lmPar = gNorm / dxNorm;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,644,        for (int countdown = 10; countdown >= 0; --countdown) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,647,            if (lmPar == 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,648,"                lmPar = FastMath.max(2.2251e-308, 0.001 * paru);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,650,            double sPar = FastMath.sqrt(lmPar);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,651,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,652,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,653,                work1[pj] = sPar * diag[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,655,"            determineLMDirection(qy, work1, work2, work3);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,657,            dxNorm = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,658,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,659,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,660,                double s = diag[pj] * lmDir[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,661,                work3[pj] = s;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,662,                dxNorm += s * s;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,664,            dxNorm = FastMath.sqrt(dxNorm);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,665,            double previousFP = fp;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,666,            fp = dxNorm - delta;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,670,            if ((FastMath.abs(fp) <= 0.1 * delta) ||,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,672,                return;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,676,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,677,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,678,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,680,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,681,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,682,                work1[pj] /= work2[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,683,                double tmp = work1[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,684,                for (int i = j + 1; i < solvedCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,685,                    work1[permutation[i]] -= weightedJacobian[i][pj] * tmp;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,688,            sum2 = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,689,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,690,                double s = work1[permutation[j]];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,691,                sum2 += s * s;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,693,            double correction = fp / (delta * sum2);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,696,            if (fp > 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,697,"                parl = FastMath.max(parl, lmPar);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,698,            } else if (fp < 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,699,"                paru = FastMath.min(paru, lmPar);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,703,"            lmPar = FastMath.max(parl, lmPar + correction);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,706,    },0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,733,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,734,            int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,735,            for (int i = j + 1; i < solvedCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,736,                weightedJacobian[i][pj] = weightedJacobian[j][permutation[i]];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,738,            lmDir[j] = diagR[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,739,            work[j]  = qy[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,743,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,747,            int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,748,            double dpj = diag[pj];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,749,            if (dpj != 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,750,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,752,            lmDiag[j] = dpj;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,757,            double qtbpj = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,758,            for (int k = j; k < solvedCols; ++k) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,759,                int pk = permutation[k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,763,                if (lmDiag[k] != 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,767,                    double rkk = weightedJacobian[k][pk];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,768,                    if (FastMath.abs(rkk) < FastMath.abs(lmDiag[k])) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,769,                        final double cotan = rkk / lmDiag[k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,770,                        sin   = 1.0 / FastMath.sqrt(1.0 + cotan * cotan);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,771,                        cos   = sin * cotan;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,772,                    } else {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,773,                        final double tan = lmDiag[k] / rkk;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,774,                        cos = 1.0 / FastMath.sqrt(1.0 + tan * tan);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,775,                        sin = cos * tan;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,780,                    weightedJacobian[k][pk] = cos * rkk + sin * lmDiag[k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,781,                    final double temp = cos * work[k] + sin * qtbpj;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,782,                    qtbpj = -sin * work[k] + cos * qtbpj;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,783,                    work[k] = temp;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,786,                    for (int i = k + 1; i < solvedCols; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,787,                        double rik = weightedJacobian[i][pk];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,788,                        final double temp2 = cos * rik + sin * lmDiag[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,789,                        lmDiag[i] = -sin * rik + cos * lmDiag[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,790,                        weightedJacobian[i][pk] = temp2;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,797,            lmDiag[j] = weightedJacobian[j][permutation[j]];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,798,            weightedJacobian[j][permutation[j]] = lmDir[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,803,        int nSing = solvedCols;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,804,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,805,            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,806,                nSing = j;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,808,            if (nSing < solvedCols) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,809,                work[j] = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,812,        if (nSing > 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,813,            for (int j = nSing - 1; j >= 0; --j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,814,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,815,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,816,                for (int i = j + 1; i < nSing; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,817,                    sum += weightedJacobian[i][pj] * work[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,819,                work[j] = (work[j] - sum) / lmDiag[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,824,        for (int j = 0; j < lmDir.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,825,            lmDir[permutation[j]] = work[j];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,827,    },0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,856,        weightedJacobian = jacobian.scalarMultiply(-1).getData();,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,858,        final int nR = weightedJacobian.length;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,859,        final int nC = weightedJacobian[0].length;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,862,        for (int k = 0; k < nC; ++k) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,863,            permutation[k] = k;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,864,            double norm2 = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,865,            for (int i = 0; i < nR; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,866,                double akk = weightedJacobian[i][k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,867,                norm2 += akk * akk;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,869,            jacNorm[k] = FastMath.sqrt(norm2);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,873,        for (int k = 0; k < nC; ++k) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,876,            int nextColumn = -1;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,877,            double ak2 = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,878,            for (int i = k; i < nC; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,879,                double norm2 = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,880,                for (int j = k; j < nR; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,881,                    double aki = weightedJacobian[j][permutation[i]];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,882,                    norm2 += aki * aki;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,884,                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,885,"                    throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,",0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,888,                if (norm2 > ak2) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,889,                    nextColumn = i;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,890,                    ak2        = norm2;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,893,            if (ak2 <= qrRankingThreshold) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,894,                rank = k;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,895,                return;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,897,            int pk                  = permutation[nextColumn];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,898,            permutation[nextColumn] = permutation[k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,899,            permutation[k]          = pk;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,902,            double akk   = weightedJacobian[k][pk];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,903,            double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,904,            double betak = 1.0 / (ak2 - akk * alpha);,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,905,            beta[pk]     = betak;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,908,            diagR[pk]        = alpha;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,909,            weightedJacobian[k][pk] -= alpha;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,912,            for (int dk = nC - 1 - k; dk > 0; --dk) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,913,                double gamma = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,914,                for (int j = k; j < nR; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,915,                    gamma += weightedJacobian[j][pk] * weightedJacobian[j][permutation[k + dk]];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,917,                gamma *= betak;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,918,                for (int j = k; j < nR; ++j) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,919,                    weightedJacobian[j][permutation[k + dk]] -= gamma * weightedJacobian[j][pk];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,923,        rank = solvedCols;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,924,    },0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,932,        final int nR = weightedJacobian.length;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,933,        final int nC = weightedJacobian[0].length;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,935,        for (int k = 0; k < nC; ++k) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,936,            int pk = permutation[k];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,937,            double gamma = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,938,            for (int i = k; i < nR; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,939,                gamma += weightedJacobian[i][pk] * y[i];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,941,            gamma *= beta[pk];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,942,            for (int i = k; i < nR; ++i) {,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,943,                y[i] -= gamma * weightedJacobian[i][pk];,0.0,0,-1,0
org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,946,    },0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,49,"        this(point, value, true);",0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,50,    },0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,63,        super(copyArray ?,0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,71,    },0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,79,        final double[] p = getKey();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,80,        return p == null ? null : p.clone();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,89,        return getKey();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,99,        final double[] v = super.getValue();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,100,        return v == null ? null : v.clone();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,110,        return super.getValue();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,118,"        return new DataTransferObject(getKey(), getValue());",0.0,0,-1,0
org/apache/commons/math3/optimization/PointVectorValuePair,13,34,@Deprecated,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,109,        return new DifferentiableUnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,112,                double r = x;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,113,                for (int i = f.length - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,114,                    r = f[i].value(r);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,116,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,121,                return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,40,    private FunctionUtils() {},0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,52,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,75,        return new UnivariateDifferentiableFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,109,        return new DifferentiableUnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,144,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,164,        return new UnivariateDifferentiableFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,196,        return new DifferentiableUnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,229,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,249,        return new UnivariateDifferentiableFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,280,        return new DifferentiableUnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,324,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,345,        return new MultivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,368,"        return collector(combiner, new Identity(), initialValue);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,380,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,396,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,424,        if (n <= 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,425,            throw new NotStrictlyPositiveException(,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,429,        if (min >= max) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,430,"            throw new NumberIsTooLargeException(min, max, false);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,433,        final double[] s = new double[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,434,        final double h = (max - min) / n;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,435,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,436,            s[i] = f.value(min + i * h);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,438,        return s;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,449,        return new DifferentiableUnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,481,        return new UnivariateDifferentiableFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,525,        return new DifferentiableMultivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,604,        return new MultivariateDifferentiableFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,731,                return f.value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,742,                final int parameters = t[0].getFreeParameters();,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,743,                final int order      = t[0].getOrder();,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,744,                final int n          = t.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,745,                if (order > 1) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,746,"                    throw new NumberIsTooLargeException(order, 1, true);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,750,                for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,751,                    if (t[i].getFreeParameters() != parameters) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,752,"                        throw new DimensionMismatchException(t[i].getFreeParameters(), parameters);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,755,                    if (t[i].getOrder() != order) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,756,"                        throw new DimensionMismatchException(t[i].getOrder(), order);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,761,                final double[] point = new double[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,762,                for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,763,                    point[i] = t[i].getValue();,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,765,                final double[] value      = f.value(point);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,766,                final double[][] jacobian = f.jacobian().value(point);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,769,                final DerivativeStructure[] merged = new DerivativeStructure[value.length];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,770,                for (int k = 0; k < merged.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,771,                    final double[] derivatives = new double[parameters + 1];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,772,                    derivatives[0] = value[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,773,                    final int[] orders = new int[parameters];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,774,                    for (int i = 0; i < parameters; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,775,                        orders[i] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,776,                        for (int j = 0; j < n; ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,777,                            derivatives[i + 1] += jacobian[k][j] * t[j].getPartialDerivative(orders);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,779,                        orders[i] = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,781,"                    merged[k] = new DerivativeStructure(parameters, order, derivatives);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,784,                return merged;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,398,            final double[] gradient = new double[parameters.length];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,399,            double xn = 1.0;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,400,            for (int i = 0; i < parameters.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,401,                gradient[i] = xn;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,402,                xn *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,404,            return gradient;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,409,"            return PolynomialFunction.evaluate(parameters, x);",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,73,            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,76,            --n;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,103,        return coefficients.length - 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,115,        return coefficients.clone();,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,133,            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,137,            result = argument * result + coefficients[j];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,150,        MathUtils.checkNotNull(coefficients);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,151,        int n = coefficients.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,152,        if (n == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,153,            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,155,        DerivativeStructure result =,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,157,        for (int j = n - 2; j >= 0; j--) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,158,            result = result.multiply(t).add(coefficients[j]);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,160,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,171,"        final int lowLength  = FastMath.min(coefficients.length, p.coefficients.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,172,"        final int highLength = FastMath.max(coefficients.length, p.coefficients.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,175,        double[] newCoefficients = new double[highLength];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,176,        for (int i = 0; i < lowLength; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,177,            newCoefficients[i] = coefficients[i] + p.coefficients[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,179,        System.arraycopy((coefficients.length < p.coefficients.length) ?,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,185,        return new PolynomialFunction(newCoefficients);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,196,"        int lowLength  = FastMath.min(coefficients.length, p.coefficients.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,197,"        int highLength = FastMath.max(coefficients.length, p.coefficients.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,200,        double[] newCoefficients = new double[highLength];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,201,        for (int i = 0; i < lowLength; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,202,            newCoefficients[i] = coefficients[i] - p.coefficients[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,204,        if (coefficients.length < p.coefficients.length) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,205,            for (int i = lowLength; i < highLength; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,206,                newCoefficients[i] = -p.coefficients[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,209,"            System.arraycopy(coefficients, lowLength, newCoefficients, lowLength,",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,213,        return new PolynomialFunction(newCoefficients);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,222,        double[] newCoefficients = new double[coefficients.length];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,223,        for (int i = 0; i < coefficients.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,224,            newCoefficients[i] = -coefficients[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,226,        return new PolynomialFunction(newCoefficients);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,236,        double[] newCoefficients = new double[coefficients.length + p.coefficients.length - 1];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,238,        for (int i = 0; i < newCoefficients.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,239,            newCoefficients[i] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,240,"            for (int j = FastMath.max(0, i + 1 - p.coefficients.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,241,"                 j < FastMath.min(coefficients.length, i + 1);",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,243,                newCoefficients[i] += coefficients[j] * p.coefficients[i-j];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,242,                 ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,247,        return new PolynomialFunction(newCoefficients);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,260,        MathUtils.checkNotNull(coefficients);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,261,        int n = coefficients.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,262,        if (n == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,263,            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,265,        if (n == 1) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,266,            return new double[]{0};,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,268,        double[] result = new double[n - 1];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,269,        for (int i = n - 1; i > 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,270,            result[i - 1] = i * coefficients[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,272,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,281,        return new PolynomialFunction(differentiate(coefficients));,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,290,        return polynomialDerivative();,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,310,        StringBuilder s = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,311,        if (coefficients[0] == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,312,            if (coefficients.length == 1) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,313,"                return ""0"";",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,316,            s.append(toString(coefficients[0]));,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,319,        for (int i = 1; i < coefficients.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,320,            if (coefficients[i] != 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,321,                if (s.length() > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,322,                    if (coefficients[i] < 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,323,"                        s.append("" - "");",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,325,"                        s.append("" + "");",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,328,                    if (coefficients[i] < 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,329,"                        s.append(""-"");",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,333,                double absAi = FastMath.abs(coefficients[i]);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,334,                if ((absAi - 1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,335,                    s.append(toString(absAi));,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,336,                    s.append(' ');,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,339,"                s.append(""x"");",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,340,                if (i > 1) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,341,                    s.append('^');,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,342,                    s.append(Integer.toString(i));,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,347,        return s.toString();,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,357,        final String c = Double.toString(coeff);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,358,"        if (c.endsWith("".0"")) {",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,359,"            return c.substring(0, c.length() - 2);",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,361,            return c;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,368,        final int prime = 31;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,369,        int result = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,370,        result = prime * result + Arrays.hashCode(coefficients);,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,371,        return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,377,        if (this == obj) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,378,            return true;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,380,        if (!(obj instanceof PolynomialFunction)) {,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,381,            return false;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,383,        PolynomialFunction other = (PolynomialFunction) obj;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,384,"        if (!Arrays.equals(coefficients, other.coefficients)) {",0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,385,            return false;,0.0,0,-1,0
org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,387,        return true;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,249,        return new UnivariateDifferentiableFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,253,                double r = f[0].value(t);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,254,                for (int i = 1; i < f.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,255,                    r  *= f[i].value(t);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,257,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,262,                DerivativeStructure r = f[0].value(t);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,263,                for (int i = 1; i < f.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,264,                    r = r.multiply(f[i].value(t));,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,266,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,75,        return new UnivariateDifferentiableFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,79,                double r = t;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,80,                for (int i = f.length - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,81,                    r = f[i].value(r);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,83,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,88,                DerivativeStructure r = t;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,89,                for (int i = f.length - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,90,                    r = f[i].value(r);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,92,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,680,                return new MultivariateMatrixFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,684,                        final int n = x.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,687,                        final DerivativeStructure[] dsX = new DerivativeStructure[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,688,                        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,689,"                            dsX[i] = new DerivativeStructure(n, 1, i, x[i]);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,691,                        final DerivativeStructure[] y = f.value(dsX);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,694,                        final double[][] jacobian = new double[y.length][n];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,695,                        final int[] orders = new int[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,696,                        for (int i = 0; i < y.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,697,                            for (int j = 0; j < n; ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,698,                                orders[j]      = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,699,                                jacobian[i][j] = y[i].getPartialDerivative(orders);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,700,                                orders[j]      = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,704,                        return jacobian;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,676,                return f.value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,680,                return new MultivariateMatrixFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,280,        return new DifferentiableUnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,283,                double r = f[0].value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,284,                for (int i = 1; i < f.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,285,                    r *= f[i].value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,287,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,292,                return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,121,                return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,124,                        double p = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,125,                        double r = x;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,126,                        for (int i = f.length - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,127,                            p *= f[i].derivative().value(r);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,128,                            r = f[i].value(r);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,130,                        return p;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,144,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,147,                double r = f[0].value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,148,                for (int i = 1; i < f.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,149,                    r += f[i].value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,151,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,559,                return new MultivariateVectorFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,563,                        final int n = x.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,566,                        final DerivativeStructure[] dsX = new DerivativeStructure[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,567,                        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,568,"                            dsX[i] = new DerivativeStructure(n, 1, i, x[i]);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,570,                        final DerivativeStructure y = f.value(dsX);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,573,                        final double[] gradient = new double[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,574,                        final int[] orders = new int[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,575,                        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,576,                            orders[i]   = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,577,                            gradient[i] = y.getPartialDerivative(orders);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,578,                            orders[i]   = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,581,                        return gradient;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,525,        return new DifferentiableMultivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,529,                return f.value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,534,                return new MultivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,559,                return new MultivariateVectorFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,380,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,383,"                return f.value(fixed, x);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,164,        return new UnivariateDifferentiableFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,168,                double r = f[0].value(t);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,169,                for (int i = 1; i < f.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,170,                    r += f[i].value(t);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,172,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,177,                DerivativeStructure r = f[0].value(t);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,178,                for (int i = 1; i < f.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,179,                    r = r.add(f[i].value(t));,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,181,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,449,        return new DifferentiableUnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,453,                return f.value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,458,                return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,292,                return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,295,                        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,296,                        for (int i = 0; i < f.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,297,                            double prod = f[i].derivative().value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,298,                            for (int j = 0; j < f.length; j++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,299,                                if (i != j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,300,                                    prod *= f[j].value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,303,                            sum += prod;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,305,                        return sum;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,458,                return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,461,"                        return f.value(new DerivativeStructure(1, 1, 0, x)).getPartialDerivative(1);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,396,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,399,"                return f.value(x, fixed);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,880,"        public DataTransferObject(final int variables, final int order, final double[] data) {",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,881,            this.variables = variables;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,882,            this.order     = order;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,883,            this.data      = data;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,884,        },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,890,"            return new DerivativeStructure(variables, order, data);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,159,"                       final DSCompiler valueCompiler, final DSCompiler derivativeCompiler) {",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,161,        this.parameters = parameters;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,162,        this.order      = order;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,163,"        this.sizes      = compileSizes(parameters, order, valueCompiler);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,164,        this.derivativesIndirection =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,167,        this.lowerIndirection =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,170,        this.multIndirection =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,173,        this.compIndirection =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,178,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,128,    private static AtomicReference<DSCompiler[][]> compilers =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,188,        final DSCompiler[][] cache = compilers.get();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,189,        if (cache != null && cache.length > parameters && cache[parameters].length > order) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,190,            if (cache[parameters][order] != null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,192,                return cache[parameters][order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,197,"        final int maxParameters = FastMath.max(parameters, cache == null ? 0 : cache.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,198,"        final int maxOrder      = FastMath.max(order,     cache == null ? 0 : cache[0].length);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,199,        final DSCompiler[][] newCache = new DSCompiler[maxParameters + 1][maxOrder + 1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,201,        if (cache != null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,203,            for (int i = 0; i < cache.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,204,"                System.arraycopy(cache[i], 0, newCache[i], 0, cache[i].length);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,209,        for (int diag = 0; diag <= parameters + order; ++diag) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,210,"            for (int o = FastMath.max(0, diag - parameters); o <= FastMath.min(order, diag); ++o) {",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,211,                final int p = diag - o;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,212,                if (newCache[p][o] == null) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,213,                    final DSCompiler valueCompiler      = (p == 0) ? null : newCache[p - 1][o];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,214,                    final DSCompiler derivativeCompiler = (o == 0) ? null : newCache[p][o - 1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,215,"                    newCache[p][o] = new DSCompiler(p, o, valueCompiler, derivativeCompiler);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,221,"        compilers.compareAndSet(cache, newCache);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,223,        return newCache[parameters][order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,236,        final int[][] sizes = new int[parameters + 1][order + 1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,237,        if (parameters == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,238,"            Arrays.fill(sizes[0], 1);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,240,"            System.arraycopy(valueCompiler.sizes, 0, sizes, 0, parameters);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,241,            sizes[parameters][0] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,242,            for (int i = 0; i < order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,243,                sizes[parameters][i + 1] = sizes[parameters][i] + sizes[parameters - 1][i + 1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,247,        return sizes;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,262,        if (parameters == 0 || order == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,263,            return new int[1][parameters];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,266,        final int vSize = valueCompiler.derivativesIndirection.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,267,        final int dSize = derivativeCompiler.derivativesIndirection.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,268,        final int[][] derivativesIndirection = new int[vSize + dSize][parameters];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,271,        for (int i = 0; i < vSize; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,273,"            System.arraycopy(valueCompiler.derivativesIndirection[i], 0,",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,279,        for (int i = 0; i < dSize; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,282,"            System.arraycopy(derivativeCompiler.derivativesIndirection[i], 0,",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,287,            derivativesIndirection[vSize + i][parameters - 1]++;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,291,        return derivativesIndirection;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,310,        if (parameters == 0 || order <= 1) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,311,            return new int[] { 0 };,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,315,        final int vSize = valueCompiler.lowerIndirection.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,316,        final int dSize = derivativeCompiler.lowerIndirection.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,317,        final int[] lowerIndirection = new int[vSize + dSize];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,318,"        System.arraycopy(valueCompiler.lowerIndirection, 0, lowerIndirection, 0, vSize);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,319,        for (int i = 0; i < dSize; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,320,            lowerIndirection[vSize + i] = valueCompiler.getSize() + derivativeCompiler.lowerIndirection[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,323,        return lowerIndirection;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,345,        if ((parameters == 0) || (order == 0)) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,346,"            return new int[][][] { { { 1, 0, 0 } } };",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,350,        final int vSize = valueCompiler.multIndirection.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,351,        final int dSize = derivativeCompiler.multIndirection.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,352,        final int[][][] multIndirection = new int[vSize + dSize][][];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,354,"        System.arraycopy(valueCompiler.multIndirection, 0, multIndirection, 0, vSize);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,356,        for (int i = 0; i < dSize; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,357,            final int[][] dRow = derivativeCompiler.multIndirection[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,358,            List<int[]> row = new ArrayList<int[]>();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,359,            for (int j = 0; j < dRow.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,360,"                row.add(new int[] { dRow[j][0], lowerIndirection[dRow[j][1]], vSize + dRow[j][2] });",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,361,"                row.add(new int[] { dRow[j][0], vSize + dRow[j][1], lowerIndirection[dRow[j][2]] });",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,365,            final List<int[]> combined = new ArrayList<int[]>(row.size());,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,366,            for (int j = 0; j < row.size(); ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,367,                final int[] termJ = row.get(j);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,368,                if (termJ[0] > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,369,                    for (int k = j + 1; k < row.size(); ++k) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,370,                        final int[] termK = row.get(k);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,371,                        if (termJ[1] == termK[1] && termJ[2] == termK[2]) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,373,                            termJ[0] += termK[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,375,                            termK[0] = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,378,                    combined.add(termJ);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,382,            multIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,386,        return multIndirection;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,410,        if ((parameters == 0) || (order == 0)) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,411,"            return new int[][][] { { { 1, 0 } } };",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,414,        final int vSize = valueCompiler.compIndirection.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,415,        final int dSize = derivativeCompiler.compIndirection.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,416,        final int[][][] compIndirection = new int[vSize + dSize][][];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,419,"        System.arraycopy(valueCompiler.compIndirection, 0, compIndirection, 0, vSize);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,425,        for (int i = 0; i < dSize; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,426,            List<int[]> row = new ArrayList<int[]>();,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,427,            for (int[] term : derivativeCompiler.compIndirection[i]) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,432,                int[] derivedTermF = new int[term.length + 1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,433,                derivedTermF[0] = term[0];     // p,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,434,                derivedTermF[1] = term[1] + 1; // f_(k+1),0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,435,                int[] orders = new int[parameters];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,436,                orders[parameters - 1] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,437,"                derivedTermF[term.length] = getPartialDerivativeIndex(parameters, order, sizes, orders);  // g_1",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,438,                for (int j = 2; j < term.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,441,"                    derivedTermF[j] = convertIndex(term[j], parameters,",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,445,"                Arrays.sort(derivedTermF, 2, derivedTermF.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,446,                row.add(derivedTermF);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,449,                for (int l = 2; l < term.length; ++l) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,450,                    int[] derivedTermG = new int[term.length];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,451,                    derivedTermG[0] = term[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,452,                    derivedTermG[1] = term[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,453,                    for (int j = 2; j < term.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,456,"                        derivedTermG[j] = convertIndex(term[j], parameters,",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,459,                        if (j == l) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,461,"                            System.arraycopy(derivativesIndirection[derivedTermG[j]], 0, orders, 0, parameters);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,462,                            orders[parameters - 1]++;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,463,"                            derivedTermG[j] = getPartialDerivativeIndex(parameters, order, sizes, orders);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,466,"                    Arrays.sort(derivedTermG, 2, derivedTermG.length);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,467,                    row.add(derivedTermG);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,473,            final List<int[]> combined = new ArrayList<int[]>(row.size());,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,474,            for (int j = 0; j < row.size(); ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,475,                final int[] termJ = row.get(j);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,476,                if (termJ[0] > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,477,                    for (int k = j + 1; k < row.size(); ++k) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,478,                        final int[] termK = row.get(k);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,479,                        boolean equals = termJ.length == termK.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,480,                        for (int l = 1; equals && l < termJ.length; ++l) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,481,                            equals &= termJ[l] == termK[l];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,483,                        if (equals) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,485,                            termJ[0] += termK[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,487,                            termK[0] = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,490,                    combined.add(termJ);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,494,            compIndirection[vSize + i] = combined.toArray(new int[combined.size()][]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,498,        return compIndirection;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,538,        if (orders.length != getFreeParameters()) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,539,"            throw new DimensionMismatchException(orders.length, getFreeParameters());",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,542,"        return getPartialDerivativeIndex(parameters, order, sizes, orders);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,562,        int index     = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,563,        int m         = order;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,564,        int ordersSum = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,565,        for (int i = parameters - 1; i >= 0; --i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,568,            int derivativeOrder = orders[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,571,            ordersSum += derivativeOrder;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,572,            if (ordersSum > order) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,573,"                throw new NumberIsTooLargeException(ordersSum, order, true);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,576,            while (derivativeOrder-- > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,580,                index += sizes[i][m--];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,585,        return index;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,603,        int[] orders = new int[destP];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,604,"        System.arraycopy(srcDerivativesIndirection[index], 0, orders, 0, FastMath.min(srcP, destP));",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,605,"        return getPartialDerivativeIndex(destP, destO, destSizes, orders);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,617,        return derivativesIndirection[index];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,624,        return parameters;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,631,        return order;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,642,        return sizes[parameters][order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,660,        for (int i = 0; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,661,            result[resultOffset + i] =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,664,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,685,        for (int i = 0; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,686,            result[resultOffset + i] =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,691,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,716,        for (int i = 0; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,717,            result[resultOffset + i] =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,723,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,737,        for (int i = 0; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,738,            result[resultOffset + i] = lhs[lhsOffset + i] + rhs[rhsOffset + i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,740,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,753,        for (int i = 0; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,754,            result[resultOffset + i] = lhs[lhsOffset + i] - rhs[rhsOffset + i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,756,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,771,        for (int i = 0; i < multIndirection.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,772,            final int[][] mappingI = multIndirection[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,773,            double r = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,774,            for (int j = 0; j < mappingI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,775,                r += mappingI[j][0] *,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,779,            result[resultOffset + i] = r;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,781,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,796,        final double[] reciprocal = new double[getSize()];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,797,"        pow(rhs, lhsOffset, -1, reciprocal, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,798,"        multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,799,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,815,        final double rem = lhs[lhsOffset] % rhs[rhsOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,816,        final double k   = FastMath.rint((lhs[lhsOffset] - rem) / rhs[rhsOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,819,        result[resultOffset] = rem;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,822,        for (int i = 1; i < getSize(); ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,823,            result[resultOffset + i] = lhs[lhsOffset + i] - k * rhs[rhsOffset + i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,826,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,842,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,843,"        double xk = FastMath.pow(operand[operandOffset], p - order);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,844,        for (int i = order; i > 0; --i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,845,            function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,846,            xk *= operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,848,        function[0] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,849,        double coefficient = p;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,850,        for (int i = 1; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,851,            function[i] *= coefficient;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,852,            coefficient *= p - i;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,856,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,858,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,872,        if (n == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,874,            result[resultOffset] = 1.0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,875,"            Arrays.fill(result, resultOffset + 1, resultOffset + getSize(), 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,876,            return;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,881,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,883,        if (n > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,885,"            final int maxOrder = FastMath.min(order, n);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,886,"            double xk = FastMath.pow(operand[operandOffset], n - maxOrder);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,887,            for (int i = maxOrder; i > 0; --i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,888,                function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,889,                xk *= operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,891,            function[0] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,892,        } else {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,894,            final double inv = 1.0 / operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,895,"            double xk = FastMath.pow(inv, -n);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,896,            for (int i = 0; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,897,                function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,898,                xk *= inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,902,        double coefficient = n;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,903,        for (int i = 1; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,904,            function[i] *= coefficient;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,905,            coefficient *= n - i;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,909,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,911,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,926,        final double[] logX = new double[getSize()];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,927,"        log(x, xOffset, logX, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,928,        final double[] yLogX = new double[getSize()];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,929,"        multiply(logX, 0, y, yOffset, yLogX, 0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,930,"        exp(yLogX, 0, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,931,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,947,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,949,        if (n == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,950,            function[0] = FastMath.sqrt(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,951,            xk          = 0.5 / function[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,952,        } else if (n == 3) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,953,            function[0] = FastMath.cbrt(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,954,            xk          = 1.0 / (3.0 * function[0] * function[0]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,956,"            function[0] = FastMath.pow(operand[operandOffset], 1.0 / n);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,957,"            xk          = 1.0 / (n * FastMath.pow(function[0], n - 1));",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,959,        final double nReciprocal = 1.0 / n;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,960,        final double xReciprocal = 1.0 / operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,961,        for (int i = 1; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,962,            function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,963,            xk *= xReciprocal * (nReciprocal - i);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,967,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,969,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,983,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,984,"        Arrays.fill(function, FastMath.exp(operand[operandOffset]));",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,987,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,989,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1003,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1004,        function[0] = FastMath.expm1(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1005,"        Arrays.fill(function, 1, 1 + order, FastMath.exp(operand[operandOffset]));",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1008,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1010,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1024,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1025,        function[0] = FastMath.log(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1026,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1027,            double inv = 1.0 / operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1028,            double xk  = inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1029,            for (int i = 1; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1030,                function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1031,                xk *= -i * inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1036,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1038,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1051,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1052,        function[0] = FastMath.log1p(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1053,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1054,            double inv = 1.0 / (1.0 + operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1055,            double xk  = inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1056,            for (int i = 1; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1057,                function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1058,                xk *= -i * inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1063,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1065,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1078,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1079,        function[0] = FastMath.log10(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1080,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1081,            double inv = 1.0 / operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1082,            double xk  = inv / FastMath.log(10.0);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1083,            for (int i = 1; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1084,                function[i] = xk;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1085,                xk *= -i * inv;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1090,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1092,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1106,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1107,        function[0] = FastMath.cos(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1108,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1109,            function[1] = -FastMath.sin(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1110,            for (int i = 2; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1111,                function[i] = -function[i - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1116,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1118,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1132,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1133,        function[0] = FastMath.sin(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1134,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1135,            function[1] = FastMath.cos(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1136,            for (int i = 2; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1137,                function[i] = -function[i - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1142,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1144,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1158,        final double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1159,        final double t = FastMath.tan(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1160,        function[0] = t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1162,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1171,            final double[] p = new double[order + 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1172,            p[1] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1173,            final double t2 = t * t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1174,            for (int n = 1; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1177,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1178,                p[n + 1] = n * p[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1179,                for (int k = n + 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1180,                    v = v * t2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1181,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1182,                        p[k - 2] = (k - 1) * p[k - 1] + (k - 3) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1183,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1184,                        p[0] = p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1187,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1188,                    v *= t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1191,                function[n] = v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1197,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1199,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1213,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1214,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1215,        function[0] = FastMath.acos(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1216,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1224,            final double[] p = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1225,            p[0] = -1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1226,            final double x2    = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1227,            final double f     = 1.0 / (1 - x2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1228,            double coeff = FastMath.sqrt(f);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1229,            function[1] = coeff * p[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1230,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1233,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1234,                p[n - 1] = (n - 1) * p[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1235,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1236,                    v = v * x2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1237,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1238,                        p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1239,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1240,                        p[0] = p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1243,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1244,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1247,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1248,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1254,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1256,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1270,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1271,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1272,        function[0] = FastMath.asin(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1273,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1281,            final double[] p = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1282,            p[0] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1283,            final double x2    = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1284,            final double f     = 1.0 / (1 - x2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1285,            double coeff = FastMath.sqrt(f);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1286,            function[1] = coeff * p[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1287,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1290,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1291,                p[n - 1] = (n - 1) * p[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1292,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1293,                    v = v * x2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1294,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1295,                        p[k - 2] = (k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1296,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1297,                        p[0] = p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1300,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1301,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1304,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1305,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1311,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1313,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1327,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1328,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1329,        function[0] = FastMath.atan(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1330,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1338,            final double[] q = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1339,            q[0] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1340,            final double x2    = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1341,            final double f     = 1.0 / (1 + x2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1342,            double coeff = f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1343,            function[1] = coeff * q[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1344,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1347,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1348,                q[n - 1] = -n * q[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1349,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1350,                    v = v * x2 + q[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1351,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1352,                        q[k - 2] = (k - 1) * q[k - 1] + (k - 1 - 2 * n) * q[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1353,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1354,                        q[0] = q[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1357,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1358,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1361,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1362,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1368,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1370,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1387,        double[] tmp1 = new double[getSize()];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1389,        double[] tmp2 = new double[getSize()];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1394,        if (x[xOffset] >= 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1400,            for (int i = 0; i < tmp2.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1407,"            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1408,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1409,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1410,            result[resultOffset] =,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1412,            for (int i = 1; i < tmp2.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1413,                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x)),0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1418,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1432,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1433,        function[0] = FastMath.cosh(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1434,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1435,            function[1] = FastMath.sinh(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1436,            for (int i = 2; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1437,                function[i] = function[i - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1442,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1444,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1458,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1459,        function[0] = FastMath.sinh(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1460,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1461,            function[1] = FastMath.cosh(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1462,            for (int i = 2; i <= order; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1463,                function[i] = function[i - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1468,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1470,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1484,        final double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1485,        final double t = FastMath.tanh(operand[operandOffset]);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1486,        function[0] = t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1488,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1497,            final double[] p = new double[order + 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1498,            p[1] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1499,            final double t2 = t * t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1500,            for (int n = 1; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1503,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1504,                p[n + 1] = -n * p[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1505,                for (int k = n + 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1506,                    v = v * t2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1507,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1508,                        p[k - 2] = (k - 1) * p[k - 1] - (k - 3) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1509,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1510,                        p[0] = p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1513,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1514,                    v *= t;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1517,                function[n] = v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1523,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1525,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1539,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1540,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1541,        function[0] = FastMath.acosh(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1542,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1550,            final double[] p = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1551,            p[0] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1552,            final double x2  = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1553,            final double f   = 1.0 / (x2 - 1);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1554,            double coeff = FastMath.sqrt(f);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1555,            function[1] = coeff * p[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1556,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1559,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1560,                p[n - 1] = (1 - n) * p[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1561,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1562,                    v = v * x2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1563,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1564,                        p[k - 2] = (1 - k) * p[k - 1] + (k - 2 * n) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1565,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1566,                        p[0] = -p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1569,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1570,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1573,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1574,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1580,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1582,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1596,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1597,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1598,        function[0] = FastMath.asinh(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1599,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1607,            final double[] p = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1608,            p[0] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1609,            final double x2    = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1610,            final double f     = 1.0 / (1 + x2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1611,            double coeff = FastMath.sqrt(f);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1612,            function[1] = coeff * p[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1613,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1616,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1617,                p[n - 1] = (1 - n) * p[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1618,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1619,                    v = v * x2 + p[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1620,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1621,                        p[k - 2] = (k - 1) * p[k - 1] + (k - 2 * n) * p[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1622,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1623,                        p[0] = p[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1626,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1627,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1630,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1631,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1637,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1639,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1653,        double[] function = new double[1 + order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1654,        final double x = operand[operandOffset];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1655,        function[0] = FastMath.atanh(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1656,        if (order > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1664,            final double[] q = new double[order];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1665,            q[0] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1666,            final double x2 = x * x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1667,            final double f  = 1.0 / (1 - x2);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1668,            double coeff = f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1669,            function[1] = coeff * q[0];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1670,            for (int n = 2; n <= order; ++n) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1673,                double v = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1674,                q[n - 1] = n * q[n - 2];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1675,                for (int k = n - 1; k >= 0; k -= 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1676,                    v = v * x2 + q[k];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1677,                    if (k > 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1678,                        q[k - 2] = (k - 1) * q[k - 1] + (2 * n - k + 1) * q[k - 3];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1679,                    } else if (k == 2) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1680,                        q[0] = q[1];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1683,                if ((n & 0x1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1684,                    v *= x;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1687,                coeff *= f;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1688,                function[n] = coeff * v;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1694,"        compose(operand, operandOffset, function, result, resultOffset);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1696,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1710,        for (int i = 0; i < compIndirection.length; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1711,            final int[][] mappingI = compIndirection[i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1712,            double r = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1713,            for (int j = 0; j < mappingI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1714,                final int[] mappingIJ = mappingI[j];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1715,                double product = mappingIJ[0] * f[mappingIJ[1]];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1716,                for (int k = 2; k < mappingIJ.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1717,                    product *= operand[operandOffset + mappingIJ[k]];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1719,                r += product;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1721,            result[resultOffset + i] = r;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1723,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1732,        double value = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1733,        for (int i = getSize() - 1; i >= 0; --i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1734,            final int[] orders = getPartialDerivativeOrders(i);,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1735,            double term = ds[dsOffset + i];,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1736,            for (int k = 0; k < orders.length; ++k) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1737,                if (orders[k] > 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1738,"                    term *= FastMath.pow(delta[k], orders[k]) / ArithmeticUtils.factorial(orders[k]);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1741,            value += term;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1743,        return value;,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1752,        if (parameters != compiler.parameters) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1753,"            throw new DimensionMismatchException(parameters, compiler.parameters);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1755,        if (order != compiler.order) {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1756,"            throw new DimensionMismatchException(order, compiler.order);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DSCompiler,13,1758,    },0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,596,        return new Field<DerivativeStructure>() {,0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,600,"                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 0.0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,605,"                return new DerivativeStructure(compiler.getFreeParameters(), compiler.getOrder(), 1.0);",0.0,0,-1,0
org/apache/commons/math3/analysis/differentiation/DerivativeStructure,13,610,                return DerivativeStructure.class;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,534,                return new MultivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,538,                        final int n = x.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,541,                        final DerivativeStructure[] dsX = new DerivativeStructure[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,542,                        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,543,                            if (i == k) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,544,"                                dsX[i] = new DerivativeStructure(1, 1, 0, x[i]);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,546,"                                dsX[i] = new DerivativeStructure(1, 1, x[i]);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,549,                        final DerivativeStructure y = f.value(dsX);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,552,                        return y.getPartialDerivative(1);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,196,        return new DifferentiableUnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,199,                double r = f[0].value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,200,                for (int i = 1; i < f.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,201,                    r += f[i].value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,203,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,208,                return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,229,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,232,                double r = f[0].value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,233,                for (int i = 1; i < f.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,234,                    r *= f[i].value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,236,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,52,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,55,                double r = x;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,56,                for (int i = f.length - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,57,                    r = f[i].value(r);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,59,                return r;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,345,        return new MultivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,348,"                double result = combiner.value(initialValue, f.value(point[0]));",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,349,                for (int i = 1; i < point.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,350,"                    result = combiner.value(result, f.value(point[i]));",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,352,                return result;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,604,        return new MultivariateDifferentiableFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,608,                return f.value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,619,                final int parameters = t[0].getFreeParameters();,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,620,                final int order      = t[0].getOrder();,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,621,                final int n          = t.length;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,622,                if (order > 1) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,623,"                    throw new NumberIsTooLargeException(order, 1, true);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,627,                for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,628,                    if (t[i].getFreeParameters() != parameters) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,629,"                        throw new DimensionMismatchException(t[i].getFreeParameters(), parameters);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,632,                    if (t[i].getOrder() != order) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,633,"                        throw new DimensionMismatchException(t[i].getOrder(), order);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,638,                final double[] point = new double[n];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,639,                for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,640,                    point[i] = t[i].getValue();,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,642,                final double value      = f.value(point);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,643,                final double[] gradient = f.gradient().value(point);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,646,                final double[] derivatives = new double[parameters + 1];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,647,                derivatives[0] = value;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,648,                final int[] orders = new int[parameters];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,649,                for (int i = 0; i < parameters; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,650,                    orders[i] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,651,                    for (int j = 0; j < n; ++j) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,652,                        derivatives[i + 1] += gradient[j] * t[j].getPartialDerivative(orders);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,654,                    orders[i] = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,657,"                return new DerivativeStructure(parameters, order, derivatives);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,481,        return new UnivariateDifferentiableFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,485,                return f.value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,493,                switch (t.getOrder()) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,495,"                        return new DerivativeStructure(t.getFreeParameters(), 0, f.value(t.getValue()));",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,497,                        final int parameters = t.getFreeParameters();,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,498,                        final double[] derivatives = new double[parameters + 1];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,499,                        derivatives[0] = f.value(t.getValue());,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,500,                        final double fPrime = f.derivative().value(t.getValue());,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,501,                        int[] orders = new int[parameters];,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,502,                        for (int i = 0; i < parameters; ++i) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,503,                            orders[i] = 1;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,504,                            derivatives[i + 1] = fPrime * t.getPartialDerivative(orders);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,505,                            orders[i] = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,507,"                        return new DerivativeStructure(parameters, 1, derivatives);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,510,"                        throw new NumberIsTooLargeException(t.getOrder(), 1, true);",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,324,        return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,327,"                return combiner.value(f.value(x), g.value(x));",0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,208,                return new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,211,                        double r = f[0].derivative().value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,212,                        for (int i = 1; i < f.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,213,                            r += f[i].derivative().value(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/FunctionUtils,13,215,                        return r;,0.0,0,-1,0
