project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,275,        updateJacobian();,1.0,0,,0,0.33710843398760243,0.6628915660123962
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,        double[][] jTj = new double[cols][cols];,1.0,0,,0,0.6055823210862522,0.39441767891374857
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,        for (int i = 0; i < cols; ++i) {,1.0,0,,0,0.507365171423099,0.49263482857690044
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,            for (int j = i; j < cols; ++j) {,1.0,0,,0,0.4184855581336429,0.5815144418663576
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,                double sum = 0;,1.0,0,,0,0.0909501853640879,0.9090498146359118
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,282,                for (int k = 0; k < rows; ++k) {,1.0,0,,0,0.3216033234239461,0.6783966765760525
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,                    sum += jacobian[k][i] * jacobian[k][j];,1.0,0,,0,0.4530092064796019,0.5469907935203993
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,                jTj[i][j] = sum;,1.0,0,,0,0.49585587811523885,0.5041441218847605
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,                jTj[j][i] = sum;,1.0,0,,0,0.49585587811523885,0.5041441218847605
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,            RealMatrix inverse =,1.0,0,,0,0.4455574677531501,0.5544425322468508
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,        if (rows <= cols) {,1.0,0,,0,0.4074617089646503,0.5925382910353492
org/apache/commons/math/linear/AbstractRealMatrix,65,44,    protected AbstractRealMatrix() {,1.0,0,,0,0.44200139039991293,0.5579986096000864
org/apache/commons/math/linear/AbstractRealMatrix,65,45,        lu = null;,1.0,0,,0,0.25269524415643485,0.7473047558435666
org/apache/commons/math/linear/AbstractRealMatrix,65,46,    },1.0,0,,0,0.1549795882941228,0.8450204117058774
org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);",1.0,0,,0,0.3996075504118696,0.6003924495881308
org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,        data = new double[rowDimension][columnDimension];,1.0,0,,0,0.6865207813168184,0.3134792186831828
org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,    },1.0,0,,0,0.1549795882941228,0.8450204117058774
org/apache/commons/math/linear/Array2DRowRealMatrix,65,95,"        throws IllegalArgumentException, NullPointerException {",1.0,0,,0,0.35528967363941516,0.6447103263605856
org/apache/commons/math/linear/Array2DRowRealMatrix,65,96,        copyIn(d);,1.0,0,,0,0.31766108930470394,0.6823389106952951
org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,    },1.0,0,,0,0.1549795882941228,0.8450204117058774
org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,        return copyOut();,1.0,0,,0,0.35904701255952515,0.6409529874404748
org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,        if (data == null) {,1.0,0,,0,0.38104744114027705,0.6189525588597229
org/apache/commons/math/linear/Array2DRowRealMatrix,65,317,            if (row > 0) {,1.0,0,,0,0.3309421665705007,0.6690578334294994
org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,            if (column > 0) {,1.0,0,,0,0.3289398028803809,0.6710601971196198
org/apache/commons/math/linear/Array2DRowRealMatrix,65,325,            final int nRows = subMatrix.length;,1.0,0,,0,0.27261715898757327,0.7273828410124279
org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,            if (nRows == 0) {,1.0,0,,0,0.3289398028803809,0.6710601971196198
org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,            final int nCols = subMatrix[0].length;,1.0,0,,0,0.6332837170916583,0.3667162829083414
org/apache/commons/math/linear/Array2DRowRealMatrix,65,332,            if (nCols == 0) {,1.0,0,,0,0.3289398028803809,0.6710601971196198
org/apache/commons/math/linear/Array2DRowRealMatrix,65,336,            data = new double[subMatrix.length][nCols];,1.0,0,,0,0.6490205810056714,0.350979418994328
org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,            for (int i = 0; i < data.length; ++i) {,1.0,0,,0,0.3782542642895379,0.6217457357104622
org/apache/commons/math/linear/Array2DRowRealMatrix,65,338,                if (subMatrix[i].length != nCols) {,1.0,0,,0,0.5755061181345087,0.4244938818654919
org/apache/commons/math/linear/Array2DRowRealMatrix,65,342,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",1.0,0,,0,0.4146378342427565,0.5853621657572446
org/apache/commons/math/linear/Array2DRowRealMatrix,65,344,        } else {,1.0,0,,0,0.19258881804678057,0.8074111819532206
org/apache/commons/math/linear/Array2DRowRealMatrix,65,348,    },1.0,0,,0,0.1549795882941228,0.8450204117058774
org/apache/commons/math/linear/Array2DRowRealMatrix,65,367,            data[row][column] = value;,1.0,0,,0,0.583158761321682,0.4168412386783187
org/apache/commons/math/linear/Array2DRowRealMatrix,65,371,        },1.0,0,,0,0.1549795882941228,0.8450204117058774
org/apache/commons/math/linear/Array2DRowRealMatrix,65,372,    },1.0,0,,0,0.1549795882941228,0.8450204117058774
org/apache/commons/math/linear/Array2DRowRealMatrix,65,401,        return (data == null) ? 0 : data.length;,1.0,0,,0,0.4079840245262118,0.5920159754737885
org/apache/commons/math/linear/Array2DRowRealMatrix,65,407,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,1.0,0,,0,0.9043302954240866,0.09566970457591269
org/apache/commons/math/linear/Array2DRowRealMatrix,65,597,        final int nRows = this.getRowDimension();,1.0,0,,0,0.41985921459339115,0.5801407854066105
org/apache/commons/math/linear/Array2DRowRealMatrix,65,598,        final double[][] out = new double[nRows][this.getColumnDimension()];,1.0,0,,0,0.7629626428260435,0.23703735717395638
org/apache/commons/math/linear/Array2DRowRealMatrix,65,600,        for (int i = 0; i < nRows; i++) {,1.0,0,,0,0.4615943259652016,0.5384056740347971
org/apache/commons/math/linear/Array2DRowRealMatrix,65,601,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",1.0,0,,0,0.5260978629803909,0.47390213701961054
org/apache/commons/math/linear/Array2DRowRealMatrix,65,603,        return out;,1.0,0,,0,0.2042900405422023,0.7957099594577991
org/apache/commons/math/linear/Array2DRowRealMatrix,65,617,"        setSubMatrix(in, 0, 0);",1.0,0,,0,0.24030083199795554,0.7596991680020437
org/apache/commons/math/linear/Array2DRowRealMatrix,65,618,    },1.0,0,,0,0.1549795882941228,0.8450204117058774
org/apache/commons/math/linear/LUDecompositionImpl,65,361,            final int m = pivot.length;,1.0,0,,0,0.2918696266391444,0.7081303733608545
org/apache/commons/math/linear/LUDecompositionImpl,65,362,            if (b.getRowDimension() != m) {,1.0,0,,0,0.3742097196773513,0.6257902803226474
org/apache/commons/math/linear/LUDecompositionImpl,65,367,            if (singular) {,1.0,0,,0,0.3059107611291312,0.6940892388708704
org/apache/commons/math/linear/LUDecompositionImpl,65,417,            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));,1.0,0,,0,0.4836880389947867,0.516311961005214
org/apache/commons/math/linear/MatrixUtils,65,62,        return (rows * columns <= 4096) ?,1.0,0,,0,0.4391923067064878,0.5608076932935117
org/apache/commons/math/linear/MatrixUtils,65,107,        return (data.length * data[0].length <= 4096) ?,1.0,0,,0,0.7554146696944062,0.24458533030559396
org/apache/commons/math/linear/MatrixUtils,65,143,"        final RealMatrix m = createRealMatrix(dimension, dimension);",1.0,0,,0,0.782634304778371,0.21736569522162902
org/apache/commons/math/linear/MatrixUtils,65,144,        for (int i = 0; i < dimension; ++i) {,1.0,0,,0,0.4680358019906156,0.5319641980093833
org/apache/commons/math/linear/MatrixUtils,65,145,"            m.setEntry(i, i, 1.0);",1.0,0,,0,0.06944990850052057,0.9305500914994798
org/apache/commons/math/linear/MatrixUtils,65,147,        return m;,1.0,0,,0,0.20614827653143683,0.7938517234685647
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,149,        return objectiveEvaluations;,0.33333,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,154,        return jacobianEvaluations;,0.33333,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,161,    },0.07143,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,106,                final double[] luRow = lu[row];,0.0625,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,107,                sum = luRow[col];,0.0625,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,108,                for (int i = 0; i < row; i++) {,0.0625,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,111,                luRow[col] = sum;,0.0625,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,121,                    sum -= luRow[i] * lu[i][col];,0.0625,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,157,                lu[row][col] /= luDiag;,0.0625,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,638,        return getColumnDimension() == getRowDimension();,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,68,"        this(matrix, DEFAULT_TOO_SMALL);",0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,69,    },0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,79,        throws NonSquareMatrixException {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,81,        if (!matrix.isSquare()) {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,85,        final int m = matrix.getColumnDimension();,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,86,        lu = matrix.getData();,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,87,        pivot = new int[m];,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,88,        cachedL = null;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,89,        cachedU = null;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,90,        cachedP = null;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,93,        for (int row = 0; row < m; row++) {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,94,            pivot[row] = row;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,96,        even     = true;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,97,        singular = false;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,100,        for (int col = 0; col < m; col++) {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,102,            double sum = 0;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,105,            for (int row = 0; row < col; row++) {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,115,            int max = col; // permutation row,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,116,            double largest = Double.NEGATIVE_INFINITY;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,117,            for (int row = col; row < m; row++) {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,118,                final double[] luRow = lu[row];,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,119,                sum = luRow[col];,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,120,                for (int i = 0; i < col; i++) {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,123,                luRow[col] = sum;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,126,                if (Math.abs(sum) > largest) {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,127,                    largest = Math.abs(sum);,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,128,                    max = row;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,133,            if (Math.abs(lu[max][col]) < singularityThreshold) {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,139,            if (max != col) {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,155,            final double luDiag = lu[col][col];,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,156,            for (int row = col + 1; row < m; row++) {,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,227,"        return new Solver(lu, pivot, singular);",0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,248,"        private Solver(final double[][] lu, final int[] pivot, final boolean singular) {",0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,249,            this.lu       = lu;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,250,            this.pivot    = pivot;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,251,            this.singular = singular;,0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,252,        },0.05556,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,231,    private static class Solver implements DecompositionSolver {,0.05556,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,56,        throws IllegalArgumentException {,0.03125,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,57,        if (rowDimension < 1 ) {,0.03125,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,61,        if (columnDimension <= 0) {,0.03125,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,65,        lu = null;,0.03125,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,66,    },0.03125,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,448,                        return current;,0.02703,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,240,        double criterion = 0;,0.02326,1,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,241,        for (int i = 0; i < rows; ++i) {,0.02326,1,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,242,            final double residual = residuals[i];,0.02326,1,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,243,            criterion += residual * residual * residualsWeights[i];,0.02326,1,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,245,        return Math.sqrt(criterion / rows);,0.02326,1,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,81,        return point;,0.02222,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,854,        rank = solvedCols;,0.02222,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,856,    },0.02222,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,508,                lmDir[permutation[i]] -= ypk * jacobian[i][pk];,0.02174,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,444,                    if (((Math.abs(actRed) <= costRelativeTolerance) &&,0.02083,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,525,            lmPar = 0;,0.02083,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,526,            return;,0.02083,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,842,                double gamma = 0;,0.02083,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,843,                for (int j = k; j < jacobian.length; ++j) {,0.02083,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,844,                    gamma += jacobian[j][pk] * jacobian[j][permutation[k + dk]];,0.02083,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,846,                gamma *= betak;,0.02083,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,847,                for (int j = k; j < jacobian.length; ++j) {,0.02083,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,848,                    jacobian[j][permutation[k + dk]] -= gamma * jacobian[j][pk];,0.02083,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,279,            qTy(residuals);,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,283,            for (int k = 0; k < solvedCols; ++k) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,284,                int pk = permutation[k];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,285,                jacobian[k][pk] = diagR[pk];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,288,            if (firstIteration) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,292,                xNorm = 0;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,293,                for (int k = 0; k < cols; ++k) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,294,                    double dk = jacNorm[k];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,295,                    if (dk == 0) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,298,                    double xk = dk * point[k];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,299,                    xNorm  += xk * xk;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,300,                    diag[k] = dk;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,302,                xNorm = Math.sqrt(xNorm);,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,305,                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,310,            double maxCosine = 0;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,311,            if (cost != 0) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,312,                for (int j = 0; j < solvedCols; ++j) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,313,                    int    pj = permutation[j];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,314,                    double s  = jacNorm[pj];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,315,                    if (s != 0) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,316,                        double sum = 0;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,317,                        for (int i = 0; i <= j; ++i) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,318,                            sum += jacobian[i][pj] * residuals[i];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,320,"                        maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));",0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,324,            if (maxCosine <= orthoTolerance) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,330,            for (int j = 0; j < cols; ++j) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,331,"                diag[j] = Math.max(diag[j], jacNorm[j]);",0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,335,            for (double ratio = 0; ratio < 1.0e-4;) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,338,                for (int j = 0; j < solvedCols; ++j) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,339,                    int pj = permutation[j];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,340,                    oldX[pj] = point[pj];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,342,                double previousCost = cost;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,343,                double[] tmpVec = residuals;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,344,                residuals = oldRes;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,345,                oldRes    = tmpVec;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,348,"                determineLMParameter(oldRes, delta, diag, work1, work2, work3);",0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,351,                double lmNorm = 0;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,352,                for (int j = 0; j < solvedCols; ++j) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,353,                    int pj = permutation[j];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,354,                    lmDir[pj] = -lmDir[pj];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,355,                    point[pj] = oldX[pj] + lmDir[pj];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,356,                    double s = diag[pj] * lmDir[pj];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,357,                    lmNorm  += s * s;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,359,                lmNorm = Math.sqrt(lmNorm);,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,362,                if (firstIteration) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,363,"                    delta = Math.min(delta, lmNorm);",0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,367,                updateResidualsAndCost();,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,368,"                current = new VectorialPointValuePair(point, objective);",0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,371,                double actRed = -1.0;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,372,                if (0.1 * cost < previousCost) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,373,                    double r = cost / previousCost;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,374,                    actRed = 1.0 - r * r;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,379,                for (int j = 0; j < solvedCols; ++j) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,380,                    int pj = permutation[j];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,381,                    double dirJ = lmDir[pj];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,382,                    work1[j] = 0;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,383,                    for (int i = 0; i <= j; ++i) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,384,                        work1[i] += jacobian[i][pj] * dirJ;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,387,                double coeff1 = 0;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,388,                for (int j = 0; j < solvedCols; ++j) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,389,                    coeff1 += work1[j] * work1[j];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,391,                double pc2 = previousCost * previousCost;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,392,                coeff1 = coeff1 / pc2;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,393,                double coeff2 = lmPar * lmNorm * lmNorm / pc2;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,394,                double preRed = coeff1 + 2 * coeff2;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,395,                double dirDer = -(coeff1 + coeff2);,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,398,                ratio = (preRed == 0) ? 0 : (actRed / preRed);,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,401,                if (ratio <= 0.25) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,410,                    delta = 2 * lmNorm;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,411,                    lmPar *= 0.5;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,415,                if (ratio >= 1.0e-4) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,417,                    firstIteration = false;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,418,                    xNorm = 0;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,419,                    for (int k = 0; k < cols; ++k) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,420,                        double xK = diag[k] * point[k];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,421,                        xNorm    += xK * xK;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,423,                    xNorm = Math.sqrt(xNorm);,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,437,                if (checker != null) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,454,                if ((Math.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,457,                } else if (delta <= 2.2204e-16 * xNorm) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,460,                } else if (maxCosine <= 2.2204e-16)  {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,465,            },0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,467,        },0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,498,        for (int j = 0; j < rank; ++j) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,499,            lmDir[permutation[j]] = qy[j];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,501,        for (int j = rank; j < cols; ++j) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,504,        for (int k = rank - 1; k >= 0; --k) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,505,            int pk = permutation[k];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,506,            double ypk = lmDir[pk] / diagR[pk];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,507,            for (int i = 0; i < k; ++i) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,510,            lmDir[pk] = ypk;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,515,        double dxNorm = 0;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,516,        for (int j = 0; j < solvedCols; ++j) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,517,            int pj = permutation[j];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,518,            double s = diag[pj] * lmDir[pj];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,519,            work1[pj] = s;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,520,            dxNorm += s * s;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,522,        dxNorm = Math.sqrt(dxNorm);,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,523,        double fp = dxNorm - delta;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,524,        if (fp <= 0.1 * delta) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,864,        for (int k = 0; k < cols; ++k) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,865,            int pk = permutation[k];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,866,            double gamma = 0;,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,867,            for (int i = k; i < rows; ++i) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,868,                gamma += jacobian[i][pk] * y[i];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,870,            gamma *= beta[pk];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,871,            for (int i = k; i < rows; ++i) {,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,872,                y[i] -= gamma * jacobian[i][pk];,0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,875,    },0.02041,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,245,"        solvedCols  = Math.min(rows, cols);",0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,246,        diagR       = new double[cols];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,247,        jacNorm     = new double[cols];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,248,        beta        = new double[cols];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,249,        permutation = new int[cols];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,250,        lmDir       = new double[cols];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,253,        double   delta   = 0;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,254,        double   xNorm   = 0;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,255,        double[] diag    = new double[cols];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,256,        double[] oldX    = new double[cols];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,257,        double[] oldRes  = new double[rows];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,258,        double[] work1   = new double[cols];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,259,        double[] work2   = new double[cols];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,260,        double[] work3   = new double[cols];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,263,        updateResidualsAndCost();,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,266,        lmPar = 0;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,267,        boolean firstIteration = true;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,268,"        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);",0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,271,            incrementIterationsCounter();,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,274,            VectorialPointValuePair previous = current;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,275,            updateJacobian();,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,276,            qrDecomposition();,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,791,        for (int k = 0; k < cols; ++k) {,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,792,            permutation[k] = k;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,793,            double norm2 = 0;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,794,            for (int i = 0; i < jacobian.length; ++i) {,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,795,                double akk = jacobian[i][k];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,796,                norm2 += akk * akk;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,798,            jacNorm[k] = Math.sqrt(norm2);,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,802,        for (int k = 0; k < cols; ++k) {,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,805,            int nextColumn = -1;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,806,            double ak2 = Double.NEGATIVE_INFINITY;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,807,            for (int i = k; i < cols; ++i) {,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,808,                double norm2 = 0;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,809,                for (int j = k; j < jacobian.length; ++j) {,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,810,                    double aki = jacobian[j][permutation[i]];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,811,                    norm2 += aki * aki;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,813,                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,817,                if (norm2 > ak2) {,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,818,                    nextColumn = i;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,819,                    ak2        = norm2;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,822,            if (ak2 <= qrRankingThreshold) {,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,826,            int pk                  = permutation[nextColumn];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,827,            permutation[nextColumn] = permutation[k];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,828,            permutation[k]          = pk;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,831,            double akk   = jacobian[k][pk];,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,832,            double alpha = (akk > 0) ? -Math.sqrt(ak2) : Math.sqrt(ak2);,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,833,            double betak = 1.0 / (ak2 - akk * alpha);,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,834,            beta[pk]     = betak;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,837,            diagR[pk]        = alpha;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,838,            jacobian[k][pk] -= alpha;,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,841,            for (int dk = cols - 1 - k; dk > 0; --dk) {,0.02,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,166,    public LevenbergMarquardtOptimizer() {,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,169,        setMaxIterations(1000);,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,172,        setConvergenceChecker(null);,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,173,        setInitialStepBoundFactor(100.0);,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,174,        setCostRelativeTolerance(1.0e-10);,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,175,        setParRelativeTolerance(1.0e-10);,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,176,        setOrthoTolerance(1.0e-10);,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,177,        setQRRankingThreshold(MathUtils.SAFE_MIN);,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,179,    },0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,191,        this.initialStepBoundFactor = initialStepBoundFactor;,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,192,    },0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,201,        this.costRelativeTolerance = costRelativeTolerance;,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,202,    },0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,212,        this.parRelativeTolerance = parRelativeTolerance;,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,213,    },0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,223,        this.orthoTolerance = orthoTolerance;,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,224,    },0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,236,        this.qrRankingThreshold = threshold;,0.01923,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,237,    },0.01923,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,46,"    public VectorialPointValuePair(final double[] point, final double[] value) {",0.01429,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,47,        this.point = (point == null) ? null : point.clone();,0.01429,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,48,        this.value = (value == null) ? null : value.clone();,0.01429,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,49,    },0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,184,        ++jacobianEvaluations;,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,185,        jacobian = jF.value(point);,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,186,        if (jacobian.length != rows) {,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,190,        for (int i = 0; i < rows; i++) {,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,191,            final double[] ji = jacobian[i];,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,192,            final double factor = -Math.sqrt(residualsWeights[i]);,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,193,            for (int j = 0; j < cols; ++j) {,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,194,                ji[j] *= factor;,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,197,    },0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,213,        if (objective.length != rows) {,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,217,        cost = 0;,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,218,        int index = 0;,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,219,        for (int i = 0; i < rows; i++) {,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,220,            final double residual = targetValues[i] - objective[i];,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,221,            residuals[i] = residual;,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,222,            cost += residualsWeights[i] * residual * residual;,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,223,            index += cols;,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,225,        cost = Math.sqrt(cost);,0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,227,    },0.01429,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,173,        if (++iterations > maxIterations) {,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,176,    },0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,208,        if (++objectiveEvaluations > maxEvaluations) {,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,212,        objective = function.value(point);,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,332,        if (target.length != weights.length) {,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,338,        iterations           = 0;,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,339,        objectiveEvaluations = 0;,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,340,        jacobianEvaluations  = 0;,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,343,        function         = f;,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,344,        jF               = f.jacobian();,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,345,        targetValues     = target.clone();,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,346,        residualsWeights = weights.clone();,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,347,        this.point       = startPoint.clone();,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,348,        this.residuals   = new double[target.length];,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,351,        rows      = target.length;,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,352,        cols      = point.length;,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,353,        jacobian  = new double[rows][cols];,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,355,        cost = Double.POSITIVE_INFINITY;,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,357,        return doOptimize();,0.01408,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,116,    protected AbstractLeastSquaresOptimizer() {,0.0137,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,117,        setConvergenceChecker(new SimpleVectorialValueChecker());,0.0137,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,118,        setMaxIterations(DEFAULT_MAX_ITERATIONS);,0.0137,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,119,        setMaxEvaluations(Integer.MAX_VALUE);,0.0137,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,120,    },0.0137,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,124,        this.maxIterations = maxIterations;,0.0137,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,125,    },0.0137,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,139,        this.maxEvaluations = maxEvaluations;,0.0137,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,140,    },0.0137,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,159,        this.checker = convergenceChecker;,0.0137,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,160,    },0.0137,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,50,    public SimpleVectorialValueChecker() {,0.0137,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,51,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,0.0137,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,52,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,0.0137,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,53,    },0.0137,0,-1,0
org/apache/commons/math/MathRuntimeException,65,684,        return new RuntimeException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,692,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,698,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,64,"        this(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,65,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,76,        this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,77,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,78,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,88,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,91,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,106,"        this(rootCause, new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,107,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,121,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,122,        this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,124,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,136,"        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,146,        return pattern.getSourceString();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,155,        return pattern;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,163,        return arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,173,        if (pattern != null) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,174,"            return buildMessage(locale, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,176,"        return """";",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,182,        return getMessage(Locale.US);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,188,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,196,        printStackTrace(System.err);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,197,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,206,        synchronized (out) {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,207,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,208,            printStackTrace(pw);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,210,            pw.flush();,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,211,        },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,212,    },0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,238,        return new ArithmeticException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,269,"        return createArrayIndexOutOfBoundsException(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,282,        return new ArrayIndexOutOfBoundsException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,313,"        return createEOFException(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,326,        return new EOFException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,358,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,359,        ioe.initCause(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,360,        return ioe;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,374,"        return createIllegalArgumentException(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,387,        return new IllegalArgumentException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,416,        iae.initCause(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,417,        return iae;,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,444,        return new IllegalStateException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,488,        return new ConcurrentModificationException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,532,        return new NoSuchElementException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,562,        return new UnsupportedOperationException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,593,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,606,        return new NullPointerException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,640,"        return createParseException(offset, new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,656,"        return new ParseException(null, offset) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,682,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,684,        return new RuntimeException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,39,public class MathRuntimeException extends RuntimeException {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,656,"        return new ParseException(null, offset) {",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,664,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,670,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,606,        return new NullPointerException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,614,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,620,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,562,        return new UnsupportedOperationException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,570,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,576,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,532,        return new NoSuchElementException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,540,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,546,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,488,        return new ConcurrentModificationException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,496,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,502,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,444,        return new IllegalStateException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,452,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,458,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,387,        return new IllegalArgumentException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,395,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,401,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,326,        return new EOFException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,334,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,340,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,282,        return new ArrayIndexOutOfBoundsException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,290,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,296,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,238,        return new ArithmeticException() {,0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,246,"                return buildMessage(Locale.US, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MathRuntimeException,65,252,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MaxEvaluationsExceededException,65,45,"        super(LocalizedFormats.MAX_EVALUATIONS_EXCEEDED, maxEvaluations);",0.0,0,-1,0
org/apache/commons/math/MaxEvaluationsExceededException,65,46,        this.maxEvaluations = maxEvaluations;,0.0,0,-1,0
org/apache/commons/math/MaxEvaluationsExceededException,65,47,    },0.0,0,-1,0
org/apache/commons/math/MaxEvaluationsExceededException,65,60,"        this(maxEvaluations, new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MaxEvaluationsExceededException,65,61,    },0.0,0,-1,0
org/apache/commons/math/MaxEvaluationsExceededException,65,73,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MaxEvaluationsExceededException,65,74,        this.maxEvaluations = maxEvaluations;,0.0,0,-1,0
org/apache/commons/math/MaxEvaluationsExceededException,65,75,    },0.0,0,-1,0
org/apache/commons/math/MaxEvaluationsExceededException,65,81,        return maxEvaluations;,0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,39,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,51,"        this(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,52,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,62,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,63,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,70,        super(cause);,0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,71,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,84,"        this(cause, new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,85,    },0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,96,"        super(cause, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/ConvergenceException,65,97,    },0.0,0,-1,0
org/apache/commons/math/MathException,65,57,    public MathException() {,0.0,0,-1,0
org/apache/commons/math/MathException,65,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,0.0,0,-1,0
org/apache/commons/math/MathException,65,59,"        this.arguments = new Object[] { """" };",0.0,0,-1,0
org/apache/commons/math/MathException,65,60,    },0.0,0,-1,0
org/apache/commons/math/MathException,65,72,"      this(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathException,65,73,    },0.0,0,-1,0
org/apache/commons/math/MathException,65,83,"    public MathException(Localizable pattern, Object ... arguments) {",0.0,0,-1,0
org/apache/commons/math/MathException,65,84,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,65,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,65,86,    },0.0,0,-1,0
org/apache/commons/math/MathException,65,96,        super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathException,65,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,0.0,0,-1,0
org/apache/commons/math/MathException,65,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",0.0,0,-1,0
org/apache/commons/math/MathException,65,99,    },0.0,0,-1,0
org/apache/commons/math/MathException,65,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MathException,65,115,    },0.0,0,-1,0
org/apache/commons/math/MathException,65,128,      super(rootCause);,0.0,0,-1,0
org/apache/commons/math/MathException,65,129,      this.pattern   = pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,65,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,65,131,    },0.0,0,-1,0
org/apache/commons/math/MathException,65,141,        return pattern.getSourceString();,0.0,0,-1,0
org/apache/commons/math/MathException,65,150,        return pattern;,0.0,0,-1,0
org/apache/commons/math/MathException,65,159,        return arguments.clone();,0.0,0,-1,0
org/apache/commons/math/MathException,65,170,        if (pattern != null) {,0.0,0,-1,0
org/apache/commons/math/MathException,65,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",0.0,0,-1,0
org/apache/commons/math/MathException,65,173,"        return """";",0.0,0,-1,0
org/apache/commons/math/MathException,65,179,        return getMessage(Locale.US);,0.0,0,-1,0
org/apache/commons/math/MathException,65,185,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math/MathException,65,193,        printStackTrace(System.err);,0.0,0,-1,0
org/apache/commons/math/MathException,65,194,    },0.0,0,-1,0
org/apache/commons/math/MathException,65,203,        synchronized (out) {,0.0,0,-1,0
org/apache/commons/math/MathException,65,204,"            PrintWriter pw = new PrintWriter(out, false);",0.0,0,-1,0
org/apache/commons/math/MathException,65,205,            printStackTrace(pw);,0.0,0,-1,0
org/apache/commons/math/MathException,65,207,            pw.flush();,0.0,0,-1,0
org/apache/commons/math/MathException,65,208,        },0.0,0,-1,0
org/apache/commons/math/MathException,65,209,    },0.0,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,59,                                   final boolean copyArray) {,0.0,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,60,        this.point = copyArray ?,0.0,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,63,        this.value = copyArray ?,0.0,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,66,    },0.0,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,72,        return (point == null) ? null : point.clone();,0.0,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,88,        return (value == null) ? null : value.clone();,0.0,0,-1,0
org/apache/commons/math/optimization/VectorialPointValuePair,65,97,        return value;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,296,                        dk = 1.0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,326,                return current;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,402,                    double tmp =,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,404,                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,405,                            tmp = 0.1;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,407,"                        delta = tmp * Math.min(delta, 10.0 * lmNorm);",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,408,                        lmPar /= tmp;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,409,                } else if ((lmPar == 0) || (ratio >= 0.75)) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,426,                    cost = previousCost;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,427,                    for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,428,                        int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,429,                        point[pj] = oldX[pj];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,431,                    tmpVec    = residuals;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,432,                    residuals = oldRes;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,433,                    oldRes    = tmpVec;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,439,"                    if (checker.converged(getIterations(), previous, current)) {",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,440,                        return current;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,455,"                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,458,"                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,461,"                    throw new OptimizationException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,502,            lmDir[permutation[j]] = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,533,        double parl = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,534,        if (rank == solvedCols) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,535,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,536,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,537,                work1[pj] *= diag[pj] / dxNorm;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,539,            sum2 = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,540,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,541,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,542,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,543,                for (int i = 0; i < j; ++i) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,544,                    sum += jacobian[i][pj] * work1[permutation[i]];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,546,                double s = (work1[pj] - sum) / diagR[pj];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,547,                work1[pj] = s;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,548,                sum2 += s * s;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,550,            parl = fp / (delta * sum2);,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,554,        sum2 = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,555,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,556,            int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,557,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,558,            for (int i = 0; i <= j; ++i) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,559,                sum += jacobian[i][pj] * qy[i];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,561,            sum /= diag[pj];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,562,            sum2 += sum * sum;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,564,        double gNorm = Math.sqrt(sum2);,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,565,        double paru = gNorm / delta;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,566,        if (paru == 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,568,"            paru = 2.2251e-308 / Math.min(delta, 0.1);",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,573,"        lmPar = Math.min(paru, Math.max(lmPar, parl));",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,574,        if (lmPar == 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,575,            lmPar = gNorm / dxNorm;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,578,        for (int countdown = 10; countdown >= 0; --countdown) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,581,            if (lmPar == 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,582,"                lmPar = Math.max(2.2251e-308, 0.001 * paru);",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,584,            double sPar = Math.sqrt(lmPar);,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,585,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,586,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,587,                work1[pj] = sPar * diag[pj];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,589,"            determineLMDirection(qy, work1, work2, work3);",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,591,            dxNorm = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,592,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,593,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,594,                double s = diag[pj] * lmDir[pj];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,595,                work3[pj] = s;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,596,                dxNorm += s * s;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,598,            dxNorm = Math.sqrt(dxNorm);,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,599,            double previousFP = fp;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,600,            fp = dxNorm - delta;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,604,            if ((Math.abs(fp) <= 0.1 * delta) ||,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,606,                return;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,610,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,611,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,612,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,614,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,615,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,616,                work1[pj] /= work2[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,617,                double tmp = work1[pj];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,618,                for (int i = j + 1; i < solvedCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,619,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,622,            sum2 = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,623,            for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,624,                double s = work1[permutation[j]];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,625,                sum2 += s * s;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,627,            double correction = fp / (delta * sum2);,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,630,            if (fp > 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,631,"                parl = Math.max(parl, lmPar);",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,632,            } else if (fp < 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,633,"                paru = Math.min(paru, lmPar);",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,637,"            lmPar = Math.max(parl, lmPar + correction);",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,640,    },0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,667,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,668,            int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,669,            for (int i = j + 1; i < solvedCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,670,                jacobian[i][pj] = jacobian[j][permutation[i]];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,672,            lmDir[j] = diagR[pj];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,673,            work[j]  = qy[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,677,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,681,            int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,682,            double dpj = diag[pj];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,683,            if (dpj != 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,684,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,686,            lmDiag[j] = dpj;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,691,            double qtbpj = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,692,            for (int k = j; k < solvedCols; ++k) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,693,                int pk = permutation[k];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,697,                if (lmDiag[k] != 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,701,                    double rkk = jacobian[k][pk];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,702,                    if (Math.abs(rkk) < Math.abs(lmDiag[k])) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,703,                        final double cotan = rkk / lmDiag[k];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,704,                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,705,                        cos   = sin * cotan;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,706,                    } else {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,707,                        final double tan = lmDiag[k] / rkk;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,708,                        cos = 1.0 / Math.sqrt(1.0 + tan * tan);,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,709,                        sin = cos * tan;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,714,                    jacobian[k][pk] = cos * rkk + sin * lmDiag[k];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,715,                    final double temp = cos * work[k] + sin * qtbpj;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,716,                    qtbpj = -sin * work[k] + cos * qtbpj;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,717,                    work[k] = temp;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,720,                    for (int i = k + 1; i < solvedCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,721,                        double rik = jacobian[i][pk];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,722,                        final double temp2 = cos * rik + sin * lmDiag[i];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,723,                        lmDiag[i] = -sin * rik + cos * lmDiag[i];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,724,                        jacobian[i][pk] = temp2;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,732,            lmDiag[j] = jacobian[j][permutation[j]];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,733,            jacobian[j][permutation[j]] = lmDir[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,739,        int nSing = solvedCols;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,740,        for (int j = 0; j < solvedCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,741,            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,742,                nSing = j;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,744,            if (nSing < solvedCols) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,745,                work[j] = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,748,        if (nSing > 0) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,749,            for (int j = nSing - 1; j >= 0; --j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,750,                int pj = permutation[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,751,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,752,                for (int i = j + 1; i < nSing; ++i) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,753,                    sum += jacobian[i][pj] * work[i];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,755,                work[j] = (work[j] - sum) / lmDiag[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,760,        for (int j = 0; j < lmDir.length; ++j) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,761,            lmDir[permutation[j]] = work[j];,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,764,    },0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,814,"                    throw new OptimizationException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,",0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,823,                rank = k;,0.0,0,-1,0
org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,65,824,                return;,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,129,        return maxIterations;,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,134,        return iterations;,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,144,        return maxEvaluations;,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,164,        return checker;,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,174,            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,187,"            throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,",0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,209,"            throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),",0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,214,"            throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,",0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,255,        double chiSquare = 0;,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,256,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,257,            final double residual = residuals[i];,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,258,            chiSquare += residual * residual / residualsWeights[i];,0.0,1,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,260,        return chiSquare;,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,294,            return inverse.getData();,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,295,        } catch (InvalidMatrixException ime) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,296,            throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,313,            throw new OptimizationException(,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,317,        double[] errors = new double[cols];,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,318,        final double c = Math.sqrt(getChiSquare() / (rows - cols));,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,319,        double[][] covar = getCovariances();,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,320,        for (int i = 0; i < errors.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,321,            errors[i] = Math.sqrt(covar[i][i]) * c;,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,323,        return errors;,0.0,0,-1,0
org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,333,"            throw new OptimizationException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,",0.0,0,-1,0
org/apache/commons/math/optimization/OptimizationException,65,46,"        this(new DummyLocalizable(specifier), parts);",0.0,0,-1,0
org/apache/commons/math/optimization/OptimizationException,65,47,    },0.0,0,-1,0
org/apache/commons/math/optimization/OptimizationException,65,57,"        super(specifier, parts);",0.0,0,-1,0
org/apache/commons/math/optimization/OptimizationException,65,58,    },0.0,0,-1,0
org/apache/commons/math/optimization/OptimizationException,65,65,        super(cause);,0.0,0,-1,0
org/apache/commons/math/optimization/OptimizationException,65,66,    },0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,65,42,"        this(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,65,43,    },0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,65,52,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,65,53,    },0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,65,62,        super(cause);,0.0,0,-1,0
org/apache/commons/math/linear/InvalidMatrixException,65,63,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,48,        this.argument = new double[] { argument };,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,49,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,60,        this.argument = argument.clone();,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,61,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,73,"        this(argument, new DummyLocalizable(pattern), argument);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,74,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,86,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,87,        this.argument = new double[] { argument };,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,88,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,100,"        this(argument, new DummyLocalizable(pattern), argument);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,101,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,113,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,114,        this.argument = argument.clone();,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,115,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,125,        super(cause);,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,126,        this.argument = new double[] { argument };,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,127,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,137,        super(cause);,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,138,        this.argument = argument.clone();,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,139,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,153,"        this(cause, argument, new DummyLocalizable(pattern), argument);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,154,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,168,"        super(cause, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,169,        this.argument = new double[] { argument };,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,170,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,184,"        this(cause, argument, new DummyLocalizable(pattern), argument);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,185,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,199,"        super(cause, pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,200,        this.argument = argument.clone();,0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,201,    },0.0,0,-1,0
org/apache/commons/math/FunctionEvaluationException,65,209,        return argument.clone();,0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,65,45,"        super(LocalizedFormats.MAX_ITERATIONS_EXCEEDED, maxIterations);",0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,65,46,        this.maxIterations = maxIterations;,0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,65,47,    },0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,65,60,"        this(maxIterations, new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,65,61,    },0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,65,73,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,65,74,        this.maxIterations = maxIterations;,0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,65,75,    },0.0,0,-1,0
org/apache/commons/math/MaxIterationsExceededException,65,81,        return maxIterations;,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,65,                                       final double absoluteThreshold) {,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,66,        this.relativeThreshold = relativeThreshold;,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,67,        this.absoluteThreshold = absoluteThreshold;,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,68,    },0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,74,        final double[] p        = previous.getValueRef();,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,75,        final double[] c        = current.getValueRef();,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,76,        for (int i = 0; i < p.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,77,            final double pi         = p[i];,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,78,            final double ci         = c[i];,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,79,            final double difference = Math.abs(pi - ci);,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,80,"            final double size       = Math.max(Math.abs(pi), Math.abs(ci));",0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,81,            if ((difference > (size * relativeThreshold)) &&,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,83,                return false;,0.0,0,-1,0
org/apache/commons/math/optimization/SimpleVectorialValueChecker,65,86,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,58,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,62,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,79,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,81,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,82,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,84,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,85,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,90,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,98,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,100,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,101,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,102,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,103,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,104,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,105,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,109,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,116,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,117,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,118,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,119,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,120,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,121,"                out.setEntry(row, col, getEntry(row, col) + d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,125,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,132,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,133,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,134,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,135,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,136,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,137,"                out.setEntry(row, col, getEntry(row, col) * d);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,141,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,150,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,152,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,153,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,154,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,155,"        final RealMatrix out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,156,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,157,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,158,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,159,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,160,"                    sum += getEntry(row, i) * m.getEntry(i, col);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,162,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,166,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,173,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,179,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,181,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,182,            final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,183,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,184,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,188,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,194,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,233,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,263,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,265,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,267,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,268,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,269,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,273,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,282,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,285,        final RealMatrix subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,287,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,297,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,308,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,309,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,310,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,311,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,312,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,319,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,344,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,351,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,352,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,354,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,361,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,362,            final double[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,363,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,364,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,368,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,374,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,375,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,376,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,379,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,380,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,381,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,384,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,385,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,386,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,392,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,393,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,394,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,395,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,397,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,398,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,399,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,403,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,405,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,411,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,412,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,413,"        final RealMatrix out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,414,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,415,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,418,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,426,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,427,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,428,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,430,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,434,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,435,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,438,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,444,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,445,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,446,"        final RealMatrix out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,447,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,448,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,451,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,459,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,460,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,461,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,463,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,467,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,468,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,471,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,476,"        return new ArrayRealVector(getRow(row), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,483,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,484,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,485,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,486,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,490,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,491,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,494,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,499,"        return new ArrayRealVector(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,506,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,507,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,508,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,509,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,513,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,514,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,517,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,523,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,524,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,525,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,526,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,527,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,530,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,538,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,539,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,540,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,541,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,545,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,546,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,549,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,555,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,556,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,557,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,558,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,559,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,562,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,570,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,571,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,572,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,573,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,577,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,578,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,581,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,602,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,603,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,604,"        final RealMatrix out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,605,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,615,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,623,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,624,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,626,        return lu.getInverse();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,633,"        return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,644,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,645,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,647,        return !lu.isNonSingular();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,659,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,660,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,661,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,662,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,664,        double trace = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,665,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,666,"            trace += getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,668,        return trace;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,675,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,676,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,677,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,678,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,683,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,684,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,685,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,686,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,687,"                sum += getEntry(row, i) * v[i];",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,689,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,692,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,700,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,701,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,702,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,703,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,704,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,705,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,710,            final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,711,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,712,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,713,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,714,"                    sum += getEntry(row, i) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,716,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,719,"            return new ArrayRealVector(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,727,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,728,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,729,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,730,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,735,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,736,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,737,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,738,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,739,"                sum += getEntry(i, col) * v[i];",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,741,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,744,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,752,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,753,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,755,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,756,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,757,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,758,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,763,            final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,764,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,765,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,766,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,767,"                    sum += getEntry(i, col) * v.getEntry(i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,769,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,772,            return new ArrayRealVector(out);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,780,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,781,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,783,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,784,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,785,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,786,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,787,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,790,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,791,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,797,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,798,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,799,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,800,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,801,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,802,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,805,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,813,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,814,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,816,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,817,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,818,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,819,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,820,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,823,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,824,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,832,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,833,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,835,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,836,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,837,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,840,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,846,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,847,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,848,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,849,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,850,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,851,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,852,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,853,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,856,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,857,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,863,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,864,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,865,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,866,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,867,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,868,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,871,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,879,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,880,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,882,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,883,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,884,"                final double oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,885,"                final double newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,886,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,889,        lu = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,890,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,898,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,899,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,901,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,902,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,903,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,906,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,912,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,918,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,926,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,934,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,941,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,942,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,944,        return lu.solve(b);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,951,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,952,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,954,        return lu.solve(b);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,979,        if (lu == null) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,980,"            lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,982,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,990,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,991,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,992,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,993,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,994,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,995,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,997,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,998,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,999,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1001,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1002,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1003,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1004,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1006,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1008,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1011,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1012,        return res.toString();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1026,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1027,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1029,        if (object instanceof RealMatrix == false) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1030,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1032,        RealMatrix m = (RealMatrix) object;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1033,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1034,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1035,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1036,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1038,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1039,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1040,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1041,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1045,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1055,        int ret = 7;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1056,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1057,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1058,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1059,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1060,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1061,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1062,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,1066,        return ret;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,319,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,332,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,333,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,334,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,339,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,340,            },0.0,0,-1,0
org/apache/commons/math/linear/RealVector,65,72,    public abstract class Entry {,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,65,91,            return index;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,65,98,            this.index = index;,0.0,0,-1,0
org/apache/commons/math/linear/RealVector,65,99,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,678,            super(Fraction.ZERO);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,679,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,685,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,686,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,691,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,692,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,698,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,671,    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,102,"        super(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,103,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,104,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,107,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,108,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,111,"        blocks = createBlocksLayout(field, rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,113,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,130,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,131,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,152,"        super(extractField(blockData), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,153,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,154,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,157,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,158,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,160,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,162,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,165,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,168,        int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,169,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,170,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,171,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,172,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,173,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,177,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,178,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,183,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,212,        final int rows         = rawData.length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,213,        final int columns      = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,214,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,215,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,218,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,219,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,220,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,221,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,228,        final Field<T> field = extractField(rawData);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,229,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,230,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,231,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,232,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,233,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,234,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,235,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,236,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,237,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,238,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,241,"                final T[] block = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,242,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,245,                int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,246,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,247,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,248,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,251,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,256,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,278,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,279,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,281,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,282,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,283,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,284,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,285,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,286,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,287,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,288,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,289,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,290,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,291,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,292,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,296,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,304,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,312,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,315,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,316,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,319,        return copied;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,328,            return add((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,329,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,332,            checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,334,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,337,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,338,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,339,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,342,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,343,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,344,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,345,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,346,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,347,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,348,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,349,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,350,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,351,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,352,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,357,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,362,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,378,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,380,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,383,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,384,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,385,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,386,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,387,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,388,                outBlock[k] = tBlock[k].add(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,392,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,401,            return subtract((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,402,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,405,            checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,407,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,410,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,411,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,412,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,415,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,416,                    final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,417,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,418,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,419,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,420,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,421,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,422,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,423,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,424,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,425,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,430,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,435,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,451,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,453,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,456,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,457,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,458,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,459,            final T[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,460,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,461,                outBlock[k] = tBlock[k].subtract(mBlock[k]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,465,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,474,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,477,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,478,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,479,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,480,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,481,                outBlock[k] = tBlock[k].add(d);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,485,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,494,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,497,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,498,            final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,499,            final T[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,500,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,501,                outBlock[k] = tBlock[k].multiply(d);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,505,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,514,            return multiply((BlockFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,515,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,518,            checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,520,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,521,            final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,524,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,525,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,527,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,528,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,530,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,532,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,533,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,536,                    final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,539,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,540,                        final int kWidth      = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,541,                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,542,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,543,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,544,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,545,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,546,                            final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,547,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,548,                                T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,549,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,550,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,551,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,552,                                    ++r;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,554,                                outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,555,                                ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,561,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,566,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,582,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,584,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,585,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,588,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,589,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,591,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,592,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,594,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,595,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,596,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,597,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,598,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,601,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,604,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,605,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,606,                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,607,                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,608,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,609,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,610,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,611,                        final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,612,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,613,                            T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,614,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,615,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,616,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,617,                                sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,622,                                l += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,623,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,625,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,626,                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,627,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,629,                            outBlock[k] = outBlock[k].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,630,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,636,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,641,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,649,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,650,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,652,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,653,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,654,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,655,            int regularPos   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,656,            int lastPos      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,657,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,658,                final T[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,659,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,660,                int dataPos    = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,661,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,662,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,663,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,665,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,666,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,667,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,671,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,682,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,685,        final BlockFieldMatrix<T> out =,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,689,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,690,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,691,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,692,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,695,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,696,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,697,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,698,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,699,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,700,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,703,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,704,                final T[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,705,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,706,                final int      width    = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,708,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,709,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,710,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,712,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,714,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,715,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,719,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,723,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,727,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,731,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,733,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,737,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,744,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,746,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,747,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,751,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,755,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,757,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,764,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,767,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,771,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,795,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,796,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,797,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,798,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,799,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,800,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,801,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,803,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,811,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,812,        if (refLength < 1) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,813,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,815,        final int endRow    = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,816,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,817,"        checkSubMatrixIndex(row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,818,        for (final T[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,819,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,820,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,827,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,828,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,829,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,830,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,833,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,834,            final int iHeight  = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,835,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,836,"            final int iStart   = Math.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,837,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,839,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,840,                final int jWidth      = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,841,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,842,"                final int jStart      = Math.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,843,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,844,                final int jLength     = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,847,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,848,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,849,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,856,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,863,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,864,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,867,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,868,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,869,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,870,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,871,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,872,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,873,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,874,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,875,            final int available  = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,876,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,877,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,878,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,879,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,880,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,882,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,883,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,887,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,896,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,899,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,897,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,898,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,900,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,916,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,917,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,918,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,920,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,927,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,928,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,929,        int mBlockIndex  = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,930,        int mIndex       = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,931,        T[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,932,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,933,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,934,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,935,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,936,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,937,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,938,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,939,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,940,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,942,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,943,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,947,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,954,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,955,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,958,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,959,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,960,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,961,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,962,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,963,        T[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,964,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,965,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,966,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,967,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,968,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,969,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,970,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,972,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,976,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,985,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,988,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,986,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,987,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,989,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1005,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1006,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1007,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1009,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1016,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1017,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1018,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1019,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1020,        int mIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1021,        T[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1022,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1023,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1024,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1025,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1026,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1027,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1028,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1030,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1034,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1041,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1042,"        final T[] outData = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1045,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1046,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1047,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1048,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1049,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1050,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1051,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1052,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1055,"        return new ArrayFieldVector<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1064,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1067,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1065,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1066,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1068,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1075,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1076,"        final T[] outData = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1079,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1080,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1081,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1082,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1083,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1084,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1085,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1086,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1087,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1091,"        return new ArrayFieldVector<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1100,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1103,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1101,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1102,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1104,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1111,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1112,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1115,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1116,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1117,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1118,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1119,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1120,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1121,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1122,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1125,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1134,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1135,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1136,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1137,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1143,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1144,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1145,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1146,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1147,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1148,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1149,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1150,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1153,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1160,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1161,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1164,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1165,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1166,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1167,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1168,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1169,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1170,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1171,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1172,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1176,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1185,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1186,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1187,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1188,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1194,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1195,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1196,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1197,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1198,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1199,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1200,            final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1201,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1202,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1206,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1213,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1214,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1215,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1217,            return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1218,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1219,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1230,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1231,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1232,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1234,            blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1239,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1235,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1236,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1240,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1247,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1248,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1249,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1251,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1252,            blockIJ[k] = blockIJ[k].add(increment);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1257,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1253,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1254,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1258,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1265,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1266,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1267,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1269,            final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1270,            blockIJ[k] = blockIJ[k].multiply(factor);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1275,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1271,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1272,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1276,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1282,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1283,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1284,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1287,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1288,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1289,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1292,                final T[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1293,                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1294,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1295,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1296,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1297,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1298,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1299,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1300,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1301,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1302,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1303,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1304,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1305,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1310,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1315,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1322,        return rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1328,        return columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1336,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1337,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1341,"        final T[] out = buildArray(getField(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1342,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1345,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1346,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1347,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1348,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1349,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1350,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1351,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1352,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1353,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1354,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1355,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1356,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1357,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1362,                        k += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1363,                        q += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1365,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1366,                        sum = sum.add(block[k++].multiply(v[q++]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1368,                    out[p] = out[p].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1373,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1382,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1383,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1387,"        final T[] out = buildArray(getField(), columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1388,        final T zero = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1391,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1392,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1393,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1394,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1395,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1396,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1397,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1398,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1399,                final T[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1400,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1401,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1402,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1403,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1404,                    T sum = zero;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1405,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1406,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1407,                        sum = sum.,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1412,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1413,                        p += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1415,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1416,                        sum = sum.add(block[k].multiply(v[p++]));,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1417,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1419,                    out[q] = out[q].add(sum);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1424,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1432,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1433,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1434,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1435,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1436,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1437,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1438,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1439,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1440,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1441,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1442,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1443,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1444,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1445,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1450,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1457,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1458,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1459,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1460,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1461,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1462,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1463,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1464,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1465,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1466,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1467,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1468,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1469,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1470,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1475,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1484,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1485,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1486,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1487,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1488,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1489,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1490,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1491,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1492,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1493,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1494,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1495,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1496,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1497,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1498,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1499,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1500,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1505,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1514,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1515,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1516,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1517,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1518,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1519,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1520,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1521,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1522,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1523,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1524,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1525,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1526,                    final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1527,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1528,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1529,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1530,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1535,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1542,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1543,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1544,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1545,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1546,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1547,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1548,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1549,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1550,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1551,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1552,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1553,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1554,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1555,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1558,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1561,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1568,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1569,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1570,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1571,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1572,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1573,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1574,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1575,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1576,                final T[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1577,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1578,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1579,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1580,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1581,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1584,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1587,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1596,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1597,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1598,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1599,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1600,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1601,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1602,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1603,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1604,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1605,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1606,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1607,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1608,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1609,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1610,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1611,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1612,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1617,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1626,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1627,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1628,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1629,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1630,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1631,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1632,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1633,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1634,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1635,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1636,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1637,                final T[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1638,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1639,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1640,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1641,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1642,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1647,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1656,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockFieldMatrix,65,1665,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,45,    protected AbstractFieldMatrix() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,46,        field = null;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,47,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,53,    protected AbstractFieldMatrix(final Field<T> field) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,54,        this.field = field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,55,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,67,        throws IllegalArgumentException {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,68,        if (rowDimension < 1 ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,69,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,72,        if (columnDimension < 1) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,73,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,76,        this.field = field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,77,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,88,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,89,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,91,        if (d[0].length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,92,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,94,        return d[0][0].getField();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,106,        if (d.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,107,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,109,        return d[0].getField();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,127,        if (columns < 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,128,"            T[] dummyRow = (T[]) Array.newInstance(field.getZero().getClass(), 0);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,129,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,131,        T[][] array =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,133,        for (int i = 0; i < array.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,134,"            Arrays.fill(array[i], field.getZero());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,136,        return array;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,151,"        T[] array = (T[]) Array.newInstance(field.getZero().getClass(), length);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,152,"        Arrays.fill(array, field.getZero());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,153,        return array;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,158,        return field;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,172,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,174,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,175,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,176,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,177,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,178,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,179,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,183,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,191,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,193,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,194,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,195,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,196,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,197,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,198,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,202,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,209,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,210,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,211,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,212,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,213,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,214,"                out.setEntry(row, col, getEntry(row, col).add(d));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,218,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,225,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,226,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,227,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,228,        for (int row = 0; row < rowCount; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,229,            for (int col = 0; col < columnCount; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,230,"                out.setEntry(row, col, getEntry(row, col).multiply(d));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,234,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,243,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,245,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,246,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,247,        final int nSum  = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,248,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,249,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,250,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,251,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,252,                for (int i = 0; i < nSum; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,253,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,255,"                out.setEntry(row, col, sum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,259,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,266,        return m.multiply(this);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,272,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,274,        for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,275,            final T[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,276,            for (int j = 0; j < dataI.length; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,277,"                dataI[j] = getEntry(i, j);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,281,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,290,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,292,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,294,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,295,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,296,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,300,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,309,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,312,        final FieldMatrix<T> subMatrix =,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,314,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,324,        return subMatrix;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,335,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,336,        final int rowsCount    = endRow + 1 - startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,337,        final int columnsCount = endColumn + 1 - startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,338,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,339,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,346,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,371,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,378,"        checkSubMatrixIndex(selectedRows, selectedColumns);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,379,        if ((destination.length < selectedRows.length) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,381,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,388,        for (int i = 0; i < selectedRows.length; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,389,            final T[] destinationI = destination[i];,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,390,            for (int j = 0; j < selectedColumns.length; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,391,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,395,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,401,        final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,402,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,403,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,406,        final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,407,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,408,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,411,        for (int r = 1; r < nRows; ++r) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,412,            if (subMatrix[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,413,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,419,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,420,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,421,        checkRowIndex(nRows + row - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,422,        checkColumnIndex(nCols + column - 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,424,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,425,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,426,"                setEntry(row + i, column + j, subMatrix[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,430,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,436,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,437,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,438,"        final FieldMatrix<T> out = createMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,439,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,440,"            out.setEntry(0, i, getEntry(row, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,443,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,451,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,452,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,453,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,455,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,459,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,460,"            setEntry(row, i, matrix.getEntry(0, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,463,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,469,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,470,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,471,"        final FieldMatrix<T> out = createMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,472,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,473,"            out.setEntry(i, 0, getEntry(i, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,476,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,484,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,485,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,486,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,488,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,492,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,493,"            setEntry(i, column, matrix.getEntry(i, 0));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,496,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,501,"        return new ArrayFieldVector<T>(getRow(row), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,508,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,509,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,510,        if (vector.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,511,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,515,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,516,"            setEntry(row, i, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,519,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,524,"        return new ArrayFieldVector<T>(getColumn(column), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,531,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,532,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,533,        if (vector.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,534,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,538,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,539,"            setEntry(i, column, vector.getEntry(i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,542,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,548,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,549,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,550,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,551,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,552,"            out[i] = getEntry(row, i);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,555,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,563,        checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,564,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,565,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,566,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,570,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,571,"            setEntry(row, i, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,574,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,580,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,581,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,582,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,583,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,584,"            out[i] = getEntry(i, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,587,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,595,        checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,596,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,597,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,598,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,602,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,603,"            setEntry(i, column, array[i]);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,606,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,627,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,628,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,629,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,630,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,640,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,646,        return getColumnDimension() == getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,658,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,659,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,660,        if (nRows != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,661,"            throw new NonSquareMatrixException(nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,663,        T trace = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,664,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,665,"            trace = trace.add(getEntry(i, i));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,667,        return trace;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,674,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,675,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,676,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,677,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,682,"        final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,683,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,684,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,685,            for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,686,"                sum = sum.add(getEntry(row, i).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,688,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,691,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,699,"            return new ArrayFieldVector<T>(operate(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,700,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,701,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,702,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,703,            if (v.getDimension() != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,704,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,709,"            final T[] out = buildArray(field, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,710,            for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,711,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,712,                for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,713,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,715,                out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,718,"            return new ArrayFieldVector<T>(out, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,726,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,727,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,728,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,729,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,734,"        final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,735,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,736,            T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,737,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,738,"                sum = sum.add(getEntry(i, col).multiply(v[i]));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,740,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,743,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,751,"            return new ArrayFieldVector<T>(preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,752,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,754,            final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,755,            final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,756,            if (v.getDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,757,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,762,"            final T[] out = buildArray(field, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,763,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,764,                T sum = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,765,                for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,766,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,768,                out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,771,            return new ArrayFieldVector<T>(out);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,779,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,780,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,781,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,782,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,783,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,784,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,785,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,786,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,789,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,795,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,796,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,797,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,798,        for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,799,            for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,800,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,803,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,811,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,812,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,814,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,815,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,816,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,817,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,818,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,821,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,829,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,830,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,832,        for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,833,            for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,834,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,837,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,843,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,844,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,845,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,846,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,847,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,848,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,849,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,850,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,853,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,859,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,860,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,861,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,862,        for (int column = 0; column < columns; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,863,            for (int row = 0; row < rows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,864,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,867,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,875,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,876,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,878,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,879,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,880,"                final T oldValue = getEntry(row, column);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,881,"                final T newValue = visitor.visit(row, column, oldValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,882,"                setEntry(row, column, newValue);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,885,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,893,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,894,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,896,        for (int column = startColumn; column <= endColumn; ++column) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,897,            for (int row = startRow; row <= endRow; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,898,"                visitor.visit(row, column, getEntry(row, column));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,901,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,907,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,913,        return walkInRowOrder(visitor);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,921,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,929,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,938,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,939,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,940,        final StringBuffer res = new StringBuffer();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,941,        String fullClassName = getClass().getName();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,942,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,943,"        res.append(shortClassName).append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,945,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,946,            if (i > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,947,"                res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,949,"            res.append(""{"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,950,            for (int j = 0; j < nCols; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,951,                if (j > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,952,"                    res.append("","");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,954,"                res.append(getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,956,"            res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,959,"        res.append(""}"");",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,960,        return res.toString();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,974,        if (object == this ) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,975,            return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,977,        if (object instanceof FieldMatrix<?> == false) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,978,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,980,        FieldMatrix<?> m = (FieldMatrix<?>) object;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,981,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,982,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,983,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,984,            return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,986,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,987,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,988,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,989,                    return false;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,993,        return true;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1003,        int ret = 322562;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1004,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1005,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1006,        ret = ret * 31 + nRows;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1007,        ret = ret * 31 + nCols;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1008,        for (int row = 0; row < nRows; ++row) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1009,            for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1010,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1013,        return ret;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1022,        if (row < 0 || row >= getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1023,"            throw new MatrixIndexException(LocalizedFormats.ROW_INDEX_OUT_OF_RANGE,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1026,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1035,        if (column < 0 || column >= getColumnDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1036,"            throw new MatrixIndexException(LocalizedFormats.COLUMN_INDEX_OUT_OF_RANGE,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1039,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1053,        checkRowIndex(startRow);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1054,        checkRowIndex(endRow);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1055,        if (startRow > endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1056,"            throw new MatrixIndexException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1060,        checkColumnIndex(startColumn);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1061,        checkColumnIndex(endColumn);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1062,        if (startColumn > endColumn) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1063,"            throw new MatrixIndexException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1068,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1079,        if (selectedRows.length * selectedColumns.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1080,            if (selectedRows.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1081,                throw new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1083,            throw new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1086,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1087,            checkRowIndex(row);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1089,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1090,            checkColumnIndex(column);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1092,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1100,        if ((getRowDimension()    != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1102,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1107,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1115,        if ((getRowDimension()    != m.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1117,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1122,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1130,        if (getColumnDimension() != m.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1131,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,1136,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixIndexException,65,42,"      this(new DummyLocalizable(pattern), arguments);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixIndexException,65,43,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixIndexException,65,52,"      super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixIndexException,65,53,    },0.0,0,-1,0
org/apache/commons/math/linear/NonSquareMatrixException,65,39,"        super(LocalizedFormats.NON_SQUARE_MATRIX, rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/NonSquareMatrixException,65,40,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,51,        super(field);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,52,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,66,"        super(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,67,"        data = buildArray(field, rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,68,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,85,        super(extractField(d));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,86,        copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,87,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,106,        super(extractField(d));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,107,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,108,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,110,            if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,111,                throw new NullPointerException();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,113,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,114,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,115,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,118,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,119,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,120,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,123,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,124,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,125,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,129,            data = d;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,131,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,142,        super(extractField(v));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,143,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,144,"        data = buildArray(getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,145,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,146,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,148,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,154,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,160,"        return new Array2DRowFieldMatrix<T>(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,168,            return add((Array2DRowFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,169,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,170,            return super.add(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,185,        checkAdditionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,187,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,188,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,189,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,190,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,191,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,192,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,193,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,194,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,195,                outDataRow[col] = dataRow[col].add(mRow[col]);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,199,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,208,            return subtract((Array2DRowFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,209,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,210,            return super.subtract(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,225,        checkSubtractionCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,227,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,228,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,229,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,230,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,231,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,232,            final T[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,233,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,234,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,235,                outDataRow[col] = dataRow[col].subtract(mRow[col]);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,239,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,248,            return multiply((Array2DRowFieldMatrix<T>) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,249,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,250,            return super.multiply(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,265,        checkMultiplicationCompatible(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,267,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,268,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,269,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,270,"        final T[][] outData = buildArray(getField(), nRows, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,271,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,272,            final T[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,273,            final T[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,274,            for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,275,                T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,276,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,277,                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,279,                outDataRow[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,283,"        return new Array2DRowFieldMatrix<T>(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,290,        return copyOut();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,301,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,308,        if (data == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,309,            if (row > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,310,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,313,            if (column > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,314,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,317,            final int nRows = subMatrix.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,318,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,319,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,323,            final int nCols = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,324,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,325,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,328,"            data = buildArray(getField(), subMatrix.length, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,329,            for (int i = 0; i < data.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,330,                if (subMatrix[i].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,331,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,334,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,336,        } else {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,337,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,340,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,347,            return data[row][column];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,348,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,349,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,359,            data[row][column] = value;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,363,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,360,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,361,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,364,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,371,            data[row][column] = data[row][column].add(increment);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,375,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,372,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,373,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,376,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,383,            data[row][column] = data[row][column].multiply(factor);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,387,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,384,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,385,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,388,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,393,        return (data == null) ? 0 : data.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,399,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,406,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,407,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,408,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,409,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,412,"        final T[] out = buildArray(getField(), nRows);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,413,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,414,            final T[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,415,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,416,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,417,                sum = sum.add(dataRow[i].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,419,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,421,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,429,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,430,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,431,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,432,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,436,"        final T[] out = buildArray(getField(), nCols);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,437,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,438,            T sum = getField().getZero();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,439,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,440,                sum = sum.add(data[i][col].multiply(v[i]));,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,442,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,445,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,453,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,454,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,455,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,456,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,457,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,458,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,459,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,462,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,469,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,470,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,471,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,472,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,473,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,474,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,475,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,478,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,487,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,488,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,490,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,491,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,492,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,493,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,496,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,505,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,506,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,508,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,509,            final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,510,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,511,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,514,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,521,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,522,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,523,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,524,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,525,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,526,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,527,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,530,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,537,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,538,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,539,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,540,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,541,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,542,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,545,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,554,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,555,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,557,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,558,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,559,                final T[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,560,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,563,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,572,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,573,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,575,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,576,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,577,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,580,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,589,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,590,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,592,        for (int i = 0; i < nRows; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,593,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,595,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,609,"        setSubMatrix(in, 0, 0);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowFieldMatrix,65,610,    },0.0,0,-1,0
org/apache/commons/math/linear/SingularMatrixException,65,37,        super(LocalizedFormats.SINGULAR_MATRIX);,0.0,0,-1,0
org/apache/commons/math/linear/SingularMatrixException,65,38,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,722,            super(BigFraction.ZERO);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,723,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,729,            data = new double[rows][columns];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,730,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,735,            data[row][column] = value.doubleValue();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,736,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,742,"            return new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,715,    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,82,"            throw new NonSquareMatrixException(matrix.getRowDimension(), matrix.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,109,                    sum -= luRow[i] * lu[i][col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,134,                singular = true;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,135,                return;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,140,                double tmp = 0;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,141,                final double[] luMax = lu[max];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,142,                final double[] luCol = lu[col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,143,                for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,144,                    tmp = luMax[i];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,145,                    luMax[i] = luCol[i];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,146,                    luCol[i] = tmp;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,148,                int temp = pivot[max];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,149,                pivot[max] = pivot[col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,150,                pivot[col] = temp;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,151,                even = !even;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,165,        if ((cachedL == null) && !singular) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,166,            final int m = pivot.length;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,167,"            cachedL = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,168,            for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,169,                final double[] luI = lu[i];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,170,                for (int j = 0; j < i; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,171,"                    cachedL.setEntry(i, j, luI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,173,"                cachedL.setEntry(i, i, 1.0);",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,176,        return cachedL;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,181,        if ((cachedU == null) && !singular) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,182,            final int m = pivot.length;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,183,"            cachedU = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,184,            for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,185,                final double[] luI = lu[i];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,186,                for (int j = i; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,187,"                    cachedU.setEntry(i, j, luI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,191,        return cachedU;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,196,        if ((cachedP == null) && !singular) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,197,            final int m = pivot.length;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,198,"            cachedP = MatrixUtils.createRealMatrix(m, m);",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,199,            for (int i = 0; i < m; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,200,"                cachedP.setEntry(i, pivot[i], 1.0);",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,203,        return cachedP;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,208,        return pivot.clone();,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,213,        if (singular) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,214,            return 0;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,216,            final int m = pivot.length;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,217,            double determinant = even ? 1 : -1;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,218,            for (int i = 0; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,219,                determinant *= lu[i][i];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,221,            return determinant;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,346,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,359,                this.startRow    = startRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,360,                this.startColumn = startColumn;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,361,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,366,                destination[row - startRow][column - startColumn] = value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,367,            },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,64,    public Array2DRowRealMatrix() {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,65,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,115,"        throws IllegalArgumentException, NullPointerException {",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,116,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,117,            copyIn(d);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,119,            if (d == null) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,120,                throw new NullPointerException();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,122,            final int nRows = d.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,123,            if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,124,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,127,            final int nCols = d[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,128,            if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,129,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,132,            for (int r = 1; r < nRows; r++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,133,                if (d[r].length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,134,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,138,            data = d;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,140,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,150,    public Array2DRowRealMatrix(final double[] v) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,151,        final int nRows = v.length;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,152,        data = new double[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,153,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,154,            data[row][0] = v[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,156,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,162,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,168,"        return new Array2DRowRealMatrix(copyOut(), false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,176,            return add((Array2DRowRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,177,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,178,            return super.add(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,193,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,195,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,196,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,197,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,198,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,199,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,200,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,201,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,202,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,203,                outDataRow[col] = dataRow[col] + mRow[col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,207,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,216,            return subtract((Array2DRowRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,217,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,218,            return super.subtract(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,233,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,235,        final int rowCount    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,236,        final int columnCount = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,237,        final double[][] outData = new double[rowCount][columnCount];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,238,        for (int row = 0; row < rowCount; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,239,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,240,            final double[] mRow       = m.data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,241,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,242,            for (int col = 0; col < columnCount; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,243,                outDataRow[col] = dataRow[col] - mRow[col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,247,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,256,            return multiply((Array2DRowRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,257,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,258,            return super.multiply(m);,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,273,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,275,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,276,        final int nCols = m.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,277,        final int nSum = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,278,        final double[][] outData = new double[nRows][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,279,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,280,            final double[] dataRow    = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,281,            final double[] outDataRow = outData[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,282,            for (int col = 0; col < nCols; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,283,                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,284,                for (int i = 0; i < nSum; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,285,                    sum += dataRow[i] * m.data[i][col];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,287,                outDataRow[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,291,"        return new Array2DRowRealMatrix(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,309,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,318,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,322,                throw MathRuntimeException.createIllegalStateException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,327,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,333,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,339,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,345,"            super.setSubMatrix(subMatrix, row, column);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,355,            return data[row][column];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,356,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,357,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,368,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,369,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,379,            data[row][column] += increment;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,383,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,380,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,381,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,384,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,391,            data[row][column] *= factor;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,395,        },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,392,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,393,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,396,    },0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,414,        final int nRows = this.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,415,        final int nCols = this.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,416,        if (v.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,417,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,420,        final double[] out = new double[nRows];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,421,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,422,            final double[] dataRow = data[row];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,423,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,424,            for (int i = 0; i < nCols; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,425,                sum += dataRow[i] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,427,            out[row] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,429,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,437,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,438,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,439,        if (v.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,440,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,444,        final double[] out = new double[nCols];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,445,        for (int col = 0; col < nCols; ++col) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,446,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,447,            for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,448,                sum += data[i][col] * v[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,450,            out[col] = sum;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,453,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,461,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,462,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,463,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,464,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,465,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,466,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,467,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,470,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,477,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,478,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,479,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,480,        for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,481,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,482,            for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,483,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,486,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,495,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,496,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,498,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,499,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,500,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,501,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,504,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,513,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,514,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,516,        for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,517,            final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,518,            for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,519,"                visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,522,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,529,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,530,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,531,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,532,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,533,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,534,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,535,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,538,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,545,        final int rows    = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,546,        final int columns = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,547,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,548,        for (int j = 0; j < columns; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,549,            for (int i = 0; i < rows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,550,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,553,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,562,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,563,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,565,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,566,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,567,                final double[] rowI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,568,"                rowI[j] = visitor.visit(i, j, rowI[j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,571,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,580,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,581,"        visitor.start(getRowDimension(), getColumnDimension(),",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,583,        for (int j = startColumn; j <= endColumn; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,584,            for (int i = startRow; i <= endRow; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,585,"                visitor.visit(i, j, data[i][j]);",0.0,0,-1,0
org/apache/commons/math/linear/Array2DRowRealMatrix,65,588,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,99,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,100,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,101,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,104,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,105,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,108,"        blocks = createBlocksLayout(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,110,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,127,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,128,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,149,"        super(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,150,        this.rows    = rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,151,        this.columns = columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,154,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,155,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,157,        if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,159,            blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,162,            blocks = blockData;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,165,        int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,166,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,167,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,168,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,169,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,170,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,174,                if (copyArray) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,175,                    blocks[index] = blockData[index].clone();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,180,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,207,        final int rows         = rawData.length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,208,        final int columns      = rawData[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,209,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,210,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,213,        for (int i = 0; i < rawData.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,214,            final int length = rawData[i].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,215,            if (length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,216,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,223,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,224,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,225,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,226,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,227,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,228,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,229,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,230,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,231,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,232,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,235,                final double[] block = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,236,                blocks[blockIndex] = block;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,239,                int index = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,240,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,241,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,242,                    index += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,245,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,250,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,268,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,269,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,271,        final double[][] blocks = new double[blockRows * blockColumns][];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,272,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,273,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,274,            final int pStart  = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,275,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,276,            final int iHeight = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,277,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,278,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,279,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,280,                final int jWidth = qEnd - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,281,                blocks[blockIndex] = new double[iHeight * jWidth];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,282,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,286,        return blocks;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,294,"        return new BlockRealMatrix(rowDimension, columnDimension);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,302,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,305,        for (int i = 0; i < blocks.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,306,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,309,        return copied;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,318,            return add((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,319,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,322,"            MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,324,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,327,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,328,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,329,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,332,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,333,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,334,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,335,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,336,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,337,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,338,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,339,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,340,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,341,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,342,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,347,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,352,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,368,"        MatrixUtils.checkAdditionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,370,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,373,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,374,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,375,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,376,            final double[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,377,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,378,                outBlock[k] = tBlock[k] + mBlock[k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,382,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,391,            return subtract((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,392,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,395,"            MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,397,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,400,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,401,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,402,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,405,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,406,                    final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,407,                    final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,408,"                    final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,409,                    final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,410,"                    final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,411,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,412,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,413,                        for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,414,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,415,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,420,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,425,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,441,"        MatrixUtils.checkSubtractionCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,443,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,446,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,447,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,448,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,449,            final double[] mBlock   = m.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,450,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,451,                outBlock[k] = tBlock[k] - mBlock[k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,455,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,464,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,467,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,468,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,469,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,470,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,471,                outBlock[k] = tBlock[k] + d;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,475,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,484,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,487,        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,488,            final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,489,            final double[] tBlock   = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,490,            for (int k = 0; k < outBlock.length; ++k) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,491,                outBlock[k] = tBlock[k] * d;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,495,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,504,            return multiply((BlockRealMatrix) m);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,505,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,508,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,510,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,513,            int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,514,            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,516,                final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,517,"                final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,519,                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,521,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,522,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,525,                    final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,528,                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,529,                        final int kWidth      = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,530,                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,531,                        final int rStart      = kBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,532,                        int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,533,                        for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,534,                            final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,535,                            final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,536,                            for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,537,                                double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,538,                                int r = rStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,539,                                for (int l = lStart; l < lEnd; ++l) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,540,"                                    sum += tBlock[l] * m.getEntry(r, q);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,541,                                    ++r;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,543,                                outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,544,                                ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,550,                    ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,555,            return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,571,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,573,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,576,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,577,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,579,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,580,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,582,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,583,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,584,                final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,585,                final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,586,                final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,589,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,592,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,593,                    final int kWidth = blockWidth(kBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,594,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,595,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,596,                    int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,597,                    for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,598,                        final int lStart = (p - pStart) * kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,599,                        final int lEnd   = lStart + kWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,600,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,601,                            double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,602,                            int l = lStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,603,                            int n = nStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,604,                            while (l < lEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,605,                                sum += tBlock[l] * mBlock[n] +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,609,                                l += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,610,                                n += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,612,                            while (l < lEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,613,                                sum += tBlock[l++] * mBlock[n];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,614,                                n += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,616,                            outBlock[k] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,617,                            ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,623,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,628,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,636,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,637,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,639,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,640,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,641,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,642,            int regularPos   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,643,            int lastPos      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,644,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,645,                final double[] dataP = data[p];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,646,                int blockIndex = iBlock * blockColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,647,                int dataPos    = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,648,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,649,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,650,                    dataPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,652,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,653,                regularPos += BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,654,                lastPos    += lastColumns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,658,        return data;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,665,        final double[] colSums = new double[BLOCK_SIZE];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,666,        double maxColSum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,667,        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,668,            final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,669,"            Arrays.fill(colSums, 0, jWidth, 0.0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,670,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,671,                final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,672,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,673,                for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,674,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,675,                    for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,676,                        sum += Math.abs(block[i * jWidth + j]);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,678,                    colSums[j] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,681,            for (int j = 0; j < jWidth; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,682,"                maxColSum = Math.max(maxColSum, colSums[j]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,685,        return maxColSum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,691,        double sum2 = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,692,        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,693,            for (final double entry : blocks[blockIndex]) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,694,                sum2 += entry * entry;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,697,        return Math.sqrt(sum2);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,707,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,710,        final BlockRealMatrix out =,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,714,        final int blockStartRow    = startRow    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,715,        final int rowsShift        = startRow    % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,716,        final int blockStartColumn = startColumn / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,717,        final int columnsShift     = startColumn % BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,720,        int pBlock = blockStartRow;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,721,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,722,            final int iHeight = out.blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,723,            int qBlock = blockStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,724,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,725,                final int jWidth = out.blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,728,                final int      outIndex = iBlock * out.blockColumns + jBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,729,                final double[] outBlock = out.blocks[outIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,730,                final int      index    = pBlock * blockColumns + qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,731,                final int      width    = blockWidth(qBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,733,                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,734,                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,735,                if (heightExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,737,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,739,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,740,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,744,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,748,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,752,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,756,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,758,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,762,"                        copyBlockPart(blocks[index + blockColumns], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,769,                    if (widthExcess > 0) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,771,                        final int width2 = blockWidth(qBlock + 1);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,772,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,776,"                        copyBlockPart(blocks[index + 1], width2,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,780,                    } else {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,782,"                        copyBlockPart(blocks[index], width,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,789,                ++qBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,793,            ++pBlock;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,797,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,821,        final int length = srcEndColumn - srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,822,        int srcPos = srcStartRow * srcWidth + srcStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,823,        int dstPos = dstStartRow * dstWidth + dstStartColumn;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,824,        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,825,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,826,            srcPos += srcWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,827,            dstPos += dstWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,829,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,837,        final int refLength = subMatrix[0].length;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,838,        if (refLength < 1) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,839,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,841,        final int endRow    = row + subMatrix.length - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,842,        final int endColumn = column + refLength - 1;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,843,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,844,        for (final double[] subRow : subMatrix) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,845,            if (subRow.length != refLength) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,846,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,853,        final int blockStartRow    = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,854,        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,855,        final int blockStartColumn = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,856,        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,859,        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,860,            final int iHeight  = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,861,            final int firstRow = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,862,"            final int iStart   = Math.max(row,    firstRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,863,"            final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,865,            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,866,                final int jWidth      = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,867,                final int firstColumn = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,868,"                final int jStart      = Math.max(column,    firstColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,869,"                final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,870,                final int jLength     = jEnd - jStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,873,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,874,                for (int i = iStart; i < iEnd; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,875,"                    System.arraycopy(subMatrix[i - row], jStart - column,",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,882,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,889,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,890,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,893,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,894,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,895,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,896,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,897,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,898,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,899,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,900,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,901,            final int available  = outBlock.length - outIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,902,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,903,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,904,                outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,905,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,906,                outIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,908,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,909,                outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,913,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,922,"            setRowMatrix(row, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,925,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,923,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,924,"            super.setRowMatrix(row, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,926,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,942,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,943,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,944,        if ((matrix.getRowDimension() != 1) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,946,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,953,        final int iBlock = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,954,        final int iRow   = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,955,        int mBlockIndex  = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,956,        int mIndex       = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,957,        double[] mBlock  = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,958,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,959,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,960,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,961,            final int available  = mBlock.length - mIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,962,            if (jWidth > available) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,963,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,964,                mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,965,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,966,                mIndex = jWidth - available;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,968,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,969,                mIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,973,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,980,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,981,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,984,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,985,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,986,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,987,        int outBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,988,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,989,        double[] outBlock = out.blocks[outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,990,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,991,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,992,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,993,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,994,                if (outIndex >= outBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,995,                    outBlock = out.blocks[++outBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,996,                    outIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,998,                outBlock[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1002,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1011,"            setColumnMatrix(column, (BlockRealMatrix) matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1014,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1012,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1013,"            super.setColumnMatrix(column, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1015,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1031,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1032,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1033,        if ((matrix.getRowDimension() != nRows) ||,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1035,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1042,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1043,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1044,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1045,        int mBlockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1046,        int mIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1047,        double[] mBlock = matrix.blocks[mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1048,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1049,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1050,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1051,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1052,                if (mIndex >= mBlock.length) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1053,                    mBlock = matrix.blocks[++mBlockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1054,                    mIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1056,                block[i * jWidth + jColumn] = mBlock[mIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1060,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1067,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1068,        final double[] outData = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1071,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1072,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1073,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1074,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1075,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1076,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1077,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1078,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1081,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1090,"            setRow(row, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1093,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1091,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1092,"            super.setRowVector(row, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1094,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1101,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1102,        final double[] outData = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1105,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1106,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1107,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1108,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1109,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1110,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1111,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1112,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1113,                outData[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1117,"        return new ArrayRealVector(outData, false);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1126,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1129,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1127,        } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1128,"            super.setColumnVector(column, vector);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1130,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1137,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1138,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1141,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1142,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1143,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1144,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1145,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1146,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1147,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1148,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1151,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1160,"        MatrixUtils.checkRowIndex(this, row);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1161,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1162,        if (array.length != nCols) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1163,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1169,        final int iBlock  = row / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1170,        final int iRow    = row - iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1171,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1172,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1173,            final int jWidth     = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1174,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1175,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1176,            outIndex += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1179,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1186,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1187,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1190,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1191,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1192,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1193,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1194,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1195,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1196,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1197,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1198,                out[outIndex++] = block[i * jWidth + jColumn];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1202,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1211,"        MatrixUtils.checkColumnIndex(this, column);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1212,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1213,        if (array.length != nRows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1214,            throw new InvalidMatrixException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1220,        final int jBlock  = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1221,        final int jColumn = column - jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1222,        final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1223,        int outIndex      = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1225,            final int iHeight = blockHeight(iBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1226,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1227,            for (int i = 0; i < iHeight; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1228,                block[i * jWidth + jColumn] = array[outIndex++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1232,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1239,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1240,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1241,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1243,            return blocks[iBlock * blockColumns + jBlock][k];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1244,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1245,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1256,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1257,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1258,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1260,            blocks[iBlock * blockColumns + jBlock][k] = value;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1265,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1261,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1262,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1266,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1273,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1274,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1275,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1277,            blocks[iBlock * blockColumns + jBlock][k] += increment;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1282,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1278,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1279,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1283,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1290,            final int iBlock = row    / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1291,            final int jBlock = column / BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1292,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1294,            blocks[iBlock * blockColumns + jBlock][k] *= factor;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1299,        },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1295,        } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1296,            throw new MatrixIndexException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1300,    },0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1306,        final int nRows = getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1307,        final int nCols = getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1308,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1311,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1312,        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1313,            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1316,                final double[] outBlock = out.blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1317,                final double[] tBlock   = blocks[jBlock * blockColumns + iBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1318,                final int      pStart   = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1319,"                final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1320,                final int      qStart   = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1321,"                final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1322,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1323,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1324,                    final int lInc = pEnd - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1325,                    int l = p - pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1326,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1327,                        outBlock[k] = tBlock[l];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1328,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1329,                        l+= lInc;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1334,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1339,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1346,        return rows;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1352,        return columns;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1360,        if (v.length != columns) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1361,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1365,        final double[] out = new double[rows];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1368,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1369,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1370,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1371,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1372,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1373,                final int      qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1374,"                final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1375,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1376,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1377,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1378,                    int q = qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1379,                    while (q < qEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1380,                        sum += block[k]     * v[q]     +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1384,                        k += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1385,                        q += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1387,                    while (q < qEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1388,                        sum += block[k++] * v[q++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1390,                    out[p] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1395,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1404,        if (v.length != rows) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1405,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1409,        final double[] out = new double[columns];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1412,        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1413,            final int jWidth  = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1414,            final int jWidth2 = jWidth  + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1415,            final int jWidth3 = jWidth2 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1416,            final int jWidth4 = jWidth3 + jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1417,            final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1418,"            final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1419,            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1420,                final double[] block  = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1421,                final int      pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1422,"                final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1423,                for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1424,                    int k = q - qStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1425,                    double sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1426,                    int p = pStart;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1427,                    while (p < pEnd - 3) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1428,                        sum += block[k]           * v[p]     +,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1432,                        k += jWidth4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1433,                        p += 4;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1435,                    while (p < pEnd) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1436,                        sum += block[k] * v[p++];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1437,                        k += jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1439,                    out[q] += sum;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1444,        return out;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1452,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1453,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1454,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1455,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1456,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1457,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1458,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1459,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1460,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1461,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1462,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1463,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1464,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1465,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1470,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1477,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1478,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1479,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1480,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1481,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1482,                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1483,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1484,                    final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1485,"                    final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1486,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1487,                    int k = (p - pStart) * jWidth;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1488,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1489,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1490,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1495,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1504,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1505,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1506,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1507,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1508,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1509,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1510,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1511,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1512,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1513,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1514,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1515,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1516,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1517,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1518,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1519,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1520,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1525,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1534,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1535,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1536,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1537,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1538,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1539,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1540,            for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1541,                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1542,                    final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1543,                    final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1544,"                    final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1545,"                    final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1546,                    final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1547,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1548,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1549,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1550,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1555,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1562,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1563,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1564,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1565,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1566,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1567,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1568,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1569,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1570,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1571,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1572,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1573,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1574,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1575,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1578,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1581,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1588,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1589,        int blockIndex = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1590,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1591,            final int pStart = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1592,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1593,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1594,                final int qStart = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1595,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1596,                final double[] block = blocks[blockIndex];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1597,                int k = 0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1598,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1599,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1600,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1601,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1604,                ++blockIndex;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1607,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1616,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1617,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1618,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1619,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1620,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1621,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1622,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1623,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1624,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1625,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1626,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1627,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1628,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1629,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1630,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1631,"                        block[k] = visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1632,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1637,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1646,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1647,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1648,        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1649,            final int p0     = iBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1650,"            final int pStart = Math.max(startRow, p0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1651,"            final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1652,            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1653,                final int jWidth = blockWidth(jBlock);,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1654,                final int q0     = jBlock * BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1655,"                final int qStart = Math.max(startColumn, q0);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1656,"                final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1657,                final double[] block = blocks[iBlock * blockColumns + jBlock];,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1658,                for (int p = pStart; p < pEnd; ++p) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1659,                    int k = (p - p0) * jWidth + qStart - q0;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1660,                    for (int q = qStart; q < qEnd; ++q) {,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1661,"                        visitor.visit(p, q, block[k]);",0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1662,                        ++k;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1667,        return visitor.end();,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1676,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,1685,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,0.0,0,-1,0
org/apache/commons/math/linear/BlockRealMatrix,65,65,public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,194,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,209,                this.endRow = endRow;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,210,                columnSum   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,211,                maxColSum   = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,212,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,216,                columnSum += Math.abs(value);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,217,                if (row == endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,218,"                    maxColSum = Math.max(maxColSum, columnSum);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,219,                    columnSum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,221,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,225,                return maxColSum;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,605,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,610,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,611,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,233,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,242,                sum = 0;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,243,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,247,                sum += value * value;,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,248,            },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,252,                return Math.sqrt(sum);,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,630,        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,635,"                out.setEntry(column, row, value);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,636,            },0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,256,            return !singular;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,263,            final int m = pivot.length;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,264,            if (b.length != m) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,265,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,268,            if (singular) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,269,                throw new SingularMatrixException();,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,272,            final double[] bp = new double[m];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,275,            for (int row = 0; row < m; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,276,                bp[row] = b[pivot[row]];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,280,            for (int col = 0; col < m; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,281,                final double bpCol = bp[col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,282,                for (int i = col + 1; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,283,                    bp[i] -= bpCol * lu[i][col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,288,            for (int col = m - 1; col >= 0; col--) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,289,                bp[col] /= lu[col][col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,290,                final double bpCol = bp[col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,291,                for (int i = 0; i < col; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,292,                    bp[i] -= bpCol * lu[i][col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,296,            return bp;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,304,                return solve((ArrayRealVector) b);,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,305,            } catch (ClassCastException cce) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,307,                final int m = pivot.length;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,308,                if (b.getDimension() != m) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,309,                    throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,312,                if (singular) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,313,                    throw new SingularMatrixException();,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,316,                final double[] bp = new double[m];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,319,                for (int row = 0; row < m; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,320,                    bp[row] = b.getEntry(pivot[row]);,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,324,                for (int col = 0; col < m; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,325,                    final double bpCol = bp[col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,326,                    for (int i = col + 1; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,327,                        bp[i] -= bpCol * lu[i][col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,332,                for (int col = m - 1; col >= 0; col--) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,333,                    bp[col] /= lu[col][col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,334,                    final double bpCol = bp[col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,335,                    for (int i = 0; i < col; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,336,                        bp[i] -= bpCol * lu[i][col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,340,"                return new ArrayRealVector(bp, false);",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,354,"            return new ArrayRealVector(solve(b.getDataRef()), false);",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,363,                throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,368,                throw new SingularMatrixException();,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,371,            final int nColB = b.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,374,            final double[][] bp = new double[m][nColB];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,375,            for (int row = 0; row < m; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,376,                final double[] bpRow = bp[row];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,377,                final int pRow = pivot[row];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,378,                for (int col = 0; col < nColB; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,379,"                    bpRow[col] = b.getEntry(pRow, col);",0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,384,            for (int col = 0; col < m; col++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,385,                final double[] bpCol = bp[col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,386,                for (int i = col + 1; i < m; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,387,                    final double[] bpI = bp[i];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,388,                    final double luICol = lu[i][col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,389,                    for (int j = 0; j < nColB; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,390,                        bpI[j] -= bpCol[j] * luICol;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,396,            for (int col = m - 1; col >= 0; col--) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,397,                final double[] bpCol = bp[col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,398,                final double luDiag = lu[col][col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,399,                for (int j = 0; j < nColB; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,400,                    bpCol[j] /= luDiag;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,402,                for (int i = 0; i < col; i++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,403,                    final double[] bpI = bp[i];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,404,                    final double luICol = lu[i][col];,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,405,                    for (int j = 0; j < nColB; j++) {,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,406,                        bpI[j] -= bpCol[j] * luICol;,0.0,0,-1,0
org/apache/commons/math/linear/LUDecompositionImpl,65,411,"            return new Array2DRowRealMatrix(bp, false);",0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,314,        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractFieldMatrix,65,319,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,45,        super();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,46,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,84,        return (rows * columns <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,130,        return (data.length * data[0].length <= 4096) ?,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,162,        final T zero = field.getZero();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,163,        final T one  = field.getOne();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,165,"        final T[][] d = (T[][]) Array.newInstance(zero.getClass(), new int[] { dimension, dimension });",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,166,        for (int row = 0; row < dimension; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,167,            final T[] dRow = d[row];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,168,"            Arrays.fill(dRow, zero);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,169,            dRow[row] = one;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,171,"        return new Array2DRowFieldMatrix<T>(d, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,185,        final BigDecimal[][] d = new BigDecimal[dimension][dimension];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,186,        for (int row = 0; row < dimension; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,187,            final BigDecimal[] dRow = d[row];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,188,"            Arrays.fill(dRow, BigMatrixImpl.ZERO);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,189,            dRow[row] = BigMatrixImpl.ONE;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,191,"        return new BigMatrixImpl(d, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,203,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,204,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,205,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,207,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,221,        final FieldMatrix<T> m =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,223,        for (int i = 0; i < diagonal.length; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,224,"            m.setEntry(i, i, diagonal[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,226,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,242,        return new BigMatrixImpl(data);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,258,        return new BigMatrixImpl(data);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,280,"        return new BigMatrixImpl(data, copyArray);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,296,        return new BigMatrixImpl(data);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,308,"        return new ArrayRealVector(data, true);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,321,"        return new ArrayFieldVector<T>(data, true);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,334,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,335,"        final RealMatrix m = createRealMatrix(1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,336,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,337,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,339,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,354,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,355,        if (nCols == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,356,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,358,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,359,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,360,"            m.setEntry(0, i, rowData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,362,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,377,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,378,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,379,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,380,            data[0][i] = new BigDecimal(rowData[i]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,382,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,397,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,398,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,399,"        System.arraycopy(rowData, 0, data[0], 0, nCols);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,400,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,415,        final int nCols = rowData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,416,        final BigDecimal[][] data = new BigDecimal[1][nCols];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,417,        for (int i = 0; i < nCols; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,418,            data[0][i] = new BigDecimal(rowData[i]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,420,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,433,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,434,"        final RealMatrix m = createRealMatrix(nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,435,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,436,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,438,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,453,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,454,        if (nRows == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,455,            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.AT_LEAST_ONE_ROW);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,457,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,458,        for (int i = 0; i < nRows; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,459,"            m.setEntry(i, 0, columnData[i]);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,461,        return m;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,476,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,477,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,478,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,479,            data[row][0] = new BigDecimal(columnData[row]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,481,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,496,        final int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,497,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,498,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,499,            data[row][0] = columnData[row];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,501,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,516,        int nRows = columnData.length;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,517,        final BigDecimal[][] data = new BigDecimal[nRows][1];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,518,        for (int row = 0; row < nRows; row++) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,519,            data[row][0] = new BigDecimal(columnData[row]);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,521,"        return new BigMatrixImpl(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,531,        if (row < 0 || row >= m.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,532,"            throw new MatrixIndexException(LocalizedFormats.ROW_INDEX_OUT_OF_RANGE,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,535,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,545,        if (column < 0 || column >= m.getColumnDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,546,"            throw new MatrixIndexException(LocalizedFormats.COLUMN_INDEX_OUT_OF_RANGE,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,549,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,565,"        checkRowIndex(m, startRow);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,566,"        checkRowIndex(m, endRow);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,567,        if (startRow > endRow) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,568,"            throw new MatrixIndexException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,572,"        checkColumnIndex(m, startColumn);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,573,"        checkColumnIndex(m, endColumn);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,574,        if (startColumn > endColumn) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,575,"            throw new MatrixIndexException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,580,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,594,        if (selectedRows.length * selectedColumns.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,595,            if (selectedRows.length == 0) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,596,                throw new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,598,            throw new MatrixIndexException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,601,        for (final int row : selectedRows) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,602,"            checkRowIndex(m, row);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,604,        for (final int column : selectedColumns) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,605,"            checkColumnIndex(m, column);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,607,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,617,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,619,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,624,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,634,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,636,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,641,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,651,        if (left.getColumnDimension() != right.getRowDimension()) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,652,            throw MathRuntimeException.createIllegalArgumentException(,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,657,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,665,        final FractionMatrixConverter converter = new FractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,666,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,667,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,709,        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,710,        m.walkInOptimizedOrder(converter);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,711,        return converter.getConvertedMatrix();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,790,        final int n = vector.getDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,791,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,792,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,793,            oos.writeDouble(vector.getEntry(i));,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,795,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,821,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,822,            final double[] data = new double[n];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,823,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,824,                data[i] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,828,"            final RealVector vector = new ArrayRealVector(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,831,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,833,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,834,"            f.set(instance, vector);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,844,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,836,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,837,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,838,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,839,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,840,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,841,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,842,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,843,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,846,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,891,        final int n = matrix.getRowDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,892,        final int m = matrix.getColumnDimension();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,893,        oos.writeInt(n);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,894,        oos.writeInt(m);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,895,        for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,896,            for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,897,"                oos.writeDouble(matrix.getEntry(i, j));",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,900,    },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,926,            final int n = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,927,            final int m = ois.readInt();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,928,            final double[][] data = new double[n][m];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,929,            for (int i = 0; i < n; ++i) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,930,                final double[] dataI = data[i];,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,931,                for (int j = 0; j < m; ++j) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,932,                    dataI[j] = ois.readDouble();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,937,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,940,            final java.lang.reflect.Field f =,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,942,            f.setAccessible(true);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,943,"            f.set(instance, matrix);",0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,953,        },0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,945,        } catch (NoSuchFieldException nsfe) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,946,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,947,            ioe.initCause(nsfe);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,948,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,949,        } catch (IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,950,            IOException ioe = new IOException();,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,951,            ioe.initCause(iae);,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,952,            throw ioe;,0.0,0,-1,0
org/apache/commons/math/linear/MatrixUtils,65,955,    },0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,287,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,0.0,0,-1,0
org/apache/commons/math/linear/AbstractRealMatrix,65,292,"                return getEntry(selectedRows[row], selectedColumns[column]);",0.0,0,-1,0
