project_path,version,lines,statement,suspicious,faulty,predict,miss_line,predictions0,predictions1
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,1.0,0,,0,0.2727250436352283,0.727274956364772
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },1.0,0,,0,0.1784161547785075,0.821583845221494
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",1.0,0,,0,0.38127073097780295,0.6187292690221974
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },1.0,0,,0,0.1784161547785075,0.821583845221494
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,1.0,1,,1,0.5437200501960912,0.4562799498039085
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,0.33333,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,0.25,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,0.25,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,0.25,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,128,            lowerBound = lower.clone();,0.16667,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,136,            upperBound = upper.clone();,0.16667,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,514,                hasFiniteBounds = true;,0.16667,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,                break;,0.16667,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,            for (int i = 0; i < lB.length; i++) {,0.16667,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,                if (Double.isInfinite(lB[i]) ||,0.16667,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,            if (hasInfiniteBounds) {,0.16667,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,109,            if (upper.length != dim) {,0.14286,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,            for (int i = 0; i < dim; i++) {,0.14286,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,                final double v = startPoint[i];,0.14286,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,                final double hi = upper[i];,0.14286,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,115,                if (v > hi) {,0.14286,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,100,            for (int i = 0; i < dim; i++) {,0.125,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,101,                final double v = startPoint[i];,0.125,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,102,                final double lo = lower[i];,0.125,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,103,                if (v < lo) {,0.125,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,64,    public ExceptionContext(final Throwable throwable) {,0.125,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,65,        this.throwable = throwable;,0.125,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,66,        msgPatterns    = new ArrayList<Localizable>();,0.125,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,67,        msgArguments   = new ArrayList<Object[]>();,0.125,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,68,"        context        = new HashMap<String, Object>();",0.125,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,69,    },0.125,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,87,        msgPatterns.add(pattern);,0.125,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,88,        msgArguments.add(ArgUtils.flatten(arguments));,0.125,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,89,    },0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,368,    private LocalizedFormats(final String sourceFormat) {,0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,369,        this.sourceFormat = sourceFormat;,0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,370,    },0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,51,"    BANDWIDTH(""bandwidth ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,92,"    ELITISM_RATE(""elitism rate ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,102,"    EVALUATION(""evaluation""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,120,"    INDEX(""index ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,122,"    INFINITE_BOUND(""interval bounds must be finite""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,129,    @Deprecated,0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,131,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,132,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,133,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,134,"    DIMENSION(""dimension ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,135,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,136,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,137,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""multistep method needs at least {0} previous steps, got {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,138,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,139,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,140,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,141,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,142,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,143,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,144,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,145,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,146,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,147,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,148,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,149,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,150,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,151,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,152,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,153,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,154,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,155,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,156,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,157,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,158,"    EVALUATIONS(""evaluations""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,159,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,160,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,161,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,162,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,163,"    MUTATION_RATE(""mutation rate ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,164,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,165,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,166,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,167,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,168,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,169,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,170,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,171,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,172,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,173,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,174,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,175,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,176,"    START_POSITION(""start position ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,177,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,178,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,179,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,180,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,181,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,182,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,183,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,184,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,185,"    NORM(""Norm ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,186,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,187,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,188,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,189,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,190,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,191,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,192,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,193,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,194,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,195,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,196,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,197,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,198,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,199,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,200,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,201,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,202,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,203,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,204,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,205,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,206,"    EXPONENT(""exponent ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,208,"    LENGTH(""length ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,210,"    MEAN(""mean ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,221,"    SCALE(""scale ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,223,"    SHAPE(""shape ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,226,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,234,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,235,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,238,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,240,"    NO_BIN_SELECTED(""no bin selected""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,241,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,242,"    NO_DATA(""no data""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,243,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,244,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,245,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,246,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,247,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,248,"    NO_RESULT_AVAILABLE(""no result available""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,251,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,254,"    DENOMINATOR(""denominator""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,256,"    FRACTION(""fraction""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,257,"    FUNCTION(""function""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,258,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,259,"    INPUT_ARRAY(""input array""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,260,"    NUMERATOR(""numerator""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,263,"    REAL_FORMAT(""real format""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,264,"    WHOLE_FORMAT(""whole format""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,266,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,267,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,268,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,273,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,274,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,275,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,276,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,277,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,278,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,279,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,280,"    OUT_OF_RANGE(""out of range""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,281,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,282,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,283,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,284,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,285,"    OVERFLOW(""overflow""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,286,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,287,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,288,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,289,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,290,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,291,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,292,"    POLYNOMIAL(""polynomial""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,293,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,294,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,295,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,296,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,297,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,298,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,299,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,300,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,301,"    ROW_INDEX(""row index ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,302,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,303,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,304,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,305,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,306,"    SIMPLE_MESSAGE(""{0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,307,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,308,"    SINGULAR_OPERATOR(""operator is singular""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,309,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,310,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,311,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,312,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,313,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,314,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,315,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,316,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,317,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,318,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,319,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,320,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,321,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,322,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,323,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,324,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,325,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,326,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,327,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,328,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,329,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,330,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,331,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,332,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,333,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,334,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,335,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,336,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,337,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,338,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,339,"    ILLEGAL_STATE(""illegal state""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,340,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,341,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,342,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,343,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,344,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,345,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,346,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,347,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,348,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,349,"    ZERO_DENOMINATOR(""denominator must be different from 0""), /* keep */",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,350,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,351,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,352,"    ZERO_NORM(""zero norm""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,353,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,354,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,355,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0.125,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,39,public enum LocalizedFormats implements Localizable {,0.125,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,19,42,        final List<Object> list = new ArrayList<Object>();,0.125,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,19,43,        if (array != null) {,0.125,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,19,44,            for (Object o : array) {,0.125,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,19,54,        return list.toArray();,0.125,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,97,            if (lower.length != dim) {,0.11111,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,903,        public FitnessFunction() {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,904,            valueRange = 1.0;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,905,            isRepairMode = true;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,906,        },0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,913,            if (boundaries == null) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,939,            if (boundaries == null) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,956,            if (boundaries != null && isRepairMode) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,72,        return evaluations.getMaximalCount();,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,95,            evaluations.incrementCount();,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,98,        },0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,99,        return function.value(point);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,155,        return goal;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,358,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,359,        final FitnessFunction fitfun = new FitnessFunction();,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,360,        final double[] guess = fitfun.encode(getStartPoint());,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,362,        dimension = guess.length;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,363,        initializeCMA(guess);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,364,        iterations = 0;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,365,        double bestValue = fitfun.value(guess);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,561,    },0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,569,        if (lambda <= 0) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,573,        double[][] sigmaArray = new double[guess.length][1];,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,574,        for (int i = 0; i < guess.length; i++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,575,            final double range =  (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,576,            sigmaArray[i][0]   = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,578,"        RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,579,        sigma = max(insigma); // overall standard deviation,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,582,        stopTolUpX = 1e3 * max(insigma);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,583,        stopTolX = 1e-11 * max(insigma);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,584,        stopTolFun = 1e-12;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,585,        stopTolHistFun = 1e-13;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,588,        mu = lambda / 2; // number of parents/points for recombination,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,589,        logMu2 = Math.log(mu + 0.5);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,590,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,591,        double sumw = 0;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,592,        double sumwq = 0;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,593,        for (int i = 0; i < mu; i++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,594,"            double w = weights.getEntry(i, 0);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,595,            sumw += w;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,596,            sumwq += w * w;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,598,        weights = weights.scalarMultiply(1. / sumw);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,599,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,602,        cc = (4. + mueff / dimension) /,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,604,        cs = (mueff + 2.) / (dimension + mueff + 3.);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,605,"        damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,610,        ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,611,"        ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,613,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,614,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,615,        chiN = Math.sqrt(dimension) *,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,618,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,620,        diagD = insigma.scalarMultiply(1. / sigma);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,621,        diagC = square(diagD);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,622,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,623,"        ps = zeros(dimension, 1); // B defines the coordinate system",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,624,        normps = ps.getFrobeniusNorm();,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,626,"        B = eye(dimension, dimension);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,627,"        D = ones(dimension, 1); // diagonal D defines the scaling",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,628,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,629,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,630,        historySize = 10 + (int) (3. * 10. * dimension / lambda);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,631,        fitnessHistory = new double[historySize]; // history of fitness values,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,632,        for (int i = 0; i < historySize; i++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,633,            fitnessHistory[i] = Double.MAX_VALUE;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,635,    },0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1034,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1035,        for (int r = 0; r < m.getRowDimension(); r++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1036,            for (int c = 0; c < m.getColumnDimension(); c++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1037,"                d[r][c] = Math.log(m.getEntry(r, c));",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1040,"        return new Array2DRowRealMatrix(d, false);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1063,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1064,        for (int r = 0; r < m.getRowDimension(); r++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1065,            for (int c = 0; c < m.getColumnDimension(); c++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1066,"                double e = m.getEntry(r, c);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1067,                d[r][c] = e * e;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1070,"        return new Array2DRowRealMatrix(d, false);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1079,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1080,        for (int r = 0; r < m.getRowDimension(); r++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1081,            for (int c = 0; c < m.getColumnDimension(); c++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1082,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1085,"        return new Array2DRowRealMatrix(d, false);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1155,        if (m.getColumnDimension() == 1) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1156,            double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1157,            for (int i = 0; i < m.getRowDimension(); i++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1158,"                d[i][i] = m.getEntry(i, 0);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1160,"            return new Array2DRowRealMatrix(d, false);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1190,        double[][] d = new double[n][m];,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1191,        for (int r = 0; r < n; r++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1192,"            Arrays.fill(d[r], 1.0);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1194,"        return new Array2DRowRealMatrix(d, false);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1203,        double[][] d = new double[n][m];,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1204,        for (int r = 0; r < n; r++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1205,            if (r < m) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1206,                d[r][r] = 1;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1209,"        return new Array2DRowRealMatrix(d, false);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1218,"        return new Array2DRowRealMatrix(n, m);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1228,        int rd = mat.getRowDimension();,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1229,        int cd = mat.getColumnDimension();,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1230,        double[][] d = new double[n * rd][m * cd];,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1231,        for (int r = 0; r < n * rd; r++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1232,            for (int c = 0; c < m * cd; c++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1233,"                d[r][c] = mat.getEntry(r % rd, c % cd);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1236,"        return new Array2DRowRealMatrix(d, false);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1246,        int size = (int) ((end - start) / step + 1);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1247,        double[][] d = new double[size][1];,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1248,        double value = start;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1249,        for (int r = 0; r < size; r++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1250,            d[r][0] = value;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1251,            value += step;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1253,"        return new Array2DRowRealMatrix(d, false);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1261,        double max = -Double.MAX_VALUE;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1262,        for (int r = 0; r < m.getRowDimension(); r++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1263,            for (int c = 0; c < m.getColumnDimension(); c++) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1264,"                double e = m.getEntry(r, c);",0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1265,                if (max < e) {,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1266,                    max = e;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1270,        return max;,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,91,public class CMAESOptimizer,0.0625,0,-1,0
org/apache/commons/math3/util/Incrementor,19,105,        return maximalCount;,0.0625,0,-1,0
org/apache/commons/math3/util/Incrementor,19,155,        if (++count > maximalCount) {,0.0625,0,-1,0
org/apache/commons/math3/util/Incrementor,19,158,    },0.0625,0,-1,0
org/apache/commons/math3/util/FastMath,19,375,        return Math.sqrt(a);,0.0625,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,546,        if (inputSigma != null) {,0.05263,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,73,        return lowerBound.clone();,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,80,        return upperBound.clone();,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,122,        if (lower == null) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,130,        if (upper == null) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,140,"        return super.optimize(maxEval, f, goalType, startPoint);",0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,105,"        return optimizeInternal(maxEval, f, goalType, startPoint);",0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,128,        if (f == null) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,131,        if (goalType == null) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,134,        if (startPoint == null) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,139,        evaluations.setMaximalCount(maxEval);,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,140,        evaluations.resetCount();,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,143,        function = f;,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,144,        goal = goalType;,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,145,        start = startPoint.clone();,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,148,        return doOptimize();,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,162,        return start.clone();,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,356,        checkParameters();,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,505,        final double[] init = getStartPoint();,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,506,        final double[] lB = getLowerBound();,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,507,        final double[] uB = getUpperBound();,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,510,        boolean hasFiniteBounds = false;,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,511,        for (int i = 0; i < lB.length; i++) {,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,512,            if (!Double.isInfinite(lB[i]) ||,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,519,        boolean hasInfiniteBounds = false;,0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,520,        if (hasFiniteBounds) {,0.04762,0,-1,0
org/apache/commons/math3/util/Incrementor,19,96,        maximalCount = max;,0.04762,0,-1,0
org/apache/commons/math3/util/Incrementor,19,97,    },0.04762,0,-1,0
org/apache/commons/math3/util/Incrementor,19,164,        count = 0;,0.04762,0,-1,0
org/apache/commons/math3/util/Incrementor,19,165,    },0.04762,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,108,        if (upper != null) {,0.04545,0,-1,0
org/apache/commons/math3/optimization/SimpleValueChecker,19,41,    public SimpleValueChecker() {},0.04167,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,64,    public AbstractConvergenceChecker() {,0.04167,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,65,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,0.04167,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,66,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,0.04167,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,67,    },0.04167,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,38,    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * Precision.EPSILON;,0.04167,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,45,    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * Precision.SAFE_MIN;,0.04167,0,-1,0
org/apache/commons/math3/optimization/GoalType,19,28,public enum GoalType implements Serializable {,0.04167,0,-1,0
org/apache/commons/math3/optimization/GoalType,19,31,"    MAXIMIZE,",0.04167,0,-1,0
org/apache/commons/math3/optimization/GoalType,19,34,    MINIMIZE,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,66,        super(checker);,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,67,    },0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,95,        final int dim = startPoint.length;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,96,        if (lower != null) {,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,66,    protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) {,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,44,    protected final Incrementor evaluations = new Incrementor();,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,67,        this.checker = checker;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,68,    },0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,288,"        this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA,",0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,291,    },0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,313,        super(checker);,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,151,    private int diagonalOnly = 0;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,153,    private boolean isMinimize = true;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,155,    private boolean generateStatistics = false;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,234,    private List<Double> statisticsSigmaHistory = new ArrayList<Double>();,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,236,    private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,238,    private List<Double> statisticsFitnessHistory = new ArrayList<Double>();,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,240,    private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,314,        this.lambda = lambda;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,315,        this.inputSigma = inputSigma == null ? null : (double[]) inputSigma.clone();,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,316,        this.maxIterations = maxIterations;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,317,        this.stopFitness = stopFitness;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,318,        this.isActiveCMA = isActiveCMA;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,319,        this.diagonalOnly = diagonalOnly;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,320,        this.checkFeasableCount = checkFeasableCount;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,321,        this.random = random;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,322,        this.generateStatistics = generateStatistics;,0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,323,    },0.04167,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,105,    public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,106,    public MersenneTwister() {,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,107,        mt = new int[N];,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,108,        setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,109,    },0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,144,        long longMT = seed;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,146,        mt[0]= (int) longMT;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,147,        for (mti = 1; mti < N; ++mti) {,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,151,            mt[mti]= (int) longMT;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,154,        clear(); // Clear normal deviate cache,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,155,    },0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,167,        if (seed == null) {,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,172,        setSeed(19650218);,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,173,        int i = 1;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,174,        int j = 0;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,180,            mt[i]   = (int) (l & 0xffffffffl);,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,181,            i++; j++;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,182,            if (i >= N) {,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,183,                mt[0] = mt[N - 1];,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,184,                i = 1;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,186,            if (j >= seed.length) {,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,187,                j = 0;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,191,        for (int k = N - 1; k != 0; k--) {,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,195,            mt[i]   = (int) (l & 0xffffffffL);,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,196,            i++;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,197,            if (i >= N) {,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,198,                mt[0] = mt[N - 1];,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,199,                i = 1;,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,205,        clear(); // Clear normal deviate cache,0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,207,    },0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0.04167,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,217,    },0.04167,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,35,    public BitsStreamGenerator() {,0.04167,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,36,        nextGaussian = Double.NaN;,0.04167,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,37,    },0.04167,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,165,        nextGaussian = Double.NaN;,0.04167,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,166,    },0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,53,        this(0);,0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,54,    },0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,62,"        this(max,",0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,69,    },0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,80,                       MaxCountExceededCallback cb) {,0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,41,    private int count = 0;,0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,81,        if (cb == null){,0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,84,        maximalCount = max;,0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,85,        maxCountCallback = cb;,0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,86,    },0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,113,    private static final double LN_QUICK_COEF[][] = {,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,126,    private static final double LN_HI_PREC_COEF[][] = {,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,139,    private static final double SINE_TABLE_A[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,158,    private static final double SINE_TABLE_B[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,177,    private static final double COSINE_TABLE_A[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,196,    private static final double COSINE_TABLE_B[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,216,    private static final double TANGENT_TABLE_A[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,235,    private static final double TANGENT_TABLE_B[] =,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,254,    private static final long RECIP_2PI[] = new long[] {,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,275,    private static final long PI_O_4_BITS[] = new long[] {,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,19,3464,        return (a <= b) ? b : a;,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,19,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,19,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,0.04167,0,-1,0
org/apache/commons/math3/util/Precision,19,78,    },0.04167,0,-1,0
org/apache/commons/math3/util/Incrementor,19,63,             new MaxCountExceededCallback() {,0.04167,0,-1,0
org/apache/commons/math3/optimization/SimpleValueChecker,19,54,"        super(relativeThreshold, absoluteThreshold);",0.0,0,-1,0
org/apache/commons/math3/optimization/SimpleValueChecker,19,55,    },0.0,0,-1,0
org/apache/commons/math3/optimization/SimpleValueChecker,19,77,        final double p = previous.getValue();,0.0,0,-1,0
org/apache/commons/math3/optimization/SimpleValueChecker,19,78,        final double c = current.getValue();,0.0,0,-1,0
org/apache/commons/math3/optimization/SimpleValueChecker,19,79,        final double difference = FastMath.abs(p - c);,0.0,0,-1,0
org/apache/commons/math3/optimization/SimpleValueChecker,19,80,"        final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));",0.0,0,-1,0
org/apache/commons/math3/optimization/SimpleValueChecker,19,81,        return difference <= size * getRelativeThreshold() ||,0.0,0,-1,0
org/apache/commons/math3/optimization/SimpleValueChecker,19,34,public class SimpleValueChecker,0.0,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,76,                                      final double absoluteThreshold) {,0.0,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,77,        this.relativeThreshold = relativeThreshold;,0.0,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,78,        this.absoluteThreshold = absoluteThreshold;,0.0,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,79,    },0.0,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,85,        return relativeThreshold;,0.0,0,-1,0
org/apache/commons/math3/optimization/AbstractConvergenceChecker,19,92,        return absoluteThreshold;,0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,47,"        this(point, value, true);",0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,48,    },0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,61,        super(copyArray ? ((point == null) ? null :,0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,65,    },0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,73,        final double[] p = getKey();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,74,        return p == null ? null : p.clone();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,83,        return getKey();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,91,"        return new DataTransferObject(getKey(), getValue());",0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,45,"    public Pair(K k, V v) {",0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,46,        key = k;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,47,        value = v;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,48,    },0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,56,"        this(entry.getKey(), entry.getValue());",0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,57,    },0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,65,        return key;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,74,        return value;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,83,        return key;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,92,        return value;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,104,        if (this == o) {,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,105,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,107,        if (!(o instanceof Pair)) {,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,108,            return false;,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,110,"            Pair<?, ?> oP = (Pair<?, ?>) o;",0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,111,            return (key == null ?,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,127,        int result = key == null ? 0 : key.hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,129,        final int h = value == null ? 0 : value.hashCode();,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,130,        result = 37 * result + h ^ (h >>> 16);,0.0,0,-1,0
org/apache/commons/math3/util/Pair,19,132,        return result;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,914,                return x;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,929,            return boundaries != null && isRepairMode ?,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,940,                return x;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,961,            } else {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,962,                value = CMAESOptimizer.this,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,965,            return isMinimize ? value : -value;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,973,            if (boundaries == null) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,974,                return true;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,976,            for (int i = 0; i < x.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,977,                if (x[i] < 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,978,                    return false;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,980,                if (x[i] > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,981,                    return false;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,984,            return true;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,991,            this.valueRange = valueRange;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,992,        },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1002,                    repaired[i] = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1004,                    repaired[i] = 1.0;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1018,            double penalty = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1019,            for (int i = 0; i < x.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1020,                double diff = Math.abs(x[i] - repaired[i]);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1021,                penalty += diff * valueRange;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1023,            return isMinimize ? penalty : -penalty;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,60,    protected BaseAbstractMultivariateSimpleBoundsOptimizer() {},0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,87,"        return optimize(maxEval, f, goalType, startPoint, null, null);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,98,"                throw new DimensionMismatchException(lower.length, dim);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,104,"                    throw new NumberIsTooSmallException(v, lo, true);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,110,"                throw new DimensionMismatchException(upper.length, dim);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,116,"                    throw new NumberIsTooLargeException(v, hi, true);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,123,            lowerBound = new double[dim];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,124,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,125,                lowerBound[i] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,131,            upperBound = new double[dim];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,132,            for (int i = 0; i < dim; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,133,                upperBound[i] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,61,        this(new SimpleValueChecker());,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,62,    },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,77,        return evaluations.getCount();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,82,        return checker;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,96,        } catch (MaxCountExceededException e) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,97,            throw new TooManyEvaluationsException(e.getMax());,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,129,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,132,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,19,135,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,263,"        this(lambda, inputSigma, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,266,    },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,329,        return statisticsSigmaHistory;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,336,        return statisticsMeanHistory;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,343,        return statisticsFitnessHistory;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,350,        return statisticsDHistory;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,366,"        push(fitnessHistory, bestValue);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,367,"        PointValuePair optimum = new PointValuePair(getStartPoint(),",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,369,        PointValuePair lastResult = null;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,374,            for (iterations = 1; iterations <= maxIterations; iterations++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,376,"                RealMatrix arz = randn1(dimension, lambda);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,377,"                RealMatrix arx = zeros(dimension, lambda);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,378,                double[] fitness = new double[lambda];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,380,                for (int k = 0; k < lambda; k++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,381,                    RealMatrix arxk = null;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,382,                    for (int i = 0; i < checkFeasableCount+1; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,383,                        if (diagonalOnly <= 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,384,                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k)),0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,387,"                            arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,390,                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,391,                            break;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,394,"                        arz.setColumn(k, randn(dimension));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,396,"                    copyColumn(arxk, 0, arx, k);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,398,                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,401,                    },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,399,                    } catch (TooManyEvaluationsException e) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,400,                        break generationLoop;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,404,                int[] arindex = sortedIndices(fitness);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,406,                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,407,"                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,408,                xmean = bestArx.multiply(weights);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,409,"                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,410,                RealMatrix zmean = bestArz.multiply(weights);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,411,"                boolean hsig = updateEvolutionPaths(zmean, xold);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,412,                if (diagonalOnly <= 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,413,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,415,"                    updateCovarianceDiagonalOnly(hsig, bestArz, xold);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,418,"                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,419,                double bestFitness = fitness[arindex[0]];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,420,                double worstFitness = fitness[arindex[arindex.length-1]];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,421,                if (bestValue > bestFitness) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,422,                    bestValue = bestFitness;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,423,                    lastResult = optimum;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,424,                    optimum = new PointValuePair(,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,427,                    if (getConvergenceChecker() != null && lastResult != null) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,428,"                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,429,                            break generationLoop;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,435,                if (stopFitness != 0) { // only if stopFitness is defined,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,436,                    if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,437,                        break generationLoop;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,440,                double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,441,                double[] pcCol = pc.getColumn(0);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,442,                for (int i = 0; i < dimension; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,443,"                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,444,                        break;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,446,                    if (i >= dimension-1) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,447,                        break generationLoop;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,450,                for (int i = 0; i < dimension; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,451,                    if (sigma*sqrtDiagC[i] > stopTolUpX) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,452,                        break generationLoop;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,455,                double historyBest = min(fitnessHistory);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,456,                double historyWorst = max(fitnessHistory);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,457,"                if (iterations > 2 && Math.max(historyWorst, worstFitness) -",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,459,                    break generationLoop;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,461,                if (iterations > fitnessHistory.length &&,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,463,                    break generationLoop;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,466,                if (max(diagD)/min(diagD) > 1e7) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,467,                    break generationLoop;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,470,                if (getConvergenceChecker() != null) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,471,                    PointValuePair current =,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,474,                    if (lastResult != null &&,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,476,                        break generationLoop;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,478,                    lastResult = current;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,481,                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,482,                    sigma = sigma * Math.exp(0.2+cs/damps);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,484,"                if (iterations > 2 && Math.max(historyWorst, bestFitness) -",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,486,                    sigma = sigma * Math.exp(0.2+cs/damps);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,489,"                push(fitnessHistory,bestFitness);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,490,                fitfun.setValueRange(worstFitness-bestFitness);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,491,                if (generateStatistics) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,492,                    statisticsSigmaHistory.add(sigma);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,493,                    statisticsFitnessHistory.add(bestFitness);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,494,                    statisticsMeanHistory.add(xmean.transpose());,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,495,                    statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,498,        return optimum;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,524,                    hasInfiniteBounds = true;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,525,                    break;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,532,                throw new MathUnsupportedOperationException();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,543,            boundaries = null;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,547,            if (inputSigma.length != init.length) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,548,"                throw new DimensionMismatchException(inputSigma.length, init.length);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,550,            for (int i = 0; i < init.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,551,                if (inputSigma[i] < 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,552,                    throw new NotPositiveException(inputSigma[i]);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,554,                if (boundaries != null) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,555,                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,556,"                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,646,        ps = ps.scalarMultiply(1. - cs).add(,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,649,        normps = ps.getFrobeniusNorm();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,650,        boolean hsig = normps /,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,653,        pc = pc.scalarMultiply(1. - cc);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,654,        if (hsig) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,655,            pc = pc.add(xmean.subtract(xold).scalarMultiply(,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,658,        return hsig;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,673,        double oldFac = hsig ? 0 : ccov1Sep * cc * (2. - cc);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,674,        oldFac += 1. - ccov1Sep - ccovmuSep;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,675,        diagC = diagC.scalarMultiply(oldFac) // regard old matrix,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,681,        diagD = sqrt(diagC); // replaces eig(C),0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,682,        if (diagonalOnly > 1 && iterations > diagonalOnly) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,684,            diagonalOnly = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,685,"            B = eye(dimension, dimension);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,686,            BD = diag(diagD);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,687,            C = diag(diagC);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,689,    },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,704,        double negccov = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,705,        if (ccov1 + ccovmu > 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,706,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,708,            RealMatrix roneu = pc.multiply(pc.transpose()),0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,711,            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,712,            oldFac += 1. - ccov1 - ccovmu;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,713,            if (isActiveCMA) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,715,                negccov = (1. - ccovmu) * 0.25 * mueff /,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,717,                double negminresidualvariance = 0.66;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,720,                double negalphaold = 0.5; // where to make up for the variance,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,723,                int[] arReverseIndex = reverse(arindex);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,724,                RealMatrix arzneg,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,726,                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,727,                int[] idxnorms = sortedIndices(arnorms.getRow(0));,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,728,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,729,                int[] idxReverse = reverse(idxnorms);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,730,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,731,"                arnorms = divide(arnormsReverse, arnormsSorted);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,732,                int[] idxInv = inverse(idxnorms);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,733,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,735,                double negcovMax = (1. - negminresidualvariance) /,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,737,                if (negccov > negcovMax) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,738,                    negccov = negcovMax;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,740,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,741,                RealMatrix artmp = BD.multiply(arzneg);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,742,                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,744,                oldFac += negalphaold * negccov;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,745,                C = C.scalarMultiply(oldFac),0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,756,            } else {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,758,                C = C.scalarMultiply(oldFac) // regard old matrix,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,767,        updateBD(negccov);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,768,    },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,776,        if (ccov1 + ccovmu + negccov > 0 &&,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,779,"            C = triu(C, 0).add(triu(C, 1).transpose());",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,781,            EigenDecomposition eig = new EigenDecomposition(C);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,782,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,783,            D = eig.getD();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,784,            diagD = diag(D);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,785,            if (min(diagD) <= 0) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,786,                for (int i = 0; i < dimension; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,787,"                    if (diagD.getEntry(i, 0) < 0) {",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,788,"                        diagD.setEntry(i, 0, 0.);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,791,                double tfac = max(diagD) / 1e14;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,792,"                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,793,"                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,795,            if (max(diagD) > 1e14 * min(diagD)) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,796,                double tfac = max(diagD) / 1e14 - min(diagD);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,797,"                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,798,"                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,800,            diagC = diag(C);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,801,            diagD = sqrt(diagD); // D contains standard deviations now,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,802,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,804,    },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,813,        for (int i = vals.length-1; i > 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,814,            vals[i] = vals[i-1];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,816,        vals[0] = val;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,817,    },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,826,        DoubleIndex[] dis = new DoubleIndex[doubles.length];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,827,        for (int i = 0; i < doubles.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,828,"            dis[i] = new DoubleIndex(doubles[i], i);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,830,        Arrays.sort(dis);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,831,        int[] indices = new int[doubles.length];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,832,        for (int i = 0; i < doubles.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,833,            indices[i] = dis[i].index;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,835,        return indices;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1049,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1050,        for (int r = 0; r < m.getRowDimension(); r++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1051,            for (int c = 0; c < m.getColumnDimension(); c++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1052,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1055,"        return new Array2DRowRealMatrix(d, false);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1094,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1095,        for (int r = 0; r < m.getRowDimension(); r++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1096,            for (int c = 0; c < m.getColumnDimension(); c++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1097,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1100,"        return new Array2DRowRealMatrix(d, false);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1109,        double[][] d = new double[m.getRowDimension()][cols.length];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1110,        for (int r = 0; r < m.getRowDimension(); r++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1111,            for (int c = 0; c < cols.length; c++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1112,"                d[r][c] = m.getEntry(r, cols[c]);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1115,"        return new Array2DRowRealMatrix(d, false);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1124,        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1125,        for (int r = 0; r < m.getRowDimension(); r++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1126,            for (int c = 0; c < m.getColumnDimension(); c++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1127,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1130,"        return new Array2DRowRealMatrix(d, false);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1138,        double[][] d = new double[1][m.getColumnDimension()];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1139,        for (int c = 0; c < m.getColumnDimension(); c++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1140,            double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1141,            for (int r = 0; r < m.getRowDimension(); r++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1142,"                sum += m.getEntry(r, c);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1144,            d[0][c] = sum;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1146,"        return new Array2DRowRealMatrix(d, false);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1162,            double[][] d = new double[m.getRowDimension()][1];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1163,            for (int i = 0; i < m.getColumnDimension(); i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1164,"                d[i][0] = m.getEntry(i, i);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1166,"            return new Array2DRowRealMatrix(d, false);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1179,        for (int i = 0; i < m1.getRowDimension(); i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1180,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1182,    },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1278,        double min = Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1279,        for (int r = 0; r < m.getRowDimension(); r++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1280,            for (int c = 0; c < m.getColumnDimension(); c++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1281,"                double e = m.getEntry(r, c);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1282,                if (min > e) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1283,                    min = e;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1287,        return min;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1295,        double max = -Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1296,        for (int r = 0; r < m.length; r++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1297,            if (max < m[r]) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1298,                max = m[r];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1301,        return max;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1309,        double min = Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1310,        for (int r = 0; r < m.length; r++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1311,            if (min > m[r]) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1312,                min = m[r];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1315,        return min;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1323,        int[] inverse = new int[indices.length];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1324,        for (int i = 0; i < indices.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1325,            inverse[indices[i]] = i;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1327,        return inverse;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1335,        int[] reverse = new int[indices.length];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1336,        for (int i = 0; i < indices.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1337,            reverse[i] = indices[indices.length - i - 1];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1339,        return reverse;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1347,        double[] randn = new double[size];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1348,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1349,            randn[i] = random.nextGaussian();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1351,        return randn;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1360,        double[][] d = new double[size][popSize];,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1361,        for (int r = 0; r < size; r++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1362,            for (int c = 0; c < popSize; c++) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1363,                d[r][c] = random.nextGaussian();,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1366,"        return new Array2DRowRealMatrix(d, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,19,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,19,42,    },0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,19,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,19,51,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,19,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,19,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,19,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,19,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,19,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,19,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,19,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,19,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,19,43,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,19,53,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,19,54,"        getContext().addMessage(specific, max, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,19,55,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,19,56,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,19,62,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,19,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,19,37,        super(max);,0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,19,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0.0,0,-1,0
org/apache/commons/math3/exception/TooManyEvaluationsException,19,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,19,44,"        super(specific, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,19,45,        dimension = expected;,0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,19,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,19,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,19,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/DimensionMismatchException,19,63,        return dimension;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,19,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,19,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,19,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,19,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,19,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,19,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,19,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,19,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,19,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,19,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,19,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,19,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,19,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,19,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,19,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,19,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,19,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,19,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,19,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,19,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,19,44,        this(LocalizedFormats.UNSUPPORTED_OPERATION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,19,45,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,19,52,                                             Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,19,53,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,19,54,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,19,55,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,19,59,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,19,65,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathUnsupportedOperationException,19,71,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,19,37,"        super(value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,19,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,19,47,"        super(specific, value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,19,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,19,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,19,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,19,62,"        super(specific, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,19,63,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,19,64,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,19,65,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,19,71,        return lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,19,77,        return hi;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,852,"        DoubleIndex(double value, int index) {",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,853,            this.value = value;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,854,            this.index = index;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,855,        },0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,859,"            return Double.compare(value, o.value);",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,866,            if (this == other) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,867,                return true;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,870,            if (other instanceof DoubleIndex) {,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,871,"                return Double.compare(value, ((DoubleIndex) other).value) == 0;",0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,874,            return false;,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,881,            long bits = Double.doubleToLongBits(value);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,882,            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);,0.0,0,-1,0
org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,842,    private static class DoubleIndex implements Comparable<DoubleIndex> {,0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,113,"        public DataTransferObject(final double[] point, final double value) {",0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,114,            this.point = point.clone();,0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,115,            this.value = value;,0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,116,        },0.0,0,-1,0
org/apache/commons/math3/optimization/PointValuePair,19,122,"            return new PointValuePair(point, value, false);",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,75,        return throwable;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,100,"        context.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,101,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,110,        return context.get(key);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,119,        return context.keySet();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,128,        return getMessage(Locale.US);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,137,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,147,"        return buildMessage(locale, "": "");",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,159,"        return buildMessage(locale, separator);",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,171,        final StringBuilder sb = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,172,        int count = 0;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,173,        final int len = msgPatterns.size();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,174,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,175,            final Localizable pat = msgPatterns.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,176,            final Object[] args = msgArguments.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,179,            sb.append(fmt.format(args));,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,180,            if (++count < len) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,182,                sb.append(separator);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,186,        return sb.toString();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,197,        out.writeObject(throwable);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,198,        serializeMessages(out);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,199,        serializeContext(out);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,200,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,211,        throwable = (Throwable) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,212,        deSerializeMessages(in);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,213,        deSerializeContext(in);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,214,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,225,        final int len = msgPatterns.size();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,226,        out.writeInt(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,228,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,229,            final Localizable pat = msgPatterns.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,231,            out.writeObject(pat);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,232,            final Object[] args = msgArguments.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,233,            final int aLen = args.length;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,235,            out.writeInt(aLen);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,236,            for (int j = 0; j < aLen; j++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,237,                if (args[j] instanceof Serializable) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,239,                    out.writeObject(args[j]);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,242,                    out.writeObject(nonSerializableReplacement(args[j]));,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,246,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,259,        final int len = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,260,        msgPatterns = new ArrayList<Localizable>(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,261,        msgArguments = new ArrayList<Object[]>(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,263,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,265,            final Localizable pat = (Localizable) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,266,            msgPatterns.add(pat);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,268,            final int aLen = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,269,            final Object[] args = new Object[aLen];,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,270,            for (int j = 0; j < aLen; j++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,272,                args[j] = in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,274,            msgArguments.add(args);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,276,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,287,        final int len = context.keySet().size();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,288,        out.writeInt(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,289,        for (String key : context.keySet()) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,291,            out.writeObject(key);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,292,            final Object value = context.get(key);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,293,            if (value instanceof Serializable) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,295,                out.writeObject(value);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,298,                out.writeObject(nonSerializableReplacement(value));,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,300,        },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,301,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,314,        final int len = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,315,"        context = new HashMap<String, Object>();",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,316,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,318,            final String key = (String) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,320,            final Object value = in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,321,"            context.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,323,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,19,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,59,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,63,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,19,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,19,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,19,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,19,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,19,49,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,374,        return sourceFormat;,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,380,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,381,            ResourceBundle bundle =,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,383,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,385,                return bundle.getString(toString());,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,390,        },0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,388,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,19,394,        return sourceFormat;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,19,32,    private ArgUtils() {},0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,19,45,                if (o instanceof Object[]) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,19,46,                    for (Object oR : flatten((Object[]) o)) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,19,47,                        list.add(oR);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,19,50,                    list.add(o);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,114,    public MersenneTwister(int seed) {,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,115,        mt = new int[N];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,116,        setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,117,    },0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,123,    public MersenneTwister(int[] seed) {,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,124,        mt = new int[N];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,125,        setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,126,    },0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,131,    public MersenneTwister(long seed) {,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,132,        mt = new int[N];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,133,        setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,134,    },0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,168,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,169,            return;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,233,        if (mti >= N) { // generate N words at one time,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,234,            int mtNext = mt[0];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,235,            for (int k = 0; k < N - M; ++k) {,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,236,                int mtCurr = mtNext;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,237,                mtNext = mt[k + 1];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,241,            for (int k = N - M; k < N - 1; ++k) {,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,242,                int mtCurr = mtNext;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,243,                mtNext = mt[k + 1];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,250,            mti = 0;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,253,        y = mt[mti++];,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,256,        y ^=  y >>> 11;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,257,        y ^= (y <<   7) & 0x9d2c5680;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,258,        y ^= (y <<  15) & 0xefc60000;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,259,        y ^=  y >>> 18;,0.0,0,-1,0
org/apache/commons/math3/random/MersenneTwister,19,261,        return y >>> (32 - bits);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,61,        return next(1) != 0;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,66,        int i = 0;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,67,        final int iEnd = bytes.length - 3;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,68,        while (i < iEnd) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,69,            final int random = next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,70,            bytes[i]     = (byte) (random & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,71,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,72,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,73,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,74,            i += 4;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,75,        },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,76,        int random = next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,77,        while (i < bytes.length) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,78,            bytes[i++] = (byte) (random & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,79,            random     = random >> 8;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,81,    },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,85,        final long high = ((long) next(26)) << 26;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,86,        final int  low  = next(26);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,87,        return (high | low) * 0x1.0p-52d;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,92,        return next(23) * 0x1.0p-23f;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,99,        if (Double.isNaN(nextGaussian)) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,101,            final double x = nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,102,            final double y = nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,103,            final double alpha = 2 * FastMath.PI * x;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,104,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,105,            random       = r * FastMath.cos(alpha);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,106,            nextGaussian = r * FastMath.sin(alpha);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,107,        } else {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,109,            random = nextGaussian;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,110,            nextGaussian = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,113,        return random;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,119,        return next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,138,        if (n > 0) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,139,            if ((n & -n) == n) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,140,                return (int) ((n * (long) next(31)) >> 31);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,145,                bits = next(31);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,146,                val = bits % n;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,147,            } while (bits - val + (n - 1) < 0);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,148,            return val;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,150,        throw new NotStrictlyPositiveException(n);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,155,        final long high  = ((long) next(32)) << 32;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,156,        final long  low  = ((long) next(32)) & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,19,157,        return high | low;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3752,    private static class lnMant {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3766,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3768,        },0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,19,82,            throw new NullArgumentException();,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,19,114,        return count;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,19,125,        return count < maximalCount;,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,19,136,        for (int i = 0; i < value; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,19,137,            incrementCount();,0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,19,139,    },0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,19,156,            maxCountCallback.trigger(maximalCount);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,349,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,362,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,364,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,366,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,383,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,384,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,392,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,393,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,396,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,397,          return exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,400,      double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,401,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,402,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,404,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,409,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,410,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,411,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,414,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,415,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,416,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,417,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,422,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,425,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,426,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,427,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,428,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,429,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,430,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,432,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,433,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,434,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,442,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,443,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,444,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,452,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,453,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,456,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,457,          return -exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,460,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,461,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,464,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,465,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,466,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,471,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,472,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,473,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,478,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,479,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,480,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,483,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,484,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,485,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,486,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,491,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,493,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,494,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,497,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,498,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,499,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,500,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,501,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,502,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,504,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,505,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,506,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,508,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,509,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,515,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,516,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,518,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,519,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,520,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,521,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,523,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,524,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,525,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,530,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,534,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,535,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,536,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,537,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,538,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,539,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,541,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,542,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,545,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,546,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,549,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,557,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,559,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,560,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,569,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,570,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,573,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,574,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,577,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,578,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,581,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,582,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,583,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,587,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,588,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,596,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,597,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,598,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,599,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,600,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,603,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,604,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,605,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,606,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,607,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,609,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,610,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,611,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,614,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,615,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,616,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,617,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,623,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,625,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,627,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,628,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,630,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,632,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,638,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,639,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,642,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,643,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,644,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,645,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,646,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,648,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,649,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,650,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,653,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,654,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,655,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,656,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,662,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,664,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,666,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,669,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,670,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,673,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,689,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,690,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,691,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,692,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,696,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,699,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,700,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,702,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,704,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,711,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,719,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,720,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,721,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,722,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,726,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,729,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,730,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,732,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,734,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,741,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,783,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,807,"        return exp(x, 0.0, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,826,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,827,            intVal = (int) -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,829,            if (intVal > 746) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,830,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,831,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,832,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,834,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,837,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,840,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,844,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,847,            if (intVal == 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,850,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,854,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,857,            intVal++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,862,            intVal = -intVal;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,864,            intVal = (int) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,866,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,867,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,869,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,871,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,899,        double z = 0.04168701738764507;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,900,        z = z * epsilon + 0.1666666505023083;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,901,        z = z * epsilon + 0.5000000000042687;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,902,        z = z * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,903,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,910,        double tempA = intPartA * fracPartA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,917,        final double tempC = tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,919,        if (extra != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,922,            result = tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,925,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,927,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,931,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,939,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,955,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,956,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,957,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,962,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,963,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,970,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,972,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,973,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,974,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,978,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,982,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,983,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,984,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,986,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,987,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,988,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,990,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,995,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,999,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1000,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1002,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1003,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1004,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1005,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1007,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1008,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1009,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1010,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1013,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1015,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1017,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1019,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1021,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1023,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1025,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1029,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1030,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1031,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1033,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1035,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1036,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1038,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1040,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1043,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1045,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1046,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1048,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1050,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1051,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1053,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1054,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1055,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1056,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1058,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1059,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1060,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1073,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1077,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1078,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1081,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1082,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1083,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1086,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1096,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1106,        if (x==0) { // Handle special case of +0/-0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1109,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1113,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1114,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1115,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1118,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1123,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1124,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1128,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1132,        int exp = (int)(bits >> 52)-1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1136,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1146,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1148,                --exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1149,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1154,        if (exp == -1 || exp == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1160,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1161,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1162,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1163,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1164,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1165,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1166,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1168,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1169,                double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1170,                double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1172,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1174,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1175,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1177,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1178,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1179,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1182,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1183,                    aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1184,                    ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1186,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1187,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1188,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1192,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1193,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1195,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1196,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1197,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1199,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1204,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1215,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1217,        double lnza = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1218,        double lnzb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1220,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1222,            double tmp = epsilon * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1223,            double aa = epsilon + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1224,            double ab = epsilon - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1225,            double xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1226,            double xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1229,            final double numer = bits & 0x3ffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1230,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1231,            aa = numer - xa*denom - xb * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1232,            xb += aa / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1235,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1236,            double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1237,            double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1239,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1241,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1242,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1244,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1245,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1246,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1249,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1250,                aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1251,                ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1253,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1254,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1255,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1259,            aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1260,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1268,            lnza = aa + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1269,            lnzb = -(lnza - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1270,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1273,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1274,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1275,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1276,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1277,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1278,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1279,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1296,        double a = LN_2_A*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1297,        double b = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1298,        double c = a+lnm[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1299,        double d = -(c-a-lnm[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1300,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1301,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1303,        c = a + lnza;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1304,        d = -(c - a - lnza);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1305,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1306,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1308,        c = a + LN_2_B*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1309,        d = -(c - a - LN_2_B*exp);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1310,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1311,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1313,        c = a + lnm[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1314,        d = -(c - a - lnm[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1315,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1316,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1318,        c = a + lnzb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1319,        d = -(c - a - lnzb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1320,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1321,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1323,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1324,            hiPrec[0] = a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1325,            hiPrec[1] = b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1328,        return a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1338,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1339,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1342,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1343,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1346,        if (x > 1e-6 ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1348,            final double xpa = 1 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1349,            final double xpb = -(xpa - 1 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1351,            final double[] hiPrec = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1352,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1353,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1354,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1359,            final double fx1 = xpb / xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1360,            final double epsilon = 0.5 * fx1 + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1361,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1364,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1365,            return y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1374,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1376,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1377,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1378,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1381,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1382,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1383,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1385,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1386,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1388,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1408,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1419,        final double lns[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1421,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1422,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1425,        if (x != x) { // X is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1426,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1430,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1431,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1432,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1434,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1436,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1437,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1440,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1441,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1445,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1446,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1448,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1449,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1452,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1455,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1456,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1457,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1459,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1460,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1462,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1466,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1467,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1468,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1471,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1472,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1474,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1478,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1479,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1480,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1483,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1484,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1485,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1486,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1489,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1492,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1493,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1494,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1495,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1498,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1502,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1504,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1505,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1508,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1509,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1511,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1516,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1518,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1519,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1522,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1524,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1526,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1533,        if (y < 8e298 && y > -8e298) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1534,            double tmp1 = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1535,            ya = y + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1536,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1537,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1538,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1539,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1540,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1541,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1545,"        final double lores = log(x, lns);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1546,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1547,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1550,        double lna = lns[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1551,        double lnb = lns[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1554,        double tmp1 = lna * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1555,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1556,        lnb += lna - tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1557,        lna = tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1560,        final double aa = lna * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1561,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1563,        lna = aa+ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1564,        lnb = -(lna - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1566,        double z = 1.0 / 120.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1567,        z = z * lnb + (1.0 / 24.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1568,        z = z * lnb + (1.0 / 6.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1569,        z = z * lnb + 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1570,        z = z * lnb + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1571,        z = z * lnb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1573,"        final double result = exp(lna, z, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1575,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1588,        if (e == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1589,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1590,        } else if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1591,            e = -e;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1592,            d = 1.0 / d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1597,        final int splitFactor = 0x8000001;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1598,        final double cd       = splitFactor * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1599,        final double d1High   = cd - (cd - d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1600,        final double d1Low    = d - d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1603,        double resultHigh = 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1604,        double resultLow  = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1607,        double d2p     = d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1608,        double d2pHigh = d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1609,        double d2pLow  = d1Low;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1611,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1613,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1616,                final double tmpHigh = resultHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1617,                final double cRH     = splitFactor * resultHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1618,                final double rHH     = cRH - (cRH - resultHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1619,                final double rHL     = resultHigh - rHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1620,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1621,                resultHigh = tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1622,                resultLow  = resultLow * d2p + tmpLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1627,            final double tmpHigh = d2pHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1628,            final double cD2pH   = splitFactor * d2pHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1629,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1630,            final double d2pHL   = d2pHigh - d2pHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1631,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1632,            final double cTmpH   = splitFactor * tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1633,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1634,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1635,            d2p     = d2pHigh + d2pLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1637,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1639,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1641,        return resultHigh + resultLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1653,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1655,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1656,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1657,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1658,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1661,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1663,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1673,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1675,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1676,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1677,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1678,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1679,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1681,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1696,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1697,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1698,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1699,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1702,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1703,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1704,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1705,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1708,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1709,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1710,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1711,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1737,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1738,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1740,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1741,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1742,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1743,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1744,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1746,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1747,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1748,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1749,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1750,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1794,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1797,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1798,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1799,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1800,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1803,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1805,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1816,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1817,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1819,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1820,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1821,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1823,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1836,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1837,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1840,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1841,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1842,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1843,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1846,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1847,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1848,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1849,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1852,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1853,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1854,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1855,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1880,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1881,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1884,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1885,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1886,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1887,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1888,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1890,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1891,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1892,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1893,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1894,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1896,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1897,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1899,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1900,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1904,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1906,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1907,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1908,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1909,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1910,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1912,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1913,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1914,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1915,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1916,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1918,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1919,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1921,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1922,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1924,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1926,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1927,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1941,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1944,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1945,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1946,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1948,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1949,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1950,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1953,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1954,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1955,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1957,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1960,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1961,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1962,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1965,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1968,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1985,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1986,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1989,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1990,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1993,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,1994,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2000,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2001,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2003,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2004,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2005,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2006,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2007,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2009,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2010,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2011,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2015,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2016,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2018,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2019,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2021,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2022,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2023,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2024,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2026,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2027,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2029,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2030,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2031,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2034,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2036,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2039,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2040,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2042,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2043,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2045,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2048,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2050,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2054,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2055,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2056,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2057,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2058,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2061,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2063,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2064,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2065,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2066,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2068,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2070,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2074,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2075,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2077,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2078,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2079,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2081,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2093,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2096,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2097,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2098,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2101,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2102,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2104,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2105,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2107,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2108,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2109,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2110,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2112,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2113,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2115,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2116,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2117,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2120,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2122,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2125,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2126,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2128,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2129,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2131,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2134,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2136,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2140,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2141,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2142,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2143,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2144,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2147,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2149,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2150,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2151,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2152,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2154,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2156,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2160,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2161,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2162,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2163,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2164,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2165,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2166,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2169,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2171,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2172,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2173,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2174,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2176,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2178,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2182,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2183,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2185,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2186,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2189,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2190,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2191,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2192,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2201,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2202,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2204,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2207,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2208,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2209,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2210,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2214,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2215,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2216,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2217,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2219,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2223,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2227,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2231,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2232,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2233,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2234,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2235,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2236,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2238,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2239,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2240,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2243,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2244,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2247,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2249,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2251,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2253,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2255,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2257,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2268,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2271,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2272,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2273,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2276,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2277,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2281,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2282,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2286,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2287,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2288,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2289,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2290,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2291,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2293,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2294,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2295,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2301,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2303,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2305,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2307,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2309,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2311,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2322,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2323,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2326,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2327,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2328,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2329,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2333,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2334,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2335,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2336,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2338,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2341,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2342,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2346,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2347,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2351,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2352,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2353,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2354,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2355,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2356,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2357,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2358,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2359,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2360,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2363,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2365,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2366,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2368,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2369,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2370,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2372,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2373,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2374,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2375,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2379,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2380,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2382,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2385,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2386,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2389,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2398,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2408,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2411,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2412,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2415,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2417,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2418,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2419,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2422,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2423,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2427,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2428,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2430,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2431,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2433,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2434,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2435,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2437,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2438,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2439,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2442,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2443,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2444,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2445,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2446,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2449,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2452,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2454,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2455,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2456,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2457,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2458,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2459,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2460,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2461,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2462,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2463,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2465,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2466,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2468,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2469,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2470,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2472,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2473,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2474,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2477,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2479,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2480,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2484,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2485,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2488,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2499,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2500,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2501,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2502,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2503,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2504,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2505,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2508,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2510,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2511,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2512,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2515,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2518,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2519,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2520,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2521,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2522,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2524,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2525,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2527,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2529,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2530,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2532,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2533,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2534,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2536,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2537,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2541,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2542,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2545,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2555,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2556,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2559,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2560,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2561,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2562,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2564,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2565,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2566,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2568,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2572,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2573,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2574,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2576,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2579,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2585,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2586,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2587,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2590,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2591,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2594,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2597,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2598,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2599,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2602,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2603,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2606,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2609,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2610,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2611,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2614,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2615,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2619,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2621,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2622,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2625,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2626,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2632,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2633,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2634,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2637,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2638,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2643,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2644,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2645,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2648,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2649,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2652,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2653,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2655,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2657,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2658,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2659,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2661,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2662,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2666,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2668,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2676,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2677,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2680,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2681,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2684,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2685,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2688,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2689,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2692,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2693,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2699,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2700,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2701,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2704,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2705,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2708,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2709,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2711,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2712,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2714,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2715,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2716,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2720,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2721,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2722,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2723,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2726,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2729,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2732,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2733,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2734,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2735,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2737,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2738,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2740,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2741,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2742,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2744,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2752,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2753,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2756,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2757,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2760,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2761,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2764,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2765,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2768,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2769,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2775,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2776,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2777,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2780,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2781,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2784,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2785,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2787,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2788,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2790,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2791,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2792,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2795,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2796,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2797,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2798,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2801,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2804,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2805,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2806,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2809,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2812,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2813,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2816,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2817,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2819,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2820,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2822,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2823,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2824,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2826,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2835,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2836,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2837,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2839,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2840,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2841,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2845,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2846,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2847,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2848,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2851,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2853,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2857,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2860,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2864,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2867,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2868,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2869,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2870,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2871,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2873,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2878,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2879,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2880,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2883,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2884,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2885,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2887,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2888,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2889,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2890,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2891,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2892,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2894,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2895,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2897,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2898,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2899,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2901,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2904,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2906,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2907,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2910,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2920,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2921,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2925,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2926,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2928,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2929,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2931,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2932,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2933,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2935,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2945,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2946,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2950,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2951,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2953,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2954,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2956,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2965,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2974,        return (x < 0l) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2983,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,2992,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3001,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3002,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3004,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3013,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3014,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3016,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3028,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3029,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3033,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3034,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3036,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3037,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3039,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3040,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3044,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3045,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3046,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3047,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3050,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3052,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3054,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3056,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3057,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3061,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3064,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3065,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3066,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3068,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3070,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3074,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3078,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3081,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3082,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3083,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3085,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3086,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3088,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3089,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3091,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3094,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3095,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3097,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3112,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3113,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3117,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3118,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3120,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3121,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3123,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3124,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3128,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3129,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3130,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3131,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3134,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3136,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3138,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3140,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3141,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3145,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3148,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3149,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3150,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3152,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3154,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3158,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3162,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3165,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3166,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3167,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3169,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3170,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3172,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3173,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3175,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3178,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3179,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3181,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3221,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3222,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3223,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3224,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3225,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3226,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3227,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3228,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3233,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3234,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3235,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3236,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3238,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3277,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3278,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3279,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3280,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3281,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3282,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3283,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3284,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3289,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3290,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3291,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3292,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3294,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3306,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3307,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3310,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3311,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3314,        y = (long) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3315,        if (x < 0 && y != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3316,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3319,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3320,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3323,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3333,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3334,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3337,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3338,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3339,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3342,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3344,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3345,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3348,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3356,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3357,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3359,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3360,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3361,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3363,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3365,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3366,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3370,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3371,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3379,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3387,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3396,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3405,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3414,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3415,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3417,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3418,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3421,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3422,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3426,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3427,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3428,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3430,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3439,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3440,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3442,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3443,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3446,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3447,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3451,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3452,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3453,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3455,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3473,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3482,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3483,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3485,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3486,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3489,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3490,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3494,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3495,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3496,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3498,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3507,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3508,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3510,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3511,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3514,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3515,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3519,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3520,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3521,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3523,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3541,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3542,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3543,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3544,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3547,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3548,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3549,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3551,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3552,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3554,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3558,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3561,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3562,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3565,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3568,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3596,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3608,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3609,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3610,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3611,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3613,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3625,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3626,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3627,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3628,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3630,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3643,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3656,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3665,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3666,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3667,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3668,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3669,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3670,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3671,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3672,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3673,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3674,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3675,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3676,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3677,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3785,                  double xb) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3788,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3794,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3795,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3796,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3798,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3799,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3800,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3801,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3803,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3804,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3805,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3806,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3808,                if (remA > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3809,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3815,                --k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3816,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3818,            this.finalK = k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3819,            this.finalRemA = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3820,            this.finalRemB = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3821,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3827,            return finalK;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3833,            return finalRemA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3839,            return finalRemB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3680,    private static class ExpIntTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3712,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3713,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3715,        },0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,83,    private Precision() {},0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,96,"        if (equals(x, y, eps)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,97,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,98,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,99,            return -1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,101,        return 1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,122,"        if (equals(x, y, maxUlps)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,123,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,124,        } else if (x < y) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,125,            return -1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,127,        return 1;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,139,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,152,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,166,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,181,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,203,        int xInt = Float.floatToIntBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,204,        int yInt = Float.floatToIntBits(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,207,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,208,            xInt = SGN_MASK_FLOAT - xInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,210,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,211,            yInt = SGN_MASK_FLOAT - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,214,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,216,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,232,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,244,"        return equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,257,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,287,"        if (equals(x, y, 1)) {",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,288,            return true;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,291,"        final double absoluteMax = FastMath.max(FastMath.abs(x), FastMath.abs(y));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,292,        final double relativeDifference = FastMath.abs((x - y) / absoluteMax);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,294,        return relativeDifference <= eps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,309,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,330,        long xInt = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,331,        long yInt = Double.doubleToLongBits(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,334,        if (xInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,335,            xInt = SGN_MASK - xInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,337,        if (yInt < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,338,            yInt = SGN_MASK - yInt;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,341,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,343,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,359,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,372,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,394,            return (new BigDecimal,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,398,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,399,            if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,400,                return x;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,402,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,417,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,435,"        final float sign = FastMath.copySign(1f, x);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,436,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,437,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,457,        switch (roundingMethod) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,459,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,460,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,462,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,464,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,466,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,467,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,469,            if (sign == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,470,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,472,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,474,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,476,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,477,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,478,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,479,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,481,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,483,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,486,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,487,            if (fraction > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,488,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,489,            } else if (fraction < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,490,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,493,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,495,                    unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,497,                    unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,500,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,503,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,504,            double fraction = unscaled - FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,505,            if (fraction >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,506,                unscaled = FastMath.ceil(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,508,                unscaled = FastMath.floor(unscaled);,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,510,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,513,            if (unscaled != FastMath.floor(unscaled)) {,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,514,                throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,518,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,519,            break;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,521,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,532,        return unscaled;,0.0,0,-1,0
org/apache/commons/math3/util/Precision,19,552,        return x + originalDelta - x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3719,    private static class ExpFracTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3745,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3746,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,19,3748,        },0.0,0,-1,0
org/apache/commons/math3/util/Incrementor,19,66,                     throw new MaxCountExceededException(max);,0.0,0,-1,0
