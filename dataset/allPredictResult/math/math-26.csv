project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,1.0,0,1,0
org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",1.0,0,1,0
org/apache/commons/math3/exception/ConvergenceException,26,50,    },1.0,0,1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.16667,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0.16667,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,0.16667,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,0.14286,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,0.14286,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",0.14286,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0.14286,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,0.04545,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,0.04545,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,190,            return;,0.04545,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,0.03846,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,0.03846,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0.03846,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,218,                q1 = q2;,0.03846,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,219,                a0 = a1;,0.03846,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,26,3255,            return x*y;,0.02,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,193,        long p0 = 1;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,194,        long q0 = 0;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,195,        long p1 = a0;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,196,        long q1 = 1;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,198,        long p2 = 0;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,199,        long q2 = 1;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,201,        int n = 0;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,202,        boolean stop = false;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,204,            ++n;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,205,            double r1 = 1.0 / (r0 - a0);,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,206,            long a1 = (long)FastMath.floor(r1);,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,207,            p2 = (a1 * p1) + p0;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,208,            q2 = (a1 * q1) + q0;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,0.01961,1,-1,0
org/apache/commons/math3/fraction/Fraction,26,213,            double convergent = (double)p2 / (double)q2;,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,224,        } while (!stop);,0.01961,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,122,    },0.01923,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",0.01887,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,177,    {,0.01818,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,178,        long overflow = Integer.MAX_VALUE;,0.01818,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,179,        double r0 = value;,0.01818,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,180,        long a0 = (long)FastMath.floor(r0);,0.01818,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,0.01818,1,-1,0
org/apache/commons/math3/fraction/Fraction,26,187,        if (FastMath.abs(a0 - value) < epsilon) {,0.01818,0,-1,0
org/apache/commons/math3/util/FastMath,26,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.01695,0,-1,0
org/apache/commons/math3/util/FastMath,26,3241,        if (x != x) { // NaN,0.01695,0,-1,0
org/apache/commons/math3/util/FastMath,26,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.01695,0,-1,0
org/apache/commons/math3/util/FastMath,26,3249,        y = (long) x;,0.01695,0,-1,0
org/apache/commons/math3/util/FastMath,26,3250,        if (x < 0 && y != x) {,0.01695,0,-1,0
org/apache/commons/math3/util/FastMath,26,3254,        if (y == 0) {,0.01695,0,-1,0
org/apache/commons/math3/util/FastMath,26,3258,        return y;,0.01695,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,26,45,                if (o instanceof Object[]) {,0.01111,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,26,50,                    list.add(o);,0.01111,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,64,    public ExceptionContext(final Throwable throwable) {,0.01064,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,65,        this.throwable = throwable;,0.01064,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,66,        msgPatterns    = new ArrayList<Localizable>();,0.01064,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,67,        msgArguments   = new ArrayList<Object[]>();,0.01064,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,68,"        context        = new HashMap<String, Object>();",0.01064,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,69,    },0.01064,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,87,        msgPatterns.add(pattern);,0.01064,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,88,        msgArguments.add(ArgUtils.flatten(arguments));,0.01064,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,89,    },0.01064,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,26,42,        final List<Object> list = new ArrayList<Object>();,0.01064,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,26,43,        if (array != null) {,0.01064,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,26,44,            for (Object o : array) {,0.01064,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,26,54,        return list.toArray();,0.01064,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,366,    private LocalizedFormats(final String sourceFormat) {,0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,367,        this.sourceFormat = sourceFormat;,0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,368,    },0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,51,"    BANDWIDTH(""bandwidth ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,92,"    ELITISM_RATE(""elitism rate ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,102,"    EVALUATION(""evaluation""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,120,"    INDEX(""index ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,122,"    INFINITE_BOUND(""interval bounds must be finite""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,133,"    DIMENSION(""dimension ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,157,"    EVALUATIONS(""evaluations""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,162,"    MUTATION_RATE(""mutation rate ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,175,"    START_POSITION(""start position ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,194,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,195,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,196,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,197,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,198,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,199,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,200,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,201,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,202,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,203,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,204,"    EXPONENT(""exponent ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,205,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,206,"    LENGTH(""length ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,207,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,208,"    MEAN(""mean ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,209,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,210,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,211,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,212,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,213,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,214,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,215,"    POPULATION_SIZE(""population size ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,216,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,217,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,218,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,219,"    SCALE(""scale ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,220,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,221,"    SHAPE(""shape ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,222,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,223,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,224,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,225,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,226,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,227,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,228,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,229,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,230,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,231,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,232,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,233,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,234,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,235,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,236,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,237,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,238,"    NO_BIN_SELECTED(""no bin selected""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,239,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,240,"    NO_DATA(""no data""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,241,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,242,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,243,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,244,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,245,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,246,"    NO_RESULT_AVAILABLE(""no result available""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,247,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,248,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,249,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,250,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,251,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,252,"    DENOMINATOR(""denominator""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,253,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,254,"    FRACTION(""fraction""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,255,"    FUNCTION(""function""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,256,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,257,"    INPUT_ARRAY(""input array""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,258,"    NUMERATOR(""numerator""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,259,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,260,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,261,"    REAL_FORMAT(""real format""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,262,"    WHOLE_FORMAT(""whole format""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,263,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,264,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,265,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,266,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,267,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,268,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,269,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,270,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,271,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,272,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,273,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,274,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,275,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,276,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,277,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,278,"    OUT_OF_RANGE(""out of range""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,279,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,280,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,281,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,282,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,283,"    OVERFLOW(""overflow""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,284,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,285,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,286,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,287,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,288,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,289,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,290,"    POLYNOMIAL(""polynomial""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,291,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,292,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,293,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,294,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,295,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,296,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,297,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,298,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,299,"    ROW_INDEX(""row index ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,300,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,301,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,302,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,303,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,304,"    SIMPLE_MESSAGE(""{0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,305,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,306,"    SINGULAR_OPERATOR(""operator is singular""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,307,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,308,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,309,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,310,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,311,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,312,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,313,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,314,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,315,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,316,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,317,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,318,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,319,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,320,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,321,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,322,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,323,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,324,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,325,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,326,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,327,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,328,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,329,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,330,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,331,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,332,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,333,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,334,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,335,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,336,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,337,"    ILLEGAL_STATE(""illegal state""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,338,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,339,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,340,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,341,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,342,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,343,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,344,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,345,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,346,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,347,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,348,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,349,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,350,"    ZERO_NORM(""zero norm""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,351,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,352,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,353,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0.01053,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,39,public enum LocalizedFormats implements Localizable {,0.01053,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,256,"    public Fraction(int num, int den) {",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,257,        if (den == 0) {,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,261,        if (den < 0) {,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,271,"        final int d = ArithmeticUtils.gcd(num, den);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,272,        if (d > 1) {,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,273,            num /= d;,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,274,            den /= d;,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,278,        if (den < 0) {,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,282,        this.numerator   = num;,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,283,        this.denominator = den;,0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,284,    },0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,42,"    public static final Fraction TWO = new Fraction(2, 1);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,45,"    public static final Fraction ONE = new Fraction(1, 1);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,48,"    public static final Fraction ZERO = new Fraction(0, 1);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",0.00488,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,113,    private static final double LN_QUICK_COEF[][] = {,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,126,    private static final double LN_HI_PREC_COEF[][] = {,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,139,    private static final double SINE_TABLE_A[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,158,    private static final double SINE_TABLE_B[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,177,    private static final double COSINE_TABLE_A[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,196,    private static final double COSINE_TABLE_B[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,216,    private static final double TANGENT_TABLE_A[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,235,    private static final double TANGENT_TABLE_B[] =,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,254,    private static final long RECIP_2PI[] = new long[] {,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,275,    private static final long PI_O_4_BITS[] = new long[] {,0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.00488,0,-1,0
org/apache/commons/math3/util/FastMath,26,2900,        return (x < 0) ? -x : x;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,35,    static final long[] FACTORIALS = new long[] {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,385,        int u = p;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,386,        int v = q;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,387,        if ((u == 0) || (v == 0)) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,392,            return FastMath.abs(u) + FastMath.abs(v);,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,399,        if (u > 0) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,400,            u = -u;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,402,        if (v > 0) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,403,            v = -v;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,406,        int k = 0;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,409,            u /= 2;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,410,            v /= 2;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,411,            k++; // cast out twos.,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,413,        if (k == 31) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,425,            while ((t & 1) == 0) { // while t is even..,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,426,                t /= 2; // cast out twos,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,429,            if (t > 0) {,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,430,                u = -t;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,432,                v = t;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,435,            t = (v - u) / 2;,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,438,        } while (t != 0);,0.00488,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,439,        return -u * (1 << k); // gcd is u*2^k,0.00488,0,-1,0
org/apache/commons/math3/fraction/FractionConversionException,26,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/fraction/FractionConversionException,26,43,    },0.0,0,-1,0
org/apache/commons/math3/fraction/FractionConversionException,26,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",0.0,0,-1,0
org/apache/commons/math3/fraction/FractionConversionException,26,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,26,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0.0,0,-1,0
org/apache/commons/math3/exception/ConvergenceException,26,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,26,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,75,        return throwable;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,100,"        context.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,101,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,110,        return context.get(key);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,119,        return context.keySet();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,128,        return getMessage(Locale.US);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,137,        return getMessage(Locale.getDefault());,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,147,"        return buildMessage(locale, "": "");",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,159,"        return buildMessage(locale, separator);",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,171,        final StringBuilder sb = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,172,        int count = 0;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,173,        final int len = msgPatterns.size();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,174,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,175,            final Localizable pat = msgPatterns.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,176,            final Object[] args = msgArguments.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,179,            sb.append(fmt.format(args));,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,180,            if (++count < len) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,182,                sb.append(separator);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,186,        return sb.toString();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,197,        out.writeObject(throwable);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,198,        serializeMessages(out);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,199,        serializeContext(out);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,200,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,211,        throwable = (Throwable) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,212,        deSerializeMessages(in);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,213,        deSerializeContext(in);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,214,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,225,        final int len = msgPatterns.size();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,226,        out.writeInt(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,228,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,229,            final Localizable pat = msgPatterns.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,231,            out.writeObject(pat);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,232,            final Object[] args = msgArguments.get(i);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,233,            final int aLen = args.length;,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,235,            out.writeInt(aLen);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,236,            for (int j = 0; j < aLen; j++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,237,                if (args[j] instanceof Serializable) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,239,                    out.writeObject(args[j]);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,242,                    out.writeObject(nonSerializableReplacement(args[j]));,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,246,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,259,        final int len = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,260,        msgPatterns = new ArrayList<Localizable>(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,261,        msgArguments = new ArrayList<Object[]>(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,263,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,265,            final Localizable pat = (Localizable) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,266,            msgPatterns.add(pat);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,268,            final int aLen = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,269,            final Object[] args = new Object[aLen];,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,270,            for (int j = 0; j < aLen; j++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,272,                args[j] = in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,274,            msgArguments.add(args);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,276,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,287,        final int len = context.keySet().size();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,288,        out.writeInt(len);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,289,        for (String key : context.keySet()) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,291,            out.writeObject(key);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,292,            final Object value = context.get(key);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,293,            if (value instanceof Serializable) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,295,                out.writeObject(value);,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,298,                out.writeObject(nonSerializableReplacement(value));,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,300,        },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,301,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,314,        final int len = in.readInt();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,315,"        context = new HashMap<String, Object>();",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,316,        for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,318,            final String key = (String) in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,320,            final Object value = in.readObject();,0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,321,"            context.put(key, value);",0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,323,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ExceptionContext,26,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,99,"        this(value, 1.0e-5, 100);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,100,    },0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,141,"       this(value, 0, maxDenominator, 100);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,142,    },0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,182,"            throw new FractionConversionException(value, a0, 1l);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,210,"                throw new FractionConversionException(value, p2, q2);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,222,                stop = true;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,226,        if (n >= maxIterations) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,227,"            throw new FractionConversionException(value, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,230,        if (q2 < maxDenominator) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,231,            this.numerator = (int) p2;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,232,            this.denominator = (int) q2;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,234,            this.numerator = (int) p1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,235,            this.denominator = (int) q1;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,238,    },0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,246,"        this(num, 1);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,247,    },0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,258,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,262,            if (num == Integer.MIN_VALUE ||,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,264,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,267,            num = -num;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,268,            den = -den;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,279,            num = -num;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,280,            den = -den;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,292,        if (numerator >= 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,293,            ret = this;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,295,            ret = negate();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,297,        return ret;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,307,        long nOd = ((long) numerator) * object.denominator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,308,        long dOn = ((long) denominator) * object.numerator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,309,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,319,        return (double)numerator / (double)denominator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,333,        if (this == other) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,334,            return true;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,336,        if (other instanceof Fraction) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,339,            Fraction rhs = (Fraction)other;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,340,            return (numerator == rhs.numerator) &&,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,343,        return false;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,353,        return (float)doubleValue();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,361,        return denominator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,369,        return numerator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,378,        return 37 * (37 * 17 + numerator) + denominator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,388,        return (int)doubleValue();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,398,        return (long)doubleValue();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,406,        if (numerator==Integer.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,407,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,409,"        return new Fraction(-numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,417,"        return new Fraction(denominator, numerator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,431,"        return addSub(fraction, true /* add */);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,440,"        return new Fraction(numerator + i * denominator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,454,"        return addSub(fraction, false /* subtract */);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,463,"        return new Fraction(numerator - i * denominator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,477,        if (fraction == null) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,478,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,481,        if (numerator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,482,            return isAdd ? fraction : fraction.negate();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,484,        if (fraction.numerator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,485,            return this;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,489,"        int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,490,        if (d1==1) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,492,"            int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,493,"            int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,494,            return new Fraction,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,502,        BigInteger uvp = BigInteger.valueOf(numerator),0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,504,        BigInteger upv = BigInteger.valueOf(fraction.numerator),0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,506,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,509,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,510,"        int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,513,        BigInteger w = t.divide(BigInteger.valueOf(d2));,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,514,        if (w.bitLength() > 31) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,515,"            throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,518,"        return new Fraction (w.intValue(),",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,534,        if (fraction == null) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,535,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,537,        if (numerator == 0 || fraction.numerator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,538,            return ZERO;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,542,"        int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,543,"        int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,544,        return getReducedFraction,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,555,"        return new Fraction(numerator * i, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,569,        if (fraction == null) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,570,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,572,        if (fraction.numerator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,573,"            throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,576,        return multiply(fraction.reciprocal());,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,585,"        return new Fraction(numerator, denominator * i);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,597,        return 100 * doubleValue();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,612,        if (denominator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,613,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,616,        if (numerator==0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,617,            return ZERO; // normalize zero.,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,620,        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,621,            numerator/=2; denominator/=2;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,623,        if (denominator < 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,624,            if (numerator==Integer.MIN_VALUE ||,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,626,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,629,            numerator = -numerator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,630,            denominator = -denominator;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,633,"        int gcd = ArithmeticUtils.gcd(numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,634,        numerator /= gcd;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,635,        denominator /= gcd;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,636,"        return new Fraction(numerator, denominator);",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,650,        String str = null;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,651,        if (denominator == 1) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,652,            str = Integer.toString(numerator);,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,653,        } else if (numerator == 0) {,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,654,"            str = ""0"";",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,656,"            str = numerator + "" / "" + denominator;",0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,658,        return str;,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,663,        return FractionField.getInstance();,0.0,0,-1,0
org/apache/commons/math3/fraction/Fraction,26,37,public class Fraction,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,43,    public MathArithmeticException() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,44,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,46,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,56,                                   Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,57,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,58,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,59,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,63,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,69,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathArithmeticException,26,75,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,26,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,26,42,    },0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,26,50,"        super(pattern, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/NullArgumentException,26,51,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,26,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,26,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,26,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,26,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,26,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,26,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,26,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,26,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,26,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,26,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,26,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,26,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,26,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,26,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,26,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,26,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,26,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,26,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,26,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,26,37,"        super(value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,26,38,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,26,47,"        super(specific, value, 0, true);",0.0,0,-1,0
org/apache/commons/math3/exception/NotPositiveException,26,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,26,32,    private ArgUtils() {},0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,26,46,                    for (Object oR : flatten((Object[]) o)) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/ArgUtils,26,47,                        list.add(oR);,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,372,        return sourceFormat;,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,378,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,379,            ResourceBundle bundle =,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,381,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,383,                return bundle.getString(toString());,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,388,        },0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,386,        } catch (MissingResourceException mre) {,0.0,0,-1,0
org/apache/commons/math3/exception/util/LocalizedFormats,26,392,        return sourceFormat;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,26,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,26,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,26,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,26,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,26,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,26,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,26,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,26,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,349,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,362,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,364,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,366,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,375,        return Math.sqrt(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,383,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,384,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,392,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,393,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,396,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,397,          return exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,400,      double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,401,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,402,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,404,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,409,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,410,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,411,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,414,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,415,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,416,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,417,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,422,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,425,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,426,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,427,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,428,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,429,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,430,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,432,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,433,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,434,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,442,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,443,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,444,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,452,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,453,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,456,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,457,          return -exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,460,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,461,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,464,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,465,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,466,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,471,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,472,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,473,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,478,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,479,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,480,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,483,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,484,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,485,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,486,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,491,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,493,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,494,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,497,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,498,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,499,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,500,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,501,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,502,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,504,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,505,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,506,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,508,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,509,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,515,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,516,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,518,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,519,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,520,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,521,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,523,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,524,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,525,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,530,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,534,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,535,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,536,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,537,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,538,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,539,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,541,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,542,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,545,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,546,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,549,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,557,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,559,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,560,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,569,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,570,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,573,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,574,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,577,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,578,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,581,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,582,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,583,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,587,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,588,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,596,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,597,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,598,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,599,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,600,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,603,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,604,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,605,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,606,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,607,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,609,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,610,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,611,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,614,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,615,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,616,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,617,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,623,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,625,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,627,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,628,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,630,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,632,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,638,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,639,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,642,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,643,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,644,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,645,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,646,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,648,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,649,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,650,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,653,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,654,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,655,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,656,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,662,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,664,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,666,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,669,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,670,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,673,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,689,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,690,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,691,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,692,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,696,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,699,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,700,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,702,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,704,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,711,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,719,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,720,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,721,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,722,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,726,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,729,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,730,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,732,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,734,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,741,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,783,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,807,"        return exp(x, 0.0, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,826,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,827,            intVal = (int) -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,829,            if (intVal > 746) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,830,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,831,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,832,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,834,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,837,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,840,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,844,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,847,            if (intVal == 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,850,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,854,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,857,            intVal++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,862,            intVal = -intVal;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,864,            intVal = (int) x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,866,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,867,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,869,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,871,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,899,        double z = 0.04168701738764507;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,900,        z = z * epsilon + 0.1666666505023083;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,901,        z = z * epsilon + 0.5000000000042687;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,902,        z = z * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,903,        z = z * epsilon + -3.940510424527919E-20;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,910,        double tempA = intPartA * fracPartA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,917,        final double tempC = tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,919,        if (extra != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,922,            result = tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,925,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,927,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,931,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,939,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,955,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,956,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,957,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,962,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,963,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,970,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,972,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,973,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,974,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,978,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,982,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,983,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,984,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,986,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,987,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,988,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,990,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,995,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,999,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1000,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1002,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1003,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1004,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1005,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1007,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1008,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1009,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1010,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1013,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1015,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1017,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1019,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1021,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1023,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1025,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1029,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1030,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1031,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1033,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1035,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1036,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1038,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1040,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1043,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1045,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1046,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1048,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1050,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1051,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1053,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1054,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1055,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1056,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1058,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1059,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1060,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1073,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1077,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1078,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1081,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1082,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1083,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1086,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1096,"        return log(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1106,        if (x==0) { // Handle special case of +0/-0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1107,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1109,        long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1113,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1114,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1115,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1118,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1123,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1124,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1128,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1132,        int exp = (int)(bits >> 52)-1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1136,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1146,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1148,                exp--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1149,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1154,        if (exp == -1 || exp == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1160,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1161,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1162,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1163,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1164,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1165,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1166,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1173,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1174,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1176,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1177,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1178,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1181,                    aa = ya + LN_QUICK_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1182,                    ab = yb + LN_QUICK_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1184,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1185,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1186,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1190,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1191,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1193,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1194,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1195,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1197,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1215,        double lnza = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1216,        double lnzb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1218,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1220,            double tmp = epsilon * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1221,            double aa = epsilon + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1222,            double ab = epsilon - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1223,            double xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1224,            double xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1227,            double numer = bits & 0x3ffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1229,            aa = numer - xa*denom - xb * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1230,            xb += aa / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1238,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1239,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1241,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1242,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1243,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1249,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1250,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1251,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1255,            aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1256,            ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1264,            lnza = aa + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1265,            lnzb = -(lnza - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1266,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1269,            lnza = -0.16624882440418567;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1270,            lnza = lnza * epsilon + 0.19999954120254515;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1272,            lnza = lnza * epsilon + 0.3333333333332802;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1273,            lnza = lnza * epsilon + -0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1274,            lnza = lnza * epsilon + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1275,            lnza = lnza * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1292,        double a = LN_2_A*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1293,        double b = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1294,        double c = a+lnm[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1295,        double d = -(c-a-lnm[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1296,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1297,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1299,        c = a + lnza;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1300,        d = -(c - a - lnza);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1301,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1302,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1304,        c = a + LN_2_B*exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1305,        d = -(c - a - LN_2_B*exp);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1306,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1307,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1309,        c = a + lnm[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1310,        d = -(c - a - lnm[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1311,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1312,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1314,        c = a + lnzb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1315,        d = -(c - a - lnzb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1316,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1317,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1319,        if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1320,            hiPrec[0] = a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1321,            hiPrec[1] = b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1324,        return a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1333,        if (x == -1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1334,            return x/0.0;   // -Infinity,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1338,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1341,        if (x>1e-6 || x<-1e-6) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1342,            double xpa = 1.0 + x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1343,            double xpb = -(xpa - 1.0 - x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1345,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1347,"            final double lores = log(xpa, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1349,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1354,            double fx1 = xpb/xpa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1356,            double epsilon = 0.5 * fx1 + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1357,            epsilon = epsilon * fx1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1359,            return epsilon + hiPrec[1] + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1363,        double y = x * F_1_3 - F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1364,        y = y * x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1365,        y = y * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1367,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1375,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1377,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1379,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1383,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1386,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1387,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1409,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1420,        final double lns[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1422,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1423,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1426,        if (x != x) { // X is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1427,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1431,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1432,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1433,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1435,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1438,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1442,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1446,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1447,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1449,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1450,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1453,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1456,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1457,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1458,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1460,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1461,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1463,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1467,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1468,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1469,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1472,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1473,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1475,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1479,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1480,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1481,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1484,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1485,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1486,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1487,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1490,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1493,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1494,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1495,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1496,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1499,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1503,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1505,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1506,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1509,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1510,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1512,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1517,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1520,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1523,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1527,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1534,        if (y < 8e298 && y > -8e298) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1535,            double tmp1 = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1536,            ya = y + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1537,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1538,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1542,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1546,"        final double lores = log(x, lns);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1548,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1551,        double lna = lns[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1552,        double lnb = lns[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1555,        double tmp1 = lna * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1556,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1557,        lnb += lna - tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1558,        lna = tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1561,        final double aa = lna * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1564,        lna = aa+ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1565,        lnb = -(lna - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1567,        double z = 1.0 / 120.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1568,        z = z * lnb + (1.0 / 24.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1569,        z = z * lnb + (1.0 / 6.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1570,        z = z * lnb + 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1571,        z = z * lnb + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1572,        z = z * lnb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1574,"        final double result = exp(lna, z, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1576,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1588,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1590,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1591,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1592,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1593,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1596,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1598,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1608,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1610,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1611,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1612,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1613,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1614,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1616,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1627,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1631,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1632,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1633,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1634,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1637,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1638,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1639,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1640,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1643,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1644,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1645,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1646,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1672,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1673,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1675,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1676,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1677,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1678,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1679,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1681,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1682,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1683,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1684,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1685,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1729,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1732,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1733,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1734,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1735,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1738,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1740,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1751,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1752,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1754,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1755,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1756,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1758,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1775,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1776,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1777,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1778,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1781,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1782,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1783,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1784,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1787,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1788,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1789,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1790,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1815,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1816,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1819,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1820,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1821,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1822,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1823,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1825,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1826,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1827,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1828,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1829,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1834,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1835,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1839,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1841,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1842,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1843,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1844,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1845,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1847,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1848,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1849,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1850,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1851,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1856,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1857,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1859,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1861,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1876,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1879,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1880,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1881,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1883,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1884,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1885,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1889,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1892,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1895,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1896,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1897,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1900,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1903,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1920,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1924,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1925,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1928,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1929,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1935,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1936,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1938,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1945,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1946,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1950,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1951,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1953,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1954,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1956,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1957,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1958,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1959,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1961,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1962,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1969,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1971,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1975,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1977,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1978,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1983,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1985,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1989,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1990,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1991,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1992,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1993,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1996,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2000,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2003,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2005,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2009,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2010,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2012,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2013,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2014,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2016,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2028,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2031,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2032,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2033,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2036,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2037,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2039,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2042,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2043,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2044,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2045,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2047,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2048,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2050,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2051,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2055,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2057,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2061,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2063,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2064,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2069,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2071,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2075,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2077,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2078,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2079,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2082,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2086,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2089,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2091,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2095,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2096,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2097,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2099,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2100,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2101,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2104,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2108,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2111,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2113,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2120,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2121,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2124,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2125,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2126,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2127,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2136,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2137,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2139,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2142,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2143,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2144,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2145,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2149,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2150,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2151,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2152,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2154,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2157,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2158,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2162,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2166,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2167,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2168,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2169,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2170,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2171,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2172,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2173,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2174,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2175,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2178,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2179,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2182,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2184,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2186,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2188,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2190,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2192,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2203,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2206,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2207,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2208,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2211,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2212,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2216,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2217,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2221,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2222,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2223,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2224,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2225,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2226,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2227,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2228,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2229,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2230,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2236,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2238,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2240,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2242,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2244,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2246,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2257,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2258,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2261,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2262,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2263,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2264,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2268,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2269,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2270,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2271,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2273,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2276,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2277,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2281,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2282,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2286,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2287,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2288,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2289,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2290,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2291,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2293,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2294,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2295,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2298,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2300,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2301,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2303,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2304,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2305,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2307,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2308,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2309,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2310,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2314,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2315,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2317,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2320,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2321,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2324,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2333,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2343,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2346,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2347,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2350,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2352,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2353,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2354,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2357,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2358,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2362,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2363,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2365,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2366,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2368,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2369,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2370,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2372,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2373,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2374,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2377,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2378,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2379,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2380,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2381,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2384,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2387,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2389,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2390,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2391,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2392,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2393,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2394,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2395,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2396,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2397,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2398,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2400,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2401,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2403,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2404,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2405,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2407,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2408,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2409,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2412,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2414,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2415,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2419,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2420,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2423,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2434,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2435,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2436,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2437,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2438,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2439,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2440,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2443,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2445,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2446,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2447,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2450,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2453,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2454,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2455,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2456,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2457,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2459,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2460,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2462,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2464,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2465,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2467,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2468,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2469,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2471,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2472,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2476,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2477,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2480,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2490,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2491,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2494,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2495,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2496,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2497,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2499,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2500,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2501,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2503,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2507,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2508,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2509,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2511,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2514,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2520,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2521,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2522,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2525,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2526,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2529,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2532,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2533,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2534,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2537,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2538,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2541,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2544,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2545,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2546,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2549,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2550,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2554,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2556,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2557,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2560,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2561,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2567,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2568,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2569,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2572,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2573,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2578,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2579,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2580,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2583,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2584,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2587,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2588,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2590,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2592,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2593,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2594,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2596,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2597,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2601,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2603,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2611,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2612,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2615,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2616,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2619,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2620,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2623,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2624,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2627,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2628,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2634,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2635,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2636,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2639,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2640,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2643,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2644,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2646,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2647,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2649,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2650,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2651,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2655,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2656,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2657,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2658,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2661,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2664,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2667,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2668,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2669,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2670,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2672,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2673,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2675,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2676,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2677,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2679,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2687,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2688,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2691,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2692,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2695,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2696,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2699,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2700,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2703,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2704,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2710,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2711,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2712,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2715,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2716,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2719,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2720,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2722,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2723,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2725,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2726,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2727,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2730,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2731,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2732,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2733,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2736,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2739,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2740,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2741,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2744,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2747,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2748,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2751,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2752,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2754,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2755,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2757,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2758,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2759,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2761,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2770,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2771,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2772,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2774,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2775,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2776,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2780,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2781,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2782,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2783,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2786,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2788,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2792,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2795,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2799,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2802,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2803,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2804,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2805,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2806,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2808,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2813,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2814,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2815,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2818,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2819,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2820,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2822,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2823,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2824,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2825,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2826,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2827,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2829,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2830,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2832,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2833,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2834,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2836,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2839,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2841,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2842,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2845,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2855,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2856,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2860,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2861,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2863,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2864,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2866,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2867,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2868,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2870,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2880,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2881,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2885,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2886,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2888,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2889,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2891,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2909,        return (x < 0l) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2918,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2936,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2937,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2939,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2948,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2949,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2951,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2963,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2964,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2968,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2969,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2971,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2972,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2974,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2975,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2979,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2980,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2981,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2982,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2985,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2987,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2989,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2991,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2992,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2996,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,2999,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3000,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3001,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3003,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3005,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3009,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3013,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3016,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3017,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3018,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3020,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3021,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3023,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3024,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3026,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3029,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3030,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3032,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3047,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3048,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3052,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3053,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3055,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3056,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3058,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3059,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3063,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3064,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3065,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3066,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3069,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3071,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3073,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3075,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3076,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3080,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3083,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3084,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3085,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3087,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3089,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3093,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3097,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3100,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3101,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3102,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3104,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3105,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3107,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3108,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3110,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3113,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3114,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3116,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3156,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3157,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3158,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3159,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3160,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3161,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3162,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3163,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3168,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3169,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3170,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3171,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3173,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3212,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3213,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3214,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3215,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3216,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3217,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3218,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3219,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3224,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3225,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3226,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3227,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3229,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3242,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3246,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3251,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3268,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3269,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3272,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3273,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3274,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3277,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3279,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3280,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3283,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3291,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3292,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3294,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3295,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3296,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3298,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3300,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3301,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3305,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3306,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3314,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3322,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3331,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3340,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3349,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3350,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3352,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3353,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3356,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3357,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3361,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3362,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3363,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3365,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3374,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3375,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3377,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3378,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3381,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3382,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3386,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3387,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3388,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3390,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3399,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3408,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3417,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3418,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3420,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3421,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3424,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3425,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3429,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3430,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3431,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3433,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3442,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3443,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3445,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3446,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3449,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3450,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3454,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3455,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3456,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3458,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3476,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3477,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3478,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3479,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3482,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3483,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3484,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3486,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3487,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3489,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3493,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3496,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3497,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3500,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3503,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3531,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3543,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3544,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3545,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3546,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3548,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3560,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3561,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3562,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3563,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3565,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3578,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3591,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3600,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3601,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3602,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3603,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3604,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3605,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3606,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3607,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3608,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3609,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3610,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3611,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3612,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3687,    private static class lnMant {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3701,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3703,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3615,    private static class ExpIntTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3647,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3648,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3650,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3654,    private static class ExpFracTable {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3680,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3681,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3683,        },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,46,        super();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,47,    },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,60,        long s = (long)x + (long)y;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,64,        return (int)s;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,108,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,109,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,110,            return 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,112,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,113,            return n;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,116,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,117,"            return binomialCoefficient(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,125,        long result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,126,        if (n <= 61) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,128,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,129,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,130,                result = result * i / j;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,131,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,133,        } else if (n <= 66) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,136,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,137,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,144,"                final long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,145,                result = (result / (j / d)) * (i / d);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,146,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,148,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,152,            int i = n - k + 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,153,            for (int j = 1; j <= k; j++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,154,"                final long d = gcd(i, j);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,155,"                result = mulAndCheck(result / (j / d), i / d);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,156,                i++;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,159,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,186,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,187,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,188,            return 1d;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,190,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,191,            return n;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,193,        if (k > n/2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,194,"            return binomialCoefficientDouble(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,196,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,197,"            return binomialCoefficient(n,k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,200,        double result = 1d;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,201,        for (int i = 1; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,202,             result *= (double)(n - k + i) / (double)i;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,205,        return FastMath.floor(result + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,228,"        ArithmeticUtils.checkBinomial(n, k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,229,        if ((n == k) || (k == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,230,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,232,        if ((k == 1) || (k == n - 1)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,233,            return FastMath.log(n);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,240,        if (n < 67) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,241,"            return FastMath.log(binomialCoefficient(n,k));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,248,        if (n < 1030) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,252,        if (k > n / 2) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,253,"            return binomialCoefficientLog(n, n - k);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,259,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,262,        for (int i = n - k + 1; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,263,            logSum += FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,267,        for (int i = 2; i <= k; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,268,            logSum -= FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,271,        return logSum;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,299,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,303,        if (n > 20) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,304,            throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,306,        return FACTORIALS[n];,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,323,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,327,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,328,            return factorial(n);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,341,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,345,        if (n < 21) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,346,            return FastMath.log(factorial(n));,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,348,        double logSum = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,349,        for (int i = 2; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,350,            logSum += FastMath.log(i);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,352,        return logSum;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,472,        long u = p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,473,        long v = q;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,474,        if ((u == 0) || (v == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,479,            return FastMath.abs(u) + FastMath.abs(v);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,486,        if (u > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,487,            u = -u;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,489,        if (v > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,490,            v = -v;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,493,        int k = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,496,            u /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,497,            v /= 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,498,            k++; // cast out twos.,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,500,        if (k == 63) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,512,            while ((t & 1) == 0) { // while t is even..,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,513,                t /= 2; // cast out twos,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,516,            if (t > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,517,                u = -t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,519,                v = t;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,522,            t = (v - u) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,525,        } while (t != 0);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,526,        return -u * (1L << k); // gcd is u*2^k,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,552,        if (a == 0 || b == 0){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,553,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,556,        if (lcm == Integer.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,560,        return lcm;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,586,        if (a == 0 || b == 0){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,587,            return 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,590,        if (lcm == Long.MIN_VALUE){,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,594,        return lcm;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,608,        long m = ((long)x) * ((long)y);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,610,            throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,612,        return (int)m;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,627,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,629,"            ret = mulAndCheck(b, a);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,631,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,632,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,634,                    if (a >= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,635,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,637,                        throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,639,                } else if (b > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,641,                    if (Long.MIN_VALUE / b <= a) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,642,                        ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,644,                        throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,649,                    ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,651,            } else if (a > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,656,                if (a <= Long.MAX_VALUE / b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,657,                    ret = a * b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,659,                    throw new MathArithmeticException();,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,663,                ret = 0;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,666,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,680,        long s = (long)x - (long)y;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,684,        return (int)s;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,699,        if (b == Long.MIN_VALUE) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,700,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,701,                ret = a - b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,709,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,721,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,725,        int result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,726,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,727,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,728,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,729,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,731,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,732,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,735,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,747,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,751,        int result = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,752,        int k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,753,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,754,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,755,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,757,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,758,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,761,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,773,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,777,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,778,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,779,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,780,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,781,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,783,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,784,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,787,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,799,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,803,        long result = 1l;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,804,        long k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,805,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,806,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,807,                result *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,809,            k2p *= k2p;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,810,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,813,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,825,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,829,        return k.pow(e);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,841,        if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,845,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,846,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,847,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,848,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,849,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,851,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,852,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,855,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,872,        BigInteger result = BigInteger.ONE;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,873,        BigInteger k2p    = k;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,874,        while (!BigInteger.ZERO.equals(e)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,875,            if (e.testBit(0)) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,876,                result = result.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,878,            k2p = k2p.multiply(k2p);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,879,            e = e.shiftRight(1);,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,882,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,898,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,900,"            ret = addAndCheck(b, a, pattern);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,904,            if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,905,                if (b < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,907,                    if (Long.MIN_VALUE - b <= a) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,908,                        ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,910,"                        throw new MathArithmeticException(pattern, a, b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,914,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,921,                if (a <= Long.MAX_VALUE - b) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,922,                    ret = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,924,"                    throw new MathArithmeticException(pattern, a, b);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,928,        return ret;,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,940,        if (n < k) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,944,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,947,    },0.0,0,-1,0
org/apache/commons/math3/util/ArithmeticUtils,26,956,        return (n > 0) && ((n & (n - 1)) == 0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3720,                  double xb) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3723,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3729,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3730,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3731,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3733,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3734,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3735,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3736,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3738,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3739,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3740,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3741,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3743,                if (remA > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3744,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3750,                --k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3751,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3753,            this.finalK = k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3754,            this.finalRemA = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3755,            this.finalRemB = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3756,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3762,            return finalK;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3768,            return finalRemA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,26,3774,            return finalRemB;,0.0,0,-1,0
