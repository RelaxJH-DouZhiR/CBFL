project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,1.0,1,0,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,1.0,1,0,0
org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,0.5,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,0.25,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,0.25,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,0.25,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,0.25,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,0.25,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,0.25,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,0.25,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,0.25,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,0.25,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,0.25,0,-1,0
org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.25,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,0.14286,0,-1,0
org/apache/commons/math3/util/FastMath,22,864,            intVal = (int) x;,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,22,866,            if (intVal > 709) {,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,22,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0.11111,0,-1,0
org/apache/commons/math3/util/FastMath,22,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0.11111,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,72,"        this(k, m1, m2, m3, null);",0.08696,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,73,    },0.08696,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.08696,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,156,            return;,0.08696,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0.08696,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,180,    },0.08696,0,-1,0
org/apache/commons/math3/random/Well19937c,22,57,"        super(K, M1, M2, M3);",0.08696,0,-1,0
org/apache/commons/math3/random/Well19937c,22,58,    },0.08696,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,99,        final int w = 32;,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,100,        final int r = (k + w - 1) / w;,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,101,        this.v      = new int[r];,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,102,        this.index  = 0;,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,106,        iRm1 = new int[r];,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,107,        iRm2 = new int[r];,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,108,        i1   = new int[r];,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,109,        i2   = new int[r];,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,110,        i3   = new int[r];,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,111,        for (int j = 0; j < r; ++j) {,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,112,            iRm1[j] = (j + r - 1) % r;,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,113,            iRm2[j] = (j + r - 2) % r;,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,114,            i1[j]   = (j + m1)    % r;,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,115,            i2[j]   = (j + m2)    % r;,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,116,            i3[j]   = (j + m3)    % r;,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,120,        setSeed(seed);,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,122,    },0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,154,        if (seed == null) {,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,161,        if (seed.length < v.length) {,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,162,            for (int i = seed.length; i < v.length; ++i) {,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,163,                final long l = v[i - seed.length];,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,168,        index = 0;,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,169,        clear();  // Clear normal deviate cache,0.08511,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,170,    },0.08511,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,35,    public BitsStreamGenerator() {,0.08511,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,36,        nextGaussian = Double.NaN;,0.08511,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,37,    },0.08511,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,165,        nextGaussian = Double.NaN;,0.08511,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,166,    },0.08511,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,128,    public RandomDataGenerator() {,0.08511,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,115,    private RandomGenerator rand = null;,0.08511,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,118,    private SecureRandom secRand = null;,0.08511,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,129,    },0.08511,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,108,    public RandomDataImpl() {,0.08511,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,109,        delegate = new RandomDataGenerator();,0.08511,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,110,    },0.08511,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,50,    @Deprecated,0.08511,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,55,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0.08511,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,70,    protected AbstractRealDistribution(RandomGenerator rng) {,0.08511,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,71,        random = rng;,0.08511,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,72,    },0.08511,0,-1,0
org/apache/commons/math3/special/Gamma,22,253,            final int n = (int) FastMath.floor(x - 1.5);,0.06667,0,-1,0
org/apache/commons/math3/special/Gamma,22,254,            double prod = 1.0;,0.06667,0,-1,0
org/apache/commons/math3/special/Gamma,22,255,            for (int i = 1; i <= n; i++) {,0.06667,0,-1,0
org/apache/commons/math3/special/Gamma,22,256,                prod *= x - i;,0.06667,0,-1,0
org/apache/commons/math3/special/Gamma,22,258,            return logGamma1p(x - (n + 1)) + FastMath.log(prod);,0.06667,0,-1,0
org/apache/commons/math3/special/Gamma,22,602,                ret = (t / x) * ((c - 0.5) - 0.5);,0.0625,0,-1,0
org/apache/commons/math3/util/FastMath,22,1364,            final double y = (x * F_1_3 - F_1_2) * x + 1;,0.05556,0,-1,0
org/apache/commons/math3/util/FastMath,22,1365,            return y * x;,0.05556,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,64,"        this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0.05556,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,65,    },0.05556,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,77,"        this(new  Well19937c(), lower, upper, inverseCumAccuracy);",0.05556,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,78,    },0.05556,0,-1,0
org/apache/commons/math3/special/Gamma,22,252,        } else if (x <= 8.0) {,0.05556,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,95,        super(rng);,0.05263,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,96,        if (lower >= upper) {,0.05263,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,102,        this.lower = lower;,0.05263,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,103,        this.upper = upper;,0.05263,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,104,        solverAbsoluteAccuracy = inverseCumAccuracy;,0.05263,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,105,    },0.05263,0,-1,0
org/apache/commons/math3/util/FastMath,22,1348,            final double xpa = 1 + x;,0.05,0,-1,0
org/apache/commons/math3/util/FastMath,22,1349,            final double xpb = -(xpa - 1 - x);,0.05,0,-1,0
org/apache/commons/math3/util/FastMath,22,1351,            final double[] hiPrec = new double[2];,0.05,0,-1,0
org/apache/commons/math3/util/FastMath,22,1352,"            final double lores = log(xpa, hiPrec);",0.05,0,-1,0
org/apache/commons/math3/util/FastMath,22,1353,            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN,0.05,0,-1,0
org/apache/commons/math3/util/FastMath,22,1359,            final double fx1 = xpb / xpa;,0.05,0,-1,0
org/apache/commons/math3/util/FastMath,22,1360,            final double epsilon = 0.5 * fx1 + 1;,0.05,0,-1,0
org/apache/commons/math3/util/FastMath,22,1361,            return epsilon * fx1 + hiPrec[1] + hiPrec[0];,0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,65,"        this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,",0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,67,    },0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,86,"        this(new Well19937c(), numeratorDegreesOfFreedom,",0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,88,    },0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,108,        super(rng);,0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,49,    private double numericalVariance = Double.NaN;,0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,51,    private boolean numericalVarianceIsCalculated = false;,0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,110,        if (numeratorDegreesOfFreedom <= 0) {,0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,114,        if (denominatorDegreesOfFreedom <= 0) {,0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,118,        this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;,0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,119,        this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;,0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,120,        solverAbsoluteAccuracy = inverseCumAccuracy;,0.05,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,121,    },0.05,0,-1,0
org/apache/commons/math3/special/Beta,22,195,        if (Double.isNaN(a) ||,0.05,0,-1,0
org/apache/commons/math3/special/Beta,22,201,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,0.05,0,-1,0
org/apache/commons/math3/special/Beta,22,205,        return ret;,0.05,0,-1,0
org/apache/commons/math3/special/Gamma,22,604,                ret = x * c;,0.05,0,-1,0
org/apache/commons/math3/util/FastMath,22,3306,        if (x != x) { // NaN,0.04762,0,-1,0
org/apache/commons/math3/util/FastMath,22,3310,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,0.04762,0,-1,0
org/apache/commons/math3/util/FastMath,22,3314,        y = (long) x;,0.04762,0,-1,0
org/apache/commons/math3/util/FastMath,22,3315,        if (x < 0 && y != x) {,0.04762,0,-1,0
org/apache/commons/math3/util/FastMath,22,3319,        if (y == 0) {,0.04762,0,-1,0
org/apache/commons/math3/util/FastMath,22,3323,        return y;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,572,            double p = INV_GAMMA1P_M1_P6;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,573,            p = INV_GAMMA1P_M1_P5 + t * p;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,574,            p = INV_GAMMA1P_M1_P4 + t * p;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,575,            p = INV_GAMMA1P_M1_P3 + t * p;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,576,            p = INV_GAMMA1P_M1_P2 + t * p;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,577,            p = INV_GAMMA1P_M1_P1 + t * p;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,578,            p = INV_GAMMA1P_M1_P0 + t * p;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,580,            double q = INV_GAMMA1P_M1_Q4;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,581,            q = INV_GAMMA1P_M1_Q3 + t * q;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,582,            q = INV_GAMMA1P_M1_Q2 + t * q;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,583,            q = INV_GAMMA1P_M1_Q1 + t * q;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,584,            q = 1.0 + t * q;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,586,            double c = INV_GAMMA1P_M1_C13 + (p / q) * t;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,587,            c = INV_GAMMA1P_M1_C12 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,588,            c = INV_GAMMA1P_M1_C11 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,589,            c = INV_GAMMA1P_M1_C10 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,590,            c = INV_GAMMA1P_M1_C9 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,591,            c = INV_GAMMA1P_M1_C8 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,592,            c = INV_GAMMA1P_M1_C7 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,593,            c = INV_GAMMA1P_M1_C6 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,594,            c = INV_GAMMA1P_M1_C5 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,595,            c = INV_GAMMA1P_M1_C4 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,596,            c = INV_GAMMA1P_M1_C3 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,597,            c = INV_GAMMA1P_M1_C2 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,598,            c = INV_GAMMA1P_M1_C1 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,599,            c = INV_GAMMA1P_M1_C0 + t * c;,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,601,            if (x > 0.5) {,0.04762,0,-1,0
org/apache/commons/math3/special/Gamma,22,251,            return logGamma1p((x - 0.5) - 0.5);,0.04545,0,-1,0
org/apache/commons/math3/util/FastMath,22,1338,        if (x == -1) {,0.04348,0,-1,0
org/apache/commons/math3/util/FastMath,22,1342,        if (x == Double.POSITIVE_INFINITY) {,0.04348,0,-1,0
org/apache/commons/math3/util/FastMath,22,1346,        if (x > 1e-6 ||,0.04348,0,-1,0
org/apache/commons/math3/special/Gamma,22,531,        if (x < -0.5) {,0.04348,0,-1,0
org/apache/commons/math3/special/Gamma,22,534,        if (x > 1.5) {,0.04348,0,-1,0
org/apache/commons/math3/special/Gamma,22,539,        final double t = x <= 0.5 ? x : (x - 0.5) - 0.5;,0.04348,0,-1,0
org/apache/commons/math3/special/Gamma,22,540,        if (t < 0.0) {,0.04348,0,-1,0
org/apache/commons/math3/special/Gamma,22,608,        return ret;,0.04348,0,-1,0
org/apache/commons/math3/special/Gamma,22,624,        if (x < -0.5) {,0.04348,0,-1,0
org/apache/commons/math3/special/Gamma,22,627,        if (x > 1.5) {,0.04348,0,-1,0
org/apache/commons/math3/special/Gamma,22,631,        return -FastMath.log1p(invGamma1pm1(x));,0.04348,0,-1,0
org/apache/commons/math3/util/FastMath,22,1222,            double tmp = epsilon * HEX_40000000;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1223,            double aa = epsilon + tmp - tmp;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1224,            double ab = epsilon - aa;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1225,            double xa = aa;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1226,            double xb = ab;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1229,            final double numer = bits & 0x3ffffffffffL;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1230,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1231,            aa = numer - xa*denom - xb * denom;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1232,            xb += aa / denom;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1235,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1236,            double ya = lnCoef_last[0];,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1237,            double yb = lnCoef_last[1];,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1239,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1241,                aa = ya * xa;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1242,                ab = ya * xb + yb * xa + yb * xb;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1244,                tmp = aa * HEX_40000000;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1245,                ya = aa + tmp - tmp;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1246,                yb = aa - ya + ab;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1249,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1250,                aa = ya + lnCoef_i[0];,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1251,                ab = yb + lnCoef_i[1];,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1253,                tmp = aa * HEX_40000000;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1254,                ya = aa + tmp - tmp;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1255,                yb = aa - ya + ab;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1259,            aa = ya * xa;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1260,            ab = ya * xb + yb * xa + yb * xb;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1268,            lnza = aa + ab;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1269,            lnzb = -(lnza - aa - ab);,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1270,        } else {,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1324,            hiPrec[0] = a;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,1325,            hiPrec[1] = b;,0.04167,0,-1,0
org/apache/commons/math3/util/FastMath,22,807,"        return exp(x, 0.0, null);",0.04,0,-1,0
org/apache/commons/math3/util/FastMath,22,922,            result = tempC*z + tempB + tempA;,0.04,0,-1,0
org/apache/commons/math3/special/Gamma,22,71,    private static final double[] LANCZOS = {,0.04,0,-1,0
org/apache/commons/math3/special/Gamma,22,90,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,0.04,0,-1,0
org/apache/commons/math3/special/Gamma,22,246,        if (Double.isNaN(x) || (x <= 0.0)) {,0.04,0,-1,0
org/apache/commons/math3/special/Gamma,22,248,        } else if (x < 0.5) {,0.04,0,-1,0
org/apache/commons/math3/special/Gamma,22,250,        } else if (x <= 2.5) {,0.04,0,-1,0
org/apache/commons/math3/util/FastMath,22,3719,    private static class ExpFracTable {,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,3745,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,3746,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,3748,        },0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,3680,    private static class ExpIntTable {,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,3712,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,3713,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,3715,        },0.03846,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,6142,        return EXP_INT_A.clone();,0.03846,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,6150,        return EXP_INT_B.clone();,0.03846,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,6158,        return EXP_FRAC_A.clone();,0.03846,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,6166,        return EXP_FRAC_B.clone();,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,826,        if (x < 0.0) {,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,899,        double z = 0.04168701738764507;,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,900,        z = z * epsilon + 0.1666666505023083;,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,901,        z = z * epsilon + 0.5000000000042687;,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,902,        z = z * epsilon + 1.0;,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,903,        z = z * epsilon + -3.940510424527919E-20;,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,910,        double tempA = intPartA * fracPartA;,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,917,        final double tempC = tempB + tempA;,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,919,        if (extra != 0.0) {,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,925,        if (hiPrec != null) {,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,931,        return result;,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0.03846,0,-1,0
org/apache/commons/math3/util/FastMath,22,1096,"        return log(x, null);",0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,22,1273,            lnza = -0.16624882440418567;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,22,1274,            lnza = lnza * epsilon + 0.19999954120254515;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,22,1275,            lnza = lnza * epsilon + -0.2499999997677497;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,22,1276,            lnza = lnza * epsilon + 0.3333333333332802;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,22,1277,            lnza = lnza * epsilon + -0.5;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,22,1278,            lnza = lnza * epsilon + 1.0;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMath,22,1279,            lnza = lnza * epsilon;,0.03226,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,29,    private static final double[] EXP_INT_A = new double[] {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,1535,    private static final double[] EXP_INT_B = new double[] {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,3043,    private static final double[] EXP_FRAC_A = new double[] {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,4074,    private static final double[] EXP_FRAC_B = new double[] {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,5103,    private static final double[][] LN_MANT = new double[][] {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,6174,        return LN_MANT.clone();,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1106,        if (x==0) { // Handle special case of +0/-0,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1109,        long bits = Double.doubleToLongBits(x);,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1123,        if (x == Double.POSITIVE_INFINITY) {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1132,        int exp = (int)(bits >> 52)-1023;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1154,        if (exp == -1 || exp == 0) {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1204,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1215,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1217,        double lnza = 0.0;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1218,        double lnzb = 0.0;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1220,        if (hiPrec != null) {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1296,        double a = LN_2_A*exp;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1297,        double b = 0.0;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1298,        double c = a+lnm[0];,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1299,        double d = -(c-a-lnm[0]);,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1300,        a = c;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1301,        b = b + d;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1303,        c = a + lnza;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1304,        d = -(c - a - lnza);,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1305,        a = c;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1306,        b = b + d;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1308,        c = a + LN_2_B*exp;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1309,        d = -(c - a - LN_2_B*exp);,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1310,        a = c;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1311,        b = b + d;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1313,        c = a + lnm[1];,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1314,        d = -(c - a - lnm[1]);,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1315,        a = c;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1316,        b = b + d;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1318,        c = a + lnzb;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1319,        d = -(c - a - lnzb);,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1320,        a = c;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1321,        b = b + d;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1323,        if (hiPrec != null) {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,1328,        return a + b;,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,3752,    private static class lnMant {,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,3766,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,3768,        },0.03125,0,-1,0
org/apache/commons/math3/util/FastMath,22,113,    private static final double LN_QUICK_COEF[][] = {,0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,126,    private static final double LN_HI_PREC_COEF[][] = {,0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,139,    private static final double SINE_TABLE_A[] =,0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,158,    private static final double SINE_TABLE_B[] =,0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,177,    private static final double COSINE_TABLE_A[] =,0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,196,    private static final double COSINE_TABLE_B[] =,0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,216,    private static final double TANGENT_TABLE_A[] =,0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,235,    private static final double TANGENT_TABLE_B[] =,0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,254,    private static final long RECIP_2PI[] = new long[] {,0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,275,    private static final long PI_O_4_BITS[] = new long[] {,0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0.01493,0,-1,0
org/apache/commons/math3/util/FastMath,22,3785,                  double xb) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3788,            int k = (int)(xa * 0.6366197723675814);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3794,                double a = -k * 1.570796251296997;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3795,                remA = xa + a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3796,                remB = -(remA - xa - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3798,                a = -k * 7.549789948768648E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3799,                double b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3800,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3801,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3803,                a = -k * 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3804,                b = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3805,                remA = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3806,                remB += -(remA - b - a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3808,                if (remA > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3809,                    break;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3815,                --k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3816,            },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3818,            this.finalK = k;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3819,            this.finalRemA = remA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3820,            this.finalRemB = remB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3821,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3827,            return finalK;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3833,            return finalRemA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3839,            return finalRemB;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,46,        super();,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,47,    },0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,75,"            return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,76,        } catch (MaxCountExceededException e) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,78,            throw new MathInternalError(e);,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,91,"            return evaluate(x, epsilon, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,92,        } catch (MaxCountExceededException e) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,94,            throw new MathInternalError(e);,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,108,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,139,        final double small = 1e-50;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,140,"        double hPrev = getA(0, x);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,143,"        if (Precision.equals(hPrev, 0.0, small)) {",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,144,            hPrev = small;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,147,        int n = 1;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,148,        double dPrev = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,149,        double cPrev = hPrev;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,150,        double hN = hPrev;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,152,        while (n < maxIterations) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,153,"            final double a = getA(n, x);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,154,"            final double b = getB(n, x);",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,156,            double dN = a + b * dPrev;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,157,"            if (Precision.equals(dN, 0.0, small)) {",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,158,                dN = small;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,160,            double cN = a + b / cPrev;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,161,"            if (Precision.equals(cN, 0.0, small)) {",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,162,                cN = small;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,165,            dN = 1 / dN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,166,            final double deltaN = cN * dN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,167,            hN = hPrev * deltaN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,169,            if (Double.isInfinite(hN)) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,170,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,173,            if (Double.isNaN(hN)) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,174,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,178,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,179,                break;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,182,            dPrev = dN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,183,            cPrev = cN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,184,            hPrev = hN;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,185,            n++;,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,186,        },0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,188,        if (n >= maxIterations) {,0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,189,"            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,",0.0,0,-1,0
org/apache/commons/math3/util/ContinuedFraction,22,193,        return hN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMathLiteralArrays,22,6134,    private FastMathLiteralArrays() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,349,    private FastMath() {},0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,362,            return d; // These are un-normalised - don't try to convert,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,364,        long xl = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,365,        xl = xl & MASK_30BITS; // Drop low order bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,366,        return Double.longBitsToDouble(xl);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,375,        return Math.sqrt(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,383,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,384,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,392,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,393,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,396,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,397,          return exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,400,      double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,401,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,402,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,404,"      exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,406,      double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,409,      double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,410,      double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,411,      double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,414,      double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,415,      temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,416,      double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,417,      double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,422,      recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,425,      temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,426,      yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,427,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,428,      temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,429,      yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,430,      ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,432,      double result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,433,      result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,434,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,442,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,443,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,444,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,452,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,453,          return exp(x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,456,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,457,          return -exp(-x)/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,460,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,461,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,464,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,465,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,466,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,471,      if (x > 0.25) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,472,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,473,"          exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,475,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,478,          double temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,479,          double yaa = ya + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,480,          double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,483,          double recip = 1.0/ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,484,          temp = recip * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,485,          double recipa = recip + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,486,          double recipb = recip - recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,491,          recipb += -yb * recip * recip;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,493,          recipa = -recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,494,          recipb = -recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,497,          temp = ya + recipa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,498,          yb += -(temp - ya - recipa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,499,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,500,          temp = ya + recipb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,501,          yb += -(temp - ya - recipb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,502,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,504,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,505,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,506,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,508,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,509,"          expm1(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,511,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,515,          double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,516,          double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,517,          double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,518,          double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,519,          double temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,520,          double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,521,          double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,523,          temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,524,          double za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,525,          double zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,530,          rb += yb*denomr;                        // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,534,          temp = ya + ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,535,          yb += -(temp - ya - ra);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,536,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,537,          temp = ya + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,538,          yb += -(temp - ya - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,539,          ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,541,          result = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,542,          result *= 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,545,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,546,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,549,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,557,      boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,559,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,560,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,569,      if (x > 20.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,570,          return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,573,      if (x < -20) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,574,          return -1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,577,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,578,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,581,      if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,582,          x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,583,          negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,587,      if (x >= 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,588,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,590,"          exp(x*2.0, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,592,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,596,          double na = -1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,597,          double nb = -(na + 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,598,          double temp = na + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,599,          nb += -(temp - na - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,600,          na = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,603,          double da = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,604,          double db = -(da - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,605,          temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,606,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,607,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,609,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,610,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,611,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,614,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,615,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,616,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,617,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,623,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,625,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,627,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,628,      },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,630,          double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,632,"          expm1(x*2.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,634,          double ya = hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,638,          double na = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,639,          double nb = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,642,          double da = 2.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,643,          double db = -(da - 2.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,644,          double temp = da + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,645,          db += -(temp - da - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,646,          da = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,648,          temp = da * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,649,          double daa = da + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,650,          double dab = da - daa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,653,          double ratio = na/da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,654,          temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,655,          double ratioa = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,656,          double ratiob = ratio - ratioa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,662,          ratiob += nb / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,664,          ratiob += -db * na / da / da;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,666,          result = ratioa + ratiob;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,669,      if (negate) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,670,          result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,673,      return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,689,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,690,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,691,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,692,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,696,        if (a > 0.167) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,699,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,700,            if (a > 0.097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,702,            } else if (a > 0.036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,704,            } else if (a > 0.0036) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,711,        return negative ? -absAsinh : absAsinh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,719,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,720,        if (a < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,721,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,722,            a = -a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,726,        if (a > 0.15) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,729,            final double a2 = a * a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,730,            if (a > 0.087) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,732,            } else if (a > 0.031) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,734,            } else if (a > 0.003) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,741,        return negative ? -absAtanh : absAtanh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,783,        return Math.random();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,827,            intVal = (int) -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,829,            if (intVal > 746) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,830,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,831,                    hiPrec[0] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,832,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,834,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,837,            if (intVal > 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,840,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,841,                    hiPrec[0] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,842,                    hiPrec[1] /= 285040095144011776.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,844,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,847,            if (intVal == 709) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,850,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,851,                    hiPrec[0] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,852,                    hiPrec[1] /= 4.455505956692756620;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,854,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,857,            intVal++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,862,            intVal = -intVal;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,867,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,869,                    hiPrec[1] = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,871,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,927,            hiPrec[0] = tempA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,939,"      return expm1(x, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,948,        if (x != x || x == 0.0) { // NaN or zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,949,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,952,        if (x <= -1.0 || x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,955,            double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,956,"            exp(x, 0.0, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,957,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,960,                final double ra = -1.0 + hiPrec[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,961,                double rb = -(ra + 1.0 - hiPrec[0]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,962,                rb += hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,963,                return ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,970,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,972,        if (x < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,973,            x = -x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,974,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,978,            int intFrac = (int) (x * 1024.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,982,            double temp = tempA + tempB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,983,            tempB = -(temp - tempA - tempB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,984,            tempA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,986,            temp = tempA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,987,            baseA = tempA + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,988,            baseB = tempB + (tempA - baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,990,            epsilon = x - intFrac/1024.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,995,        double zb = 0.008336750013465571;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,996,        zb = zb * epsilon + 0.041666663879186654;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,997,        zb = zb * epsilon + 0.16666666666745392;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,998,        zb = zb * epsilon + 0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,999,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1000,        zb = zb * epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1002,        double za = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1003,        double temp = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1004,        zb = -(temp - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1005,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1007,        temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1008,        temp = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1009,        zb += za - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1010,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1013,        double ya = za * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1015,        temp = ya + za * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1016,        double yb = -(temp - ya - za * baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1017,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1019,        temp = ya + zb * baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1020,        yb += -(temp - ya - zb * baseA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1021,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1023,        temp = ya + zb * baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1024,        yb += -(temp - ya - zb*baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1025,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1029,        temp = ya + baseA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1030,        yb += -(temp - baseA - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1031,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1033,        temp = ya + za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1035,        yb += -(temp - ya - za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1036,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1038,        temp = ya + baseB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1040,        yb += -(temp - ya - baseB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1041,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1043,        temp = ya + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1045,        yb += -(temp - ya - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1046,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1048,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1050,            double denom = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1051,            double denomr = 1.0 / denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1053,            double ratio = ya * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1054,            temp = ratio * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1055,            final double ra = ratio + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1056,            double rb = ratio - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1058,            temp = denom * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1059,            za = denom + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1060,            zb = denom - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1073,            rb += yb * denomr;                      // numerator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1077,            ya = -ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1078,            yb = -rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1081,        if (hiPrecOut != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1082,            hiPrecOut[0] = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1083,            hiPrecOut[1] = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1086,        return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1113,            if (x != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1114,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1115,                    hiPrec[0] = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1118,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1124,            if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1128,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1136,            if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1138,                if (hiPrec != null) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1142,                return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1146,            bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1148,                --exp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1149,                bits <<= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1160,                double xa = x - 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1161,                double xb = xa - x + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1162,                double tmp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1163,                double aa = xa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1164,                double ab = xa - aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1165,                xa = aa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1166,                xb = ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1168,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1169,                double ya = lnCoef_last[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1170,                double yb = lnCoef_last[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1172,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1174,                    aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1175,                    ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1177,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1178,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1179,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1182,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1183,                    aa = ya + lnCoef_i[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1184,                    ab = yb + lnCoef_i[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1186,                    tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1187,                    ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1188,                    yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1192,                aa = ya * xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1193,                ab = ya * xb + yb * xa + yb * xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1195,                tmp = aa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1196,                ya = aa + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1197,                yb = aa - ya + ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1199,                return ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1339,            return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1343,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1354,                return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1374,        final double hiPrec[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1376,"        final double lores = log(x, hiPrec);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1377,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1378,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1381,        final double tmp = hiPrec[0] * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1382,        final double lna = hiPrec[0] + tmp - tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1383,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1385,        final double rln10a = 0.4342944622039795;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1386,        final double rln10b = 1.9699272335463627E-8;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1388,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1408,        return log(x) / log(base);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1419,        final double lns[] = new double[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1421,        if (y == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1422,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1425,        if (x != x) { // X is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1426,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1430,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1431,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1432,            if ((bits & 0x8000000000000000L) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1434,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1436,                if (y < 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1437,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1440,                if (y > 0 && y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1441,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1445,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1446,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1448,            if (y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1449,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1452,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1455,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1456,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1457,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1459,            if (y < 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1460,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1462,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1466,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1467,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1468,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1471,            if (x * x > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1472,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1474,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1478,        if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1479,            if (y != y) { // y is NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1480,                return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1483,            if (y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1484,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1485,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1486,                    return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1489,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1492,            if (y > 0)  {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1493,                long yi = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1494,                if (y == yi && (yi & 1) == 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1495,                    return Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1498,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1502,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1504,            if (x * x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1505,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1508,            if (x * x < 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1509,                return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1511,                return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1516,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1518,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1519,"                return pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1522,            if (y == (long) y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1524,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1526,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1533,        if (y < 8e298 && y > -8e298) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1534,            double tmp1 = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1535,            ya = y + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1536,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1537,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1538,            double tmp1 = y * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1539,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1540,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1541,            yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1545,"        final double lores = log(x, lns);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1546,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1547,            return lores;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1550,        double lna = lns[0];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1551,        double lnb = lns[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1554,        double tmp1 = lna * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1555,        double tmp2 = lna + tmp1 - tmp1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1556,        lnb += lna - tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1557,        lna = tmp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1560,        final double aa = lna * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1561,        final double ab = lna * yb + lnb * ya + lnb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1563,        lna = aa+ab;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1564,        lnb = -(lna - aa - ab);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1566,        double z = 1.0 / 120.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1567,        z = z * lnb + (1.0 / 24.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1568,        z = z * lnb + (1.0 / 6.0);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1569,        z = z * lnb + 0.5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1570,        z = z * lnb + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1571,        z = z * lnb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1573,"        final double result = exp(lna, z, null);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1575,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1588,        if (e == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1589,            return 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1590,        } else if (e < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1591,            e = -e;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1592,            d = 1.0 / d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1597,        final int splitFactor = 0x8000001;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1598,        final double cd       = splitFactor * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1599,        final double d1High   = cd - (cd - d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1600,        final double d1Low    = d - d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1603,        double resultHigh = 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1604,        double resultLow  = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1607,        double d2p     = d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1608,        double d2pHigh = d1High;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1609,        double d2pLow  = d1Low;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1611,        while (e != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1613,            if ((e & 0x1) != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1616,                final double tmpHigh = resultHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1617,                final double cRH     = splitFactor * resultHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1618,                final double rHH     = cRH - (cRH - resultHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1619,                final double rHL     = resultHigh - rHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1620,                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1621,                resultHigh = tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1622,                resultLow  = resultLow * d2p + tmpLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1627,            final double tmpHigh = d2pHigh * d2p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1628,            final double cD2pH   = splitFactor * d2pHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1629,            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1630,            final double d2pHL   = d2pHigh - d2pHH;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1631,            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1632,            final double cTmpH   = splitFactor * tmpHigh;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1633,            d2pHigh = cTmpH - (cTmpH - tmpHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1634,            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1635,            d2p     = d2pHigh + d2pLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1637,            e = e >> 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1639,        },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1641,        return resultHigh + resultLow;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1653,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1655,        double p = 2.7553817452272217E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1656,        p = p * x2 + -1.9841269659586505E-4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1657,        p = p * x2 + 0.008333333333329196;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1658,        p = p * x2 + -0.16666666666666666;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1661,        p = p * x2 * x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1663,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1673,        double x2 = x*x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1675,        double p = 2.479773539153719E-5;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1676,        p = p * x2 + -0.0013888888689039883;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1677,        p = p * x2 + 0.041666666666621166;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1678,        p = p * x2 + -0.49999999999999994;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1679,        p *= x2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1681,        return p;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1696,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1697,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1698,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1699,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1702,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1703,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1704,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1705,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1708,        final double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1709,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1710,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1711,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1737,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1738,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1740,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1741,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1742,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1743,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1744,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1746,        t = costA * sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1747,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1748,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1749,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1750,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1794,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1797,            c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1798,            d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1799,            a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1800,            b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1803,        result = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1805,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1816,        final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1817,        final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1819,        final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1820,        double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1821,        b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1823,"        return sinQ(a, b);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1836,        int idx = (int) ((xa * 8.0) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1837,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1840,        final double sintA = SINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1841,        final double sintB = SINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1842,        final double costA = COSINE_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1843,        final double costB = COSINE_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1846,        double sinEpsA = epsilon;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1847,        double sinEpsB = polySine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1848,        final double cosEpsA = 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1849,        final double cosEpsB = polyCosine(epsilon);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1852,        double temp = sinEpsA * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1853,        double temp2 = (sinEpsA + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1854,        sinEpsB +=  sinEpsA - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1855,        sinEpsA = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1880,        double a = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1881,        double b = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1884,        double t = sintA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1885,        double c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1886,        double d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1887,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1888,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1890,        t = costA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1891,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1892,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1893,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1894,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1896,        b = b + sintA*cosEpsB + costA*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1897,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1899,        double sina = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1900,        double sinb = -(sina - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1904,        a = b = c = d = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1906,        t = costA*cosEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1907,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1908,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1909,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1910,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1912,        t = -sintA*sinEpsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1913,        c = a + t;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1914,        d = -(c - a - t);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1915,        a = c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1916,        b = b + d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1918,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1919,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1921,        double cosa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1922,        double cosb = -(cosa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1924,        if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1926,            tmp = cosa; cosa = sina; sina = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1927,            tmp = cosb; cosb = sinb; sinb = tmp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1941,        double est = sina/cosa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1944,        temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1945,        double esta = (est + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1946,        double estb =  est - esta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1948,        temp = cosa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1949,        double cosaa = (cosa + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1950,        double cosab =  cosa - cosaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1953,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1954,        err += sinb/cosa;                     // Change in est due to sinb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1955,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1957,        if (xb != 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1960,            double xbadj = xb + est*est*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1961,            if (cotanFlag) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1962,                xbadj = -xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1965,            err += xbadj;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1968,        return est+err;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1985,        long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1986,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1989,        inbits &= 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1990,        inbits |= 0x0010000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1993,        exponent++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,1994,        inbits <<= 11;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2000,        int idx = exponent >> 6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2001,        int shift = exponent - (idx << 6);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2003,        if (shift != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2004,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2005,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2006,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2007,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2009,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2010,            shpiA = RECIP_2PI[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2011,            shpiB = RECIP_2PI[idx+1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2015,        long a = inbits >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2016,        long b = inbits & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2018,        long c = shpiA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2019,        long d = shpiA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2021,        long ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2022,        long bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2023,        long bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2024,        long ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2026,        long prodB = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2027,        long prodA = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2029,        boolean bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2030,        boolean bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2031,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2034,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2036,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2039,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2040,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2042,        prodB = prodB + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2043,        prodA = prodA + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2045,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2048,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2050,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2054,        c = shpiB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2055,        d = shpiB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2056,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2057,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2058,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2061,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2063,        bita = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2064,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2065,        prodB += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2066,        bitsum = (prodB & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2068,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2070,            prodA++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2074,        c = shpi0 >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2075,        d = shpi0 & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2077,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2078,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2079,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2081,        prodA += bd + ((bc + ad) << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2093,        int intPart = (int)(prodA >>> 62);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2096,        prodA <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2097,        prodA |= prodB >>> 62;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2098,        prodB <<= 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2101,        a = prodA >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2102,        b = prodA & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2104,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2105,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2107,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2108,        bd = b * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2109,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2110,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2112,        long prod2B = bd + (ad << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2113,        long prod2A = ac + (ad >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2115,        bita = (bd & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2116,        bitb = (ad & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2117,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2120,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2122,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2125,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2126,        bitb = (bc & 0x80000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2128,        prod2B = prod2B + (bc << 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2129,        prod2A = prod2A + (bc >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2131,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2134,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2136,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2140,        c = PI_O_4_BITS[1] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2141,        d = PI_O_4_BITS[1] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2142,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2143,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2144,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2147,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2149,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2150,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2151,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2152,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2154,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2156,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2160,        a = prodB >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2161,        b = prodB & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2162,        c = PI_O_4_BITS[0] >>> 32;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2163,        d = PI_O_4_BITS[0] & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2164,        ac = a * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2165,        bc = b * c;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2166,        ad = a * d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2169,        ac = ac + ((bc + ad) >>> 32);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2171,        bita = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2172,        bitb = (ac & 0x8000000000000000L ) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2173,        prod2B += ac;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2174,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2176,        if ( (bita && bitb) ||,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2178,            prod2A++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2182,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2183,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2185,        double sumA = tmpA + tmpB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2186,        double sumB = -(sumA - tmpA - tmpB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2189,        result[0] = intPart;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2190,        result[1] = sumA * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2191,        result[2] = sumB * 2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2192,    },0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2201,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2202,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2204,        double xb = 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2207,        xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2208,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2209,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2210,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2214,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2215,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2216,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2217,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2219,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2223,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2227,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2231,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2232,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2233,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2234,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2235,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2236,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2238,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2239,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2240,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2243,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2244,            quadrant ^= 2;  // Flip bit 1,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2247,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2249,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2251,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2253,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2255,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2257,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2268,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2271,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2272,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2273,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2276,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2277,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2281,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2282,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2286,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2287,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2288,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2289,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2290,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2291,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2293,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2294,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2295,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2301,        switch (quadrant) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2303,"                return cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2305,"                return -sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2307,"                return -cosQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2309,"                return sinQ(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2311,                return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2322,        boolean negative = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2323,        int quadrant = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2326,        double xa = x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2327,        if (x < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2328,            negative = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2329,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2333,        if (xa == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2334,            long bits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2335,            if (bits < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2336,                return -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2338,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2341,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2342,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2346,        double xb = 0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2347,        if (xa > 3294198.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2351,            double reduceResults[] = new double[3];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2352,"            reducePayneHanek(xa, reduceResults);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2353,            quadrant = ((int) reduceResults[0]) & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2354,            xa = reduceResults[1];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2355,            xb = reduceResults[2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2356,        } else if (xa > 1.5707963267948966) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2357,"            final CodyWaite cw = new CodyWaite(xa, xb);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2358,            quadrant = cw.getK() & 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2359,            xa = cw.getRemA();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2360,            xb = cw.getRemB();,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2363,        if (xa > 1.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2365,            final double pi2a = 1.5707963267948966;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2366,            final double pi2b = 6.123233995736766E-17;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2368,            final double a = pi2a - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2369,            double b = -(a - pi2a + xa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2370,            b += pi2b - xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2372,            xa = a + b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2373,            xb = -(xa - a - b);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2374,            quadrant ^= 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2375,            negative ^= true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2379,        if ((quadrant & 1) == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2380,"            result = tanQ(xa, xb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2382,"            result = -tanQ(xa, xb, true);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2385,        if (negative) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2386,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2389,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2398,"        return atan(x, 0.0, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2408,        boolean negate = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2411,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2412,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2415,        if (xa < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2417,            xa = -xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2418,            xb = -xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2419,            negate = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2422,        if (xa > 1.633123935319537E16) { // Very large input,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2423,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2427,        if (xa < 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2428,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2430,            final double oneOverXa = 1 / xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2431,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2433,        double epsA = xa - TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2434,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2435,        epsB += xb - TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2437,        double temp = epsA + epsB;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2438,        epsB = -(temp - epsA - epsB);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2439,        epsA = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2442,        temp = xa * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2443,        double ya = xa + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2444,        double yb = xb + xa - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2445,        xa = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2446,        xb += yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2449,        if (idx == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2452,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2454,            ya = epsA * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2455,            yb = epsB * denom;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2456,        } else {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2457,            double temp2 = xa * TANGENT_TABLE_A[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2458,            double za = 1d + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2459,            double zb = -(za - 1d - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2460,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2461,            temp = za + temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2462,            zb += -(temp - za - temp2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2463,            za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2465,            zb += xb * TANGENT_TABLE_B[idx];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2466,            ya = epsA / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2468,            temp = ya * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2469,            final double yaa = (ya + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2470,            final double yab = ya - yaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2472,            temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2473,            final double zaa = (za + temp) - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2474,            final double zab = za - zaa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2477,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2479,            yb += -epsA * zb / za / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2480,            yb += epsB / za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2484,        epsA = ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2485,        epsB = yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2488,        final double epsA2 = epsA * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2499,        yb = 0.07490822288864472;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2500,        yb = yb * epsA2 + -0.09088450866185192;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2501,        yb = yb * epsA2 + 0.11111095942313305;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2502,        yb = yb * epsA2 + -0.1428571423679182;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2503,        yb = yb * epsA2 + 0.19999999999923582;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2504,        yb = yb * epsA2 + -0.33333333333333287;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2505,        yb = yb * epsA2 * epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2508,        ya = epsA;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2510,        temp = ya + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2511,        yb = -(temp - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2512,        ya = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2515,        yb += epsB / (1d + epsA * epsA);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2518,        double za = EIGHTHS[idx] + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2519,        double zb = -(za - EIGHTHS[idx] - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2520,        temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2521,        zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2522,        za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2524,        double result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2525,        double resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2527,        if (leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2529,            final double pia = 1.5707963267948966 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2530,            final double pib = 6.123233995736766E-17 * 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2532,            za = pia - result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2533,            zb = -(za - pia + result);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2534,            zb += pib - resultb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2536,            result = za + zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2537,            resultb = -(result - za - zb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2541,        if (negate ^ leftPlane) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2542,            result = -result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2545,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2555,        if (x != x || y != y) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2556,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2559,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2560,            final double result = x * y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2561,            final double invx = 1d / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2562,            final double invy = 1d / y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2564,            if (invx == 0) { // X is infinite,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2565,                if (x > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2566,                    return y; // return +/- 0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2568,"                    return copySign(Math.PI, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2572,            if (x < 0 || invx < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2573,                if (y < 0 || invy < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2574,                    return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2576,                    return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2579,                return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2585,        if (y == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2586,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2587,                return Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2590,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2591,                return Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2594,            return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2597,        if (y == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2598,            if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2599,                return -Math.PI * F_1_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2602,            if (x == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2603,                return -Math.PI * F_3_4;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2606,            return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2609,        if (x == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2610,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2611,                return 0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2614,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2615,                return -0d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2619,        if (x == Double.NEGATIVE_INFINITY),0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2621,            if (y > 0.0 || 1 / y > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2622,                return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2625,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2626,                return -Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2632,        if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2633,            if (y > 0 || 1 / y > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2634,                return Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2637,            if (y < 0 || 1 / y < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2638,                return -Math.PI * F_1_2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2643,        final double r = y / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2644,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2645,"            return atan(r, 0, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2648,        double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2649,        double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2652,        final double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2653,        final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2655,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2657,        final double temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2658,        rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2659,        ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2661,        if (ra == 0) { // Fix up the sign so atan works correctly,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2662,"            ra = copySign(0d, y);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2666,"        final double result = atan(ra, rb, x < 0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2668,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2676,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2677,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2680,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2681,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2684,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2685,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2688,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2689,          return -Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2692,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2693,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2699,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2700,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2701,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2704,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2705,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2708,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2709,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2711,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2712,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2714,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2715,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2716,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2720,      y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2721,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2722,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2723,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2726,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2729,      double dx = zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2732,      double r = x/y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2733,      temp = r * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2734,      double ra = r + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2735,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2737,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2738,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2740,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2741,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2742,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2744,"      return atan(ra, rb, false);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2752,      if (x != x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2753,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2756,      if (x > 1.0 || x < -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2757,          return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2760,      if (x == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2761,          return Math.PI;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2764,      if (x == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2765,          return 0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2768,      if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2769,          return Math.PI/2.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2775,      double temp = x * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2776,      final double xa = x + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2777,      final double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2780,      double ya = xa*xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2781,      double yb = xa*xb*2.0 + xb*xb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2784,      ya = -ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2785,      yb = -yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2787,      double za = 1.0 + ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2788,      double zb = -(za - 1.0 - ya);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2790,      temp = za + yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2791,      zb += -(temp - za - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2792,      za = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2795,      double y = sqrt(za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2796,      temp = y * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2797,      ya = y + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2798,      yb = y - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2801,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2804,      yb += zb / (2.0*y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2805,      y = ya+yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2806,      yb = -(y - ya - yb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2809,      double r = y/x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2812,      if (Double.isInfinite(r)) { // x is effectively zero,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2813,          return Math.PI/2; // so return the appropriate value,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2816,      double ra = doubleHighPart(r);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2817,      double rb = r - ra;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2819,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2820,      rb += yb / x;  // Add in effect additional bits of sqrt.,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2822,      temp = ra + rb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2823,      rb = -(temp - ra - rb);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2824,      ra = temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2826,"      return atan(ra, rb, x<0);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2835,      long inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2836,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2837,      boolean subnormal = false;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2839,      if (exponent == -1023) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2840,          if (x == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2841,              return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2845,          subnormal = true;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2846,          x *= 1.8014398509481984E16;  // 2^54,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2847,          inbits = Double.doubleToLongBits(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2848,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2851,      if (exponent == 1024) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2853,          return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2857,      int exp3 = exponent / 3;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2860,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2864,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2867,      double est = -0.010714690733195933;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2868,      est = est * mant + 0.0875862700108075;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2869,      est = est * mant + -0.3058015757857271;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2870,      est = est * mant + 0.7249995199969751;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2871,      est = est * mant + 0.5039018405998233;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2873,      est *= CBRTTWO[exponent % 3 + 2];,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2878,      final double xs = x / (p2*p2*p2);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2879,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2880,      est += (xs - est*est*est) / (3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2883,      double temp = est * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2884,      double ya = est + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2885,      double yb = est - ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2887,      double za = ya * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2888,      double zb = ya * yb * 2.0 + yb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2889,      temp = za * HEX_40000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2890,      double temp2 = za + temp - temp;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2891,      zb += za - temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2892,      za = temp2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2894,      zb = za * yb + ya * zb + zb * yb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2895,      za = za * ya;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2897,      double na = xs - za;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2898,      double nb = -(na - xs + za);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2899,      nb -= zb;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2901,      est += (na+nb)/(3*est*est);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2904,      est *= p2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2906,      if (subnormal) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2907,          est *= 3.814697265625E-6;  // 2^-18,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2910,      return est;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2920,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2921,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2925,        final double facta = 0.01745329052209854;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2926,        final double factb = 1.997844754509471E-9;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2928,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2929,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2931,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2932,        if (result == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2933,            result = result * x; // ensure correct sign if calculation underflows,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2935,        return result;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2945,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2946,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2950,        final double facta = 57.2957763671875;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2951,        final double factb = 3.145894820876798E-6;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2953,        double xa = doubleHighPart(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2954,        double xb = x - xa;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2956,        return xb * factb + xb * facta + xa * factb + xa * facta;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2965,        return (x < 0) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2974,        return (x < 0l) ? -x : x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2983,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,2992,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3001,        if (Double.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3002,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3004,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3013,        if (Float.isInfinite(x)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3014,            return Float.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3016,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3028,        if ((n > -1023) && (n < 1024)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3029,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3033,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3034,            return d;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3036,        if (n < -2098) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3037,            return (d > 0) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3039,        if (n > 2097) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3040,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3044,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3045,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3046,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3047,        long mantissa   = bits & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3050,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3052,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3054,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3056,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3057,            } else if (scaledExponent > -53) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3061,                mantissa = mantissa | (1L << 52);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3064,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3065,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3066,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3068,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3070,                return Double.longBitsToDouble(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3074,                return (sign == 0L) ? 0.0 : -0.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3078,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3081,                while ((mantissa >>> 52) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3082,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3083,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3085,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3086,                mantissa = mantissa & 0x000fffffffffffffL;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3088,                if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3089,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3091,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3094,            } else if (scaledExponent < 2047) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3095,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3097,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3112,        if ((n > -127) && (n < 128)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3113,            return f * Float.intBitsToFloat((n + 127) << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3117,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3118,            return f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3120,        if (n < -277) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3121,            return (f > 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3123,        if (n > 276) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3124,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3128,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3129,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3130,        int  exponent  = (bits >>> 23) & 0xff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3131,        int mantissa   = bits & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3134,        int scaledExponent = exponent + n;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3136,        if (n < 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3138,            if (scaledExponent > 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3140,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3141,            } else if (scaledExponent > -24) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3145,                mantissa = mantissa | (1 << 23);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3148,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3149,                mantissa = mantissa >>> (1 - scaledExponent);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3150,                if (mostSignificantLostBit != 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3152,                    mantissa++;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3154,                return Float.intBitsToFloat(sign | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3158,                return (sign == 0) ? 0.0f : -0.0f;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3162,            if (exponent == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3165,                while ((mantissa >>> 23) != 1) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3166,                    mantissa = mantissa << 1;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3167,                    --scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3169,                ++scaledExponent;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3170,                mantissa = mantissa & 0x007fffff;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3172,                if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3173,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3175,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3178,            } else if (scaledExponent < 255) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3179,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3181,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3221,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3222,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3223,        } else if (d == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3224,            return direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3225,        } else if (Double.isInfinite(d)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3226,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3227,        } else if (d == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3228,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3233,        final long bits = Double.doubleToLongBits(d);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3234,        final long sign = bits & 0x8000000000000000L;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3235,        if ((direction < d) ^ (sign == 0L)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3236,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3238,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3277,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3278,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3279,        } else if (f == direction) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3280,            return (float) direction;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3281,        } else if (Float.isInfinite(f)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3282,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3283,        } else if (f == 0f) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3284,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3289,        final int bits = Float.floatToIntBits(f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3290,        final int sign = bits & 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3291,        if ((direction < f) ^ (sign == 0)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3292,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3294,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3307,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3311,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3316,            y--;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3320,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3333,        if (x != x) { // NaN,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3334,            return x;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3337,        y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3338,        if (y == x) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3339,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3342,        y += 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3344,        if (y == 0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3345,            return x*y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3348,        return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3356,        double y = floor(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3357,        double d = x - y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3359,        if (d > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3360,            if (y == -1.0) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3361,                return -0.0; // Preserve sign of operand,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3363,            return y+1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3365,        if (d < 0.5) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3366,            return y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3370,        long z = (long) y;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3371,        return (z & 1) == 0 ? y : y + 1.0;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3379,        return (long) floor(x + 0.5);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3387,        return (int) floor(x + 0.5f);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3396,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3405,        return (a <= b) ? a : b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3414,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3415,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3417,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3418,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3421,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3422,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3426,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3427,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3428,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3430,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3439,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3440,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3442,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3443,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3446,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3447,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3451,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3452,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3453,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3455,        return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3464,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3473,        return (a <= b) ? b : a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3482,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3483,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3485,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3486,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3489,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3490,            return Float.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3494,        int bits = Float.floatToRawIntBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3495,        if (bits == 0x80000000) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3496,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3498,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3507,        if (a > b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3508,            return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3510,        if (a < b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3511,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3514,        if (a != b) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3515,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3519,        long bits = Double.doubleToRawLongBits(a);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3520,        if (bits == 0x8000000000000000L) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3521,            return b;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3523,        return a;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3541,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3542,            return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3543,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3544,            return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3547,            final int expX = getExponent(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3548,            final int expY = getExponent(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3549,            if (expX > expY + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3551,                return abs(x);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3552,            } else if (expY > expX + 27) {,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3554,                return abs(y);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3558,                final int middleExp = (expX + expY) / 2;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3561,"                final double scaledX = scalb(x, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3562,"                final double scaledY = scalb(y, -middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3565,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3568,"                return scalb(scaledH, middleExp);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3596,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3608,        long m = Double.doubleToLongBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3609,        long s = Double.doubleToLongBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3610,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3611,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3613,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3625,        int m = Float.floatToIntBits(magnitude);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3626,        int s = Float.floatToIntBits(sign);,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3627,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3628,            return magnitude;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3630,        return -magnitude; // flip sign,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3643,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3656,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3665,        PrintStream out = System.out;,0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3666,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3667,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3668,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3669,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3670,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3671,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3672,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3673,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3674,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3675,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3676,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0.0,0,-1,0
org/apache/commons/math3/util/FastMath,22,3677,    },0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,83,"        this(k, m1, m2, m3, new int[] { seed });",0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,84,    },0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,133,    },0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,142,        setSeed(new int[] { seed });,0.0,0,-1,0
org/apache/commons/math3/random/AbstractWell,22,143,    },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,61,        return next(1) != 0;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,66,        int i = 0;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,67,        final int iEnd = bytes.length - 3;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,68,        while (i < iEnd) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,69,            final int random = next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,70,            bytes[i]     = (byte) (random & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,71,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,72,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,73,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,74,            i += 4;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,75,        },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,76,        int random = next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,77,        while (i < bytes.length) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,78,            bytes[i++] = (byte) (random & 0xff);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,79,            random     = random >> 8;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,81,    },0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,85,        final long high = ((long) next(26)) << 26;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,86,        final int  low  = next(26);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,87,        return (high | low) * 0x1.0p-52d;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,92,        return next(23) * 0x1.0p-23f;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,99,        if (Double.isNaN(nextGaussian)) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,101,            final double x = nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,102,            final double y = nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,103,            final double alpha = 2 * FastMath.PI * x;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,104,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,105,            random       = r * FastMath.cos(alpha);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,106,            nextGaussian = r * FastMath.sin(alpha);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,107,        } else {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,109,            random = nextGaussian;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,110,            nextGaussian = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,113,        return random;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,119,        return next(32);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,138,        if (n > 0) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,139,            if ((n & -n) == n) {,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,140,                return (int) ((n * (long) next(31)) >> 31);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,145,                bits = next(31);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,146,                val = bits % n;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,147,            } while (bits - val + (n - 1) < 0);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,148,            return val;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,150,        throw new NotStrictlyPositiveException(n);,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,155,        final long high  = ((long) next(32)) << 32;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,156,        final long  low  = ((long) next(32)) & 0xffffffffL;,0.0,0,-1,0
org/apache/commons/math3/random/BitsStreamGenerator,22,157,        return high | low;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,138,    public RandomDataGenerator(RandomGenerator rand) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,139,        this.rand = rand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,140,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,159,        if (len <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,160,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,164,        RandomGenerator ran = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,167,        StringBuilder outBuffer = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,170,        byte[] randomBytes = new byte[(len / 2) + 1];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,171,        ran.nextBytes(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,174,        for (int i = 0; i < randomBytes.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,175,            Integer c = Integer.valueOf(randomBytes[i]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,182,            String hex = Integer.toHexString(c.intValue() + 128);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,185,            if (hex.length() == 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,186,"                hex = ""0"" + hex;",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,188,            outBuffer.append(hex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,190,"        return outBuffer.toString().substring(0, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,195,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,196,"            throw new MathIllegalArgumentException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,199,        double r = getRan().nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,200,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,201,        return (int) FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,206,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,207,"            throw new MathIllegalArgumentException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,210,        double r = getRan().nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,211,        double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,212,        return (long)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,232,        if (len <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,233,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,237,        SecureRandom secRan = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,238,        MessageDigest alg = null;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,240,"            alg = MessageDigest.getInstance(""SHA-1"");",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,244,        },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,241,        } catch (NoSuchAlgorithmException ex) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,243,            throw new MathInternalError(ex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,245,        alg.reset();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,248,        int numIter = (len / 40) + 1;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,250,        StringBuilder outBuffer = new StringBuilder();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,251,        for (int iter = 1; iter < numIter + 1; iter++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,252,            byte[] randomBytes = new byte[40];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,253,            secRan.nextBytes(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,254,            alg.update(randomBytes);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,257,            byte[] hash = alg.digest();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,260,            for (int i = 0; i < hash.length; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,261,                Integer c = Integer.valueOf(hash[i]);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,268,                String hex = Integer.toHexString(c.intValue() + 128);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,271,                if (hex.length() == 1) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,272,"                    hex = ""0"" + hex;",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,274,                outBuffer.append(hex);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,277,"        return outBuffer.toString().substring(0, len);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,282,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,283,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,286,        SecureRandom sec = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,287,        final double r = sec.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,288,        final double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,289,        return (int)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,294,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,295,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,298,        SecureRandom sec = getSecRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,299,        final double r = sec.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,300,        final double scaled = r * upper + (1.0 - r) * lower + r;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,301,        return (long)FastMath.floor(scaled);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,318,"        return new PoissonDistribution(getRan(), mean,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,325,        if (sigma <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,326,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,328,        return sigma * getRan().nextGaussian() + mu;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,343,"        return new ExponentialDistribution(getRan(), mean,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,368,"        return new GammaDistribution(getRan(),shape, scale,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,381,"        return new HypergeometricDistribution(getRan(),populationSize,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,393,"        return new PascalDistribution(getRan(), r, p).sample();",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,403,"        return new TDistribution(getRan(), df,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,415,"        return new WeibullDistribution(getRan(), shape, scale,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,427,"        return new ZipfDistribution(getRan(), numberOfElements, exponent).sample();",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,438,"        return new BetaDistribution(getRan(), alpha, beta,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,450,"        return new BinomialDistribution(getRan(), numberOfTrials, probabilityOfSuccess).sample();",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,461,"        return new CauchyDistribution(getRan(), median, scale,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,472,"        return new ChiSquaredDistribution(getRan(), df,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,484,"        return new FDistribution(getRan(), numeratorDf, denominatorDf,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,502,"        return nextUniform(lower, upper, false);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,522,        if (lower >= upper) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,523,"            throw new MathIllegalArgumentException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,527,        if (Double.isInfinite(lower) || Double.isInfinite(upper)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,528,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,531,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,532,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,535,        final RandomGenerator generator = getRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,538,        double u = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,539,        while (!lowerInclusive && u <= 0.0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,540,            u = generator.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,543,        return u * upper + (1.0 - u) * lower;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,556,        if (k > n) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,557,"            throw new MathIllegalArgumentException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,560,        if (k <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,561,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,565,        int[] index = getNatural(n);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,566,"        shuffle(index, n - k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,567,        int[] result = new int[k];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,568,        for (int i = 0; i < k; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,569,            result[i] = index[n - i - 1];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,572,        return result;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,590,        int len = c.size();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,591,        if (k > len) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,592,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,595,        if (k <= 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,596,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,599,        Object[] objects = c.toArray();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,600,"        int[] index = nextPermutation(len, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,601,        Object[] result = new Object[k];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,602,        for (int i = 0; i < k; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,603,            result[i] = objects[index[i]];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,605,        return result;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,619,       getRan().setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,620,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,630,        getSecRan().setSeed(System.currentTimeMillis());,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,631,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,642,        getSecRan().setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,643,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,650,        getRan().setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,651,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,671,"        secRand = SecureRandom.getInstance(algorithm, provider);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,672,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,685,        if (rand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,686,            initRan();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,688,        return rand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,696,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,697,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,709,        if (secRand == null) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,710,            secRand = new SecureRandom();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,711,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,713,        return secRand;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,724,        int target = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,725,        for (int i = list.length - 1; i >= end; i--) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,726,            if (i == 0) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,727,                target = 0;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,729,"                target = nextInt(0, i);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,731,            int temp = list[target];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,732,            list[target] = list[i];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,733,            list[i] = temp;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,735,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,744,        int[] natural = new int[n];,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,745,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,746,            natural[i] = i;,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataGenerator,22,748,        return natural;,0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,22,38,"        super(value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,22,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,22,48,"        super(specific, value, 0, false);",0.0,0,-1,0
org/apache/commons/math3/exception/NotStrictlyPositiveException,22,49,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,22,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,22,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,22,68,"        super(specific, wrong, min);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,22,70,        this.min = min;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,22,71,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,22,72,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,22,78,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooSmallException,22,85,        return min;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,22,46,"        super(pattern, wrong, arguments);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,22,47,        argument = wrong;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,22,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalNumberException,22,54,        return argument;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,22,44,                                        Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,22,45,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,22,46,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,22,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,22,51,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,22,57,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalArgumentException,22,63,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,22,50,        this(boundIsAllowed ?,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,22,54,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,22,67,"        super(specific, wrong, max);",0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,22,69,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,22,70,        this.boundIsAllowed = boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,22,71,    },0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,22,77,        return boundIsAllowed;,0.0,0,-1,0
org/apache/commons/math3/exception/NumberIsTooLargeException,22,84,        return max;,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,22,37,    public MathInternalError() {,0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,22,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,22,39,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,22,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,22,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,22,56,"        super(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathInternalError,22,57,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,45,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,46,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,47,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,48,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,60,        super(cause);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,61,        context = new ExceptionContext(this);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,62,"        context.addMessage(pattern, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,63,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,69,        this(LocalizedFormats.ILLEGAL_STATE);,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,70,    },0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,74,        return context;,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,80,        return context.getMessage();,0.0,0,-1,0
org/apache/commons/math3/exception/MathIllegalStateException,22,86,        return context.getLocalizedMessage();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,120,    public RandomDataImpl(RandomGenerator rand) {,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,121,        delegate = new RandomDataGenerator(rand);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,122,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,141,        return delegate.nextHexString(len);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,146,"       return delegate.nextInt(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,151,"        return delegate.nextLong(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,171,        return delegate.nextSecureHexString(len);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,176,"        return delegate.nextSecureInt(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,181,"        return delegate.nextSecureLong(lower,upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,198,        return delegate.nextPoisson(mean);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,203,"        return delegate.nextGaussian(mu,sigma);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,218,        return delegate.nextExponential(mean);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,235,"        return delegate.nextUniform(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,255,"        return delegate.nextUniform(lower, upper, lowerInclusive);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,269,"        return delegate.nextBeta(alpha, beta);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,283,"        return delegate.nextBinomial(numberOfTrials, probabilityOfSuccess);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,297,"        return delegate.nextCauchy(median, scale);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,310,       return delegate.nextChiSquare(df);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,324,"        return delegate.nextF(numeratorDf, denominatorDf);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,349,"        return delegate.nextGamma(shape, scale);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,364,"        return delegate.nextHypergeometric(populationSize, numberOfSuccesses, sampleSize);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,378,"        return delegate.nextPascal(r, p);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,391,        return delegate.nextT(df);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,405,"        return delegate.nextWeibull(shape, scale);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,419,"        return delegate.nextZipf(numberOfElements, exponent);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,433,        delegate.reSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,434,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,444,        delegate.reSeedSecure();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,445,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,457,        delegate.reSeedSecure(seed);,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,458,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,465,        delegate.reSeed();,0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,466,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,490,"       delegate.setSecureAlgorithm(algorithm, provider);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,491,    },0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,503,"        return delegate.nextPermutation(n, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,520,"        return delegate.nextSample(c, k);",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,533,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0.0,0,-1,0
org/apache/commons/math3/random/RandomDataImpl,22,547,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,64,"        super(K, M1, M2, M3, seed);",0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,65,    },0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,72,"        super(K, M1, M2, M3, seed);",0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,73,    },0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,79,"        super(K, M1, M2, M3, seed);",0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,80,    },0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,86,        final int indexRm1 = iRm1[index];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,87,        final int indexRm2 = iRm2[index];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,89,        final int v0       = v[index];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,90,        final int vM1      = v[i1[index]];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,91,        final int vM2      = v[i2[index]];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,92,        final int vM3      = v[i3[index]];,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,97,        final int z3 = z1      ^ z2;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,100,        v[index]     = z3;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,101,        v[indexRm1]  = z4;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,102,        v[indexRm2] &= 0x80000000;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,103,        index        = indexRm1;,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0.0,0,-1,0
org/apache/commons/math3/random/Well19937c,22,111,        return z4 >>> (32 - bits);,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,111,"            throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,",0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,115,"            throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,",0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,154,        if (x <= 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,155,            ret = 0;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,157,            double n = numeratorDegreesOfFreedom;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,158,            double m = denominatorDegreesOfFreedom;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,160,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,164,        return ret;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,173,        return numeratorDegreesOfFreedom;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,182,        return denominatorDegreesOfFreedom;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,188,        return solverAbsoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,201,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,203,        if (denominatorDF > 2) {,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,204,            return denominatorDF / (denominatorDF - 2);,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,207,        return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,224,        if (!numericalVarianceIsCalculated) {,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,225,            numericalVariance = calculateNumericalVariance();,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,226,            numericalVarianceIsCalculated = true;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,228,        return numericalVariance;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,237,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,239,        if (denominatorDF > 4) {,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,240,            final double numeratorDF = getNumeratorDegreesOfFreedom();,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,241,            final double denomDFMinusTwo = denominatorDF - 2;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,243,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,247,        return Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,270,        return Double.POSITIVE_INFINITY;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,280,        return false;,0.0,0,-1,0
org/apache/commons/math3/distribution/FDistribution,22,291,        return true;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,62,    protected AbstractRealDistribution() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,65,        random = null;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,66,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,85,"        return probability(x0, x1);",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,106,        if (x0 > x1) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,107,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,110,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,151,        if (p < 0.0 || p > 1.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,152,"            throw new OutOfRangeException(p, 0, 1);",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,155,        double lowerBound = getSupportLowerBound();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,156,        if (p == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,157,            return lowerBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,160,        double upperBound = getSupportUpperBound();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,161,        if (p == 1.0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,162,            return upperBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,165,        final double mu = getNumericalMean();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,166,        final double sig = FastMath.sqrt(getNumericalVariance());,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,168,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,171,        if (lowerBound == Double.NEGATIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,172,            if (chebyshevApplies) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,173,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,175,                lowerBound = -1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,176,                while (cumulativeProbability(lowerBound) >= p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,177,                    lowerBound *= 2.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,182,        if (upperBound == Double.POSITIVE_INFINITY) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,183,            if (chebyshevApplies) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,184,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,186,                upperBound = 1.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,187,                while (cumulativeProbability(upperBound) < p) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,188,                    upperBound *= 2.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,193,        final UnivariateFunction toSolve = new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,200,"        double x = UnivariateSolverUtils.solve(toSolve,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,205,        if (!isSupportConnected()) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,207,            final double dx = getSolverAbsoluteAccuracy();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,208,            if (x - dx >= getSupportLowerBound()) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,209,                double px = cumulativeProbability(x);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,210,                if (cumulativeProbability(x - dx) == px) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,211,                    upperBound = x;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,212,                    while (upperBound - lowerBound > dx) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,213,                        final double midPoint = 0.5 * (lowerBound + upperBound);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,214,                        if (cumulativeProbability(midPoint) < px) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,215,                            lowerBound = midPoint;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,217,                            upperBound = midPoint;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,219,                    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,220,                    return upperBound;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,224,        return x;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,235,        return solverAbsoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,240,        random.setSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,241,        randomData.reSeed(seed);,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,242,    },0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,253,        return inverseCumulativeProbability(random.nextDouble());,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,263,        if (sampleSize <= 0) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,264,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,267,        double[] out = new double[sampleSize];,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,268,        for (int i = 0; i < sampleSize; i++) {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,269,            out[i] = sample();,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,271,        return out;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,280,        return 0d;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,22,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,22,47,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,22,62,"        super(specific, wrong, lo, hi);",0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,22,63,        this.lo = lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,22,64,        this.hi = hi;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,22,65,    },0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,22,71,        return lo;,0.0,0,-1,0
org/apache/commons/math3/exception/OutOfRangeException,22,77,        return hi;,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,51,"        this(0, 1);",0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,52,    },0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,97,            throw new NumberIsTooLargeException(,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,110,            return 0.0;,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,117,        if (x <= lower) {,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,118,            return 0;,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,120,        if (x >= upper) {,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,121,            return 1;,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,123,        return (x - lower) / (upper - lower);,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,129,        return solverAbsoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,139,        return 0.5 * (lower + upper);,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,149,        double ul = upper - lower;,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,150,        return ul * ul / 12;,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,162,        return lower;,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,179,        return true;,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,195,        return true;,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,201,        final double u = random.nextDouble();,0.0,0,-1,0
org/apache/commons/math3/distribution/UniformRealDistribution,22,202,        return u * upper + (1 - u) * lower;,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,193,        final UnivariateFunction toSolve = new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/distribution/AbstractRealDistribution,22,196,                return cumulativeProbability(x) - p;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,144,        final UnivariateFunction f = new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,146,                    return computeObjectiveValue(x);,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,65,"        super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,66,        numberOfPoints = n;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,67,    },0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,79,"        this(n, relativeAccuracy, absoluteAccuracy,",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,81,    },0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,97,"        this(n, DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY,",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,99,    },0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,41,    private static final GaussIntegratorFactory FACTORY,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,106,        double oldt = stage(1);,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,108,        int n = 2;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,111,            final double t = stage(n);,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,114,            final double delta = FastMath.abs(t - oldt);,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,115,            final double limit =,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,120,            if (iterations.getCount() + 1 >= getMinimalIterationCount() &&,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,122,                return t;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,126,"            final double ratio = FastMath.min(4, FastMath.pow(delta / limit, 0.5 / numberOfPoints));",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,127,"            n = FastMath.max((int) (ratio * n), n + 1);",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,128,            oldt = t;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,129,            iterations.incrementCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,130,        },0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,144,        final UnivariateFunction f = new UnivariateFunction() {,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,150,        final double min = getMin();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,151,        final double max = getMax();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,152,        final double step = (max - min) / n;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,154,        double sum = 0;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,155,        for (int i = 0; i < n; i++) {,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,157,            final double a = min + i * step;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,158,            final double b = a + step;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,159,"            final GaussIntegrator g = FACTORY.legendreHighPrecision(numberOfPoints, a, b);",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,160,            sum += g.integrate(f);,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/IterativeLegendreGaussIntegrator,22,163,        return sum;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,113,"        throws NotStrictlyPositiveException, NumberIsTooSmallException {",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,116,        this.relativeAccuracy      = relativeAccuracy;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,117,        this.absoluteAccuracy      = absoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,120,        if (minimalIterationCount <= 0) {,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,121,            throw new NotStrictlyPositiveException(minimalIterationCount);,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,123,        if (maximalIterationCount <= minimalIterationCount) {,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,124,"            throw new NumberIsTooSmallException(maximalIterationCount, minimalIterationCount, false);",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,126,        this.minimalIterationCount = minimalIterationCount;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,127,        this.iterations            = new Incrementor();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,128,        iterations.setMaximalCount(maximalIterationCount);,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,131,        evaluations = new Incrementor();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,133,    },0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,142,"        this(relativeAccuracy, absoluteAccuracy,",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,144,    },0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,158,"        this(DEFAULT_RELATIVE_ACCURACY, DEFAULT_ABSOLUTE_ACCURACY,",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,160,    },0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,164,        return relativeAccuracy;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,169,        return absoluteAccuracy;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,174,        return minimalIterationCount;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,179,        return iterations.getMaximalCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,184,        return evaluations.getCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,189,        return iterations.getCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,196,        return min;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,202,        return max;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,216,            evaluations.incrementCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,219,        },0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,217,        } catch (MaxCountExceededException e) {,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,218,            throw new TooManyEvaluationsException(e.getMax());,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,220,        return function.value(point);,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,241,        MathUtils.checkNotNull(f);,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,242,"        UnivariateSolverUtils.verifyInterval(lower, upper);",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,245,        min = lower;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,246,        max = upper;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,247,        function = f;,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,248,        evaluations.setMaximalCount(maxEval);,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,249,        evaluations.resetCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,250,        iterations.resetCount();,0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,252,    },0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,261,"        setup(maxEval, f, lower, upper);",0.0,0,-1,0
org/apache/commons/math3/analysis/integration/BaseAbstractUnivariateIntegrator,22,264,        return doIntegrate();,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,22,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,22,43,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,22,53,                                     Object ... args) {,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,22,54,"        getContext().addMessage(specific, max, args);",0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,22,55,        this.max = max;,0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,22,56,    },0.0,0,-1,0
org/apache/commons/math3/exception/MaxCountExceededException,22,62,        return max;,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,131,            ContinuedFraction fraction = new ContinuedFraction() {,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,137,                    if (n % 2 == 0) { // even,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,138,                        m = n / 2.0;,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,139,                        ret = (m * (b - m) * x) /,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,142,                        m = (n - 1.0) / 2.0;,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,143,                        ret = -((a + m) * (a + b + m) * x) /,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,146,                    return ret;,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,151,                    return 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,35,    private Beta() {},0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,50,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,71,"        return regularizedBeta(x, a, b, epsilon, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,88,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,120,        if (Double.isNaN(x) ||,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,127,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,128,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,129,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,131,            ContinuedFraction fraction = new ContinuedFraction() {,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,154,            ret = FastMath.exp((a * FastMath.log(x)) + (b * FastMath.log(1.0 - x)) -,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,159,        return ret;,0.0,0,-1,0
org/apache/commons/math3/special/Beta,22,199,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,403,            ContinuedFraction cf = new ContinuedFraction() {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,407,                    return ((2.0 * n) + 1.0) - a + x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,412,                    return n * (a - n);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,218,    private Gamma() {},0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,247,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,249,            return logGamma1p(x) - FastMath.log(x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,260,            double sum = lanczos(x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,261,            double tmp = x + LANCZOS_G + .5;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,262,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,266,        return ret;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,278,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,315,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,316,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,317,        } else if (x == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,318,            ret = 0.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,319,        } else if (x >= a + 1) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,322,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,325,            double n = 0.0; // current element index,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,326,            double an = 1.0 / a; // n-th element in the series,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,327,            double sum = an; // partial sum,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,329,                   n < maxIterations &&,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,332,                n = n + 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,333,                an = an * (x / (a + n));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,336,                sum = sum + an;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,338,            if (n >= maxIterations) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,339,                throw new MaxCountExceededException(maxIterations);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,340,            } else if (Double.isInfinite(sum)) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,341,                ret = 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,343,                ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,347,        return ret;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,359,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,393,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,394,            ret = Double.NaN;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,395,        } else if (x == 0.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,396,            ret = 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,397,        } else if (x < a + 1.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,400,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,403,            ContinuedFraction cf = new ContinuedFraction() {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,416,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,417,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,420,        return ret;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,445,        if (x > 0 && x <= S_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,448,            return -GAMMA - 1 / x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,451,        if (x >= C_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,453,            double inv = 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,457,            return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,460,        return digamma(x + 1) - 1 / x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,475,        if (x > 0 && x <= S_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,476,            return 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,479,        if (x >= C_LIMIT) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,480,            double inv = 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,485,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,488,        return trigamma(x + 1) + 1 / (x * x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,511,        double sum = 0.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,512,        for (int i = LANCZOS.length - 1; i > 0; --i) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,513,            sum = sum + (LANCZOS[i] / (x + i));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,515,        return sum + LANCZOS[0];,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,532,"            throw new NumberIsTooSmallException(x, -0.5, true);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,535,"            throw new NumberIsTooLargeException(x, 1.5, true);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,541,            final double a = INV_GAMMA1P_M1_A0 + t * INV_GAMMA1P_M1_A1;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,542,            double b = INV_GAMMA1P_M1_B8;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,543,            b = INV_GAMMA1P_M1_B7 + t * b;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,544,            b = INV_GAMMA1P_M1_B6 + t * b;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,545,            b = INV_GAMMA1P_M1_B5 + t * b;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,546,            b = INV_GAMMA1P_M1_B4 + t * b;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,547,            b = INV_GAMMA1P_M1_B3 + t * b;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,548,            b = INV_GAMMA1P_M1_B2 + t * b;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,549,            b = INV_GAMMA1P_M1_B1 + t * b;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,550,            b = 1.0 + t * b;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,552,            double c = INV_GAMMA1P_M1_C13 + t * (a / b);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,553,            c = INV_GAMMA1P_M1_C12 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,554,            c = INV_GAMMA1P_M1_C11 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,555,            c = INV_GAMMA1P_M1_C10 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,556,            c = INV_GAMMA1P_M1_C9 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,557,            c = INV_GAMMA1P_M1_C8 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,558,            c = INV_GAMMA1P_M1_C7 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,559,            c = INV_GAMMA1P_M1_C6 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,560,            c = INV_GAMMA1P_M1_C5 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,561,            c = INV_GAMMA1P_M1_C4 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,562,            c = INV_GAMMA1P_M1_C3 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,563,            c = INV_GAMMA1P_M1_C2 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,564,            c = INV_GAMMA1P_M1_C1 + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,565,            c = INV_GAMMA1P_M1_C + t * c;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,566,            if (x > 0.5) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,567,                ret = t * c / x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,569,                ret = x * ((c + 0.5) + 0.5);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,571,        } else {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,625,"            throw new NumberIsTooSmallException(x, -0.5, true);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,628,"            throw new NumberIsTooLargeException(x, 1.5, true);",0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,648,        final double absX = FastMath.abs(x);,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,649,        if (absX <= 20.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,650,            if (x >= 1.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,659,                double prod = 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,660,                double t = x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,661,                while (t > 2.5) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,662,                    t = t - 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,663,                    prod *= t;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,665,                ret = prod / (1.0 + invGamma1pm1(t - 1.0));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,666,            } else {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,674,                double prod = x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,675,                double t = x;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,676,                while (t < -0.5) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,677,                    t = t + 1.0;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,678,                    prod *= t;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,680,                ret = 1.0 / (prod * (1.0 + invGamma1pm1(t)));,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,681,            },0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,683,            final double y = absX + LANCZOS_G + 0.5;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,684,            final double gammaAbs = SQRT_TWO_PI / x *,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,687,            if (x > 0.0) {,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,688,                ret = gammaAbs;,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,698,                ret = -FastMath.PI /,0.0,0,-1,0
org/apache/commons/math3/special/Gamma,22,702,        return ret;,0.0,0,-1,0
