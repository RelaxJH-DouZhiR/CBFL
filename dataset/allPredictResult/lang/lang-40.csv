project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/lang/StringUtils,40,1045,        if (str == null || searchStr == null) {,1.0,0,1,0
org/apache/commons/lang/StringUtils,40,1048,"        return contains(str.toUpperCase(), searchStr.toUpperCase());",1.0,1,1,0
org/apache/commons/lang/StringUtils,40,1018,        return str.indexOf(searchStr) >= 0;,0.5,0,-1,0
org/apache/commons/lang/StringUtils,40,1015,        if (str == null || searchStr == null) {,0.33333,0,-1,0
org/apache/commons/lang/StringUtils,40,168,        super();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,169,    },0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,192,        return str == null || str.length() == 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,210,        return !StringUtils.isEmpty(str);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,230,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,231,            return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,233,        for (int i = 0; i < strLen; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,234,            if ((Character.isWhitespace(str.charAt(i)) == false)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,235,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,238,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,258,        return !StringUtils.isBlank(str);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,287,        return str == null ? null : str.trim();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,313,        String ts = trim(str);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,314,        return isEmpty(ts) ? null : ts;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,339,        return str == null ? EMPTY : str.trim();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,367,"        return strip(str, null);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,394,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,395,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,397,"        str = strip(str, null);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,398,        return str.length() == 0 ? null : str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,424,"        return str == null ? EMPTY : strip(str, null);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,454,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,455,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,457,"        str = stripStart(str, stripChars);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,458,"        return stripEnd(str, stripChars);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,487,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,488,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,490,        int start = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,491,        if (stripChars == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,492,            while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,493,                start++;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,495,        } else if (stripChars.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,496,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,498,            while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,499,                start++;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,502,        return str.substring(start);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,531,        if (str == null || (end = str.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,532,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,535,        if (stripChars == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,536,            while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,537,                end--;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,539,        } else if (stripChars.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,540,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,542,            while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,543,                end--;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,546,"        return str.substring(0, end);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,571,"        return stripAll(strs, null);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,601,        if (strs == null || (strsLen = strs.length) == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,602,            return strs;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,604,        String[] newArr = new String[strsLen];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,605,        for (int i = 0; i < strsLen; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,606,"            newArr[i] = strip(strs[i], stripChars);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,608,        return newArr;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,634,        return str1 == null ? str2 == null : str1.equals(str2);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,659,        return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,684,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,685,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,687,        return str.indexOf(searchChar);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,716,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,717,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,719,"        return str.indexOf(searchChar, startPos);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,745,        if (str == null || searchStr == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,746,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,748,        return str.indexOf(searchStr);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,779,        if (str == null || searchStr == null || ordinal <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,780,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,782,        if (searchStr.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,783,            return 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,785,        int found = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,786,        int index = INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,788,"            index = str.indexOf(searchStr, index + 1);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,789,            if (index < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,790,                return index;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,792,            found++;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,793,        } while (found < ordinal);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,794,        return index;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,829,        if (str == null || searchStr == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,830,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,833,        if (searchStr.length() == 0 && startPos >= str.length()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,834,            return str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,836,"        return str.indexOf(searchStr, startPos);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,861,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,862,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,864,        return str.lastIndexOf(searchChar);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,895,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,896,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,898,"        return str.lastIndexOf(searchChar, startPos);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,924,        if (str == null || searchStr == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,925,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,927,        return str.lastIndexOf(searchStr);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,959,        if (str == null || searchStr == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,960,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,962,"        return str.lastIndexOf(searchStr, startPos);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,987,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,988,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,990,        return str.indexOf(searchChar) >= 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1016,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1046,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1076,        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1077,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1079,        for (int i = 0; i < str.length(); i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1080,            char ch = str.charAt(i);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1081,            for (int j = 0; j < searchChars.length; j++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1082,                if (searchChars[j] == ch) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1083,                    return i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1087,        return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1113,        if (isEmpty(str) || isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1114,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1116,"        return indexOfAny(str, searchChars.toCharArray());",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1145,        if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1146,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1148,        for (int i = 0; i < str.length(); i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1149,            char ch = str.charAt(i);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1150,            for (int j = 0; j < searchChars.length; j++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1151,                if (searchChars[j] == ch) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1152,                    return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1156,        return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1187,        if (searchChars == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1188,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1190,"        return containsAny(str, searchChars.toCharArray());",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1218,        if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1219,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1221,        outer : for (int i = 0; i < str.length(); i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1222,            char ch = str.charAt(i);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1223,            for (int j = 0; j < searchChars.length; j++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1224,                if (searchChars[j] == ch) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1225,                    continue outer;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1228,            return i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1230,        return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1256,        if (isEmpty(str) || isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1257,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1259,        for (int i = 0; i < str.length(); i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1260,            if (searchChars.indexOf(str.charAt(i)) < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1261,                return i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1264,        return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1292,        if ((valid == null) || (str == null)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1293,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1295,        if (str.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1296,            return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1298,        if (valid.length == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1299,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1301,"        return indexOfAnyBut(str, valid) == -1;",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1327,        if (str == null || validChars == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1328,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1330,"        return containsOnly(str, validChars.toCharArray());",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1358,        if (str == null || invalidChars == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1359,            return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1361,        int strSize = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1362,        int validSize = invalidChars.length;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1363,        for (int i = 0; i < strSize; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1364,            char ch = str.charAt(i);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1365,            for (int j = 0; j < validSize; j++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1366,                if (invalidChars[j] == ch) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1367,                    return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1371,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1397,        if (str == null || invalidChars == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1398,            return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1400,"        return containsNone(str, invalidChars.toCharArray());",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1432,        if ((str == null) || (searchStrs == null)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1433,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1435,        int sz = searchStrs.length;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1438,        int ret = Integer.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1440,        int tmp = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1441,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1442,            String search = searchStrs[i];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1443,            if (search == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1444,                continue;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1446,            tmp = str.indexOf(search);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1447,            if (tmp == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1448,                continue;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1451,            if (tmp < ret) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1452,                ret = tmp;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1456,        return (ret == Integer.MAX_VALUE) ? -1 : ret;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1485,        if ((str == null) || (searchStrs == null)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1486,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1488,        int sz = searchStrs.length;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1489,        int ret = -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1490,        int tmp = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1491,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1492,            String search = searchStrs[i];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1493,            if (search == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1494,                continue;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1496,            tmp = str.lastIndexOf(search);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1497,            if (tmp > ret) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1498,                ret = tmp;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1501,        return ret;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1531,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1532,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1536,        if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1537,            start = str.length() + start; // remember start is negative,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1540,        if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1541,            start = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1543,        if (start > str.length()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1544,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1547,        return str.substring(start);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1586,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1587,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1591,        if (end < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1592,            end = str.length() + end; // remember end is negative,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1594,        if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1595,            start = str.length() + start; // remember start is negative,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1599,        if (end > str.length()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1600,            end = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1604,        if (start > end) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1605,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1608,        if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1609,            start = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1611,        if (end < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1612,            end = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1615,"        return str.substring(start, end);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1641,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1642,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1644,        if (len < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1645,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1647,        if (str.length() <= len) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1648,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1650,"        return str.substring(0, len);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1674,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1675,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1677,        if (len < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1678,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1680,        if (str.length() <= len) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1681,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1683,        return str.substring(str.length() - len);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1711,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1712,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1714,        if (len < 0 || pos > str.length()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1715,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1717,        if (pos < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1718,            pos = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1720,        if (str.length() <= (pos + len)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1721,            return str.substring(pos);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1723,"        return str.substring(pos, pos + len);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1756,        if (isEmpty(str) || separator == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1757,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1759,        if (separator.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1760,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1762,        int pos = str.indexOf(separator);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1763,        if (pos == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1764,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1766,"        return str.substring(0, pos);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1798,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1799,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1801,        if (separator == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1802,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1804,        int pos = str.indexOf(separator);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1805,        if (pos == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1806,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1808,        return str.substring(pos + separator.length());,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1839,        if (isEmpty(str) || isEmpty(separator)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1840,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1842,        int pos = str.lastIndexOf(separator);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1843,        if (pos == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1844,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1846,"        return str.substring(0, pos);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1879,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1880,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1882,        if (isEmpty(separator)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1883,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1885,        int pos = str.lastIndexOf(separator);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1886,        if (pos == -1 || pos == (str.length() - separator.length())) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1887,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1889,        return str.substring(pos + separator.length());,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1916,"        return substringBetween(str, tag, tag);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1947,        if (str == null || open == null || close == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1948,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1950,        int start = str.indexOf(open);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1951,        if (start != -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1952,"            int end = str.indexOf(close, start + open.length());",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1953,            if (end != -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1954,"                return str.substring(start + open.length(), end);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1957,        return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1983,        if (str == null || isEmpty(open) || isEmpty(close)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1984,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1986,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1987,        if (strLen == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1988,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1990,        int closeLen = close.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1991,        int openLen = open.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1992,        List<String> list = new ArrayList<String>();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1993,        int pos = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1994,        while (pos < (strLen - closeLen)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1995,"            int start = str.indexOf(open, pos);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1996,            if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1997,                break;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,1999,            start += openLen;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2000,"            int end = str.indexOf(close, start);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2001,            if (end < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2002,                break;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2004,"            list.add(str.substring(start, end));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2005,            pos = end + closeLen;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2006,        },0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2007,        if (list.isEmpty()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2008,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2010,        return list.toArray(new String [list.size()]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2041,"        return split(str, null, -1);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2069,"        return splitWorker(str, separatorChar, false);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2098,"        return splitWorker(str, separatorChars, -1, false);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2132,"        return splitWorker(str, separatorChars, max, false);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2159,"        return splitByWholeSeparatorWorker( str, separator, -1, false ) ;",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2190,"        return splitByWholeSeparatorWorker(str, separator, max, false);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2219,"        return splitByWholeSeparatorWorker(str, separator, -1, true);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2252,"        return splitByWholeSeparatorWorker(str, separator, max, true);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2272,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2273,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2276,        int len = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2278,        if (len == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2279,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2282,        if ((separator == null) || (EMPTY.equals(separator))) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2284,"            return splitWorker(str, null, max, preserveAllTokens);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2287,        int separatorLength = separator.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2289,        ArrayList<String> substrings = new ArrayList<String>();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2290,        int numberOfSubstrings = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2291,        int beg = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2292,        int end = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2293,        while (end < len) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2294,"            end = str.indexOf(separator, beg);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2296,            if (end > -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2297,                if (end > beg) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2298,                    numberOfSubstrings += 1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2300,                    if (numberOfSubstrings == max) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2301,                        end = len;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2302,                        substrings.add(str.substring(beg));,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2306,"                        substrings.add(str.substring(beg, end));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2311,                        beg = end + separatorLength;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2315,                    if (preserveAllTokens) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2316,                        numberOfSubstrings += 1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2317,                        if (numberOfSubstrings == max) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2318,                            end = len;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2319,                            substrings.add(str.substring(beg));,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2321,                            substrings.add(EMPTY);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2324,                    beg = end + separatorLength;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2328,                substrings.add(str.substring(beg));,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2329,                end = len;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2333,        return substrings.toArray(new String[substrings.size()]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2362,"        return splitWorker(str, null, -1, true);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2398,"        return splitWorker(str, separatorChar, true);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2416,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2417,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2419,        int len = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2420,        if (len == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2421,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2423,        List<String> list = new ArrayList<String>();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2424,"        int i = 0, start = 0;",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2425,        boolean match = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2426,        boolean lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2427,        while (i < len) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2428,            if (str.charAt(i) == separatorChar) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2429,                if (match || preserveAllTokens) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2430,"                    list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2431,                    match = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2432,                    lastMatch = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2434,                start = ++i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2435,                continue;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2437,            lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2438,            match = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2439,            i++;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2441,        if (match || (preserveAllTokens && lastMatch)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2442,"            list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2444,        return list.toArray(new String[list.size()]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2481,"        return splitWorker(str, separatorChars, -1, true);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2521,"        return splitWorker(str, separatorChars, max, true);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2543,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2544,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2546,        int len = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2547,        if (len == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2548,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2550,        List<String> list = new ArrayList<String>();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2551,        int sizePlus1 = 1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2552,"        int i = 0, start = 0;",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2553,        boolean match = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2554,        boolean lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2555,        if (separatorChars == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2557,            while (i < len) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2558,                if (Character.isWhitespace(str.charAt(i))) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2559,                    if (match || preserveAllTokens) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2560,                        lastMatch = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2561,                        if (sizePlus1++ == max) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2562,                            i = len;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2563,                            lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2565,"                        list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2566,                        match = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2568,                    start = ++i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2569,                    continue;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2571,                lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2572,                match = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2573,                i++;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2575,        } else if (separatorChars.length() == 1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2577,            char sep = separatorChars.charAt(0);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2578,            while (i < len) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2579,                if (str.charAt(i) == sep) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2580,                    if (match || preserveAllTokens) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2581,                        lastMatch = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2582,                        if (sizePlus1++ == max) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2583,                            i = len;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2584,                            lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2586,"                        list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2587,                        match = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2589,                    start = ++i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2590,                    continue;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2592,                lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2593,                match = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2594,                i++;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2596,        } else {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2598,            while (i < len) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2599,                if (separatorChars.indexOf(str.charAt(i)) >= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2600,                    if (match || preserveAllTokens) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2601,                        lastMatch = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2602,                        if (sizePlus1++ == max) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2603,                            i = len;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2604,                            lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2606,"                        list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2607,                        match = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2609,                    start = ++i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2610,                    continue;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2612,                lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2613,                match = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2614,                i++;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2617,        if (match || (preserveAllTokens && lastMatch)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2618,"            list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2620,        return list.toArray(new String[list.size()]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2643,"        return splitByCharacterType(str, false);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2671,"        return splitByCharacterType(str, true);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2689,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2690,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2692,        if (str.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2693,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2695,        char[] c = str.toCharArray();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2696,        List<String> list = new ArrayList<String>();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2697,        int tokenStart = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2698,        int currentType = Character.getType(c[tokenStart]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2699,        for (int pos = tokenStart + 1; pos < c.length; pos++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2700,            int type = Character.getType(c[pos]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2701,            if (type == currentType) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2702,                continue;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2704,            if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2705,                int newTokenStart = pos - 1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2706,                if (newTokenStart != tokenStart) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2707,"                    list.add(new String(c, tokenStart, newTokenStart - tokenStart));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2708,                    tokenStart = newTokenStart;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2710,            } else {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2711,"                list.add(new String(c, tokenStart, pos - tokenStart));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2712,                tokenStart = pos;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2714,            currentType = type;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2716,"        list.add(new String(c, tokenStart, c.length - tokenStart));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2717,        return list.toArray(new String[list.size()]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2743,"        return join(array, null);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2769,        if (array == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2770,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2773,"        return join(array, separator, 0, array.length);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2803,        if (array == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2804,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2806,        int bufSize = (endIndex - startIndex);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2807,        if (bufSize <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2808,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2811,        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2812,        StringBuilder buf = new StringBuilder(bufSize);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2814,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2815,            if (i > startIndex) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2816,                buf.append(separator);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2818,            if (array[i] != null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2819,                buf.append(array[i]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2822,        return buf.toString();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2850,        if (array == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2851,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2853,"        return join(array, separator, 0, array.length);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2884,        if (array == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2885,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2887,        if (separator == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2888,            separator = EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2893,        int bufSize = (endIndex - startIndex);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2894,        if (bufSize <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2895,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2898,        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()),0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2901,        StringBuilder buf = new StringBuilder(bufSize);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2903,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2904,            if (i > startIndex) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2905,                buf.append(separator);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2907,            if (array[i] != null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2908,                buf.append(array[i]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2911,        return buf.toString();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2931,        if (iterator == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2932,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2934,        if (!iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2935,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2937,        Object first = iterator.next();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2938,        if (!iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2939,            return ObjectUtils.toString(first);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2943,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2944,        if (first != null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2945,            buf.append(first);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2948,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2949,            buf.append(separator);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2950,            Object obj = iterator.next();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2951,            if (obj != null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2952,                buf.append(obj);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2954,        },0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2956,        return buf.toString();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2975,        if (iterator == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2976,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2978,        if (!iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2979,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2981,        Object first = iterator.next();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2982,        if (!iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2983,            return ObjectUtils.toString(first);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2987,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2988,        if (first != null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2989,            buf.append(first);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2992,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2993,            if (separator != null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2994,                buf.append(separator);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2996,            Object obj = iterator.next();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2997,            if (obj != null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,2998,                buf.append(obj);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3000,        },0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3001,        return buf.toString();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3019,        if (collection == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3020,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3022,"        return join(collection.iterator(), separator);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3040,        if (collection == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3041,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3043,"        return join(collection.iterator(), separator);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3063,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3064,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3066,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3067,        char[] chs = new char[sz];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3068,        int count = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3069,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3070,            if (!Character.isWhitespace(str.charAt(i))) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3071,                chs[count++] = str.charAt(i);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3074,        if (count == sz) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3075,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3077,"        return new String(chs, 0, count);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3107,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3108,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3110,        if (str.startsWith(remove)){,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3111,            return str.substring(remove.length());,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3113,        return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3142,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3143,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3145,"        if (startsWithIgnoreCase(str, remove)) {",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3146,            return str.substring(remove.length());,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3148,        return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3176,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3177,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3179,        if (str.endsWith(remove)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3180,"            return str.substring(0, str.length() - remove.length());",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3182,        return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3210,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3211,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3213,"        if (endsWithIgnoreCase(str, remove)) {",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3214,"            return str.substring(0, str.length() - remove.length());",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3216,        return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3243,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3244,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3246,"        return replace(str, remove, EMPTY, -1);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3269,        if (isEmpty(str) || str.indexOf(remove) == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3270,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3272,        char[] chars = str.toCharArray();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3273,        int pos = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3274,        for (int i = 0; i < chars.length; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3275,            if (chars[i] != remove) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3276,                chars[pos++] = chars[i];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3279,"        return new String(chars, 0, pos);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3308,"        return replace(text, searchString, replacement, 1);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3335,"        return replace(text, searchString, replacement, -1);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3367,        if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3368,            return text;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3370,        int start = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3371,"        int end = text.indexOf(searchString, start);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3372,        if (end == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3373,            return text;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3375,        int replLength = searchString.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3376,        int increase = replacement.length() - replLength;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3377,        increase = (increase < 0 ? 0 : increase);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3378,        increase *= (max < 0 ? 16 : (max > 64 ? 64 : max));,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3379,        StringBuilder buf = new StringBuilder(text.length() + increase);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3380,        while (end != -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3381,"            buf.append(text.substring(start, end)).append(replacement);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3382,            start = end + replLength;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3383,            if (--max == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3384,                break;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3386,"            end = text.indexOf(searchString, start);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3388,        buf.append(text.substring(start));,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3389,        return buf.toString();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3432,"        return replaceEach(text, searchList, replacementList, false, 0);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3483,        int timeToLive = searchList == null ? 0 : searchList.length;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3484,"        return replaceEach(text, searchList, replacementList, true, timeToLive);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3542,        if (text == null || text.length() == 0 || searchList == null || ,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3545,            return text;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3549,        if (timeToLive < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3550,"            throw new IllegalStateException(""TimeToLive of "" + timeToLive + "" is less than 0: "" + text);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3553,        int searchLength = searchList.length;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3554,        int replacementLength = replacementList.length;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3557,        if (searchLength != replacementLength) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3558,"            throw new IllegalArgumentException(""Search and Replace array lengths don't match: """,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3565,        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3568,        int textIndex = -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3569,        int replaceIndex = -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3570,        int tempIndex = -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3574,        for (int i = 0; i < searchLength; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3575,            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || ,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3578,                continue;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3580,            tempIndex = text.indexOf(searchList[i]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3583,            if (tempIndex == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3584,                noMoreMatchesForReplIndex[i] = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3586,                if (textIndex == -1 || tempIndex < textIndex) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3587,                    textIndex = tempIndex;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3588,                    replaceIndex = i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3595,        if (textIndex == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3596,            return text;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3599,        int start = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3602,        int increase = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3605,        for (int i = 0; i < searchList.length; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3606,            int greater = replacementList[i].length() - searchList[i].length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3607,            if (greater > 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3608,                increase += 3 * greater; // assume 3 matches,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3612,"        increase = Math.min(increase, text.length() / 5);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3614,        StringBuilder buf = new StringBuilder(text.length() + increase);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3616,        while (textIndex != -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3618,            for (int i = start; i < textIndex; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3619,                buf.append(text.charAt(i));,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3621,            buf.append(replacementList[replaceIndex]);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3623,            start = textIndex + searchList[replaceIndex].length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3625,            textIndex = -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3626,            replaceIndex = -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3627,            tempIndex = -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3630,            for (int i = 0; i < searchLength; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3631,                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || ,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3634,                    continue;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3636,"                tempIndex = text.indexOf(searchList[i], start);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3639,                if (tempIndex == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3640,                    noMoreMatchesForReplIndex[i] = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3642,                    if (textIndex == -1 || tempIndex < textIndex) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3643,                        textIndex = tempIndex;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3644,                        replaceIndex = i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3651,        int textLength = text.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3652,        for (int i = start; i < textLength; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3653,            buf.append(text.charAt(i));,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3655,        String result = buf.toString();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3656,        if (!repeat) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3657,            return result;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3660,"        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3686,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3687,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3689,"        return str.replace(searchChar, replaceChar);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3729,        if (isEmpty(str) || isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3730,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3732,        if (replaceChars == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3733,            replaceChars = EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3735,        boolean modified = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3736,        int replaceCharsLength = replaceChars.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3737,        int strLength = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3738,        StringBuilder buf = new StringBuilder(strLength);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3739,        for (int i = 0; i < strLength; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3740,            char ch = str.charAt(i);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3741,            int index = searchChars.indexOf(ch);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3742,            if (index >= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3743,                modified = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3744,                if (index < replaceCharsLength) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3745,                    buf.append(replaceChars.charAt(index));,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3748,                buf.append(ch);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3751,        if (modified) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3752,            return buf.toString();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3754,        return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3789,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3790,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3792,        if (overlay == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3793,            overlay = EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3795,        int len = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3796,        if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3797,            start = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3799,        if (start > len) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3800,            start = len;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3802,        if (end < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3803,            end = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3805,        if (end > len) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3806,            end = len;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3808,        if (start > end) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3809,            int temp = start;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3810,            start = end;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3811,            end = temp;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3813,        return new StringBuilder(len + start - end + overlay.length() + 1),0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3848,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3849,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3852,        if (str.length() == 1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3853,            char ch = str.charAt(0);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3854,            if (ch == CharUtils.CR || ch == CharUtils.LF) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3855,                return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3857,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3860,        int lastIdx = str.length() - 1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3861,        char last = str.charAt(lastIdx);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3863,        if (last == CharUtils.LF) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3864,            if (str.charAt(lastIdx - 1) == CharUtils.CR) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3865,                lastIdx--;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3867,        } else if (last != CharUtils.CR) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3868,            lastIdx++;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3870,"        return str.substring(0, lastIdx);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3900,        if (isEmpty(str) || separator == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3901,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3903,        if (str.endsWith(separator)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3904,"            return str.substring(0, str.length() - separator.length());",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3906,        return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3935,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3936,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3938,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3939,        if (strLen < 2) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3940,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3942,        int lastIdx = strLen - 1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3943,"        String ret = str.substring(0, lastIdx);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3944,        char last = str.charAt(lastIdx);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3945,        if (last == CharUtils.LF) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3946,            if (ret.charAt(lastIdx - 1) == CharUtils.CR) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3947,"                return ret.substring(0, lastIdx - 1);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3950,        return ret;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3979,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3980,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3982,        if (repeat <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3983,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3985,        int inputLength = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3986,        if (repeat == 1 || inputLength == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3987,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3989,        if (inputLength == 1 && repeat <= PAD_LIMIT) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3990,"            return padding(repeat, str.charAt(0));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3993,        int outputLength = inputLength * repeat;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3994,        switch (inputLength) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3996,                char ch = str.charAt(0);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3997,                char[] output1 = new char[outputLength];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3998,                for (int i = repeat - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,3999,                    output1[i] = ch;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4001,                return new String(output1);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4003,                char ch0 = str.charAt(0);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4004,                char ch1 = str.charAt(1);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4005,                char[] output2 = new char[outputLength];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4006,"                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4007,                    output2[i] = ch0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4008,                    output2[i + 1] = ch1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4010,                return new String(output2);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4012,                StringBuilder buf = new StringBuilder(outputLength);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4013,                for (int i = 0; i < repeat; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4014,                    buf.append(str);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4016,                return buf.toString();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4040,        if(str == null || separator == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4041,"            return repeat(str, repeat);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4044,"            String result = repeat(str + separator, repeat);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4045,"            return removeEnd(result, separator);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4073,        if (repeat < 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4074,"            throw new IndexOutOfBoundsException(""Cannot pad a negative amount: "" + repeat);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4076,        final char[] buf = new char[repeat];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4077,        for (int i = 0; i < buf.length; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4078,            buf[i] = padChar;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4080,        return new String(buf);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4103,"        return rightPad(str, size, ' ');",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4128,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4129,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4131,        int pads = size - str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4132,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4133,            return str; // returns original String when possible,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4135,        if (pads > PAD_LIMIT) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4136,"            return rightPad(str, size, String.valueOf(padChar));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4138,"        return str.concat(padding(pads, padChar));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4165,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4166,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4168,        if (isEmpty(padStr)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4169,"            padStr = "" "";",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4171,        int padLen = padStr.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4172,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4173,        int pads = size - strLen;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4174,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4175,            return str; // returns original String when possible,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4177,        if (padLen == 1 && pads <= PAD_LIMIT) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4178,"            return rightPad(str, size, padStr.charAt(0));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4181,        if (pads == padLen) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4182,            return str.concat(padStr);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4183,        } else if (pads < padLen) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4184,"            return str.concat(padStr.substring(0, pads));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4186,            char[] padding = new char[pads];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4187,            char[] padChars = padStr.toCharArray();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4188,            for (int i = 0; i < pads; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4189,                padding[i] = padChars[i % padLen];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4191,            return str.concat(new String(padding));,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4215,"        return leftPad(str, size, ' ');",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4240,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4241,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4243,        int pads = size - str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4244,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4245,            return str; // returns original String when possible,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4247,        if (pads > PAD_LIMIT) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4248,"            return leftPad(str, size, String.valueOf(padChar));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4250,"        return padding(pads, padChar).concat(str);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4277,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4278,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4280,        if (isEmpty(padStr)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4281,"            padStr = "" "";",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4283,        int padLen = padStr.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4284,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4285,        int pads = size - strLen;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4286,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4287,            return str; // returns original String when possible,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4289,        if (padLen == 1 && pads <= PAD_LIMIT) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4290,"            return leftPad(str, size, padStr.charAt(0));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4293,        if (pads == padLen) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4294,            return padStr.concat(str);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4295,        } else if (pads < padLen) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4296,"            return padStr.substring(0, pads).concat(str);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4298,            char[] padding = new char[pads];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4299,            char[] padChars = padStr.toCharArray();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4300,            for (int i = 0; i < pads; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4301,                padding[i] = padChars[i % padLen];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4303,            return new String(padding).concat(str);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4316,        return str == null ? 0 : str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4345,"        return center(str, size, ' ');",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4373,        if (str == null || size <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4374,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4376,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4377,        int pads = size - strLen;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4378,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4379,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4381,"        str = leftPad(str, strLen + pads / 2, padChar);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4382,"        str = rightPad(str, size, padChar);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4383,        return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4413,        if (str == null || size <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4414,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4416,        if (isEmpty(padStr)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4417,"            padStr = "" "";",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4419,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4420,        int pads = size - strLen;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4421,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4422,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4424,"        str = leftPad(str, strLen + pads / 2, padStr);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4425,"        str = rightPad(str, size, padStr);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4426,        return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4451,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4452,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4454,        return str.toUpperCase();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4474,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4475,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4477,        return str.toUpperCase(locale);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4500,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4501,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4503,        return str.toLowerCase();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4523,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4524,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4526,        return str.toLowerCase(locale);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4551,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4552,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4554,        return new StringBuilder(strLen),0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4582,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4583,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4585,        return new StringBuilder(strLen),0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4620,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4621,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4623,        StringBuilder buffer = new StringBuilder(strLen);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4625,        char ch = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4626,        for (int i = 0; i < strLen; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4627,            ch = str.charAt(i);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4628,            if (Character.isUpperCase(ch)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4629,                ch = Character.toLowerCase(ch);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4630,            } else if (Character.isTitleCase(ch)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4631,                ch = Character.toLowerCase(ch);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4632,            } else if (Character.isLowerCase(ch)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4633,                ch = Character.toUpperCase(ch);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4635,            buffer.append(ch);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4637,        return buffer.toString();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4662,        if (isEmpty(str) || isEmpty(sub)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4663,            return 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4665,        int count = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4666,        int idx = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4667,"        while ((idx = str.indexOf(sub, idx)) != -1) {",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4668,            count++;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4669,            idx += sub.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4671,        return count;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4695,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4696,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4698,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4699,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4700,            if (Character.isLetter(str.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4701,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4704,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4729,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4730,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4732,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4733,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4734,            if ((Character.isLetter(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4735,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4738,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4762,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4763,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4765,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4766,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4767,            if (Character.isLetterOrDigit(str.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4768,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4771,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4796,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4797,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4799,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4800,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4801,            if ((Character.isLetterOrDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4802,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4805,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4834,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4835,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4837,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4838,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4839,            if (CharUtils.isAsciiPrintable(str.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4840,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4843,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4868,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4869,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4871,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4872,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4873,            if (Character.isDigit(str.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4874,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4877,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4904,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4905,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4907,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4908,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4909,            if ((Character.isDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4910,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4913,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4936,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4937,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4939,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4940,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4941,            if ((Character.isWhitespace(str.charAt(i)) == false)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4942,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4945,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4966,        if (str == null || isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4967,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4969,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4970,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4971,            if (Character.isLowerCase(str.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4972,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4975,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4996,        if (str == null || isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4997,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,4999,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5000,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5001,            if (Character.isUpperCase(str.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5002,                return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5005,        return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5027,        return str == null ? EMPTY : str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5048,        return str == null ? defaultStr : str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5069,        return StringUtils.isEmpty(str) ? defaultStr : str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5089,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5090,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5092,        return new StringBuilder(str).reverse().toString();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5115,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5116,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5120,"        String[] strs = split(str, separatorChar);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5121,        ArrayUtils.reverse(strs);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5122,"        return join(strs, separatorChar);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5160,"        return abbreviate(str, 0, maxWidth);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5199,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5200,            return null;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5202,        if (maxWidth < 4) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5203,"            throw new IllegalArgumentException(""Minimum abbreviation width is 4"");",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5205,        if (str.length() <= maxWidth) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5206,            return str;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5208,        if (offset > str.length()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5209,            offset = str.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5211,        if ((str.length() - offset) < (maxWidth - 3)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5212,            offset = str.length() - (maxWidth - 3);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5214,        if (offset <= 4) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5215,"            return str.substring(0, maxWidth - 3) + ""..."";",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5217,        if (maxWidth < 7) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5218,"            throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5220,        if ((offset + (maxWidth - 3)) < str.length()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5221,"            return ""..."" + abbreviate(str.substring(offset), maxWidth - 3);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5223,"        return ""..."" + str.substring(str.length() - (maxWidth - 3));",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5254,        if (str1 == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5255,            return str2;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5257,        if (str2 == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5258,            return str1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5260,"        int at = indexOfDifference(str1, str2);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5261,        if (at == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5262,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5264,        return str2.substring(at);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5291,        if (str1 == str2) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5292,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5294,        if (str1 == null || str2 == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5295,            return 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5298,        for (i = 0; i < str1.length() && i < str2.length(); ++i) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5299,            if (str1.charAt(i) != str2.charAt(i)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5300,                break;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5303,        if (i < str2.length() || i < str1.length()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5304,            return i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5306,        return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5341,        if (strs == null || strs.length <= 1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5342,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5344,        boolean anyStringNull = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5345,        boolean allStringsNull = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5346,        int arrayLen = strs.length;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5347,        int shortestStrLen = Integer.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5348,        int longestStrLen = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5353,        for (int i = 0; i < arrayLen; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5354,            if (strs[i] == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5355,                anyStringNull = true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5356,                shortestStrLen = 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5358,                allStringsNull = false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5359,"                shortestStrLen = Math.min(strs[i].length(), shortestStrLen);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5360,"                longestStrLen = Math.max(strs[i].length(), longestStrLen);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5365,        if (allStringsNull || (longestStrLen == 0 && !anyStringNull)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5366,            return -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5370,        if (shortestStrLen == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5371,            return 0;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5375,        int firstDiff = -1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5376,        for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5377,            char comparisonChar = strs[0].charAt(stringPos);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5378,            for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5379,                if (strs[arrayPos].charAt(stringPos) != comparisonChar) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5380,                    firstDiff = stringPos;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5381,                    break;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5384,            if (firstDiff != -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5385,                break;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5389,        if (firstDiff == -1 && shortestStrLen != longestStrLen) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5393,            return shortestStrLen;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5395,        return firstDiff;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5432,        if (strs == null || strs.length == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5433,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5435,        int smallestIndexOfDiff = indexOfDifference(strs);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5436,        if (smallestIndexOfDiff == -1) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5438,            if (strs[0] == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5439,                return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5441,            return strs[0];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5442,        } else if (smallestIndexOfDiff == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5444,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5447,"            return strs[0].substring(0, smallestIndexOfDiff);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5488,        if (s == null || t == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5489,"            throw new IllegalArgumentException(""Strings must not be null"");",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5509,        int n = s.length(); // length of s,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5510,        int m = t.length(); // length of t,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5512,        if (n == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5513,            return m;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5514,        } else if (m == 0) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5515,            return n;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5518,        if (n > m) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5520,            String tmp = s;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5521,            s = t;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5522,            t = tmp;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5523,            n = m;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5524,            m = t.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5527,"        int p[] = new int[n+1]; //'previous' cost array, horizontally",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5528,"        int d[] = new int[n+1]; // cost array, horizontally",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5539,        for (i = 0; i<=n; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5540,            p[i] = i;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5543,        for (j = 1; j<=m; j++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5544,            t_j = t.charAt(j-1);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5545,            d[0] = j;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5547,            for (i=1; i<=n; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5548,                cost = s.charAt(i-1)==t_j ? 0 : 1;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5550,"                d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5554,            _d = p;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5555,            p = d;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5556,            d = _d;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5561,        return p[n];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5610,"        return startsWith(str, prefix, false);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5635,"        return startsWith(str, prefix, true);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5650,        if (str == null || prefix == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5651,            return (str == null && prefix == null);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5653,        if (prefix.length() > str.length()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5654,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5656,"        return str.regionMatches(ignoreCase, 0, prefix, 0, prefix.length());",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5678,        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5679,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5681,        for (int i = 0; i < searchStrings.length; i++) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5682,            String searchString = searchStrings[i];,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5683,"            if (StringUtils.startsWith(string, searchString)) {",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5684,                return true;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5687,        return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5716,"        return endsWith(str, suffix, false);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5742,"        return endsWith(str, suffix, true);",0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5757,        if (str == null || suffix == null) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5758,            return (str == null && suffix == null);,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5760,        if (suffix.length() > str.length()) {,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5761,            return false;,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5763,        int strOffset = str.length() - suffix.length();,0.0,0,-1,0
org/apache/commons/lang/StringUtils,40,5764,"        return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());",0.0,0,-1,0
