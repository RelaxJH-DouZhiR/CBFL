project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/apache/commons/lang3/StringUtils,14,782,        if (cs1 == cs2) {,0.0625,0,1,0
org/apache/commons/lang3/StringUtils,14,783,            return true;,0.0625,0,1,0
org/apache/commons/lang3/StringUtils,14,785,        if (cs1 == null || cs2 == null) {,0.0625,0,1,0
org/apache/commons/lang3/StringUtils,14,788,            return cs1.equals(cs2);,0.0625,1,0,1
org/apache/commons/lang3/StringUtils,14,148,"    private static final Pattern WHITESPACE_BLOCK = Pattern.compile(""\\s+"");",0.00321,0,-1,0
org/apache/commons/lang3/StringUtils,14,707,    private static class InitStripAccents {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,711,"        private static final Pattern sunPattern = Pattern.compile(""\\p{InCombiningDiacriticalMarks}+"");//$NON-NLS-1$",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,716,        private static final Pattern java6Pattern = sunPattern;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,720,            Object _java6NormalizerFormNFD = null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,721,            Method _java6NormalizeMethod = null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,722,            Method _sunDecomposeMethod = null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,723,            Throwable _java6Exception = null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,724,            Throwable _sunException = null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,728,                Class<?> normalizerFormClass = Thread.currentThread().getContextClassLoader(),0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,730,"                _java6NormalizerFormNFD = normalizerFormClass.getField(""NFD"").get(null);//$NON-NLS-1$",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,731,                Class<?> normalizerClass = Thread.currentThread().getContextClassLoader(),0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,733,"                _java6NormalizeMethod = normalizerClass.getMethod(""normalize"",//$NON-NLS-1$",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,747,            },0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,735,            } catch (Exception e1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,737,                _java6Exception = e1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,740,                    Class<?> normalizerClass = Thread.currentThread().getContextClassLoader(),0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,742,"                    _sunDecomposeMethod = normalizerClass.getMethod(""decompose"",//$NON-NLS-1$",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,746,                },0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,744,                } catch (Exception e2) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,745,                    _sunException = e2;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,750,            java6Exception = _java6Exception;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,751,            java6NormalizerFormNFD = _java6NormalizerFormNFD;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,752,            java6NormalizeMethod = _java6NormalizeMethod;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,753,            sunException = _sunException;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,754,            sunDecomposeMethod = _sunDecomposeMethod;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,755,        },0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,37,        super();,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,38,    },0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,56,"        return cs == null ? null : cs.subSequence(start, cs.length());",0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,70,        if (cs instanceof String) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,71,"            return ((String) cs).indexOf(searchChar, start);",0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,73,            int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,74,            if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,75,                start = 0;,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,77,            for (int i = start; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,78,                if (cs.charAt(i) == searchChar) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,79,                    return i;,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,82,            return -1;,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,95,"        return cs.toString().indexOf(searchChar.toString(), start);",0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,117,        if (cs instanceof String) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,118,"            return ((String) cs).lastIndexOf(searchChar, start);",0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,120,            int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,121,            if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,122,                return -1;,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,124,            if (start >= sz) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,125,                start = sz - 1;,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,127,            for (int i = start; i >= 0; --i) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,128,                if (cs.charAt(i) == searchChar) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,129,                    return i;,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,132,            return -1;,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,145,"        return cs.toString().lastIndexOf(searchChar.toString(), start);",0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,164,        if (cs instanceof String) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,165,            return ((String) cs).toCharArray();,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,167,            int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,168,            char[] array = new char[cs.length()];,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,169,            for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,170,                array[i] = cs.charAt(i);,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,172,            return array;,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,189,        if (cs instanceof String && substring instanceof String) {,0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,190,"            return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);",0.0,0,-1,0
org/apache/commons/lang3/CharSequenceUtils,14,193,"            return cs.toString().regionMatches(ignoreCase, thisStart, substring.toString(), start, length);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,159,        super();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,160,    },0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,184,        return cs == null || cs.length() == 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,203,        return !StringUtils.isEmpty(cs);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,224,        if (cs == null || (strLen = cs.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,225,            return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,227,        for (int i = 0; i < strLen; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,228,            if (Character.isWhitespace(cs.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,229,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,232,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,253,        return !StringUtils.isBlank(cs);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,282,        return str == null ? null : str.trim();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,308,        String ts = trim(str);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,309,        return isEmpty(ts) ? null : ts;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,334,        return str == null ? EMPTY : str.trim();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,362,"        return strip(str, null);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,389,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,390,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,392,"        str = strip(str, null);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,393,        return str.length() == 0 ? null : str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,419,"        return str == null ? EMPTY : strip(str, null);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,449,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,450,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,452,"        str = stripStart(str, stripChars);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,453,"        return stripEnd(str, stripChars);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,482,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,483,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,485,        int start = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,486,        if (stripChars == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,487,            while (start != strLen && Character.isWhitespace(str.charAt(start))) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,488,                start++;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,490,        } else if (stripChars.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,491,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,493,            while (start != strLen && stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,494,                start++;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,497,        return str.substring(start);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,527,        if (str == null || (end = str.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,528,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,531,        if (stripChars == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,532,            while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,533,                end--;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,535,        } else if (stripChars.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,536,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,538,            while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,539,                end--;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,542,"        return str.substring(0, end);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,567,"        return stripAll(strs, null);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,597,        if (strs == null || (strsLen = strs.length) == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,598,            return strs;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,600,        String[] newArr = new String[strsLen];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,601,        for (int i = 0; i < strsLen; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,602,"            newArr[i] = strip(strs[i], stripChars);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,604,        return newArr;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,629,        if(input == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,630,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,633,            String result = null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,634,            if (InitStripAccents.java6NormalizeMethod != null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,635,                result = removeAccentsJava6(input);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,636,            } else if (InitStripAccents.sunDecomposeMethod != null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,637,                result = removeAccentsSUN(input);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,639,                throw new UnsupportedOperationException(,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,645,            return result;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,646,        } catch(IllegalArgumentException iae) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,647,"            throw new RuntimeException(""IllegalArgumentException occurred"", iae);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,648,        } catch(IllegalAccessException iae) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,649,"            throw new RuntimeException(""IllegalAccessException occurred"", iae);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,650,        } catch(InvocationTargetException ite) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,651,"            throw new RuntimeException(""InvocationTargetException occurred"", ite);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,652,        } catch(SecurityException se) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,653,"            throw new RuntimeException(""SecurityException occurred"", se);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,673,        if (InitStripAccents.java6NormalizeMethod == null || InitStripAccents.java6NormalizerFormNFD == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,674,"            throw new IllegalStateException(""java.text.Normalizer is not available"", InitStripAccents.java6Exception);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,677,"        result = (String) InitStripAccents.java6NormalizeMethod.invoke(null, new Object[] {text, InitStripAccents.java6NormalizerFormNFD});",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,678,"        result = InitStripAccents.java6Pattern.matcher(result).replaceAll("""");//$NON-NLS-1$",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,679,        return result;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,697,        if (InitStripAccents.sunDecomposeMethod == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,698,"            throw new IllegalStateException(""sun.text.Normalizer is not available"", InitStripAccents.sunException);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,701,"        result = (String) InitStripAccents.sunDecomposeMethod.invoke(null, new Object[] {text, Boolean.FALSE, Integer.valueOf(0)});",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,702,"        result = InitStripAccents.sunPattern.matcher(result).replaceAll("""");//$NON-NLS-1$",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,703,        return result;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,786,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,813,        if (str1 == null || str2 == null) {,0.0,1,-1,1
org/apache/commons/lang3/StringUtils,14,814,            return str1 == str2;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,816,"            return CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, Math.max(str1.length(), str2.length()));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,843,        if (isEmpty(seq)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,844,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,846,"        return CharSequenceUtils.indexOf(seq, searchChar, 0);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,876,        if (isEmpty(seq)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,877,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,879,"        return CharSequenceUtils.indexOf(seq, searchChar, startPos);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,907,        if (seq == null || searchSeq == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,908,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,910,"        return CharSequenceUtils.indexOf(seq, searchSeq, 0);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,947,        if (seq == null || searchSeq == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,948,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,950,"        return CharSequenceUtils.indexOf(seq, searchSeq, startPos);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,988,"        return ordinalIndexOf(str, searchStr, ordinal, false);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1006,        if (str == null || searchStr == null || ordinal <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1007,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1009,        if (searchStr.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1010,            return lastIndex ? str.length() : 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1012,        int found = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1013,        int index = lastIndex ? str.length() : INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1015,            if (lastIndex) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1016,"                index = CharSequenceUtils.lastIndexOf(str, searchStr, index - 1);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1018,"                index = CharSequenceUtils.indexOf(str, searchStr, index + 1);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1020,            if (index < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1021,                return index;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1023,            found++;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1024,        } while (found < ordinal);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1025,        return index;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1054,"        return indexOfIgnoreCase(str, searchStr, 0);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1090,        if (str == null || searchStr == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1091,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1093,        if (startPos < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1094,            startPos = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1096,        int endLimit = str.length() - searchStr.length() + 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1097,        if (startPos > endLimit) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1098,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1100,        if (searchStr.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1101,            return startPos;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1103,        for (int i = startPos; i < endLimit; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1104,"            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1105,                return i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1108,        return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1134,        if (isEmpty(seq)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1135,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1137,"        return CharSequenceUtils.lastIndexOf(seq, searchChar, seq.length());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1169,        if (isEmpty(seq)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1170,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1172,"        return CharSequenceUtils.lastIndexOf(seq, searchChar, startPos);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1199,        if (seq == null || searchSeq == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1200,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1202,"        return CharSequenceUtils.lastIndexOf(seq, searchSeq, seq.length());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1240,"        return ordinalIndexOf(str, searchStr, ordinal, true);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1273,        if (seq == null || searchSeq == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1274,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1276,"        return CharSequenceUtils.lastIndexOf(seq, searchSeq, startPos);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1303,        if (str == null || searchStr == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1304,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1306,"        return lastIndexOfIgnoreCase(str, searchStr, str.length());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1339,        if (str == null || searchStr == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1340,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1342,        if (startPos > str.length() - searchStr.length()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1343,            startPos = str.length() - searchStr.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1345,        if (startPos < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1346,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1348,        if (searchStr.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1349,            return startPos;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1352,        for (int i = startPos; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1353,"            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, searchStr.length())) {",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1354,                return i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1357,        return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1383,        if (isEmpty(seq)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1384,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1386,"        return CharSequenceUtils.indexOf(seq, searchChar, 0) >= 0;",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1412,        if (seq == null || searchSeq == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1413,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1415,"        return CharSequenceUtils.indexOf(seq, searchSeq, 0) >= 0;",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1443,        if (str == null || searchStr == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1444,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1446,        int len = searchStr.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1447,        int max = str.length() - len;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1448,        for (int i = 0; i <= max; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1449,"            if (CharSequenceUtils.regionMatches(str, true, i, searchStr, 0, len)) {",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1450,                return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1453,        return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1466,        if (isEmpty(seq)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1467,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1469,        int strLen = seq.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1470,        for (int i = 0; i < strLen; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1471,            if (Character.isWhitespace(seq.charAt(i))) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1472,                return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1475,        return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1504,        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1505,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1507,        int csLen = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1508,        int csLast = csLen - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1509,        int searchLen = searchChars.length;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1510,        int searchLast = searchLen - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1511,        for (int i = 0; i < csLen; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1512,            char ch = cs.charAt(i);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1513,            for (int j = 0; j < searchLen; j++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1514,                if (searchChars[j] == ch) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1515,                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1517,                        if (searchChars[j + 1] == cs.charAt(i + 1)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1518,                            return i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1521,                        return i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1526,        return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1553,        if (isEmpty(cs) || isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1554,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1556,"        return indexOfAny(cs, searchChars.toCharArray());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1586,        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1587,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1589,        int csLength = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1590,        int searchLength = searchChars.length;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1591,        int csLast = csLength - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1592,        int searchLast = searchLength - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1593,        for (int i = 0; i < csLength; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1594,            char ch = cs.charAt(i);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1595,            for (int j = 0; j < searchLength; j++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1596,                if (searchChars[j] == ch) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1597,                    if (Character.isHighSurrogate(ch)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1598,                        if (j == searchLast) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1600,                            return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1602,                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1603,                            return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1607,                        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1612,        return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1644,        if (searchChars == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1645,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1647,"        return containsAny(cs, CharSequenceUtils.toCharArray(searchChars));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1677,        if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1678,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1680,        int csLen = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1681,        int csLast = csLen - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1682,        int searchLen = searchChars.length;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1683,        int searchLast = searchLen - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1685,        for (int i = 0; i < csLen; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1686,            char ch = cs.charAt(i);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1687,            for (int j = 0; j < searchLen; j++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1688,                if (searchChars[j] == ch) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1689,                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1690,                        if (searchChars[j + 1] == cs.charAt(i + 1)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1691,                            continue outer;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1698,            return i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1700,        return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1727,        if (isEmpty(seq) || isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1728,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1730,        int strLen = seq.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1731,        for (int i = 0; i < strLen; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1732,            char ch = seq.charAt(i);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1733,"            boolean chFound = CharSequenceUtils.indexOf(searchChars, ch, 0) >= 0;",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1734,            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1735,                char ch2 = seq.charAt(i + 1);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1736,"                if (chFound && CharSequenceUtils.indexOf(searchChars, ch2, 0) < 0) {",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1737,                    return i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1739,            } else {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1740,                if (!chFound) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1741,                    return i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1745,        return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1774,        if (valid == null || cs == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1775,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1777,        if (cs.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1778,            return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1780,        if (valid.length == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1781,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1783,"        return indexOfAnyBut(cs, valid) == INDEX_NOT_FOUND;",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1810,        if (cs == null || validChars == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1811,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1813,"        return containsOnly(cs, validChars.toCharArray());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1842,        if (cs == null || searchChars == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1843,            return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1845,        int csLen = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1846,        int csLast = csLen - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1847,        int searchLen = searchChars.length;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1848,        int searchLast = searchLen - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1849,        for (int i = 0; i < csLen; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1850,            char ch = cs.charAt(i);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1851,            for (int j = 0; j < searchLen; j++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1852,                if (searchChars[j] == ch) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1853,                    if (Character.isHighSurrogate(ch)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1854,                        if (j == searchLast) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1856,                            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1858,                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1859,                            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1863,                        return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1868,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1895,        if (cs == null || invalidChars == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1896,            return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1898,"        return containsNone(cs, invalidChars.toCharArray());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1931,        if (str == null || searchStrs == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1932,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1934,        int sz = searchStrs.length;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1937,        int ret = Integer.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1939,        int tmp = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1940,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1941,            CharSequence search = searchStrs[i];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1942,            if (search == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1943,                continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1945,"            tmp = CharSequenceUtils.indexOf(str, search, 0);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1946,            if (tmp == INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1947,                continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1950,            if (tmp < ret) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1951,                ret = tmp;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1955,        return ret == Integer.MAX_VALUE ? INDEX_NOT_FOUND : ret;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1985,        if (str == null || searchStrs == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1986,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1988,        int sz = searchStrs.length;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1989,        int ret = INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1990,        int tmp = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1991,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1992,            CharSequence search = searchStrs[i];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1993,            if (search == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1994,                continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1996,"            tmp = CharSequenceUtils.lastIndexOf(str, search, str.length());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1997,            if (tmp > ret) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,1998,                ret = tmp;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2001,        return ret;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2031,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2032,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2036,        if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2037,            start = str.length() + start; // remember start is negative,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2040,        if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2041,            start = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2043,        if (start > str.length()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2044,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2047,        return str.substring(start);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2086,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2087,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2091,        if (end < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2092,            end = str.length() + end; // remember end is negative,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2094,        if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2095,            start = str.length() + start; // remember start is negative,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2099,        if (end > str.length()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2100,            end = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2104,        if (start > end) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2105,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2108,        if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2109,            start = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2111,        if (end < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2112,            end = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2115,"        return str.substring(start, end);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2141,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2142,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2144,        if (len < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2145,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2147,        if (str.length() <= len) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2148,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2150,"        return str.substring(0, len);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2174,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2175,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2177,        if (len < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2178,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2180,        if (str.length() <= len) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2181,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2183,        return str.substring(str.length() - len);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2212,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2213,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2215,        if (len < 0 || pos > str.length()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2216,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2218,        if (pos < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2219,            pos = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2221,        if (str.length() <= pos + len) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2222,            return str.substring(pos);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2224,"        return str.substring(pos, pos + len);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2257,        if (isEmpty(str) || separator == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2258,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2260,        if (separator.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2261,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2263,        int pos = str.indexOf(separator);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2264,        if (pos == INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2265,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2267,"        return str.substring(0, pos);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2299,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2300,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2302,        if (separator == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2303,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2305,        int pos = str.indexOf(separator);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2306,        if (pos == INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2307,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2309,        return str.substring(pos + separator.length());,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2340,        if (isEmpty(str) || isEmpty(separator)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2341,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2343,        int pos = str.lastIndexOf(separator);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2344,        if (pos == INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2345,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2347,"        return str.substring(0, pos);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2380,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2381,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2383,        if (isEmpty(separator)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2384,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2386,        int pos = str.lastIndexOf(separator);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2387,        if (pos == INDEX_NOT_FOUND || pos == str.length() - separator.length()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2388,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2390,        return str.substring(pos + separator.length());,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2417,"        return substringBetween(str, tag, tag);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2448,        if (str == null || open == null || close == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2449,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2451,        int start = str.indexOf(open);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2452,        if (start != INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2453,"            int end = str.indexOf(close, start + open.length());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2454,            if (end != INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2455,"                return str.substring(start + open.length(), end);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2458,        return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2484,        if (str == null || isEmpty(open) || isEmpty(close)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2485,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2487,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2488,        if (strLen == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2489,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2491,        int closeLen = close.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2492,        int openLen = open.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2493,        List<String> list = new ArrayList<String>();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2494,        int pos = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2495,        while (pos < strLen - closeLen) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2496,"            int start = str.indexOf(open, pos);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2497,            if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2498,                break;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2500,            start += openLen;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2501,"            int end = str.indexOf(close, start);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2502,            if (end < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2503,                break;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2505,"            list.add(str.substring(start, end));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2506,            pos = end + closeLen;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2507,        },0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2508,        if (list.isEmpty()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2509,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2511,        return list.toArray(new String [list.size()]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2542,"        return split(str, null, -1);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2570,"        return splitWorker(str, separatorChar, false);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2599,"        return splitWorker(str, separatorChars, -1, false);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2633,"        return splitWorker(str, separatorChars, max, false);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2660,"        return splitByWholeSeparatorWorker( str, separator, -1, false ) ;",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2691,"        return splitByWholeSeparatorWorker(str, separator, max, false);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2720,"        return splitByWholeSeparatorWorker(str, separator, -1, true);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2753,"        return splitByWholeSeparatorWorker(str, separator, max, true);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2772,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2773,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2776,        int len = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2778,        if (len == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2779,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2782,        if (separator == null || EMPTY.equals(separator)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2784,"            return splitWorker(str, null, max, preserveAllTokens);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2787,        int separatorLength = separator.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2789,        ArrayList<String> substrings = new ArrayList<String>();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2790,        int numberOfSubstrings = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2791,        int beg = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2792,        int end = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2793,        while (end < len) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2794,"            end = str.indexOf(separator, beg);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2796,            if (end > -1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2797,                if (end > beg) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2798,                    numberOfSubstrings += 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2800,                    if (numberOfSubstrings == max) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2801,                        end = len;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2802,                        substrings.add(str.substring(beg));,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2806,"                        substrings.add(str.substring(beg, end));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2811,                        beg = end + separatorLength;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2815,                    if (preserveAllTokens) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2816,                        numberOfSubstrings += 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2817,                        if (numberOfSubstrings == max) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2818,                            end = len;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2819,                            substrings.add(str.substring(beg));,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2821,                            substrings.add(EMPTY);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2824,                    beg = end + separatorLength;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2828,                substrings.add(str.substring(beg));,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2829,                end = len;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2833,        return substrings.toArray(new String[substrings.size()]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2862,"        return splitWorker(str, null, -1, true);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2898,"        return splitWorker(str, separatorChar, true);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2916,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2917,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2919,        int len = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2920,        if (len == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2921,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2923,        List<String> list = new ArrayList<String>();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2924,"        int i = 0, start = 0;",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2925,        boolean match = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2926,        boolean lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2927,        while (i < len) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2928,            if (str.charAt(i) == separatorChar) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2929,                if (match || preserveAllTokens) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2930,"                    list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2931,                    match = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2932,                    lastMatch = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2934,                start = ++i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2935,                continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2937,            lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2938,            match = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2939,            i++;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2941,        if (match || preserveAllTokens && lastMatch) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2942,"            list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2944,        return list.toArray(new String[list.size()]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,2981,"        return splitWorker(str, separatorChars, -1, true);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3021,"        return splitWorker(str, separatorChars, max, true);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3043,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3044,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3046,        int len = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3047,        if (len == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3048,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3050,        List<String> list = new ArrayList<String>();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3051,        int sizePlus1 = 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3052,"        int i = 0, start = 0;",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3053,        boolean match = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3054,        boolean lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3055,        if (separatorChars == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3057,            while (i < len) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3058,                if (Character.isWhitespace(str.charAt(i))) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3059,                    if (match || preserveAllTokens) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3060,                        lastMatch = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3061,                        if (sizePlus1++ == max) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3062,                            i = len;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3063,                            lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3065,"                        list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3066,                        match = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3068,                    start = ++i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3069,                    continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3071,                lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3072,                match = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3073,                i++;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3075,        } else if (separatorChars.length() == 1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3077,            char sep = separatorChars.charAt(0);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3078,            while (i < len) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3079,                if (str.charAt(i) == sep) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3080,                    if (match || preserveAllTokens) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3081,                        lastMatch = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3082,                        if (sizePlus1++ == max) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3083,                            i = len;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3084,                            lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3086,"                        list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3087,                        match = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3089,                    start = ++i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3090,                    continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3092,                lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3093,                match = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3094,                i++;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3096,        } else {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3098,            while (i < len) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3099,                if (separatorChars.indexOf(str.charAt(i)) >= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3100,                    if (match || preserveAllTokens) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3101,                        lastMatch = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3102,                        if (sizePlus1++ == max) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3103,                            i = len;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3104,                            lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3106,"                        list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3107,                        match = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3109,                    start = ++i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3110,                    continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3112,                lastMatch = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3113,                match = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3114,                i++;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3117,        if (match || preserveAllTokens && lastMatch) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3118,"            list.add(str.substring(start, i));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3120,        return list.toArray(new String[list.size()]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3143,"        return splitByCharacterType(str, false);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3171,"        return splitByCharacterType(str, true);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3189,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3190,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3192,        if (str.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3193,            return ArrayUtils.EMPTY_STRING_ARRAY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3195,        char[] c = str.toCharArray();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3196,        List<String> list = new ArrayList<String>();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3197,        int tokenStart = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3198,        int currentType = Character.getType(c[tokenStart]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3199,        for (int pos = tokenStart + 1; pos < c.length; pos++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3200,            int type = Character.getType(c[pos]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3201,            if (type == currentType) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3202,                continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3204,            if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3205,                int newTokenStart = pos - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3206,                if (newTokenStart != tokenStart) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3207,"                    list.add(new String(c, tokenStart, newTokenStart - tokenStart));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3208,                    tokenStart = newTokenStart;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3210,            } else {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3211,"                list.add(new String(c, tokenStart, pos - tokenStart));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3212,                tokenStart = pos;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3214,            currentType = type;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3216,"        list.add(new String(c, tokenStart, c.length - tokenStart));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3217,        return list.toArray(new String[list.size()]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3245,"        return join(elements, null);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3271,        if (array == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3272,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3275,"        return join(array, separator, 0, array.length);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3305,        if (array == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3306,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3308,        int noOfItems = endIndex - startIndex;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3309,        if (noOfItems <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3310,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3313,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3315,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3316,            if (i > startIndex) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3317,                buf.append(separator);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3319,            if (array[i] != null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3320,                buf.append(array[i]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3323,        return buf.toString();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3350,        if (array == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3351,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3353,"        return join(array, separator, 0, array.length);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3384,        if (array == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3385,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3387,        if (separator == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3388,            separator = EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3393,        int noOfItems = endIndex - startIndex;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3394,        if (noOfItems <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3395,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3398,        StringBuilder buf = new StringBuilder(noOfItems * 16);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3400,        for (int i = startIndex; i < endIndex; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3401,            if (i > startIndex) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3402,                buf.append(separator);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3404,            if (array[i] != null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3405,                buf.append(array[i]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3408,        return buf.toString();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3428,        if (iterator == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3429,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3431,        if (!iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3432,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3434,        Object first = iterator.next();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3435,        if (!iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3436,            return ObjectUtils.toString(first);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3440,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3441,        if (first != null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3442,            buf.append(first);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3445,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3446,            buf.append(separator);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3447,            Object obj = iterator.next();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3448,            if (obj != null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3449,                buf.append(obj);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3451,        },0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3453,        return buf.toString();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3472,        if (iterator == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3473,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3475,        if (!iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3476,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3478,        Object first = iterator.next();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3479,        if (!iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3480,            return ObjectUtils.toString(first);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3484,"        StringBuilder buf = new StringBuilder(256); // Java default is 16, probably too small",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3485,        if (first != null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3486,            buf.append(first);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3489,        while (iterator.hasNext()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3490,            if (separator != null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3491,                buf.append(separator);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3493,            Object obj = iterator.next();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3494,            if (obj != null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3495,                buf.append(obj);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3497,        },0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3498,        return buf.toString();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3516,        if (iterable == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3517,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3519,"        return join(iterable.iterator(), separator);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3537,        if (iterable == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3538,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3540,"        return join(iterable.iterator(), separator);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3560,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3561,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3563,        int sz = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3564,        char[] chs = new char[sz];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3565,        int count = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3566,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3567,            if (!Character.isWhitespace(str.charAt(i))) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3568,                chs[count++] = str.charAt(i);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3571,        if (count == sz) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3572,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3574,"        return new String(chs, 0, count);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3604,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3605,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3607,        if (str.startsWith(remove)){,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3608,            return str.substring(remove.length());,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3610,        return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3639,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3640,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3642,"        if (startsWithIgnoreCase(str, remove)) {",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3643,            return str.substring(remove.length());,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3645,        return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3673,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3674,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3676,        if (str.endsWith(remove)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3677,"            return str.substring(0, str.length() - remove.length());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3679,        return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3709,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3710,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3712,"        if (endsWithIgnoreCase(str, remove)) {",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3713,"            return str.substring(0, str.length() - remove.length());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3715,        return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3742,        if (isEmpty(str) || isEmpty(remove)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3743,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3745,"        return replace(str, remove, EMPTY, -1);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3768,        if (isEmpty(str) || str.indexOf(remove) == INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3769,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3771,        char[] chars = str.toCharArray();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3772,        int pos = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3773,        for (int i = 0; i < chars.length; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3774,            if (chars[i] != remove) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3775,                chars[pos++] = chars[i];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3778,"        return new String(chars, 0, pos);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3807,"        return replace(text, searchString, replacement, 1);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3834,"        return replace(text, searchString, replacement, -1);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3866,        if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3867,            return text;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3869,        int start = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3870,"        int end = text.indexOf(searchString, start);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3871,        if (end == INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3872,            return text;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3874,        int replLength = searchString.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3875,        int increase = replacement.length() - replLength;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3876,        increase = increase < 0 ? 0 : increase;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3877,        increase *= max < 0 ? 16 : max > 64 ? 64 : max;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3878,        StringBuilder buf = new StringBuilder(text.length() + increase);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3879,        while (end != INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3880,"            buf.append(text.substring(start, end)).append(replacement);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3881,            start = end + replLength;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3882,            if (--max == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3883,                break;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3885,"            end = text.indexOf(searchString, start);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3887,        buf.append(text.substring(start));,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3888,        return buf.toString();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3931,"        return replaceEach(text, searchList, replacementList, false, 0);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3981,        int timeToLive = searchList == null ? 0 : searchList.length;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,3982,"        return replaceEach(text, searchList, replacementList, true, timeToLive);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4039,        if (text == null || text.length() == 0 || searchList == null ||,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4041,            return text;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4045,        if (timeToLive < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4046,"            throw new IllegalStateException(""Aborting to protect against StackOverflowError - "" +",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4050,        int searchLength = searchList.length;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4051,        int replacementLength = replacementList.length;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4054,        if (searchLength != replacementLength) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4055,"            throw new IllegalArgumentException(""Search and Replace array lengths don't match: """,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4062,        boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4065,        int textIndex = -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4066,        int replaceIndex = -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4067,        int tempIndex = -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4071,        for (int i = 0; i < searchLength; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4072,            if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4074,                continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4076,            tempIndex = text.indexOf(searchList[i]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4079,            if (tempIndex == -1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4080,                noMoreMatchesForReplIndex[i] = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4082,                if (textIndex == -1 || tempIndex < textIndex) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4083,                    textIndex = tempIndex;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4084,                    replaceIndex = i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4091,        if (textIndex == -1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4092,            return text;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4095,        int start = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4098,        int increase = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4101,        for (int i = 0; i < searchList.length; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4102,            if (searchList[i] == null || replacementList[i] == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4103,                continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4105,            int greater = replacementList[i].length() - searchList[i].length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4106,            if (greater > 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4107,                increase += 3 * greater; // assume 3 matches,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4111,"        increase = Math.min(increase, text.length() / 5);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4113,        StringBuilder buf = new StringBuilder(text.length() + increase);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4115,        while (textIndex != -1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4117,            for (int i = start; i < textIndex; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4118,                buf.append(text.charAt(i));,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4120,            buf.append(replacementList[replaceIndex]);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4122,            start = textIndex + searchList[replaceIndex].length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4124,            textIndex = -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4125,            replaceIndex = -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4126,            tempIndex = -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4129,            for (int i = 0; i < searchLength; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4130,                if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4132,                    continue;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4134,"                tempIndex = text.indexOf(searchList[i], start);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4137,                if (tempIndex == -1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4138,                    noMoreMatchesForReplIndex[i] = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4140,                    if (textIndex == -1 || tempIndex < textIndex) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4141,                        textIndex = tempIndex;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4142,                        replaceIndex = i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4149,        int textLength = text.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4150,        for (int i = start; i < textLength; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4151,            buf.append(text.charAt(i));,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4153,        String result = buf.toString();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4154,        if (!repeat) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4155,            return result;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4158,"        return replaceEach(result, searchList, replacementList, repeat, timeToLive - 1);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4184,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4185,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4187,"        return str.replace(searchChar, replaceChar);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4227,        if (isEmpty(str) || isEmpty(searchChars)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4228,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4230,        if (replaceChars == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4231,            replaceChars = EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4233,        boolean modified = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4234,        int replaceCharsLength = replaceChars.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4235,        int strLength = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4236,        StringBuilder buf = new StringBuilder(strLength);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4237,        for (int i = 0; i < strLength; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4238,            char ch = str.charAt(i);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4239,            int index = searchChars.indexOf(ch);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4240,            if (index >= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4241,                modified = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4242,                if (index < replaceCharsLength) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4243,                    buf.append(replaceChars.charAt(index));,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4246,                buf.append(ch);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4249,        if (modified) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4250,            return buf.toString();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4252,        return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4287,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4288,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4290,        if (overlay == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4291,            overlay = EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4293,        int len = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4294,        if (start < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4295,            start = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4297,        if (start > len) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4298,            start = len;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4300,        if (end < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4301,            end = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4303,        if (end > len) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4304,            end = len;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4306,        if (start > end) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4307,            int temp = start;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4308,            start = end;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4309,            end = temp;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4311,        return new StringBuilder(len + start - end + overlay.length() + 1),0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4346,        if (isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4347,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4350,        if (str.length() == 1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4351,            char ch = str.charAt(0);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4352,            if (ch == CharUtils.CR || ch == CharUtils.LF) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4353,                return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4355,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4358,        int lastIdx = str.length() - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4359,        char last = str.charAt(lastIdx);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4361,        if (last == CharUtils.LF) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4362,            if (str.charAt(lastIdx - 1) == CharUtils.CR) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4363,                lastIdx--;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4365,        } else if (last != CharUtils.CR) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4366,            lastIdx++;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4368,"        return str.substring(0, lastIdx);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4400,"        return removeEnd(str,separator);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4429,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4430,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4432,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4433,        if (strLen < 2) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4434,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4436,        int lastIdx = strLen - 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4437,"        String ret = str.substring(0, lastIdx);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4438,        char last = str.charAt(lastIdx);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4439,        if (last == CharUtils.LF && ret.charAt(lastIdx - 1) == CharUtils.CR) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4440,"            return ret.substring(0, lastIdx - 1);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4442,        return ret;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4471,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4472,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4474,        if (repeat <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4475,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4477,        int inputLength = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4478,        if (repeat == 1 || inputLength == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4479,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4481,        if (inputLength == 1 && repeat <= PAD_LIMIT) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4482,"            return repeat(str.charAt(0), repeat);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4485,        int outputLength = inputLength * repeat;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4486,        switch (inputLength) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4488,"                return repeat(str.charAt(0), repeat);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4490,                char ch0 = str.charAt(0);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4491,                char ch1 = str.charAt(1);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4492,                char[] output2 = new char[outputLength];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4493,"                for (int i = repeat * 2 - 2; i >= 0; i--, i--) {",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4494,                    output2[i] = ch0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4495,                    output2[i + 1] = ch1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4497,                return new String(output2);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4499,                StringBuilder buf = new StringBuilder(outputLength);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4500,                for (int i = 0; i < repeat; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4501,                    buf.append(str);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4503,                return buf.toString();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4528,        if(str == null || separator == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4529,"            return repeat(str, repeat);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4532,"            String result = repeat(str + separator, repeat);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4533,"            return removeEnd(result, separator);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4560,        char[] buf = new char[repeat];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4561,        for (int i = repeat - 1; i >= 0; i--) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4562,            buf[i] = ch;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4564,        return new String(buf);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4587,"        return rightPad(str, size, ' ');",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4612,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4613,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4615,        int pads = size - str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4616,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4617,            return str; // returns original String when possible,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4619,        if (pads > PAD_LIMIT) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4620,"            return rightPad(str, size, String.valueOf(padChar));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4622,"        return str.concat(repeat(padChar, pads));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4649,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4650,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4652,        if (isEmpty(padStr)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4653,"            padStr = "" "";",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4655,        int padLen = padStr.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4656,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4657,        int pads = size - strLen;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4658,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4659,            return str; // returns original String when possible,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4661,        if (padLen == 1 && pads <= PAD_LIMIT) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4662,"            return rightPad(str, size, padStr.charAt(0));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4665,        if (pads == padLen) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4666,            return str.concat(padStr);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4667,        } else if (pads < padLen) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4668,"            return str.concat(padStr.substring(0, pads));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4670,            char[] padding = new char[pads];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4671,            char[] padChars = padStr.toCharArray();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4672,            for (int i = 0; i < pads; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4673,                padding[i] = padChars[i % padLen];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4675,            return str.concat(new String(padding));,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4699,"        return leftPad(str, size, ' ');",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4724,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4725,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4727,        int pads = size - str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4728,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4729,            return str; // returns original String when possible,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4731,        if (pads > PAD_LIMIT) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4732,"            return leftPad(str, size, String.valueOf(padChar));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4734,"        return repeat(padChar, pads).concat(str);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4761,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4762,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4764,        if (isEmpty(padStr)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4765,"            padStr = "" "";",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4767,        int padLen = padStr.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4768,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4769,        int pads = size - strLen;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4770,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4771,            return str; // returns original String when possible,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4773,        if (padLen == 1 && pads <= PAD_LIMIT) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4774,"            return leftPad(str, size, padStr.charAt(0));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4777,        if (pads == padLen) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4778,            return padStr.concat(str);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4779,        } else if (pads < padLen) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4780,"            return padStr.substring(0, pads).concat(str);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4782,            char[] padding = new char[pads];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4783,            char[] padChars = padStr.toCharArray();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4784,            for (int i = 0; i < pads; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4785,                padding[i] = padChars[i % padLen];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4787,            return new String(padding).concat(str);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4803,        return cs == null ? 0 : cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4832,"        return center(str, size, ' ');",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4860,        if (str == null || size <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4861,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4863,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4864,        int pads = size - strLen;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4865,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4866,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4868,"        str = leftPad(str, strLen + pads / 2, padChar);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4869,"        str = rightPad(str, size, padChar);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4870,        return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4900,        if (str == null || size <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4901,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4903,        if (isEmpty(padStr)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4904,"            padStr = "" "";",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4906,        int strLen = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4907,        int pads = size - strLen;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4908,        if (pads <= 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4909,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4911,"        str = leftPad(str, strLen + pads / 2, padStr);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4912,"        str = rightPad(str, size, padStr);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4913,        return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4938,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4939,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4941,        return str.toUpperCase();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4961,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4962,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4964,        return str.toUpperCase(locale);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4987,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4988,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,4990,        return str.toLowerCase();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5010,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5011,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5013,        return str.toLowerCase(locale);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5038,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5039,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5041,        return new StringBuilder(strLen),0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5069,        if (str == null || (strLen = str.length()) == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5070,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5072,        return new StringBuilder(strLen),0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5106,        if (StringUtils.isEmpty(str)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5107,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5110,        char[] buffer = str.toCharArray();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5112,        for (int i = 0; i < buffer.length; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5113,            char ch = buffer[i];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5114,            if (Character.isUpperCase(ch)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5115,                buffer[i] = Character.toLowerCase(ch);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5116,            } else if (Character.isTitleCase(ch)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5117,                buffer[i] = Character.toLowerCase(ch);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5118,            } else if (Character.isLowerCase(ch)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5119,                buffer[i] = Character.toUpperCase(ch);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5122,        return new String(buffer);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5148,        if (isEmpty(str) || isEmpty(sub)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5149,            return 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5151,        int count = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5152,        int idx = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5153,"        while ((idx = CharSequenceUtils.indexOf(str, sub, idx)) != INDEX_NOT_FOUND) {",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5154,            count++;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5155,            idx += sub.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5157,        return count;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5183,        if (cs == null || cs.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5184,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5186,        int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5187,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5188,            if (Character.isLetter(cs.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5189,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5192,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5218,        if (cs == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5219,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5221,        int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5222,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5223,            if (Character.isLetter(cs.charAt(i)) == false && cs.charAt(i) != ' ') {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5224,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5227,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5253,        if (cs == null || cs.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5254,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5256,        int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5257,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5258,            if (Character.isLetterOrDigit(cs.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5259,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5262,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5288,        if (cs == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5289,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5291,        int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5292,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5293,            if (Character.isLetterOrDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5294,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5297,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5327,        if (cs == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5328,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5330,        int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5331,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5332,            if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5333,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5336,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5363,        if (cs == null || cs.length() == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5364,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5366,        int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5367,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5368,            if (Character.isDigit(cs.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5369,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5372,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5400,        if (cs == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5401,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5403,        int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5404,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5405,            if (Character.isDigit(cs.charAt(i)) == false && cs.charAt(i) != ' ') {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5406,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5409,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5433,        if (cs == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5434,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5436,        int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5437,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5438,            if (Character.isWhitespace(cs.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5439,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5442,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5465,        if (cs == null || isEmpty(cs)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5466,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5468,        int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5469,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5470,            if (Character.isLowerCase(cs.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5471,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5474,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5497,        if (cs == null || isEmpty(cs)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5498,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5500,        int sz = cs.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5501,        for (int i = 0; i < sz; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5502,            if (Character.isUpperCase(cs.charAt(i)) == false) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5503,                return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5506,        return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5528,        return str == null ? EMPTY : str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5549,        return str == null ? defaultStr : str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5571,        return StringUtils.isBlank(str) ? defaultStr : str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5593,        return StringUtils.isEmpty(str) ? defaultStr : str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5613,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5614,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5616,        return new StringBuilder(str).reverse().toString();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5639,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5640,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5644,"        String[] strs = split(str, separatorChar);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5645,        ArrayUtils.reverse(strs);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5646,"        return join(strs, separatorChar);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5684,"        return abbreviate(str, 0, maxWidth);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5723,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5724,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5726,        if (maxWidth < 4) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5727,"            throw new IllegalArgumentException(""Minimum abbreviation width is 4"");",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5729,        if (str.length() <= maxWidth) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5730,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5732,        if (offset > str.length()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5733,            offset = str.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5735,        if (str.length() - offset < maxWidth - 3) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5736,            offset = str.length() - (maxWidth - 3);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5738,"        final String abrevMarker = ""..."";",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5739,        if (offset <= 4) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5740,"            return str.substring(0, maxWidth - 3) + abrevMarker;",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5742,        if (maxWidth < 7) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5743,"            throw new IllegalArgumentException(""Minimum abbreviation width with offset is 7"");",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5745,        if (offset + maxWidth - 3 < str.length()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5746,"            return abrevMarker + abbreviate(str.substring(offset), maxWidth - 3);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5748,        return abrevMarker + str.substring(str.length() - (maxWidth - 3));,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5781,        if (isEmpty(str) || isEmpty(middle)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5782,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5785,        if (length >= str.length() || length < middle.length()+2) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5786,            return str;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5789,        int targetSting = length-middle.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5790,        int startOffset = targetSting/2+targetSting%2;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5791,        int endOffset = str.length()-targetSting/2;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5793,        StringBuilder builder = new StringBuilder(length);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5794,"        builder.append(str.substring(0,startOffset));",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5795,        builder.append(middle);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5796,        builder.append(str.substring(endOffset));,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5798,        return builder.toString();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5829,        if (str1 == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5830,            return str2;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5832,        if (str2 == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5833,            return str1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5835,"        int at = indexOfDifference(str1, str2);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5836,        if (at == INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5837,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5839,        return str2.substring(at);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5868,        if (cs1 == cs2) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5869,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5871,        if (cs1 == null || cs2 == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5872,            return 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5875,        for (i = 0; i < cs1.length() && i < cs2.length(); ++i) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5876,            if (cs1.charAt(i) != cs2.charAt(i)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5877,                break;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5880,        if (i < cs2.length() || i < cs1.length()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5881,            return i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5883,        return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5919,        if (css == null || css.length <= 1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5920,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5922,        boolean anyStringNull = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5923,        boolean allStringsNull = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5924,        int arrayLen = css.length;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5925,        int shortestStrLen = Integer.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5926,        int longestStrLen = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5931,        for (int i = 0; i < arrayLen; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5932,            if (css[i] == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5933,                anyStringNull = true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5934,                shortestStrLen = 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5936,                allStringsNull = false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5937,"                shortestStrLen = Math.min(css[i].length(), shortestStrLen);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5938,"                longestStrLen = Math.max(css[i].length(), longestStrLen);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5943,        if (allStringsNull || longestStrLen == 0 && !anyStringNull) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5944,            return INDEX_NOT_FOUND;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5948,        if (shortestStrLen == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5949,            return 0;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5953,        int firstDiff = -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5954,        for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5955,            char comparisonChar = css[0].charAt(stringPos);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5956,            for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5957,                if (css[arrayPos].charAt(stringPos) != comparisonChar) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5958,                    firstDiff = stringPos;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5959,                    break;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5962,            if (firstDiff != -1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5963,                break;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5967,        if (firstDiff == -1 && shortestStrLen != longestStrLen) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5971,            return shortestStrLen;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,5973,        return firstDiff;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6010,        if (strs == null || strs.length == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6011,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6013,        int smallestIndexOfDiff = indexOfDifference(strs);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6014,        if (smallestIndexOfDiff == INDEX_NOT_FOUND) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6016,            if (strs[0] == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6017,                return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6019,            return strs[0];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6020,        } else if (smallestIndexOfDiff == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6022,            return EMPTY;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6025,"            return strs[0].substring(0, smallestIndexOfDiff);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6068,        if (s == null || t == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6069,"            throw new IllegalArgumentException(""Strings must not be null"");",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6089,        int n = s.length(); // length of s,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6090,        int m = t.length(); // length of t,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6092,        if (n == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6093,            return m;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6094,        } else if (m == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6095,            return n;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6098,        if (n > m) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6100,            CharSequence tmp = s;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6101,            s = t;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6102,            t = tmp;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6103,            n = m;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6104,            m = t.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6107,"        int p[] = new int[n + 1]; //'previous' cost array, horizontally",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6108,"        int d[] = new int[n + 1]; // cost array, horizontally",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6119,        for (i = 0; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6120,            p[i] = i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6123,        for (j = 1; j <= m; j++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6124,            t_j = t.charAt(j - 1);,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6125,            d[0] = j;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6127,            for (i = 1; i <= n; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6128,                cost = s.charAt(i - 1) == t_j ? 0 : 1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6130,"                d[i] = Math.min(Math.min(d[i - 1] + 1, p[i] + 1), p[i - 1] + cost);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6134,            _d = p;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6135,            p = d;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6136,            d = _d;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6141,        return p[n];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6177,        if (s == null || t == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6178,"            throw new IllegalArgumentException(""Strings must not be null"");",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6180,        if (threshold < 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6181,"            throw new IllegalArgumentException(""Threshold must not be negative"");",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6228,        int n = s.length(); // length of s,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6229,        int m = t.length(); // length of t,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6232,        if (n == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6233,            return m <= threshold ? m : -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6234,        } else if (m == 0) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6235,            return n <= threshold ? n : -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6238,        if (n > m) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6240,            CharSequence tmp = s;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6241,            s = t;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6242,            t = tmp;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6243,            n = m;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6244,            m = t.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6247,"        int p[] = new int[n + 1]; // 'previous' cost array, horizontally",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6248,"        int d[] = new int[n + 1]; // cost array, horizontally",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6252,"        int boundary = Math.min(n, threshold) + 1;",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6253,        for (int i = 0; i < boundary; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6254,            p[i] = i;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6258,"        Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6259,"        Arrays.fill(d, Integer.MAX_VALUE);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6262,        for (int j = 1; j <= m; j++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6263,            char t_j = t.charAt(j - 1); // jth character of t,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6264,            d[0] = j;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6267,"            int min = Math.max(1, j - threshold);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6268,"            int max = Math.min(n, j + threshold);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6271,            if (min > max) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6272,                return -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6276,            if (min > 1) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6277,                d[min - 1] = Integer.MAX_VALUE;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6281,            for (int i = min; i <= max; i++) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6282,                if (s.charAt(i - 1) == t_j) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6284,                    d[i] = p[i - 1];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6287,"                    d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6292,            _d = p;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6293,            p = d;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6294,            d = _d;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6299,        if (p[n] <= threshold) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6300,            return p[n];,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6302,            return -1;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6332,"        return startsWith(str, prefix, false);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6358,"        return startsWith(str, prefix, true);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6373,        if (str == null || prefix == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6374,            return str == null && prefix == null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6376,        if (prefix.length() > str.length()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6377,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6379,"        return CharSequenceUtils.regionMatches(str, ignoreCase, 0, prefix, 0, prefix.length());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6402,        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6403,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6405,        for (CharSequence searchString : searchStrings) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6406,"            if (StringUtils.startsWith(string, searchString)) {",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6407,                return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6410,        return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6440,"        return endsWith(str, suffix, false);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6467,"        return endsWith(str, suffix, true);",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6482,        if (str == null || suffix == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6483,            return str == null && suffix == null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6485,        if (suffix.length() > str.length()) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6486,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6488,        int strOffset = str.length() - suffix.length();,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6489,"        return CharSequenceUtils.regionMatches(str, ignoreCase, strOffset, suffix, 0, suffix.length());",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6534,        if (str == null) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6535,            return null;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6537,"        return WHITESPACE_BLOCK.matcher(trim(str)).replaceAll("" "");",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6559,        if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6560,            return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6562,        for (CharSequence searchString : searchStrings) {,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6563,"            if (StringUtils.endsWith(string, searchString)) {",0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6564,                return true;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6567,        return false;,0.0,0,-1,0
org/apache/commons/lang3/StringUtils,14,6585,"        return charsetName == null ? new String(bytes) : new String(bytes, charsetName);",0.0,0,-1,0
