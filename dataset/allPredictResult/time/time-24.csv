project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/joda/time/LocalDate,24,1735,        return ISODateTimeFormat.date().print(this);,12.25,0,0,0
org/joda/time/format/DateTimeFormat,24,530,                builder.appendWeekOfWeekyear(tokenLen);,12.25,0,1,0
org/joda/time/format/DateTimeFormat,24,531,                break;,12.25,0,1,0
org/joda/time/LocalDate,24,496,        return fieldType.getField(getChronology()).get(getLocalMillis());,7.0,0,-1,0
org/joda/time/LocalDate,24,515,            return type.getField(getChronology()).isSupported();,7.0,0,-1,0
org/joda/time/chrono/GJChronology,24,331,        if ((base = getBase()) != null) {,7.0,0,-1,0
org/joda/time/chrono/GJChronology,24,336,        long instant = iGregorianChronology.getDateTimeMillis,7.0,0,-1,0
org/joda/time/chrono/GJChronology,24,338,        if (instant < iCutoverMillis) {,7.0,0,-1,0
org/joda/time/chrono/GJChronology,24,347,        return instant;,7.0,0,-1,0
org/joda/time/LocalDate,24,490,        if (fieldType == null) {,6.125,0,-1,0
org/joda/time/LocalDate,24,493,        if (isSupported(fieldType) == false) {,6.125,0,-1,0
org/joda/time/LocalDate,24,508,        if (type == null) {,6.125,0,-1,0
org/joda/time/LocalDate,24,511,        DurationFieldType durType = type.getDurationType();,6.125,0,-1,0
org/joda/time/LocalDate,24,512,        if (DATE_DURATION_TYPES.contains(durType) ||,6.125,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,488,            return compareReverse,6.125,1,-1,1
org/joda/time/format/DateTimeFormatter,24,610,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,4.9,0,-1,0
org/joda/time/format/DateTimeFormatter,24,611,"        printTo(buf, partial);",4.9,0,-1,0
org/joda/time/format/DateTimeFormatter,24,612,        return buf.toString();,4.9,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2546,            DateTimePrinter[] elements = iPrinters;,4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2547,            if (elements == null) {,4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2551,            if (locale == null) {,4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2553,                locale = Locale.getDefault();,4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2556,            int len = elements.length;,4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2557,            for (int i=0; i<len; i++) {,4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2558,"                elements[i].printTo(buf, partial, locale);",4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2560,        },4.45455,0,-1,0
org/joda/time/format/DateTimeFormatter,24,531,        DateTimePrinter printer = requirePrinter();,4.45455,0,-1,0
org/joda/time/format/DateTimeFormatter,24,532,        if (partial == null) {,4.45455,0,-1,0
org/joda/time/format/DateTimeFormatter,24,535,"        printer.printTo(buf, partial, iLocale);",4.45455,0,-1,0
org/joda/time/format/DateTimeFormatter,24,536,    },4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1427,            if (partial.isSupported(iFieldType)) {,4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1429,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1432,                },4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1436,        },4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1161,            buf.append(iValue);,4.45455,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1162,        },4.45455,0,-1,0
org/joda/time/LocalDate,24,570,        if (this == partial) {,3.76923,0,-1,0
org/joda/time/LocalDate,24,573,        if (partial instanceof LocalDate) {,3.76923,0,-1,0
org/joda/time/LocalDate,24,574,            LocalDate other = (LocalDate) partial;,3.76923,0,-1,0
org/joda/time/LocalDate,24,575,            if (iChronology.equals(other.iChronology)) {,3.76923,0,-1,0
org/joda/time/LocalDate,24,576,                return iLocalMillis == other.iLocalMillis;,3.76923,0,-1,0
org/joda/time/field/BaseDurationField,24,150,            return 0;,3.5,0,-1,0
org/joda/time/chrono/BasicChronology,24,518,            return getWeeksInYear(year - 1);,3.26667,0,-1,0
org/joda/time/chrono/GJChronology,24,404,        return super.equals(obj);,3.26667,0,-1,0
org/joda/time/format/DateTimeFormatter,24,759,        return parseLocalDateTime(text).toLocalDate();,2.72222,0,-1,0
org/joda/time/LocalDateTime,24,698,"        return new LocalDate(getLocalMillis(), getChronology());",2.72222,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,79,        return 1;,2.72222,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,111,        return value > 52 ? getMaximumValue(instant) : 52;,2.72222,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,54,        return iChronology.getWeekOfWeekyear(instant);,2.57895,0,-1,0
org/joda/time/chrono/GJChronology,24,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",2.33333,0,-1,0
org/joda/time/LocalDate,24,396,        super();,2.04167,0,-1,0
org/joda/time/LocalDate,24,397,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,2.04167,0,-1,0
org/joda/time/LocalDate,24,398,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",2.04167,0,-1,0
org/joda/time/LocalDate,24,399,        iChronology = chronology;,2.04167,0,-1,0
org/joda/time/LocalDate,24,400,        iLocalMillis = instant;,2.04167,0,-1,0
org/joda/time/LocalDate,24,401,    },2.04167,0,-1,0
org/joda/time/chrono/GJChronology,24,632,                return iGregorianField.get(instant);,2.04167,0,-1,0
org/joda/time/chrono/GJChronology,24,852,                instant = iGregorianField.roundFloor(instant);,2.04167,0,-1,0
org/joda/time/chrono/GJChronology,24,853,                if (instant < iCutover) {,2.04167,0,-1,0
org/joda/time/format/DateTimeFormat,24,467,"                        builder.appendWeekyear(tokenLen, maxDigits);",1.8,0,-1,0
org/joda/time/format/DateTimeFormat,24,468,                        break;,1.8,0,-1,0
org/joda/time/format/DateTimeFormatter,24,795,        DateTimeParser parser = requireParser();,1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,797,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps",1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,798,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,799,"        int newPos = parser.parseInto(bucket, text, 0);",1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,800,        if (newPos >= 0) {,1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,801,            if (newPos >= text.length()) {,1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,802,"                long millis = bucket.computeMillis(true, text);",1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,803,                if (bucket.getZone() == null) {  // treat withOffsetParsed() as being true,1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,804,                    int parsedOffset = bucket.getOffset();,1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,805,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,806,                    chrono = chrono.withZone(parsedZone);,1.75,0,-1,0
org/joda/time/format/DateTimeFormatter,24,808,"                return new LocalDateTime(millis, chrono);",1.75,0,-1,0
org/joda/time/DateTimeFieldType,24,504,                    return chronology.weekOfWeekyear();,1.75,0,-1,0
org/joda/time/chrono/GJChronology,24,851,            if (instant >= iCutover) {,1.68966,0,-1,0
org/joda/time/chrono/GJChronology,24,862,            return instant;,1.68966,0,-1,0
org/joda/time/DateTimeZone,24,350,            return DateTimeZone.UTC;,1.53125,0,-1,0
org/joda/time/DateTimeZone,24,1031,            return oldInstant;,1.4,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,173,        return iOffset;,1.36111,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,152,        return iZone;,1.32432,0,-1,0
org/joda/time/LocalDate,24,280,"    public LocalDate(long instant, Chronology chronology) {",1.28947,0,-1,0
org/joda/time/LocalDate,24,281,        chronology = DateTimeUtils.getChronology(chronology);,1.28947,0,-1,0
org/joda/time/LocalDate,24,283,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",1.28947,0,-1,0
org/joda/time/LocalDate,24,284,        chronology = chronology.withUTC();,1.28947,0,-1,0
org/joda/time/LocalDate,24,285,        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);,1.28947,0,-1,0
org/joda/time/LocalDate,24,286,        iChronology = chronology;,1.28947,0,-1,0
org/joda/time/LocalDate,24,287,    },1.28947,0,-1,0
org/joda/time/format/DateTimeFormat,24,457,                        indexRef[0]++;,1.25641,0,-1,0
org/joda/time/format/DateTimeFormat,24,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",1.25641,0,-1,0
org/joda/time/format/DateTimeFormat,24,462,                        indexRef[0]--;,1.25641,0,-1,0
org/joda/time/LocalDateTime,24,274,"    public LocalDateTime(long instant, Chronology chronology) {",1.19512,0,-1,0
org/joda/time/LocalDateTime,24,275,        chronology = DateTimeUtils.getChronology(chronology);,1.19512,0,-1,0
org/joda/time/LocalDateTime,24,277,"        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);",1.19512,0,-1,0
org/joda/time/LocalDateTime,24,278,        iLocalMillis = localMillis;,1.19512,0,-1,0
org/joda/time/LocalDateTime,24,279,        iChronology = chronology.withUTC();,1.19512,0,-1,0
org/joda/time/LocalDateTime,24,280,    },1.19512,0,-1,0
org/joda/time/format/DateTimeFormat,24,662,        return false;,1.11364,0,-1,0
org/joda/time/format/DateTimeFormat,24,632,        int tokenLen = token.length();,1.08889,0,-1,0
org/joda/time/format/DateTimeFormat,24,633,        if (tokenLen > 0) {,1.08889,0,-1,0
org/joda/time/format/DateTimeFormat,24,634,            char c = token.charAt(0);,1.08889,0,-1,0
org/joda/time/format/DateTimeFormat,24,635,            switch (c) {,1.08889,0,-1,0
org/joda/time/LocalDate,24,548,        return iLocalMillis;,0.96078,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,953,        if (dtx == null) {,0.96078,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,954,            dtx = new DateTimeFormatterBuilder(),0.96078,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,959,        return dtx;,0.96078,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,0.94231,0,-1,0
org/joda/time/LocalDate,24,557,        return iChronology;,0.92453,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,919,        if (ttx == null) {,0.90741,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,920,            ttx = new DateTimeFormatterBuilder(),0.90741,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,925,        return ttx;,0.90741,0,-1,0
org/joda/time/chrono/ZonedChronology,24,499,            return iDurationField;,0.90741,0,-1,0
org/joda/time/chrono/ZonedChronology,24,503,            return iRangeDurationField;,0.90741,0,-1,0
org/joda/time/chrono/ZonedChronology,24,517,            return iLeapDurationField;,0.90741,0,-1,0
org/joda/time/chrono/ZonedChronology,24,550,            return iField.getMinimumValue();,0.90741,0,-1,0
org/joda/time/chrono/ZonedChronology,24,567,            return iField.getMaximumValue();,0.90741,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,883,        if (tx == null) {,0.89091,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,884,            tx = new DateTimeFormatterBuilder(),0.89091,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,889,        return tx;,0.89091,0,-1,0
org/joda/time/format/DateTimeFormat,24,453,                    int maxDigits = 9;,0.89091,0,-1,0
org/joda/time/format/DateTimeFormat,24,456,                    if (i + 1 < length) {,0.89091,0,-1,0
org/joda/time/format/DateTimeFormat,24,465,                    switch (c) {,0.89091,0,-1,0
org/joda/time/format/DateTimeFormat,24,477,                break;,0.89091,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1410,        if (hms == null) {,0.875,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1411,            hms = new DateTimeFormatterBuilder(),0.875,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1417,        return hms;,0.875,0,-1,0
org/joda/time/chrono/BasicChronology,24,348,            return jan1millis - (jan1dayOfWeek - 1),0.80645,0,-1,0
org/joda/time/LocalDateTime,24,586,        return iLocalMillis;,0.76563,0,-1,0
org/joda/time/LocalDateTime,24,595,        return iChronology;,0.74242,0,-1,0
org/joda/time/format/DateTimeFormat,24,424,                if (tokenLen == 2) {,0.74242,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,511,        if (fieldType == null) {,0.7,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,514,"        return append0(new TextField(fieldType, true));",0.7,0,-1,0
org/joda/time/LocalDate,24,95,    private static final Set<DurationFieldType> DATE_DURATION_TYPES = new HashSet<DurationFieldType>();,0.68056,0,-1,0
org/joda/time/LocalDate,24,97,        DATE_DURATION_TYPES.add(DurationFieldType.days());,0.68056,0,-1,0
org/joda/time/LocalDate,24,98,        DATE_DURATION_TYPES.add(DurationFieldType.weeks());,0.68056,0,-1,0
org/joda/time/LocalDate,24,99,        DATE_DURATION_TYPES.add(DurationFieldType.months());,0.68056,0,-1,0
org/joda/time/LocalDate,24,100,        DATE_DURATION_TYPES.add(DurationFieldType.weekyears());,0.68056,0,-1,0
org/joda/time/LocalDate,24,101,        DATE_DURATION_TYPES.add(DurationFieldType.years());,0.68056,0,-1,0
org/joda/time/LocalDate,24,102,        DATE_DURATION_TYPES.add(DurationFieldType.centuries());,0.68056,0,-1,0
org/joda/time/LocalDate,24,104,        DATE_DURATION_TYPES.add(DurationFieldType.eras());,0.68056,0,-1,0
org/joda/time/LocalDate,24,105,    },0.68056,0,-1,0
org/joda/time/chrono/ZonedChronology,24,474,            return result;,0.68056,0,-1,0
org/joda/time/format/DateTimeFormat,24,486,                    builder.appendMonthOfYear(tokenLen);,0.64474,0,-1,0
org/joda/time/format/DateTimeFormat,24,488,                break;,0.64474,0,-1,0
org/joda/time/chrono/GJChronology,24,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",0.62025,0,-1,0
org/joda/time/chrono/GJChronology,24,282,    },0.62025,0,-1,0
org/joda/time/chrono/GJChronology,24,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0.62025,0,-1,0
org/joda/time/chrono/GJChronology,24,221,            chrono = new GJChronology,0.62025,0,-1,0
org/joda/time/chrono/GJChronology,24,464,            return;,0.62025,0,-1,0
org/joda/time/chrono/ZonedChronology,24,465,            long localInstant = iZone.convertUTCToLocal(instant);,0.60494,0,-1,0
org/joda/time/chrono/ZonedChronology,24,466,"            localInstant = iField.set(localInstant, value);",0.60494,0,-1,0
org/joda/time/chrono/ZonedChronology,24,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0.60494,0,-1,0
org/joda/time/chrono/ZonedChronology,24,468,            if (get(result) != value) {,0.60494,0,-1,0
org/joda/time/DateTimeZone,24,1027,        if (newZone == null) {,0.59036,0,-1,0
org/joda/time/DateTimeZone,24,1030,        if (newZone == this) {,0.59036,0,-1,0
org/joda/time/base/AbstractInstant,24,260,            return true;,0.56977,0,-1,0
org/joda/time/DateTimeZone,24,282,        String id = printOffset(millisOffset);,0.56322,0,-1,0
org/joda/time/DateTimeZone,24,283,"        return fixedOffsetZone(id, millisOffset);",0.56322,0,-1,0
org/joda/time/chrono/GJChronology,24,204,            for (int i=chronos.size(); --i>=0; ) {,0.56322,0,-1,0
org/joda/time/chrono/GJChronology,24,205,                chrono = chronos.get(i);,0.56322,0,-1,0
org/joda/time/chrono/GJChronology,24,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,0.56322,0,-1,0
org/joda/time/chrono/GJChronology,24,209,                    return chrono;,0.56322,0,-1,0
org/joda/time/chrono/GJChronology,24,384,        return iCutoverInstant;,0.56322,0,-1,0
org/joda/time/chrono/GJChronology,24,393,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0.56322,0,-1,0
org/joda/time/chrono/GJChronology,24,307,        return withZone(DateTimeZone.UTC);,0.55682,0,-1,0
org/joda/time/chrono/GJChronology,24,317,        if (zone == null) {,0.55682,0,-1,0
org/joda/time/chrono/GJChronology,24,320,        if (zone == getZone()) {,0.55682,0,-1,0
org/joda/time/chrono/GJChronology,24,321,            return this;,0.55682,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1755,            return estimatePrintedLength();,0.55056,0,-1,0
org/joda/time/chrono/GJChronology,24,293,        if ((base = getBase()) != null) {,0.55056,0,-1,0
org/joda/time/chrono/GJChronology,24,296,        return DateTimeZone.UTC;,0.55056,0,-1,0
org/joda/time/chrono/GJChronology,24,194,            cutoverInstant = gregorianCutover.toInstant();,0.54444,0,-1,0
org/joda/time/Instant,24,131,        return this;,0.54444,0,-1,0
org/joda/time/field/DecoratedDurationField,24,101,        return iField.getUnitMillis();,0.53846,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1687,            super();,0.51579,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1688,            iFieldType = fieldType;,0.51579,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1689,            iShort = isShort;,0.51579,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1690,        },0.51579,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1681,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",0.51579,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1693,            return iShort ? 6 : 20;,0.51579,0,-1,0
org/joda/time/DateTimeZone,24,956,"        return convertLocalToUTC(instantLocal, strict);",0.51042,0,-1,0
org/joda/time/DateTimeZone,24,973,        int offsetLocal = getOffset(instantLocal);,0.50515,0,-1,0
org/joda/time/DateTimeZone,24,975,        int offset = getOffset(instantLocal - offsetLocal);,0.50515,0,-1,0
org/joda/time/DateTimeZone,24,977,        if (offsetLocal != offset) {,0.50515,0,-1,0
org/joda/time/DateTimeZone,24,1008,        long instantUTC = instantLocal - offset;,0.50515,0,-1,0
org/joda/time/DateTimeZone,24,1010,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.50515,0,-1,0
org/joda/time/DateTimeZone,24,1013,        return instantUTC;,0.50515,0,-1,0
org/joda/time/format/DateTimeFormat,24,479,                if (tokenLen >= 3) {,0.49495,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.47368,0,-1,0
org/joda/time/format/DateTimeFormat,24,551,                    builder.appendLiteral(sub.charAt(0));,0.47115,0,-1,0
org/joda/time/format/DateTimeFormat,24,613,                    i--;,0.46667,0,-1,0
org/joda/time/format/DateTimeFormat,24,614,                    break;,0.46667,0,-1,0
org/joda/time/DateTimeZone,24,349,        if (offset == 0) {,0.46226,0,-1,0
org/joda/time/DateTimeZone,24,632,            buf.append('+');,0.46226,0,-1,0
org/joda/time/format/DateTimeFormat,24,549,                String sub = token.substring(1);,0.46226,0,-1,0
org/joda/time/format/DateTimeFormat,24,550,                if (sub.length() == 1) {,0.46226,0,-1,0
org/joda/time/format/DateTimeFormat,24,596,            buf.append('\'');,0.46226,0,-1,0
org/joda/time/format/DateTimeFormat,24,598,            boolean inLiteral = false;,0.46226,0,-1,0
org/joda/time/format/DateTimeFormat,24,600,            for (; i < length; i++) {,0.46226,0,-1,0
org/joda/time/format/DateTimeFormat,24,601,                c = pattern.charAt(i);,0.46226,0,-1,0
org/joda/time/format/DateTimeFormat,24,603,                if (c == '\'') {,0.46226,0,-1,0
org/joda/time/format/DateTimeFormat,24,611,                } else if (!inLiteral &&,0.46226,0,-1,0
org/joda/time/format/DateTimeFormat,24,616,                    buf.append(c);,0.46226,0,-1,0
org/joda/time/DateTimeZone,24,630,        StringBuffer buf = new StringBuffer();,0.45794,0,-1,0
org/joda/time/DateTimeZone,24,631,        if (offset >= 0) {,0.45794,0,-1,0
org/joda/time/DateTimeZone,24,638,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.45794,0,-1,0
org/joda/time/DateTimeZone,24,639,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.45794,0,-1,0
org/joda/time/DateTimeZone,24,640,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.45794,0,-1,0
org/joda/time/DateTimeZone,24,642,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.45794,0,-1,0
org/joda/time/DateTimeZone,24,643,        buf.append(':');,0.45794,0,-1,0
org/joda/time/DateTimeZone,24,644,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.45794,0,-1,0
org/joda/time/DateTimeZone,24,645,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.45794,0,-1,0
org/joda/time/DateTimeZone,24,646,        if (offset == 0) {,0.45794,0,-1,0
org/joda/time/DateTimeZone,24,647,            return buf.toString();,0.45794,0,-1,0
org/joda/time/format/DateTimeFormat,24,588,                    buf.append(c);,0.43363,0,-1,0
org/joda/time/format/DateTimeFormat,24,589,                    i++;,0.43363,0,-1,0
org/joda/time/format/DateTimeFormat,24,593,            },0.43363,0,-1,0
org/joda/time/format/DateTimeFormat,24,586,                char peek = pattern.charAt(i + 1);,0.4188,0,-1,0
org/joda/time/format/DateTimeFormat,24,587,                if (peek == c) {,0.4188,0,-1,0
org/joda/time/chrono/BasicChronology,24,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.40909,0,-1,0
org/joda/time/chrono/BasicChronology,24,497,        } else if (week > 51) {,0.3913,0,-1,0
org/joda/time/format/DateTimeFormat,24,563,    },0.35766,0,-1,0
org/joda/time/format/DateTimeFormat,24,583,            buf.append(c);,0.35766,0,-1,0
org/joda/time/format/DateTimeFormat,24,585,            while (i + 1 < length) {,0.35766,0,-1,0
org/joda/time/format/DateTimeFormat,24,683,                formatter = builder.toFormatter();,0.35766,0,-1,0
org/joda/time/format/DateTimeFormat,24,685,"                cPatternedCache.put(pattern, formatter);",0.35766,0,-1,0
org/joda/time/format/DateTimeFormat,24,687,        },0.35766,0,-1,0
org/joda/time/format/DateTimeFormat,24,688,        return formatter;,0.35766,0,-1,0
org/joda/time/format/DateTimeFormat,24,170,        return createFormatterForPattern(pattern);,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,400,        int length = pattern.length();,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,401,        int[] indexRef = new int[1];,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,403,        for (int i=0; i<length; i++) {,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,404,            indexRef[0] = i;,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,405,"            String token = parseToken(pattern, indexRef);",0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,406,            i = indexRef[0];,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,408,            int tokenLen = token.length();,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,409,            if (tokenLen == 0) {,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,412,            char c = token.charAt(0);,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,414,            switch (c) {,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,574,        StringBuffer buf = new StringBuffer();,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,576,        int i = indexRef[0];,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,577,        int length = pattern.length();,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,579,        char c = pattern.charAt(i);,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,621,        indexRef[0] = i;,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,622,        return buf.toString();,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,674,        if (pattern == null || pattern.length() == 0) {,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,677,        DateTimeFormatter formatter = null;,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,678,        synchronized (cPatternedCache) {,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,679,            formatter = cPatternedCache.get(pattern);,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,680,            if (formatter == null) {,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,682,"                parsePatternTo(builder, pattern);",0.35507,0,-1,0
org/joda/time/format/DateTimeFormat,24,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",0.34752,0,-1,0
org/joda/time/format/DateTimeFormat,24,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,0.34752,0,-1,0
org/joda/time/base/AbstractInstant,24,259,        if (this == readableInstant) {,0.32237,0,-1,0
org/joda/time/DateTimeZone,24,954,            return instantUTC;,0.30625,0,-1,0
org/joda/time/format/DateTimeFormat,24,470,"                        builder.appendYear(tokenLen, maxDigits);",0.2963,0,-1,0
org/joda/time/format/DateTimeFormat,24,471,                        break;,0.2963,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,495,            if (b == null || !b.isSupported()) {,0.27072,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,498,            return -1;,0.27072,0,-1,0
org/joda/time/format/FormatUtils,24,83,                digits = 4;,0.26776,0,-1,0
org/joda/time/format/FormatUtils,24,80,            if (value < 1000) {,0.2663,0,-1,0
org/joda/time/format/FormatUtils,24,82,            } else if (value < 10000) {,0.2663,0,-1,0
org/joda/time/format/FormatUtils,24,87,            for (; size > digits; size--) {,0.2663,0,-1,0
org/joda/time/format/FormatUtils,24,90,            buf.append(Integer.toString(value));,0.2663,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,343,        int year = iChronology.getYear(instant);,0.26486,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,344,"        int month = iChronology.getMonthOfYear(instant, year);",0.26486,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,345,"        return iChronology.getYearMonthMillis(year, month);",0.26486,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2504,            return iPrintedLengthEstimate;,0.26344,0,-1,0
org/joda/time/base/BaseLocal,24,47,        super();,0.26344,0,-1,0
org/joda/time/base/BaseLocal,24,48,    },0.26344,0,-1,0
org/joda/time/chrono/BasicChronology,24,371,        long millis = getYearMillis(year);,0.26203,0,-1,0
org/joda/time/chrono/BasicChronology,24,372,"        millis += getTotalMillisByYearMonth(year, month);",0.26203,0,-1,0
org/joda/time/chrono/BasicChronology,24,373,        return millis;,0.26203,0,-1,0
org/joda/time/format/DateTimeFormatter,24,917,            chrono = iChrono;,0.25521,0,-1,0
org/joda/time/format/DateTimeFormatter,24,258,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.25389,0,-1,0
org/joda/time/DateTimeZone,24,950,        int offsetOriginal = getOffset(originalInstantUTC);,0.25128,0,-1,0
org/joda/time/DateTimeZone,24,951,        long instantUTC = instantLocal - offsetOriginal;,0.25128,0,-1,0
org/joda/time/DateTimeZone,24,952,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.25128,0,-1,0
org/joda/time/DateTimeZone,24,953,        if (offsetLocalFromOriginal == offsetOriginal) {,0.25128,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,854,        return yearMonthDay();,0.24623,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1326,        if (ymd == null) {,0.24623,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1327,            ymd = new DateTimeFormatterBuilder(),0.24623,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1333,        return ymd;,0.24623,0,-1,0
org/joda/time/format/FormatUtils,24,67,        } else if (value < 100) {,0.23671,0,-1,0
org/joda/time/format/DateTimeFormatter,24,655,        DateTimePrinter printer = iPrinter;,0.23445,0,-1,0
org/joda/time/format/DateTimeFormatter,24,656,        if (printer == null) {,0.23445,0,-1,0
org/joda/time/format/DateTimeFormatter,24,659,        return printer;,0.23445,0,-1,0
org/joda/time/format/DateTimeFormatter,24,255,        if (iChrono == chrono) {,0.22072,0,-1,0
org/joda/time/chrono/ZonedChronology,24,406,            long localInstant = iZone.convertUTCToLocal(instant);,0.21778,0,-1,0
org/joda/time/chrono/ZonedChronology,24,407,            return iField.get(localInstant);,0.21778,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0.21681,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,363,            millis -= iOffset;,0.2103,0,-1,0
org/joda/time/chrono/AssembledChronology,24,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.20588,0,-1,0
org/joda/time/chrono/BaseChronology,24,132,"        long instant = year().set(0, year);",0.20588,0,-1,0
org/joda/time/chrono/BaseChronology,24,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.20588,0,-1,0
org/joda/time/chrono/BaseChronology,24,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.20588,0,-1,0
org/joda/time/chrono/BaseChronology,24,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.20588,0,-1,0
org/joda/time/chrono/BaseChronology,24,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.20588,0,-1,0
org/joda/time/chrono/BaseChronology,24,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.20588,0,-1,0
org/joda/time/chrono/BaseChronology,24,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.20588,0,-1,0
org/joda/time/field/SkipDateTimeField,24,82,            value--;,0.20588,0,-1,0
org/joda/time/field/SkipDateTimeField,24,100,        return iMinValue;,0.20588,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.20588,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,153,"        return super.set(instant, value - iOffset);",0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,53,"        this(chronology, field, 0);",0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,54,    },0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,64,        super(field);,0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,65,        iChronology = chronology;,0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,66,        int min = super.getMinimumValue();,0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,67,        if (min < skip) {,0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,68,            iMinValue = min + 1;,0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,74,        iSkip = skip;,0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,75,    },0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,88,        if (value <= iSkip) {,0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,89,            value--;,0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,91,"        return super.set(millis, value);",0.20588,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,95,        return iMinValue;,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,128,"        super(base, param);",0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,129,    },0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,104,        if (zone == null) {,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,107,        BuddhistChronology chrono = cCache.get(zone);,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,108,        if (chrono == null) {,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,114,"            cCache.put(zone, chrono);",0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,116,        return chrono;,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,204,        if (getParam() == null) {,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,206,            DateTimeField field = fields.year;,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,207,            fields.year = new OffsetDateTimeField(,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,211,            field = fields.yearOfEra;,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,212,            fields.yearOfEra = new DelegatedDateTimeField(,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,216,            field = fields.weekyear;,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,217,            fields.weekyear = new OffsetDateTimeField(,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,221,            fields.centuryOfEra = new DividedDateTimeField(,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,224,            field = new RemainderDateTimeField(,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,226,            fields.yearOfCentury = new OffsetDateTimeField(,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,229,            field = new RemainderDateTimeField(,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,234,            fields.era = ERA_FIELD;,0.20588,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,236,    },0.20588,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,82,"        return iField.set(instant, value);",0.20502,0,-1,0
org/joda/time/chrono/GJChronology,24,173,"        return getInstance(zone, gregorianCutover, 4);",0.20502,0,-1,0
org/joda/time/chrono/JulianChronology,24,79,            if (year == 0) {,0.20502,0,-1,0
org/joda/time/chrono/JulianChronology,24,83,            year++;,0.20502,0,-1,0
org/joda/time/chrono/GJChronology,24,782,            return iJulianField.getMinimumValue();,0.20502,0,-1,0
org/joda/time/chrono/GJChronology,24,813,            return iGregorianField.getMaximumValue();,0.20502,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,228,        return iChronology.getMaxYear();,0.20417,0,-1,0
org/joda/time/DateTime,24,481,        return this;,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,99,"        super(base, null);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,101,        iLowerLimit = lowerLimit;,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,102,        iUpperLimit = upperLimit;,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,103,    },0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,67,        if (base == null) {,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,74,        if (lowerLimit != null && upperLimit != null) {,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,213,"        fields.eras = convertField(fields.eras, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,214,"        fields.centuries = convertField(fields.centuries, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,215,"        fields.years = convertField(fields.years, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,216,"        fields.months = convertField(fields.months, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,217,"        fields.weekyears = convertField(fields.weekyears, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,218,"        fields.weeks = convertField(fields.weeks, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,219,"        fields.days = convertField(fields.days, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,221,"        fields.halfdays = convertField(fields.halfdays, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,222,"        fields.hours = convertField(fields.hours, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,223,"        fields.minutes = convertField(fields.minutes, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,224,"        fields.seconds = convertField(fields.seconds, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,225,"        fields.millis = convertField(fields.millis, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,229,"        fields.year = convertField(fields.year, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,230,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,233,"        fields.era = convertField(fields.era, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,235,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,236,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,237,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,238,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,239,"        fields.weekyear = convertField(fields.weekyear, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,240,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,242,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,245,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,246,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,247,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,248,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,250,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,251,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,253,    },0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,256,        if (field == null || !field.isSupported()) {,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,257,            return field;,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,259,        if (converted.containsKey(field)) {,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,260,            return (DurationField)converted.get(field);,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,262,        LimitDurationField limitField = new LimitDurationField(field);,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,263,"        converted.put(field, limitField);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,264,        return limitField;,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,268,        if (field == null || !field.isSupported()) {,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,271,        if (converted.containsKey(field)) {,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,274,        LimitDateTimeField limitField =,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,279,"        converted.put(field, limitField);",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,280,        return limitField;,0.20332,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,51,        super(DateTimeFieldType.era());,0.20332,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,52,        iEraText = text;,0.20332,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,53,    },0.20332,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,106,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.20332,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,111,        return null;,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,453,                           DurationField leapDurationField) {,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,454,"            super(field, field.getType());",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,455,            iDurationField = durationField;,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,456,            iRangeDurationField = rangeDurationField;,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,457,            iLeapDurationField = leapDurationField;,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,458,        },0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,391,        LimitDurationField(DurationField field) {,0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,392,"            super(field, field.getType());",0.20332,0,-1,0
org/joda/time/chrono/LimitChronology,24,393,        },0.20332,0,-1,0
org/joda/time/chrono/GJChronology,24,192,            cutoverInstant = DEFAULT_CUTOVER;,0.20248,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,172,"        return iField.set(instant, value);",0.20165,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,228,        return iField.getMaximumValue();,0.2,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,486,                return result;,0.19919,0,-1,0
org/joda/time/chrono/GJChronology,24,566,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0.19838,0,-1,0
org/joda/time/chrono/GJChronology,24,634,                return iJulianField.get(instant);,0.19838,0,-1,0
org/joda/time/chrono/GJChronology,24,701,                    if (instant + iGapDuration < iCutover) {,0.19838,0,-1,0
org/joda/time/chrono/GJChronology,24,702,                        instant = gregorianToJulian(instant);,0.19838,0,-1,0
org/joda/time/chrono/GJChronology,24,705,                    if (get(instant) != value) {,0.19838,0,-1,0
org/joda/time/chrono/GJChronology,24,902,                return gregorianToJulianByYear(instant);,0.19838,0,-1,0
org/joda/time/chrono/GJChronology,24,74,public final class GJChronology extends AssembledChronology {,0.19758,0,-1,0
org/joda/time/chrono/GJChronology,24,711,"                instant = iJulianField.set(instant, value);",0.19758,0,-1,0
org/joda/time/chrono/GJChronology,24,712,                if (instant >= iCutover) {,0.19758,0,-1,0
org/joda/time/chrono/GJChronology,24,899,            if (iConvertByWeekyear) {,0.19758,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,482,            DateTimeField other = obj.iField;,0.19679,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,483,            int result = compareReverse,0.19679,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,485,            if (result != 0) {,0.19679,0,-1,0
org/joda/time/chrono/JulianChronology,24,78,        if (year <= 0) {,0.19679,0,-1,0
org/joda/time/chrono/JulianChronology,24,85,        return year;,0.19679,0,-1,0
org/joda/time/chrono/JulianChronology,24,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",0.19679,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,471,                millis = iField.roundFloor(millis);,0.19522,0,-1,0
org/joda/time/field/BaseDurationField,24,155,            return 1;,0.19522,0,-1,0
org/joda/time/chrono/GJChronology,24,697,            if (instant >= iCutover) {,0.19522,0,-1,0
org/joda/time/chrono/GJChronology,24,698,"                instant = iGregorianField.set(instant, value);",0.19522,0,-1,0
org/joda/time/chrono/GJChronology,24,699,                if (instant < iCutover) {,0.19522,0,-1,0
org/joda/time/chrono/GJChronology,24,724,            return instant;,0.19522,0,-1,0
org/joda/time/chrono/GJChronology,24,631,            if (instant >= iCutover) {,0.19444,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,503,        return -a.compareTo(b);,0.19368,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1192,            return position + 1;,0.19291,0,-1,0
org/joda/time/field/BaseDurationField,24,146,        long otherMillis = otherField.getUnitMillis();,0.19291,0,-1,0
org/joda/time/field/BaseDurationField,24,147,        long thisMillis = getUnitMillis();,0.19291,0,-1,0
org/joda/time/field/BaseDurationField,24,149,        if (thisMillis == otherMillis) {,0.19291,0,-1,0
org/joda/time/field/BaseDurationField,24,152,        if (thisMillis < otherMillis) {,0.19291,0,-1,0
org/joda/time/field/BaseDurationField,24,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.19291,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,500,        if (b == null || !b.isSupported()) {,0.19216,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,341,            DurationField months = DurationFieldType.months().getField(iChrono);,0.18992,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,342,            DurationField days = DurationFieldType.days().getField(iChrono);,0.18992,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,343,            DurationField first = savedFields[0].iField.getDurationField();,0.18992,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,344,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0.18992,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,353,"                millis = savedFields[i].set(millis, resetFields);",0.18992,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,403,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,0.18992,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,494,        if (a == null || !a.isSupported()) {,0.18992,0,-1,0
org/joda/time/DateTime,24,472,    },0.18992,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,465,            if (iText == null) {,0.18992,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,466,"                millis = iField.set(millis, iValue);",0.18992,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,470,            if (reset) {,0.18992,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,473,            return millis;,0.18992,0,-1,0
org/joda/time/DateTime,24,470,"        super(year, monthOfYear, dayOfMonth,",0.18919,0,-1,0
org/joda/time/chrono/BasicChronology,24,402,            i2 = i2 - unitMillis + 1;,0.18919,0,-1,0
org/joda/time/chrono/GregorianChronology,24,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.18919,0,-1,0
org/joda/time/chrono/GJChronology,24,775,            return iGregorianField.getLeapDurationField();,0.18702,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1621,        if (lte == null) {,0.18631,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1622,            lte = new DateTimeFormatterBuilder(),0.18631,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1626,        return lte;,0.18631,0,-1,0
org/joda/time/chrono/GJChronology,24,755,            return iRangeDurationField;,0.18081,0,-1,0
org/joda/time/chrono/JulianChronology,24,224,            leapYears = (relativeYear + 3) >> 2;,0.18015,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,131,            instant = iChronology.getYearMillis(year + 1);,0.18015,0,-1,0
org/joda/time/field/BaseDateTimeField,24,886,        long newInstant = roundFloor(instant);,0.17949,0,-1,0
org/joda/time/field/BaseDateTimeField,24,887,        if (newInstant != instant) {,0.17949,0,-1,0
org/joda/time/field/BaseDateTimeField,24,888,"            instant = add(newInstant, 1);",0.17949,0,-1,0
org/joda/time/field/BaseDateTimeField,24,890,        return instant;,0.17949,0,-1,0
org/joda/time/chrono/BasicChronology,24,185,        return iMinDaysInFirstWeek;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,272,    },0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,83,        return to.getDateTimeMillis,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,189,        zone = DateTimeUtils.getZone(zone);,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,191,        if (gregorianCutover == null) {,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,200,        if (chronos == null) {,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,201,            chronos = new ArrayList<GJChronology>(2);,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,202,"            cCache.put(zone, chronos);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,214,        if (zone == DateTimeZone.UTC) {,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,215,            chrono = new GJChronology,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,228,        chronos.add(chrono);,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,230,        return chrono;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,452,        Object[] params = (Object[])getParam();,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,454,        JulianChronology julian = (JulianChronology)params[0];,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,455,        GregorianChronology gregorian = (GregorianChronology)params[1];,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,456,        Instant cutoverInstant = (Instant)params[2];,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,457,        iCutoverMillis = cutoverInstant.getMillis();,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,459,        iJulianChronology = julian;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,460,        iGregorianChronology = gregorian;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,461,        iCutoverInstant = cutoverInstant;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,463,        if (getBase() != null) {,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,467,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,472,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,478,        fields.copyFieldsFrom(gregorian);,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,484,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,488,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,489,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,490,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,491,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,492,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,493,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,494,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,495,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,496,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,497,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,499,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,504,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,513,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,514,            fields.dayOfYear = new CutoverField(,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,519,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,520,            fields.weekOfWeekyear = new CutoverField(,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,528,            fields.year = new ImpreciseCutoverField(,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,530,            fields.years = fields.year.getDurationField();,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,531,            fields.yearOfEra = new ImpreciseCutoverField(,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,533,            fields.yearOfCentury = new ImpreciseCutoverField(,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,536,            fields.centuryOfEra = new ImpreciseCutoverField(,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,538,            fields.centuries = fields.centuryOfEra.getDurationField();,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,540,            fields.monthOfYear = new ImpreciseCutoverField(,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,542,            fields.months = fields.monthOfYear.getDurationField();,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,544,            fields.weekyear = new ImpreciseCutoverField(,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,546,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,548,            fields.weekyears = fields.weekyear.getDurationField();,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,554,            CutoverField cf = new CutoverField,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,556,            cf.iRangeDurationField = fields.months;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,557,            fields.dayOfMonth = cf;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,559,    },0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,562,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,599,"            this(julianField, gregorianField, cutoverMillis, false);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,600,        },0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,609,"                     long cutoverMillis, boolean convertByWeekyear) {",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,610,            super(gregorianField.getType());,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,611,            iJulianField = julianField;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,612,            iGregorianField = gregorianField;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,613,            iCutover = cutoverMillis;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,614,            iConvertByWeekyear = convertByWeekyear;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,617,            iDurationField = gregorianField.getDurationField();,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,619,            DurationField rangeField = gregorianField.getRangeDurationField();,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,620,            if (rangeField == null) {,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,621,                rangeField = julianField.getRangeDurationField();,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,623,            iRangeDurationField = rangeField;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,624,        },0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,751,            return iDurationField;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,921,"            this(julianField, gregorianField, null, cutoverMillis, false);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,922,        },0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,932,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,933,        },0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,943,        {,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,944,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,945,            if (durationField == null) {,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,946,"                durationField = new LinkedDurationField(iDurationField, this);",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,948,            iDurationField = durationField;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,949,        },0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,1070,"            super(durationField, durationField.getType());",0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,1071,            iField = dateTimeField;,0.17949,0,-1,0
org/joda/time/chrono/GJChronology,24,1072,        },0.17949,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,72,        if (years == 0) {,0.17949,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,75,"        return set(instant, get(instant) + years);",0.17949,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,127,        int year = get(instant);,0.17949,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,128,        long yearStartMillis = iChronology.getYearMillis(year);,0.17949,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,129,        if (instant != yearStartMillis) {,0.17949,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,133,        return instant;,0.17949,0,-1,0
org/joda/time/DurationFieldType,24,280,                    return chronology.days();,0.17883,0,-1,0
org/joda/time/field/SkipDateTimeField,24,80,        int value = super.get(millis);,0.17818,0,-1,0
org/joda/time/field/SkipDateTimeField,24,81,        if (value <= iSkip) {,0.17818,0,-1,0
org/joda/time/field/SkipDateTimeField,24,84,        return value;,0.17818,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,181,        } else if ( workWoyYear > year ) {,0.17818,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,96,        return iField.get(instant);,0.17754,0,-1,0
org/joda/time/chrono/JulianChronology,24,211,        return (year & 3) == 0;,0.17754,0,-1,0
org/joda/time/chrono/JulianChronology,24,219,        int relativeYear = year - 1968;,0.17754,0,-1,0
org/joda/time/chrono/JulianChronology,24,221,        if (relativeYear <= 0) {,0.17754,0,-1,0
org/joda/time/chrono/JulianChronology,24,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.17754,0,-1,0
org/joda/time/chrono/JulianChronology,24,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,0.17754,0,-1,0
org/joda/time/chrono/JulianChronology,24,253,        return MILLIS_PER_YEAR / 2;,0.17754,0,-1,0
org/joda/time/chrono/JulianChronology,24,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0.17754,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,377,        return millis;,0.17626,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1177,            char a = text.charAt(position);,0.17626,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1178,            char b = iValue;,0.17626,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1180,            if (a != b) {,0.17626,0,-1,0
org/joda/time/chrono/BasicChronology,24,153,        if ((base = getBase()) != null) {,0.17563,0,-1,0
org/joda/time/chrono/BasicChronology,24,157,        FieldUtils.verifyValueBounds,0.17563,0,-1,0
org/joda/time/chrono/BasicChronology,24,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.17563,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,332,        SavedField[] savedFields = iSavedFields;,0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,333,        int count = iSavedFieldsCount;,0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,334,        if (iSavedFieldsShared) {,0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,338,"        sort(savedFields, count);",0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,339,        if (count > 0) {,0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,350,        long millis = iMillis;,0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,352,            for (int i = 0; i < count; i++) {,0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,360,        },0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,362,        if (iZone == null) {,0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,399,        if (high > 10) {,0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,402,            for (int i=0; i<high; i++) {,0.175,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,410,    },0.175,0,-1,0
org/joda/time/chrono/BasicChronology,24,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.175,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.175,0,-1,0
org/joda/time/DurationFieldType,24,276,                    return chronology.months();,0.175,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1316,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0.17438,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1173,            if (position >= text.length()) {,0.17438,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1292,                length++;,0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1293,            },0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1300,            if (length >= 9) {,0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1305,                int i = position;,0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1306,                if (negative) {,0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1310,                    value = text.charAt(i++) - '0';,0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1313,                },0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1314,                position += length;,0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1315,                while (i < position) {,0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1318,                if (negative) {,0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1323,"            bucket.saveField(iFieldType, value);",0.17376,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1324,            return position;,0.17376,0,-1,0
org/joda/time/chrono/BasicChronology,24,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.17376,0,-1,0
org/joda/time/chrono/BasicChronology,24,539,            if (daysSince19700101 < -3) {,0.17376,0,-1,0
org/joda/time/DateTimeUtils,24,269,        if (zone == null) {,0.17314,0,-1,0
org/joda/time/DateTimeUtils,24,272,        return zone;,0.17314,0,-1,0
org/joda/time/format/FormatUtils,24,63,            for (; size > 1; size--) {,0.17254,0,-1,0
org/joda/time/format/FormatUtils,24,64,                buf.append('0');,0.17254,0,-1,0
org/joda/time/format/FormatUtils,24,66,            buf.append((char)(value + '0'));,0.17254,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,234,"        saveField(new SavedField(fieldType.getField(iChrono), value));",0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,235,    },0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,249,        SavedField[] savedFields = iSavedFields;,0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,250,        int savedFieldsCount = iSavedFieldsCount;,0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,252,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,261,        iSavedState = null;,0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,262,        savedFields[savedFieldsCount] = field;,0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,263,        iSavedFieldsCount = savedFieldsCount + 1;,0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,264,    },0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,450,"        SavedField(DateTimeField field, int value) {",0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,451,            iField = field;,0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,452,            iValue = value;,0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,453,            iText = null;,0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,454,            iLocale = null;,0.17193,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,455,        },0.17193,0,-1,0
org/joda/time/chrono/JulianChronology,24,50,public final class JulianChronology extends BasicGJChronology {,0.17133,0,-1,0
org/joda/time/chrono/BasicChronology,24,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.17073,0,-1,0
org/joda/time/chrono/BasicChronology,24,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.17073,0,-1,0
org/joda/time/chrono/BasicChronology,24,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.17073,0,-1,0
org/joda/time/chrono/BasicChronology,24,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,133,        int thisWeekyear = get( instant );,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,134,        if ( thisWeekyear == year ) {,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,140,        int thisDow = iChronology.getDayOfWeek(instant);,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,155,        if ( setToWeek > maxOutWeeks ) {,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,162,        long workInstant = instant; // Get a copy,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,168,"        workInstant = iChronology.setYear( workInstant, year );",0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,173,        int workWoyYear = get( workInstant );,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,179,        if ( workWoyYear < year ) {,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.17073,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,204,        return workInstant;,0.17073,0,-1,0
org/joda/time/chrono/BasicChronology,24,493,        int year = getYear(instant);,0.17014,0,-1,0
org/joda/time/chrono/BasicChronology,24,494,"        int week = getWeekOfWeekyear(instant, year);",0.17014,0,-1,0
org/joda/time/chrono/BasicChronology,24,495,        if (week == 1) {,0.17014,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,60,        return iChronology.getWeekyear(instant);,0.17014,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,88,        return iField.isSupported();,0.16897,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,208,        return iField.getLeapDurationField();,0.16897,0,-1,0
org/joda/time/DurationFieldType,24,264,            chronology = DateTimeUtils.getChronology(chronology);,0.16897,0,-1,0
org/joda/time/DurationFieldType,24,266,            switch (iOrdinal) {,0.16897,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,80,        return iType;,0.16838,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,192,        return iField.getDurationField();,0.16838,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,163,        return getMaximumValue(instant);,0.16781,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,103,        return DateTimeConstants.MONDAY;,0.16781,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,112,        return DateTimeConstants.SUNDAY;,0.16781,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,95,            instant += 1;,0.16724,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,96,            return instant - instant % iUnitMillis - iUnitMillis;,0.16724,0,-1,0
org/joda/time/field/BaseDateTimeField,24,792,        return getMaximumValue();,0.16724,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1289,                if (c < '0' || c > '9') {,0.16724,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1263,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",0.16667,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1265,            boolean negative = false;,0.16667,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1266,            int length = 0;,0.16667,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1267,            while (length < limit) {,0.16667,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1268,                char c = text.charAt(position + length);,0.16667,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1269,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,0.16667,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1295,            if (length == 0) {,0.16667,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2584,            DateTimeParser[] elements = iParsers;,0.1661,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2585,            if (elements == null) {,0.1661,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2589,            int len = elements.length;,0.1661,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2590,            for (int i=0; i<len && position >= 0; i++) {,0.1661,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2591,"                position = elements[i].parseInto(bucket, text, position);",0.1661,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2593,            return position;,0.1661,0,-1,0
org/joda/time/chrono/BasicChronology,24,344,            return jan1millis + (8 - jan1dayOfWeek),0.1661,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.1661,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0.1661,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,236,        if (wow > 1) {,0.1661,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,239,        return instant;,0.1661,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.1661,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.16554,0,-1,0
org/joda/time/chrono/BasicChronology,24,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0.16554,0,-1,0
org/joda/time/chrono/BasicChronology,24,339,        long jan1millis = getYearMillis(year);,0.16498,0,-1,0
org/joda/time/chrono/BasicChronology,24,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.16498,0,-1,0
org/joda/time/chrono/BasicChronology,24,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.16498,0,-1,0
org/joda/time/chrono/BasicChronology,24,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.16498,0,-1,0
org/joda/time/chrono/BasicChronology,24,517,        if (instant < firstWeekMillis1) {,0.16498,0,-1,0
org/joda/time/chrono/BasicChronology,24,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.16498,0,-1,0
org/joda/time/chrono/BasicChronology,24,521,        if (instant >= firstWeekMillis2) {,0.16498,0,-1,0
org/joda/time/chrono/BasicChronology,24,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.16498,0,-1,0
org/joda/time/chrono/BasicChronology,24,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.16443,0,-1,0
org/joda/time/format/FormatUtils,24,50,        if (value < 0) {,0.16388,0,-1,0
org/joda/time/format/FormatUtils,24,62,        if (value < 10) {,0.16388,0,-1,0
org/joda/time/format/FormatUtils,24,92,    },0.16388,0,-1,0
org/joda/time/Instant,24,105,        super();,0.16388,0,-1,0
org/joda/time/Instant,24,106,        iMillis = instant;,0.16388,0,-1,0
org/joda/time/Instant,24,107,    },0.16388,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,93,            return instant - instant % iUnitMillis;,0.16172,0,-1,0
org/joda/time/Instant,24,243,        return iMillis;,0.15858,0,-1,0
org/joda/time/chrono/BasicChronology,24,414,            if (isLeapYear(year)) {,0.15655,0,-1,0
org/joda/time/chrono/BasicChronology,24,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.15655,0,-1,0
org/joda/time/chrono/BasicChronology,24,420,            yearStart += oneYear;,0.15655,0,-1,0
org/joda/time/chrono/BasicChronology,24,422,            if (yearStart <= instant) {,0.15655,0,-1,0
org/joda/time/chrono/BasicChronology,24,424,                year++;,0.15655,0,-1,0
org/joda/time/chrono/BasicChronology,24,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.15361,0,-1,0
org/joda/time/chrono/BasicChronology,24,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.15361,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,118,        super();,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,71,    private SavedField[] iSavedFields = new SavedField[8];,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,119,        chrono = DateTimeUtils.getChronology(chrono);,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,120,        iMillis = instantLocal;,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,121,        iChrono = chrono.withUTC();,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,122,        iLocale = (locale == null ? Locale.getDefault() : locale);,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,123,        setZone(chrono.getZone());,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,124,        iPivotYear = pivotYear;,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,125,        iDefaultYear = defaultYear;,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,126,    },0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,162,        iSavedState = null;,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,163,        iZone = zone == DateTimeZone.UTC ? null : zone;,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,164,        iOffset = 0;,0.15265,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,165,    },0.15265,0,-1,0
org/joda/time/format/DateTimeFormatter,24,900,        DateTimeParser parser = iParser;,0.15265,0,-1,0
org/joda/time/format/DateTimeFormatter,24,901,        if (parser == null) {,0.15265,0,-1,0
org/joda/time/format/DateTimeFormatter,24,904,        return parser;,0.15265,0,-1,0
org/joda/time/chrono/JulianChronology,24,162,"        super(base, param, minDaysInFirstWeek);",0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,163,    },0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,75,    },0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,114,"        return getInstance(zone, 4);",0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,125,        if (zone == null) {,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,129,        synchronized (cCache) {,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,130,            JulianChronology[] chronos = cCache.get(zone);,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,131,            if (chronos == null) {,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,132,                chronos = new JulianChronology[7];,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,133,"                cCache.put(zone, chronos);",0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,136,                chrono = chronos[minDaysInFirstWeek - 1];,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,140,            },0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,141,            if (chrono == null) {,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,142,                if (zone == DateTimeZone.UTC) {,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,151,        },0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,152,        return chrono;,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,241,        return MIN_YEAR;,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,245,        return MAX_YEAR;,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,249,        return MILLIS_PER_YEAR;,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,257,        return MILLIS_PER_MONTH;,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,265,        if (getBase() == null) {,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,266,            super.assemble(fields);,0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,268,"            fields.year = new SkipDateTimeField(this, fields.year);",0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0.1517,0,-1,0
org/joda/time/chrono/JulianChronology,24,271,    },0.1517,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1671,        if (ze == null) {,0.15123,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1672,            ze = new DateTimeFormatterBuilder(),0.15123,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1676,        return ze;,0.15123,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2072,                est += iMinFields - 1;,0.15031,0,-1,0
org/joda/time/field/SkipDateTimeField,24,54,"        this(chronology, field, 0);",0.15031,0,-1,0
org/joda/time/field/SkipDateTimeField,24,55,    },0.15031,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,196,        return iField.getRangeDurationField();,0.15031,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,224,        return iChronology.getMinYear();,0.15031,0,-1,0
org/joda/time/field/SkipDateTimeField,24,65,        super(field);,0.14985,0,-1,0
org/joda/time/field/SkipDateTimeField,24,66,        iChronology = chronology;,0.14985,0,-1,0
org/joda/time/field/SkipDateTimeField,24,67,        int min = super.getMinimumValue();,0.14985,0,-1,0
org/joda/time/field/SkipDateTimeField,24,68,        if (min < skip) {,0.14985,0,-1,0
org/joda/time/field/SkipDateTimeField,24,69,            iMinValue = min - 1;,0.14985,0,-1,0
org/joda/time/field/SkipDateTimeField,24,75,        iSkip = skip;,0.14985,0,-1,0
org/joda/time/field/SkipDateTimeField,24,76,    },0.14985,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,212,        return iField.getMinimumValue();,0.14985,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,52,"        this(field, null);",0.14939,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,53,    },0.14939,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,62,        super();,0.14939,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,63,        if (field == null) {,0.14939,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,66,        iField = field;,0.14939,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,67,        iType = (type == null ? field.getType() : type);,0.14939,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,68,    },0.14939,0,-1,0
org/joda/time/DateTimeZone,24,923,        int offset = getOffset(instantUTC);,0.14804,0,-1,0
org/joda/time/DateTimeZone,24,924,        long instantLocal = instantUTC + offset;,0.14804,0,-1,0
org/joda/time/DateTimeZone,24,926,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.14804,0,-1,0
org/joda/time/DateTimeZone,24,929,        return instantLocal;,0.14804,0,-1,0
org/joda/time/base/AbstractPartial,24,54,        super();,0.14715,0,-1,0
org/joda/time/base/AbstractPartial,24,55,    },0.14715,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2070,            int est = 1 + iMinFields << 1;,0.14497,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2071,            if (iShowSeparators) {,0.14497,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2074,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,0.14497,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2077,            return est;,0.14497,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2207,            return estimatePrintedLength();,0.14497,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,115,        return iChronology.getMinYear();,0.1437,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1535,                if (i > 0) {,0.13611,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1536,                    return iWallOffsets[i - 1];,0.13611,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1574,                return transitions[i];,0.13573,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1024,        return append0(new TimeZoneOffset,0.13536,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2054,            super();,0.13388,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2055,            iZeroOffsetPrintText = zeroOffsetPrintText;,0.13388,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2056,            iZeroOffsetParseText = zeroOffsetParseText;,0.13388,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2057,            iShowSeparators = showSeparators;,0.13388,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2058,            if (minFields <= 0 || maxFields < minFields) {,0.13388,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2061,            if (minFields > 4) {,0.13388,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2065,            iMinFields = minFields;,0.13388,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2066,            iMaxFields = maxFields;,0.13388,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2067,        },0.13388,0,-1,0
org/joda/time/format/DateTimeFormatter,24,126,        super();,0.13315,0,-1,0
org/joda/time/format/DateTimeFormatter,24,127,        iPrinter = printer;,0.13315,0,-1,0
org/joda/time/format/DateTimeFormatter,24,128,        iParser = parser;,0.13315,0,-1,0
org/joda/time/format/DateTimeFormatter,24,129,        iLocale = locale;,0.13315,0,-1,0
org/joda/time/format/DateTimeFormatter,24,130,        iOffsetParsed = offsetParsed;,0.13315,0,-1,0
org/joda/time/format/DateTimeFormatter,24,131,        iChrono = chrono;,0.13315,0,-1,0
org/joda/time/format/DateTimeFormatter,24,132,        iZone = zone;,0.13315,0,-1,0
org/joda/time/format/DateTimeFormatter,24,133,        iPivotYear = pivotYear;,0.13315,0,-1,0
org/joda/time/format/DateTimeFormatter,24,134,        iDefaultYear = defaultYear;,0.13315,0,-1,0
org/joda/time/format/DateTimeFormatter,24,135,    },0.13315,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1649,        if (sme == null) {,0.12596,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1650,            sme = new DateTimeFormatterBuilder(),0.12596,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1655,        return sme;,0.12596,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1630,        if (hde == null) {,0.12564,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1631,            hde = new DateTimeFormatterBuilder(),0.12564,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1635,        return hde;,0.12564,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1639,        if (mhe == null) {,0.12564,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1640,            mhe = new DateTimeFormatterBuilder(),0.12564,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1645,        return mhe;,0.12564,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1562,        if (mye == null) {,0.1225,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1563,            mye = new DateTimeFormatterBuilder(),0.1225,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1568,        return mye;,0.1225,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1572,        if (dme == null) {,0.1225,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1573,            dme = new DateTimeFormatterBuilder(),0.1225,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1578,        return dme;,0.1225,0,-1,0
org/joda/time/format/FormatUtils,24,31,    private static final double LOG_10 = Math.log(10);,0.1225,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1553,        if (ye == null) {,0.12159,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1554,            ye = new DateTimeFormatterBuilder(),0.12159,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1558,        return ye;,0.12159,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,165,        return getWrappedField().getLeapDurationField();,0.12159,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0.1201,0,-1,0
org/joda/time/DateTimeFieldType,24,498,                    return chronology.dayOfMonth();,0.11951,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0.11695,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0.11611,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0.11557,0,-1,0
org/joda/time/DateTimeUtils,24,253,            return ISOChronology.getInstance();,0.11316,0,-1,0
org/joda/time/DateTimeFieldType,24,496,                    return chronology.monthOfYear();,0.11264,0,-1,0
org/joda/time/DateTimeFieldType,24,492,                    return chronology.year();,0.11011,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0.10987,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0.10913,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,448,        if (fieldType == null) {,0.10769,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,451,        if (maxDigits < minDigits) {,0.10769,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,454,        if (minDigits < 0 || maxDigits <= 0) {,0.10769,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,457,        if (minDigits <= 1) {,0.10769,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0.10769,0,-1,0
org/joda/time/chrono/GregorianChronology,24,213,                leapYears--;,0.10493,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2614,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",0.10273,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2623,"                        addArrayToList(parserList, ((Composite)element).iParsers);",0.10273,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2632,            if (array != null) {,0.10273,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2633,                for (int i=0; i<array.length; i++) {,0.10273,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2634,                    list.add(array[i]);,0.10273,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2637,        },0.10273,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,209,        if (formatter == null) {,0.10251,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,212,"        return append0(formatter.getPrinter(), formatter.getParser());",0.10251,0,-1,0
org/joda/time/format/DateTimeFormatter,24,915,        chrono = DateTimeUtils.getChronology(chrono);,0.1023,0,-1,0
org/joda/time/format/DateTimeFormatter,24,916,        if (iChrono != null) {,0.1023,0,-1,0
org/joda/time/format/DateTimeFormatter,24,919,        if (iZone != null) {,0.1023,0,-1,0
org/joda/time/format/DateTimeFormatter,24,922,        return chrono;,0.1023,0,-1,0
org/joda/time/format/DateTimeFormatter,24,171,        return iParser;,0.10187,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,345,        iFormatter = null;,0.10062,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,346,        iElementPairs.add(printer);,0.10062,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,347,        iElementPairs.add(parser);,0.10062,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,348,        return this;,0.10062,0,-1,0
org/joda/time/format/DateTimeFormatter,24,153,        return iPrinter;,0.09879,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,92,        if (instant >= 0) {,0.098,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1112,            return true;,0.09684,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1102,            return true;,0.09646,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1075,                Object printer = iElementPairs.get(0);,0.09608,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1076,                Object parser = iElementPairs.get(1);,0.09608,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1078,                if (printer != null) {,0.09608,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1079,                    if (printer == parser || parser == null) {,0.09608,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1080,                        f = printer;,0.09608,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,56,        return iChronology.getDayOfWeek(instant);,0.09351,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.09328,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0.09298,0,-1,0
org/joda/time/chrono/BasicChronology,24,435,"        return getMonthOfYear(millis, getYear(millis));",0.09298,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,72,        return iChronology.getMonthOfYear(instant);,0.09298,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,396,        if (fieldType == null) {,0.0928,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,399,        if (maxDigits < minDigits) {,0.0928,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,402,        if (minDigits < 0 || maxDigits <= 0) {,0.0928,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,405,        if (minDigits <= 1) {,0.0928,0,-1,0
org/joda/time/chrono/AssembledChronology,24,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.09245,0,-1,0
org/joda/time/chrono/BasicChronology,24,534,        if (instant >= 0) {,0.09211,0,-1,0
org/joda/time/base/BaseDateTime,24,256,"        iMillis = checkInstant(instant, iChronology);",0.09074,0,-1,0
org/joda/time/base/BaseDateTime,24,257,    },0.09074,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1259,            return iMaxParsedDigits;,0.09024,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1401,            return iMaxParsedDigits;,0.09024,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1145,            return 1;,0.09024,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1169,            return 1;,0.09024,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1252,            super();,0.09007,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1253,            iFieldType = fieldType;,0.09007,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1254,            iMaxParsedDigits = maxParsedDigits;,0.09007,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1255,            iSigned = signed;,0.09007,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1256,        },0.09007,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1396,"            super(fieldType, maxParsedDigits, signed);",0.09007,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1397,            iMinPrintedDigits = minPrintedDigits;,0.09007,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1398,        },0.09007,0,-1,0
org/joda/time/base/BaseDateTime,24,252,        super();,0.08991,0,-1,0
org/joda/time/base/BaseDateTime,24,253,        iChronology = checkChronology(chronology);,0.08991,0,-1,0
org/joda/time/base/BaseDateTime,24,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.08991,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2476,                int size = printerList.size();,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2477,                iPrinters = new DateTimePrinter[size];,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2478,                int printEst = 0;,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2479,                for (int i=0; i<size; i++) {,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2480,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2481,                    printEst += printer.estimatePrintedLength();,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2482,                    iPrinters[i] = printer;,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2484,                iPrintedLengthEstimate = printEst;,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2491,                int size = parserList.size();,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2492,                iParsers = new DateTimeParser[size];,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2493,                int parseEst = 0;,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2494,                for (int i=0; i<size; i++) {,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2495,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2496,                    parseEst += parser.estimateParsedLength();,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2497,                    iParsers[i] = parser;,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2499,                iParsedLengthEstimate = parseEst;,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2611,                Object element = elementPairs.get(i);,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2612,                if (element instanceof DateTimePrinter) {,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2613,                    if (element instanceof Composite) {,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2616,                        printerList.add(element);,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2620,                element = elementPairs.get(i + 1);,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2621,                if (element instanceof DateTimeParser) {,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2622,                    if (element instanceof Composite) {,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2625,                        parserList.add(element);,0.08958,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,359,        return append0(new CharacterLiteral(c));,0.08909,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1140,            super();,0.08909,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1141,            iValue = value;,0.08909,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1142,        },0.08909,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1100,                return ((Composite)f).isPrinter();,0.08893,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1110,                return ((Composite)f).isParser();,0.08893,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2597,            return iPrinters != null;,0.08893,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2601,            return iParsers != null;,0.08893,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1088,                f = new Composite(iElementPairs);,0.08861,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2465,            super();,0.08861,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2467,            List<Object> printerList = new ArrayList<Object>();,0.08861,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2468,            List<Object> parserList = new ArrayList<Object>();,0.08861,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2470,"            decompose(elementPairs, printerList, parserList);",0.08861,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2472,            if (printerList.size() <= 0) {,0.08861,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2487,            if (parserList.size() <= 0) {,0.08861,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2501,        },0.08861,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2609,            int size = elementPairs.size();,0.08861,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2610,            for (int i=0; i<size; i+=2) {,0.08861,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2629,        },0.08861,0,-1,0
org/joda/time/DateTimeFieldType,24,480,            chronology = DateTimeUtils.getChronology(chronology);,0.08734,0,-1,0
org/joda/time/DateTimeFieldType,24,482,            switch (iOrdinal) {,0.08734,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,0.08719,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.08719,0,-1,0
org/joda/time/chrono/BasicChronology,24,458,"        int month = getMonthOfYear(millis, year);",0.08673,0,-1,0
org/joda/time/chrono/BasicChronology,24,459,"        return getDayOfMonth(millis, year, month);",0.08673,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.08673,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,294,        int thisYear = iChronology.getYear(instant);,0.08673,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.08673,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.08673,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,298,        if (thisDom > maxDom) {,0.08673,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.08673,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,168,                break;,0.08627,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,55,        return 1;,0.08627,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1533,            i = ~i;,0.08596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1534,            if (i < transitions.length) {,0.08596,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.08596,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,205,                if (iOffset == Integer.MIN_VALUE) {,0.08596,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.08596,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,208,                return iOffset;,0.08596,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,111,        return getInfo(instant).getOffset(instant);,0.08596,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1528,            long[] transitions = iTransitions;,0.08581,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1529,"            int i = Arrays.binarySearch(transitions, instant);",0.08581,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1530,            if (i >= 0) {,0.08581,0,-1,0
org/joda/time/field/FieldUtils,24,237,    },0.08566,0,-1,0
org/joda/time/chrono/BasicChronology,24,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.08566,0,-1,0
org/joda/time/chrono/BasicChronology,24,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.08566,0,-1,0
org/joda/time/chrono/BasicChronology,24,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.08566,0,-1,0
org/joda/time/chrono/BasicChronology,24,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.08566,0,-1,0
org/joda/time/chrono/BasicChronology,24,682,        return getMaxMonth();,0.08566,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,104,        Object f = getFormatter();,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,105,        DateTimePrinter printer = null;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,106,        if (isPrinter(f)) {,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,107,            printer = (DateTimePrinter) f;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,109,        DateTimeParser parser = null;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,110,        if (isParser(f)) {,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,111,            parser = (DateTimeParser) f;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,113,        if (printer != null || parser != null) {,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,114,"            return new DateTimeFormatter(printer, parser);",0.08551,0,-1,0
org/joda/time/format/DateTimeFormatter,24,107,        super();,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatter,24,108,        iPrinter = printer;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatter,24,109,        iParser = parser;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatter,24,110,        iLocale = null;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatter,24,111,        iOffsetParsed = false;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatter,24,112,        iChrono = null;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatter,24,113,        iZone = null;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatter,24,114,        iPivotYear = null;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatter,24,115,        iDefaultYear = 2000;,0.08551,0,-1,0
org/joda/time/format/DateTimeFormatter,24,116,    },0.08551,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1570,            long[] transitions = iTransitions;,0.08551,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1571,"            int i = Arrays.binarySearch(transitions, instant);",0.08551,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1572,            i = (i >= 0) ? (i + 1) : ~i;,0.08551,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1573,            if (i < transitions.length) {,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,188,"        Info(DateTimeZone zone, long periodStart) {",0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,185,        private int iOffset = Integer.MIN_VALUE;,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,186,        private int iStandardOffset = Integer.MIN_VALUE;,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,189,            iPeriodStart = periodStart;,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,190,            iZoneRef = zone;,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,191,        },0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,148,        int period = (int)(millis >> 32);,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,149,        Info[] cache = iInfoCache;,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,150,        int index = period & cInfoCacheMask;,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,151,        Info info = cache[index];,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,152,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,153,            info = createInfo(millis);,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,154,            cache[index] = info;,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,156,        return info;,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,160,        long periodStart = millis & (0xffffffffL << 32);,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,161,"        Info info = new Info(iZone, periodStart);",0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,163,        long end = periodStart | 0xffffffffL;,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,164,        Info chain = info;,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,166,            long next = iZone.nextTransition(periodStart);,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,167,            if (next == periodStart || next > end) {,0.08551,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,174,        return info;,0.08551,0,-1,0
org/joda/time/field/FieldUtils,24,232,        if ((value < lowerBound) || (value > upperBound)) {,0.08551,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,82,        FieldUtils.verifyValueBounds,0.08522,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,84,"        return iChronology.setYear(instant, year);",0.08522,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1098,        if (f instanceof DateTimePrinter) {,0.08507,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1099,            if (f instanceof Composite) {,0.08507,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1108,        if (f instanceof DateTimeParser) {,0.08507,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1109,            if (f instanceof Composite) {,0.08507,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.08492,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,112,        return instant + (value - get(instant)) * iUnitMillis;,0.08492,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1071,        Object f = iFormatter;,0.08478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1073,        if (f == null) {,0.08478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1074,            if (iElementPairs.size() == 2) {,0.08478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1087,            if (f == null) {,0.08478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1091,            iFormatter = f;,0.08478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1094,        return f;,0.08478,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,83,        super();,0.08463,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,84,        iElementPairs = new ArrayList<Object>();,0.08463,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,85,    },0.08463,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,336,        iFormatter = null;,0.08463,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,338,        iElementPairs.add(element);,0.08463,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,339,        iElementPairs.add(element);,0.08463,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,340,        return this;,0.08463,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.08305,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,80,        return instant + (value - get(instant)) * iUnitMillis;,0.08305,0,-1,0
org/joda/time/chrono/BasicChronology,24,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.08277,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,175,        int thisYear = getYear(instant);,0.08221,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.08221,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,177,        int millisOfDay = getMillisOfDay(instant);,0.08221,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.08221,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.08221,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,196,        instant += millisOfDay;,0.08221,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,198,        return instant;,0.08221,0,-1,0
org/joda/time/chrono/BasicChronology,24,485,        long yearStart = getYearMillis(year);,0.08208,0,-1,0
org/joda/time/chrono/BasicChronology,24,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.08208,0,-1,0
org/joda/time/chrono/BasicChronology,24,551,        if (instant >= 0) {,0.08046,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,131,        return iRange - 1;,0.07942,0,-1,0
org/joda/time/chrono/ISOChronology,24,86,        return getInstance(DateTimeZone.getDefault());,0.07865,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,123,        return iChronology.getYearMillis(get(instant));,0.07729,0,-1,0
org/joda/time/field/FieldUtils,24,219,    },0.07597,0,-1,0
org/joda/time/field/FieldUtils,24,214,        if ((value < lowerBound) || (value > upperBound)) {,0.07585,0,-1,0
org/joda/time/chrono/ISOChronology,24,77,        return INSTANCE_UTC;,0.07346,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.07227,0,-1,0
org/joda/time/chrono/BasicChronology,24,448,        int year = getYear(millis);,0.0704,0,-1,0
org/joda/time/chrono/BasicChronology,24,449,"        int month = getMonthOfYear(millis, year);",0.0704,0,-1,0
org/joda/time/chrono/BasicChronology,24,450,"        return getDayOfMonth(millis, year, month);",0.0704,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,47,        return iChronology.getDayOfMonth(instant);,0.0704,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,79,        if (instant >= 0) {,0.0699,0,-1,0
org/joda/time/base/BaseDateTime,24,284,        return instant;,0.0695,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.06941,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,54,        return iChronology.getYear(instant);,0.06931,0,-1,0
org/joda/time/DateTimeUtils,24,68,        checkPermission();,0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,70,    },0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,82,        checkPermission();,0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,84,    },0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,129,        SecurityManager sm = System.getSecurityManager();,0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,130,        if (sm != null) {,0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,133,    },0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,414,        FixedMillisProvider(long fixedMillis) {,0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,415,            iMillis = fixedMillis;,0.06921,0,-1,0
org/joda/time/DateTimeUtils,24,416,        },0.06921,0,-1,0
org/joda/time/chrono/BasicChronology,24,468,        long dateMillis = getYearMillis(year);,0.06901,0,-1,0
org/joda/time/chrono/BasicChronology,24,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.06901,0,-1,0
org/joda/time/chrono/BasicChronology,24,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.06901,0,-1,0
org/joda/time/DateTimeFieldType,24,502,                    return chronology.weekyear();,0.0687,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,120,        if (isLeapYear(year)) {,0.06863,0,-1,0
org/joda/time/chrono/GregorianChronology,24,221,        return MIN_YEAR;,0.06825,0,-1,0
org/joda/time/chrono/BasicChronology,24,385,        long millis = getYearMillis(year);,0.06815,0,-1,0
org/joda/time/chrono/BasicChronology,24,386,"        millis += getTotalMillisByYearMonth(year, month);",0.06815,0,-1,0
org/joda/time/chrono/BasicChronology,24,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.06815,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.06759,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,93,        return,0.06759,0,-1,0
org/joda/time/chrono/GregorianChronology,24,233,        return MILLIS_PER_YEAR / 2;,0.06658,0,-1,0
org/joda/time/chrono/GregorianChronology,24,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.06658,0,-1,0
org/joda/time/chrono/BasicChronology,24,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.0664,0,-1,0
org/joda/time/chrono/BasicChronology,24,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.0664,0,-1,0
org/joda/time/chrono/BasicChronology,24,401,        if (i2 < 0) {,0.0664,0,-1,0
org/joda/time/chrono/BasicChronology,24,404,        int year = (int) (i2 / unitMillis);,0.0664,0,-1,0
org/joda/time/chrono/BasicChronology,24,406,        long yearStart = getYearMillis(year);,0.0664,0,-1,0
org/joda/time/chrono/BasicChronology,24,407,        long diff = instant - yearStart;,0.0664,0,-1,0
org/joda/time/chrono/BasicChronology,24,409,        if (diff < 0) {,0.0664,0,-1,0
org/joda/time/chrono/BasicChronology,24,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.0664,0,-1,0
org/joda/time/chrono/BasicChronology,24,428,        return year;,0.0664,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,139,        if (isLeapYear(year)) {,0.06586,0,-1,0
org/joda/time/base/BaseDateTime,24,270,        return DateTimeUtils.getChronology(chronology);,0.0656,0,-1,0
org/joda/time/base/AbstractDateTime,24,51,        super();,0.06481,0,-1,0
org/joda/time/base/AbstractDateTime,24,52,    },0.06481,0,-1,0
org/joda/time/chrono/GregorianChronology,24,202,        int leapYears = year / 100;,0.06456,0,-1,0
org/joda/time/chrono/GregorianChronology,24,203,        if (year < 0) {,0.06456,0,-1,0
org/joda/time/chrono/GregorianChronology,24,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.06456,0,-1,0
org/joda/time/chrono/GregorianChronology,24,212,            if (isLeapYear(year)) {,0.06456,0,-1,0
org/joda/time/chrono/GregorianChronology,24,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.06456,0,-1,0
org/joda/time/chrono/GregorianChronology,24,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.06439,0,-1,0
org/joda/time/chrono/BasicChronology,24,360,        return getYearInfo(year).iFirstDayMillis;,0.0643,0,-1,0
org/joda/time/chrono/BasicChronology,24,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.0643,0,-1,0
org/joda/time/chrono/BasicChronology,24,739,        if (info == null || info.iYear != year) {,0.0643,0,-1,0
org/joda/time/chrono/BasicChronology,24,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.0643,0,-1,0
org/joda/time/chrono/BasicChronology,24,741,            iYearInfoCache[year & CACHE_MASK] = info;,0.0643,0,-1,0
org/joda/time/chrono/BasicChronology,24,743,        return info;,0.0643,0,-1,0
org/joda/time/chrono/BasicChronology,24,770,"        YearInfo(int year, long firstDayMillis) {",0.0643,0,-1,0
org/joda/time/chrono/BasicChronology,24,771,            iYear = year;,0.0643,0,-1,0
org/joda/time/chrono/BasicChronology,24,772,            iFirstDayMillis = firstDayMillis;,0.0643,0,-1,0
org/joda/time/chrono/BasicChronology,24,773,        },0.0643,0,-1,0
org/joda/time/base/AbstractInstant,24,61,        super();,0.06242,0,-1,0
org/joda/time/base/AbstractInstant,24,62,    },0.06242,0,-1,0
org/joda/time/chrono/ISOChronology,24,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.06064,0,-1,0
org/joda/time/chrono/ISOChronology,24,108,"                cCache.put(zone, chrono);",0.06064,0,-1,0
org/joda/time/DateTimeZone,24,174,        SecurityManager sm = System.getSecurityManager();,0.05819,0,-1,0
org/joda/time/DateTimeZone,24,175,        if (sm != null) {,0.05819,0,-1,0
org/joda/time/DateTimeZone,24,178,        if (zone == null) {,0.05819,0,-1,0
org/joda/time/DateTimeZone,24,181,        synchronized(DateTimeZone.class) {,0.05819,0,-1,0
org/joda/time/DateTimeZone,24,182,            cDefault = zone;,0.05819,0,-1,0
org/joda/time/DateTimeZone,24,183,        },0.05819,0,-1,0
org/joda/time/DateTimeZone,24,184,    },0.05819,0,-1,0
org/joda/time/chrono/ISOChronology,24,96,        if (zone == null) {,0.05813,0,-1,0
org/joda/time/chrono/ISOChronology,24,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.05813,0,-1,0
org/joda/time/chrono/ISOChronology,24,100,        ISOChronology chrono = cFastCache[index];,0.05813,0,-1,0
org/joda/time/chrono/ISOChronology,24,101,        if (chrono != null && chrono.getZone() == zone) {,0.05813,0,-1,0
org/joda/time/chrono/ISOChronology,24,104,        synchronized (cCache) {,0.05813,0,-1,0
org/joda/time/chrono/ISOChronology,24,105,            chrono = cCache.get(zone);,0.05813,0,-1,0
org/joda/time/chrono/ISOChronology,24,106,            if (chrono == null) {,0.05813,0,-1,0
org/joda/time/chrono/ISOChronology,24,110,        },0.05813,0,-1,0
org/joda/time/chrono/ISOChronology,24,111,        cFastCache[index] = chrono;,0.05813,0,-1,0
org/joda/time/chrono/ISOChronology,24,112,        return chrono;,0.05813,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,131,        return iZone.hashCode();,0.05626,0,-1,0
org/joda/time/DateTimeUtils,24,255,        return chrono;,0.05606,0,-1,0
org/joda/time/chrono/ISOChronology,24,133,        return INSTANCE_UTC;,0.05568,0,-1,0
org/joda/time/DateTimeZone,24,147,                        },0.05396,0,-1,0
org/joda/time/DateTimeZone,24,133,        DateTimeZone zone = cDefault;,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,134,        if (zone == null) {,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,135,            synchronized(DateTimeZone.class) {,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,136,                zone = cDefault;,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,137,                if (zone == null) {,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,138,                    DateTimeZone temp = null;,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,141,"                            String id = System.getProperty(""user.timezone"");",0.05391,0,-1,0
org/joda/time/DateTimeZone,24,142,                            if (id != null) {  // null check avoids stack overflow,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,143,                                temp = forID(id);,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,148,                        if (temp == null) {,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,153,                    },0.05391,0,-1,0
org/joda/time/DateTimeZone,24,154,                    if (temp == null) {,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,157,                    cDefault = zone = temp;,0.05391,0,-1,0
org/joda/time/DateTimeZone,24,159,            },0.05391,0,-1,0
org/joda/time/DateTimeZone,24,161,        return zone;,0.05391,0,-1,0
org/joda/time/field/BaseDateTimeField,24,726,        return null;,0.05373,0,-1,0
org/joda/time/field/PreciseDurationField,24,142,        long millis = iUnitMillis;,0.05373,0,-1,0
org/joda/time/field/PreciseDurationField,24,143,        int hash = (int) (millis ^ (millis >>> 32));,0.05373,0,-1,0
org/joda/time/field/PreciseDurationField,24,144,        hash += getType().hashCode();,0.05373,0,-1,0
org/joda/time/field/PreciseDurationField,24,145,        return hash;,0.05373,0,-1,0
org/joda/time/field/MillisDurationField,24,49,        return DurationFieldType.millis();,0.05373,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,101,        return getWrappedField().getLeapDurationField();,0.05373,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,218,        return 0;,0.05373,0,-1,0
org/joda/time/field/ScaledDurationField,24,109,        return getWrappedField().getUnitMillis() * iScalar;,0.05373,0,-1,0
org/joda/time/field/ScaledDurationField,24,147,        long scalar = iScalar;,0.05373,0,-1,0
org/joda/time/field/ScaledDurationField,24,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.05373,0,-1,0
org/joda/time/field/ScaledDurationField,24,149,        hash += getType().hashCode();,0.05373,0,-1,0
org/joda/time/field/ScaledDurationField,24,150,        hash += getWrappedField().hashCode();,0.05373,0,-1,0
org/joda/time/field/ScaledDurationField,24,151,        return hash;,0.05373,0,-1,0
org/joda/time/field/DecoratedDurationField,24,69,        return iField;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,82,"        super(base, zone);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,83,    },0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,56,        if (base == null) {,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,59,        base = base.withUTC();,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,60,        if (base == null) {,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,63,        if (zone == null) {,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,66,"        return new ZonedChronology(base, zone);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,86,        return (DateTimeZone)getParam();,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,157,"        fields.eras = convertField(fields.eras, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,158,"        fields.centuries = convertField(fields.centuries, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,159,"        fields.years = convertField(fields.years, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,160,"        fields.months = convertField(fields.months, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,161,"        fields.weekyears = convertField(fields.weekyears, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,162,"        fields.weeks = convertField(fields.weeks, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,163,"        fields.days = convertField(fields.days, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,165,"        fields.halfdays = convertField(fields.halfdays, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,166,"        fields.hours = convertField(fields.hours, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,167,"        fields.minutes = convertField(fields.minutes, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,168,"        fields.seconds = convertField(fields.seconds, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,169,"        fields.millis = convertField(fields.millis, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,173,"        fields.year = convertField(fields.year, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,177,"        fields.era = convertField(fields.era, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,183,"        fields.weekyear = convertField(fields.weekyear, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,197,    },0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,200,        if (field == null || !field.isSupported()) {,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,201,            return field;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,203,        if (converted.containsKey(field)) {,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,204,            return (DurationField)converted.get(field);,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,207,"        converted.put(field, zonedField);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,208,        return zonedField;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,212,        if (field == null || !field.isSupported()) {,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,215,        if (converted.containsKey(field)) {,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,218,        ZonedDateTimeField zonedField =,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,223,"        converted.put(field, zonedField);",0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,224,        return zonedField;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,389,            super(field.getType());,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,390,            if (!field.isSupported()) {,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,393,            iField = field;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,394,            iZone = zone;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,395,            iDurationField = durationField;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,396,            iTimeField = useTimeArithmetic(durationField);,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,397,            iRangeDurationField = rangeDurationField;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,398,            iLeapDurationField = leapDurationField;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,399,        },0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,284,            super(field.getType());,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,285,            if (!field.isSupported()) {,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,288,            iField = field;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,289,            iTimeField = useTimeArithmetic(field);,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,290,            iZone = zone;,0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,291,        },0.05373,0,-1,0
org/joda/time/chrono/ZonedChronology,24,298,            return iField.getUnitMillis();,0.05373,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,328,        return iChronology.days();,0.05373,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,220,        return iChronology.weeks();,0.05373,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,111,        return iChronology.days();,0.05373,0,-1,0
org/joda/time/DateTimeZone,24,1209,        return 57 + getID().hashCode();,0.05367,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,94,        return iChronology.weeks();,0.05338,0,-1,0
org/joda/time/chrono/AssembledChronology,24,315,        return iParam;,0.05315,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,90,        return iField.getRangeDurationField();,0.05315,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,139,        return iRangeField;,0.05315,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.05315,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,131,        return null;,0.05315,0,-1,0
org/joda/time/field/BaseDurationField,24,55,        return iType;,0.05309,0,-1,0
org/joda/time/DateTimeUtils,24,252,        if (chrono == null) {,0.05303,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,208,        return null;,0.05292,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,56,        return iChronology.years();,0.05292,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,58,        return iChronology.weekyears();,0.05292,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,309,        return iChronology.years();,0.05246,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,51,        return iChronology.months();,0.05246,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,95,        return null;,0.05224,0,-1,0
org/joda/time/chrono/ISOChronology,24,122,"        super(base, null);",0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,123,    },0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,68,    },0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,171,            fields.centuryOfEra = new DividedDateTimeField(,0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,173,            fields.yearOfCentury = new RemainderDateTimeField(,0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0.05169,0,-1,0
org/joda/time/chrono/ISOChronology,24,180,    },0.05169,0,-1,0
org/joda/time/chrono/BasicChronology,24,146,        return DateTimeZone.UTC;,0.05169,0,-1,0
org/joda/time/chrono/GregorianChronology,24,81,        return INSTANCE_UTC;,0.05169,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0.05169,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,47,    },0.05169,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0.05169,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,87,        return 0;,0.05169,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,91,        return getWrappedField().getMaximumValue();,0.05169,0,-1,0
org/joda/time/chrono/BasicChronology,24,143,        if ((base = getBase()) != null) {,0.05163,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,122,        return iRangeField;,0.05142,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,160,            return iUnitMillis;,0.05142,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,141,        return iUnitField;,0.05126,0,-1,0
org/joda/time/chrono/AssembledChronology,24,321,            fields.copyFieldsFrom(iBase);,0.05041,0,-1,0
org/joda/time/chrono/AssembledChronology,24,372,            flags = ,0.05041,0,-1,0
org/joda/time/chrono/GregorianChronology,24,45,public final class GregorianChronology extends BasicGJChronology {,0.05005,0,-1,0
org/joda/time/chrono/AssembledChronology,24,156,        return iMillis;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,160,        return iMillisOfSecond;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,164,        return iMillisOfDay;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,168,        return iSeconds;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,172,        return iSecondOfMinute;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,176,        return iSecondOfDay;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,180,        return iMinutes;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,184,        return iMinuteOfHour;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,188,        return iMinuteOfDay;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,192,        return iHours;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,196,        return iHourOfDay;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,200,        return iClockhourOfDay;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,204,        return iHalfdays;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,208,        return iHourOfHalfday;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,212,        return iClockhourOfHalfday;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,216,        return iHalfdayOfDay;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,220,        return iDays;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,224,        return iDayOfWeek;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,228,        return iDayOfMonth;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,232,        return iDayOfYear;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,236,        return iWeeks;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,240,        return iWeekOfWeekyear;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,244,        return iWeekyears;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,248,        return iWeekyear;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,252,        return iWeekyearOfCentury;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,256,        return iMonths;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,260,        return iMonthOfYear;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,264,        return iYears;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,272,        return iYearOfEra;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,276,        return iYearOfCentury;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,280,        return iCenturies;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,284,        return iCenturyOfEra;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,288,        return iEras;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,292,        return iEra;,0.0499,0,-1,0
org/joda/time/field/MillisDurationField,24,62,        return true;,0.0499,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,53,            field = cCache.get(type);,0.0499,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,92,        return false;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,445,                if (isSupported(f = chrono.millis())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,446,                    millis = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,448,                if (isSupported(f = chrono.seconds())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,449,                    seconds = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,451,                if (isSupported(f = chrono.minutes())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,452,                    minutes = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,454,                if (isSupported(f = chrono.hours())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,455,                    hours = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,457,                if (isSupported(f = chrono.halfdays())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,458,                    halfdays = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,460,                if (isSupported(f = chrono.days())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,461,                    days = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,463,                if (isSupported(f = chrono.weeks())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,464,                    weeks = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,466,                if (isSupported(f = chrono.weekyears())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,467,                    weekyears = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,469,                if (isSupported(f = chrono.months())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,470,                    months = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,472,                if (isSupported(f = chrono.years())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,473,                    years = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,475,                if (isSupported(f = chrono.centuries())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,476,                    centuries = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,478,                if (isSupported(f = chrono.eras())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,486,                    millisOfSecond = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,488,                if (isSupported(f = chrono.millisOfDay())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,489,                    millisOfDay = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,492,                    secondOfMinute = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,494,                if (isSupported(f = chrono.secondOfDay())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,495,                    secondOfDay = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,498,                    minuteOfHour = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,501,                    minuteOfDay = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,503,                if (isSupported(f = chrono.hourOfDay())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,504,                    hourOfDay = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,507,                    clockhourOfDay = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,510,                    hourOfHalfday = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,513,                    clockhourOfHalfday = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,516,                    halfdayOfDay = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,519,                    dayOfWeek = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,522,                    dayOfMonth = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,524,                if (isSupported(f = chrono.dayOfYear())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,525,                    dayOfYear = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,528,                    weekOfWeekyear = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,530,                if (isSupported(f = chrono.weekyear())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,531,                    weekyear = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,534,                    weekyearOfCentury = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,536,                if (isSupported(f = chrono.monthOfYear())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,537,                    monthOfYear = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,539,                if (isSupported(f = chrono.year())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,540,                    year = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,542,                if (isSupported(f = chrono.yearOfEra())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,543,                    yearOfEra = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,546,                    yearOfCentury = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,549,                    centuryOfEra = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,551,                if (isSupported(f = chrono.era())) {,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,552,                    era = f;,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,555,        },0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,558,            return field == null ? false : field.isSupported();,0.0499,0,-1,0
org/joda/time/chrono/AssembledChronology,24,562,            return field == null ? false : field.isSupported();,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,148,"        super(base, param, minDaysInFirstWeek);",0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,149,    },0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,72,    },0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,100,"        return getInstance(zone, 4);",0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,111,        if (zone == null) {,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,115,        synchronized (cCache) {,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,116,            GregorianChronology[] chronos = cCache.get(zone);,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,117,            if (chronos == null) {,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,118,                chronos = new GregorianChronology[7];,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,119,"                cCache.put(zone, chronos);",0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,126,            },0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,127,            if (chrono == null) {,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,128,                if (zone == DateTimeZone.UTC) {,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,137,        },0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,138,        return chrono;,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,191,        if (getBase() == null) {,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,192,            super.assemble(fields);,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,194,    },0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,225,        return MAX_YEAR;,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,229,        return MILLIS_PER_YEAR;,0.0499,0,-1,0
org/joda/time/chrono/GregorianChronology,24,237,        return MILLIS_PER_MONTH;,0.0499,0,-1,0
org/joda/time/DateTimeField,24,33,public abstract class DateTimeField {,0.04985,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,57,"        super(type, unit);",0.04985,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,59,        if (!range.isPrecise()) {,0.04985,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,63,        long rangeMillis = range.getUnitMillis();,0.04985,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,64,        iRange = (int)(rangeMillis / getUnitMillis());,0.04985,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,65,        if (iRange < 2) {,0.04985,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,69,        iRangeField = range;,0.04985,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,70,    },0.04985,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,48,        super(type);,0.04985,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,50,        if (!unit.isPrecise()) {,0.04985,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,54,        iUnitMillis = unit.getUnitMillis();,0.04985,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,55,        if (iUnitMillis < 1) {,0.04985,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,59,        iUnitField = unit;,0.04985,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,60,    },0.04985,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,150,        return 0;,0.04985,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,154,        return iUnitMillis;,0.04985,0,-1,0
org/joda/time/field/BaseDateTimeField,24,50,        super();,0.04985,0,-1,0
org/joda/time/field/BaseDateTimeField,24,51,        if (type == null) {,0.04985,0,-1,0
org/joda/time/field/BaseDateTimeField,24,54,        iType = type;,0.04985,0,-1,0
org/joda/time/field/BaseDateTimeField,24,55,    },0.04985,0,-1,0
org/joda/time/field/BaseDateTimeField,24,58,        return iType;,0.04985,0,-1,0
org/joda/time/field/BaseDateTimeField,24,69,        return true;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,164,        return MILLIS_OF_SECOND_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,173,        return MILLIS_OF_DAY_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,182,        return SECOND_OF_MINUTE_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,191,        return SECOND_OF_DAY_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,209,        return MINUTE_OF_DAY_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,218,        return HOUR_OF_DAY_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,227,        return CLOCKHOUR_OF_DAY_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,236,        return HOUR_OF_HALFDAY_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,254,        return HALFDAY_OF_DAY_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,264,        return DAY_OF_WEEK_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,282,        return DAY_OF_YEAR_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,291,        return WEEK_OF_WEEKYEAR_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,300,        return WEEKYEAR_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,309,        return WEEKYEAR_OF_CENTURY_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,318,        return MONTH_OF_YEAR_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,327,        return YEAR_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,336,        return YEAR_OF_ERA_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,345,        return YEAR_OF_CENTURY_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,354,        return CENTURY_OF_ERA_TYPE;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,363,        return ERA_TYPE;,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,99,"    protected AssembledChronology(Chronology base, Object param) {",0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,100,        iBase = base;,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,101,        iParam = param;,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,102,        setFields();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,103,    },0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,268,        return iYear;,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,308,        return iBase;,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,319,        Fields fields = new Fields();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,320,        if (iBase != null) {,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,323,        assemble(fields);,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,369,        if (iBase == null) {,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,370,            flags = 0;,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,385,        iBaseFlags = flags;,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,386,    },0.04985,0,-1,0
org/joda/time/chrono/BaseChronology,24,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,452,            return iUnitType;,0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,457,            return iRangeType;,0.04985,0,-1,0
org/joda/time/DurationField,24,30,public abstract class DurationField implements Comparable<DurationField> {,0.04985,0,-1,0
org/joda/time/field/PreciseDurationField,24,43,        super(type);,0.04985,0,-1,0
org/joda/time/field/PreciseDurationField,24,44,        iUnitMillis = unitMillis;,0.04985,0,-1,0
org/joda/time/field/PreciseDurationField,24,45,    },0.04985,0,-1,0
org/joda/time/field/PreciseDurationField,24,54,        return true;,0.04985,0,-1,0
org/joda/time/field/PreciseDurationField,24,63,        return iUnitMillis;,0.04985,0,-1,0
org/joda/time/field/BaseDurationField,24,47,        super();,0.04985,0,-1,0
org/joda/time/field/BaseDurationField,24,48,        if (type == null) {,0.04985,0,-1,0
org/joda/time/field/BaseDurationField,24,51,        iType = type;,0.04985,0,-1,0
org/joda/time/field/BaseDurationField,24,52,    },0.04985,0,-1,0
org/joda/time/field/BaseDurationField,24,66,        return true;,0.04985,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,55,        super(type);,0.04985,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,56,        iUnitMillis = unitMillis;,0.04985,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,57,        iDurationField = new LinkedDurationField(type.getDurationType());,0.04985,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,58,    },0.04985,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,137,        return iDurationField;,0.04985,0,-1,0
org/joda/time/field/MillisDurationField,24,44,        super();,0.04985,0,-1,0
org/joda/time/field/MillisDurationField,24,45,    },0.04985,0,-1,0
org/joda/time/field/MillisDurationField,24,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.04985,0,-1,0
org/joda/time/field/MillisDurationField,24,71,        return true;,0.04985,0,-1,0
org/joda/time/field/MillisDurationField,24,80,        return 1;,0.04985,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,45,"        super(field, type);",0.04985,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,46,        if (field.getMinimumValue() != 0) {,0.04985,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,49,    },0.04985,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,54,        super(type);,0.04985,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,55,        if (field == null) {,0.04985,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,58,        if (!field.isSupported()) {,0.04985,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,61,        iField = field;,0.04985,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,62,    },0.04985,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,70,        return iField;,0.04985,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,86,        return iField.getDurationField();,0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,47,    },0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,59,    },0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,73,"        super(field, type);",0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,75,        if (offset == 0) {,0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,79,        iOffset = offset;,0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,81,        if (minValue < (field.getMinimumValue() + offset)) {,0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,82,            iMin = field.getMinimumValue() + offset;,0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,86,        if (maxValue > (field.getMaximumValue() + offset)) {,0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,87,            iMax = field.getMaximumValue() + offset;,0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,91,    },0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,174,        return iMin;,0.04985,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,183,        return iMax;,0.04985,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,151,        LinkedDurationField(DurationFieldType type) {,0.04985,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,152,            super(type);,0.04985,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,153,        },0.04985,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,70,    private UnsupportedDurationField(DurationFieldType type) {,0.04985,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,71,        iType = type;,0.04985,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,72,    },0.04985,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,49,        if (cCache == null) {,0.04985,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.04985,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,51,            field = null;,0.04985,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,55,        if (field == null) {,0.04985,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,56,            field = new UnsupportedDurationField(type);,0.04985,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,57,"            cCache.put(type, field);",0.04985,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,59,        return field;,0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,52,"        super(field, type);",0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,54,        if (divisor < 2) {,0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,58,        DurationField rangeField = field.getDurationField();,0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,59,        if (rangeField == null) {,0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,62,            iRangeField = new ScaledDurationField(,0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,66,        iDivisor = divisor;,0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,67,    },0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,76,"        this(dividedField, dividedField.getType());",0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,77,    },0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,87,"        super(dividedField.getWrappedField(), type);",0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,88,        iDivisor = dividedField.iDivisor;,0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,89,        iRangeField = dividedField.iDurationField;,0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,90,    },0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,148,        return 0;,0.04985,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,158,        return iDivisor - 1;,0.04985,0,-1,0
org/joda/time/field/ScaledDurationField,24,47,"        super(field, type);",0.04985,0,-1,0
org/joda/time/field/ScaledDurationField,24,48,        if (scalar == 0 || scalar == 1) {,0.04985,0,-1,0
org/joda/time/field/ScaledDurationField,24,51,        iScalar = scalar;,0.04985,0,-1,0
org/joda/time/field/ScaledDurationField,24,52,    },0.04985,0,-1,0
org/joda/time/field/DecoratedDurationField,24,52,        super(type);,0.04985,0,-1,0
org/joda/time/field/DecoratedDurationField,24,53,        if (field == null) {,0.04985,0,-1,0
org/joda/time/field/DecoratedDurationField,24,56,        if (!field.isSupported()) {,0.04985,0,-1,0
org/joda/time/field/DecoratedDurationField,24,59,        iField = field;,0.04985,0,-1,0
org/joda/time/field/DecoratedDurationField,24,60,    },0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,56,"        super(field, type);",0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,58,        if (divisor < 2) {,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,62,        DurationField unitField = field.getDurationField();,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,63,        if (unitField == null) {,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,66,            iDurationField = new ScaledDurationField(,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,70,        iDivisor = divisor;,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,72,        int i = field.getMinimumValue();,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,75,        int j = field.getMaximumValue();,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,78,        iMin = min;,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,79,        iMax = max;,0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,80,    },0.04985,0,-1,0
org/joda/time/field/DividedDateTimeField,24,182,        return iDurationField;,0.04985,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,46,        super(DateTimeFieldType.era());,0.04985,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,47,        iChronology = chronology;,0.04985,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,48,    },0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,131,"        super(base, param);",0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,139,    },0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,76,        cMillisField = MillisDurationField.INSTANCE;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,77,        cSecondsField = new PreciseDurationField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,79,        cMinutesField = new PreciseDurationField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,81,        cHoursField = new PreciseDurationField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,83,        cHalfdaysField = new PreciseDurationField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,85,        cDaysField = new PreciseDurationField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,87,        cWeeksField = new PreciseDurationField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,90,        cMillisOfSecondField = new PreciseDateTimeField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,93,        cMillisOfDayField = new PreciseDateTimeField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,99,        cSecondOfDayField = new PreciseDateTimeField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,102,        cMinuteOfHourField = new PreciseDateTimeField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,105,        cMinuteOfDayField = new PreciseDateTimeField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,108,        cHourOfDayField = new PreciseDateTimeField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,120,        cHalfdayOfDayField = new HalfdayField();,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,121,    },0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,241,        fields.millis = cMillisField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,242,        fields.seconds = cSecondsField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,243,        fields.minutes = cMinutesField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,244,        fields.hours = cHoursField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,245,        fields.halfdays = cHalfdaysField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,246,        fields.days = cDaysField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,247,        fields.weeks = cWeeksField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,249,        fields.millisOfSecond = cMillisOfSecondField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,250,        fields.millisOfDay = cMillisOfDayField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,251,        fields.secondOfMinute = cSecondOfMinuteField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,252,        fields.secondOfDay = cSecondOfDayField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,253,        fields.minuteOfHour = cMinuteOfHourField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,254,        fields.minuteOfDay = cMinuteOfDayField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,255,        fields.hourOfDay = cHourOfDayField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,256,        fields.hourOfHalfday = cHourOfHalfdayField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,257,        fields.clockhourOfDay = cClockhourOfDayField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,258,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,259,        fields.halfdayOfDay = cHalfdayOfDayField;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,264,        fields.year = new BasicYearDateTimeField(this);,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,268,        DateTimeField field = new OffsetDateTimeField(,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,270,        fields.centuryOfEra = new DividedDateTimeField(,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,273,        field = new RemainderDateTimeField(,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,275,        fields.yearOfCentury = new OffsetDateTimeField(,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,278,        fields.era = new GJEraDateTimeField(this);,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,282,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,283,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,286,        field = new RemainderDateTimeField(,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,288,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,294,        fields.years = fields.year.getDurationField();,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,295,        fields.centuries = fields.centuryOfEra.getDurationField();,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,296,        fields.months = fields.monthOfYear.getDurationField();,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,297,        fields.weekyears = fields.weekyear.getDurationField();,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,298,    },0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,691,        return 12;,0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,50,abstract class BasicChronology extends AssembledChronology {,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,436,        Fields() {,0.04985,0,-1,0
org/joda/time/chrono/AssembledChronology,24,437,        },0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,75,"        super(base, param, minDaysInFirstWeek);",0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,76,    },0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,56,        long minSum = 0;,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,57,        long maxSum = 0;,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,58,        for (int i = 0; i < 11; i++) {,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,61,            minSum += millis;,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,66,            maxSum += millis;,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.04985,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,69,    },0.04985,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.04985,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,52,        iChronology = chronology;,0.04985,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,53,        iMax = iChronology.getMaxMonth();,0.04985,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,54,        iLeapMonth = leapMonth;,0.04985,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,55,    },0.04985,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,24,37,"        super(chronology, 2);",0.04985,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,24,38,    },0.04985,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,45,"        super(DateTimeFieldType.dayOfWeek(), days);",0.04985,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,46,        iChronology = chronology;,0.04985,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,47,    },0.04985,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.04985,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,45,        iChronology = chronology;,0.04985,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,46,    },0.04985,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,41,"        super(DateTimeFieldType.dayOfMonth(), days);",0.04985,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,42,        iChronology = chronology;,0.04985,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,43,    },0.04985,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,40,"        super(yearField, DateTimeFieldType.yearOfEra());",0.04985,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,41,        iChronology = chronology;,0.04985,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,42,    },0.04985,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,93,        return 1;,0.04985,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,97,        return getWrappedField().getMaximumValue();,0.04985,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.04985,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,46,        iChronology = chronology;,0.04985,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,47,    },0.04985,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,119,        return iChronology.getMaxYear();,0.04985,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,41,"        super(DateTimeFieldType.dayOfYear(), days);",0.04985,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,42,        iChronology = chronology;,0.04985,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,43,    },0.04985,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.04985,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,43,        iChronology = chronology;,0.04985,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,44,    },0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.04985,0,-1,0
org/joda/time/chrono/BasicChronology,24,751,        },0.04985,0,-1,0
org/joda/time/DateTimeFieldType,24,153,        super();,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,154,        iName = name;,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,155,    },0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,200,        return MINUTE_OF_HOUR_TYPE;,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,273,        return DAY_OF_MONTH_TYPE;,0.0498,0,-1,0
org/joda/time/DateTimeUtils,24,35,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.0498,0,-1,0
org/joda/time/DateTimeUtils,24,37,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0498,0,-1,0
org/joda/time/DateTimeUtils,24,393,    static class SystemMillisProvider implements MillisProvider {,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,105,        return MILLIS_TYPE;,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,114,        return SECONDS_TYPE;,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,123,        return MINUTES_TYPE;,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,132,        return HOURS_TYPE;,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,141,        return HALFDAYS_TYPE;,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,160,        return WEEKS_TYPE;,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,169,        return WEEKYEARS_TYPE;,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,187,        return YEARS_TYPE;,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,196,        return CENTURIES_TYPE;,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,205,        return ERAS_TYPE;,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,444,            super(name);,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,445,            iOrdinal = ordinal;,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,446,            iUnitType = unitType;,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,447,            iRangeType = rangeType;,0.0498,0,-1,0
org/joda/time/DateTimeFieldType,24,448,        },0.0498,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.0498,0,-1,0
org/joda/time/DurationFieldType,24,94,        super();,0.04975,0,-1,0
org/joda/time/DurationFieldType,24,95,        iName = name;,0.04975,0,-1,0
org/joda/time/DurationFieldType,24,96,    },0.04975,0,-1,0
org/joda/time/DurationFieldType,24,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.04975,0,-1,0
org/joda/time/DurationFieldType,24,151,        return DAYS_TYPE;,0.04975,0,-1,0
org/joda/time/DurationFieldType,24,178,        return MONTHS_TYPE;,0.04975,0,-1,0
org/joda/time/DurationFieldType,24,259,            super(name);,0.04975,0,-1,0
org/joda/time/DurationFieldType,24,260,            iOrdinal = ordinal;,0.04975,0,-1,0
org/joda/time/DurationFieldType,24,261,        },0.04975,0,-1,0
org/joda/time/Chronology,24,63,public abstract class Chronology {,0.0492,0,-1,0
org/joda/time/chrono/BaseChronology,24,54,        super();,0.0492,0,-1,0
org/joda/time/chrono/BaseChronology,24,55,    },0.0492,0,-1,0
org/joda/time/format/FormatUtils,24,68,            for (; size > 2; size--) {,0.04865,0,-1,0
org/joda/time/format/FormatUtils,24,74,            int d = ((value + 1) * 13421772) >> 27;,0.04865,0,-1,0
org/joda/time/format/FormatUtils,24,75,            buf.append((char) (d + '0'));,0.04865,0,-1,0
org/joda/time/format/FormatUtils,24,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,0.04865,0,-1,0
org/joda/time/format/FormatUtils,24,78,        } else {,0.04865,0,-1,0
org/joda/time/DateTimeZone,24,212,            return zone;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,504,        {,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,509,            iMode = mode;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,510,            iMonthOfYear = monthOfYear;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,511,            iDayOfMonth = dayOfMonth;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,512,            iDayOfWeek = dayOfWeek;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,513,            iAdvance = advanceDayOfWeek;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,514,            iMillisOfDay = millisOfDay;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,515,        },0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,482,"            return new OfYear((char)in.readUnsignedByte(),",0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1500,            super(id);,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1501,            iTransitions = transitions;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1502,            iWallOffsets = wallOffsets;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1503,            iStandardOffsets = standardOffsets;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1504,            iNameKeys = nameKeys;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1505,            iTailZone = tailZone;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1506,        },0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1341,            int poolSize = in.readUnsignedShort();,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1342,            String[] pool = new String[poolSize];,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1343,            for (int i=0; i<poolSize; i++) {,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1344,                pool[i] = in.readUTF();,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1347,            int size = in.readInt();,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1348,            long[] transitions = new long[size];,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1349,            int[] wallOffsets = new int[size];,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1350,            int[] standardOffsets = new int[size];,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1351,            String[] nameKeys = new String[size];,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1353,            for (int i=0; i<size; i++) {,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1354,                transitions[i] = readMillis(in);,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1355,                wallOffsets[i] = (int)readMillis(in);,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1356,                standardOffsets[i] = (int)readMillis(in);,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1359,                    if (poolSize < 256) {,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1360,                        index = in.readUnsignedByte();,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1364,                    nameKeys[i] = pool[index];,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1367,                },0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1370,            DSTZone tailZone = null;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1371,            if (in.readBoolean()) {,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1372,"                tailZone = DSTZone.readFrom(in, id);",0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1375,            return new PrecalculatedZone,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1176,            super(id);,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1177,            iStandardOffset = standardOffset;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1178,            iStartRecurrence = startRecurrence;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1179,            iEndRecurrence = endRecurrence;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1180,        },0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1166,"            return new DSTZone(id, (int)readMillis(in), ",0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,95,        if (in instanceof DataInput) {,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,110,        switch (in.readUnsignedByte()) {,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,183,        int v = in.readUnsignedByte();,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,184,        switch (v >> 6) {,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,187,            v = (v << (32 - 6)) >> (32 - 6);,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,188,            return v * (30 * 60000L);,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,192,            v = (v << (32 - 6)) >> (32 - 30);,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,193,            v |= (in.readUnsignedByte()) << 16;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,194,            v |= (in.readUnsignedByte()) << 8;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,195,            v |= (in.readUnsignedByte());,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,196,            return v * 60000L;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,201,            w |= (in.readUnsignedByte()) << 24;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,202,            w |= (in.readUnsignedByte()) << 16;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,203,            w |= (in.readUnsignedByte()) << 8;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,204,            w |= (in.readUnsignedByte());,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,205,            return w * 1000L;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,209,            return in.readLong();,0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,87,        super(zone.getID());,0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,88,        iZone = zone;,0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,89,        iInfoCache = new Info[cInfoCacheMask + 1];,0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,90,    },0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,42,        },0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,45,        if (i == null) {,0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,48,            cacheSize = 512; // (1 << 9),0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,61,        cInfoCacheMask = cacheSize - 1;,0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,62,    },0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,68,        if (zone instanceof CachedDateTimeZone) {,0.04809,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,71,        return new CachedDateTimeZone(zone);,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,748,            iOfYear = ofYear;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,749,            iNameKey = nameKey;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,750,            iSaveMillis = saveMillis;,0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,751,        },0.04809,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.04809,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,147,            return loadZoneData(id);,0.04809,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,224,        InputStream in = null;,0.04809,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,226,            in = openResource(id);,0.04809,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.04809,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.04809,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,229,            return tz;,0.04809,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,236,                if (in != null) {,0.04809,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,237,                    in.close();,0.04809,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,240,            },0.04809,0,-1,0
org/joda/time/DateTimeZone,24,204,        if (id == null) {,0.04804,0,-1,0
org/joda/time/DateTimeZone,24,207,"        if (id.equals(""UTC"")) {",0.04804,0,-1,0
org/joda/time/DateTimeZone,24,210,        DateTimeZone zone = cProvider.getZone(id);,0.04804,0,-1,0
org/joda/time/DateTimeZone,24,211,        if (zone != null) {,0.04804,0,-1,0
org/joda/time/DateTimeZone,24,705,        return iID;,0.0479,0,-1,0
org/joda/time/DateTimeZone,24,688,    protected DateTimeZone(String id) {,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,689,        if (id == null) {,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,692,        iID = id;,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,693,    },0.04785,0,-1,0
org/joda/time/DateTimeZone,24,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.04785,0,-1,0
org/joda/time/DateTimeZone,24,115,        setProvider0(null);,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,116,        setNameProvider0(null);,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,117,    },0.04785,0,-1,0
org/joda/time/DateTimeZone,24,415,        if (provider == null) {,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,416,            provider = getDefaultProvider();,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,418,        Set<String> ids = provider.getAvailableIDs();,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,419,        if (ids == null || ids.size() == 0) {,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,423,"        if (!ids.contains(""UTC"")) {",0.04785,0,-1,0
org/joda/time/DateTimeZone,24,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.04785,0,-1,0
org/joda/time/DateTimeZone,24,429,        cProvider = provider;,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,430,        cAvailableIDs = ids;,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,431,    },0.04785,0,-1,0
org/joda/time/DateTimeZone,24,443,        Provider provider = null;,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,446,            String providerClass =,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,448,            if (providerClass != null) {,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,458,        },0.04785,0,-1,0
org/joda/time/DateTimeZone,24,460,        if (provider == null) {,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.04785,0,-1,0
org/joda/time/DateTimeZone,24,466,            },0.04785,0,-1,0
org/joda/time/DateTimeZone,24,469,        if (provider == null) {,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,473,        return provider;,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,514,        if (nameProvider == null) {,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,515,            nameProvider = getDefaultNameProvider();,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,517,        cNameProvider = nameProvider;,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,518,    },0.04785,0,-1,0
org/joda/time/DateTimeZone,24,529,        NameProvider nameProvider = null;,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.04785,0,-1,0
org/joda/time/DateTimeZone,24,532,            if (providerClass != null) {,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,542,        },0.04785,0,-1,0
org/joda/time/DateTimeZone,24,544,        if (nameProvider == null) {,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,545,            nameProvider = new DefaultNameProvider();,0.04785,0,-1,0
org/joda/time/DateTimeZone,24,548,        return nameProvider;,0.04785,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,39,    public DefaultNameProvider() {,0.04785,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.04785,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,40,    },0.04785,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,87,        return new HashMap(7);,0.04785,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,38,        super(id);,0.04785,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,39,        iNameKey = nameKey;,0.04785,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,40,        iWallOffset = wallOffset;,0.04785,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,41,        iStandardOffset = standardOffset;,0.04785,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,42,    },0.04785,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,88,        if (this == obj) {,0.04785,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,89,            return true;,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,82,"        this(resourcePath, null, false);",0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,83,    },0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,106,    {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,107,        if (resourcePath == null) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,110,"        if (!resourcePath.endsWith(""/"")) {",0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,111,            resourcePath += '/';,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,114,        iFileDir = null;,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,115,        iResourcePath = resourcePath;,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,117,        if (loader == null && !favorSystemLoader) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,118,            loader = getClass().getClassLoader();,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,121,        iLoader = loader;,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,124,    },0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,136,        if (id == null) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,140,        Object obj = iZoneInfoMap.get(id);,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,141,        if (obj == null) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,145,        if (id.equals(obj)) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,150,        if (obj instanceof SoftReference<?>) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,153,            DateTimeZone tz = ref.get();,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,154,            if (tz != null) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,155,                return tz;,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,196,        if (iFileDir != null) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,199,            String path = iResourcePath.concat(name);,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,200,            if (iLoader != null) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,201,                in = iLoader.getResourceAsStream(path);,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,205,            if (in == null) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,214,        return in;,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,253,        DataInputStream din = new DataInputStream(in);,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,255,"            readZoneInfoMap(din, map);",0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,258,                din.close();,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,260,            },0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,263,        return map;,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,274,        int size = din.readUnsignedShort();,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,275,        String[] pool = new String[size];,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,276,        for (int i=0; i<size; i++) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,277,            pool[i] = din.readUTF().intern();,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,281,        size = din.readUnsignedShort();,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,282,        for (int i=0; i<size; i++) {,0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,287,            },0.04785,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,289,    },0.04785,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,769,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0.03913,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.03371,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2648,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2649,            iParsers = parsers;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2650,            int est = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2651,            for (int i=parsers.length; --i>=0 ;) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2652,                DateTimeParser parser = parsers[i];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2653,                if (parser != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2654,                    int len = parser.estimateParsedLength();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2655,                    if (len > est) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2656,                        est = len;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2659,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2660,            iParsedLengthEstimate = est;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2661,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2664,            return iParsedLengthEstimate;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2668,            DateTimeParser[] parsers = iParsers;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2669,            int length = parsers.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2671,            final Object originalState = bucket.saveState();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2672,            boolean isOptional = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2674,            int bestValidPos = position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2675,            Object bestValidState = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2677,            int bestInvalidPos = position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2679,            for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2680,                DateTimeParser parser = parsers[i];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2681,                if (parser == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2683,                    if (bestValidPos <= position) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2684,                        return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2686,                    isOptional = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2687,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2689,"                int parsePos = parser.parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2690,                if (parsePos >= position) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2691,                    if (parsePos > bestValidPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2692,                        if (parsePos >= text.length() ||,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2697,                            return parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2699,                        bestValidPos = parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2700,                        bestValidState = bucket.saveState();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2703,                    if (parsePos < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2704,                        parsePos = ~parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2705,                        if (parsePos > bestInvalidPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2706,                            bestInvalidPos = parsePos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2710,                bucket.restoreState(originalState);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2713,            if (bestValidPos > position || (bestValidPos == position && isOptional)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2715,                if (bestValidState != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2716,                    bucket.restoreState(bestValidState);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2718,                return bestValidPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2721,            return ~bestInvalidPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,116,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,132,        Object f = getFormatter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,133,        if (isPrinter(f)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,134,            return (DateTimePrinter) f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,136,"        throw new UnsupportedOperationException(""Printing is not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,152,        Object f = getFormatter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,153,        if (isParser(f)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,154,            return (DateTimeParser) f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,156,"        throw new UnsupportedOperationException(""Parsing is not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,167,        return isFormatter(getFormatter());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,177,        return isPrinter(getFormatter());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,187,        return isParser(getFormatter());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,196,        iFormatter = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,197,        iElementPairs.clear();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,198,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,210,"            throw new IllegalArgumentException(""No formatter supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,224,        checkPrinter(printer);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,225,"        return append0(printer, null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,237,        checkParser(parser);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,238,"        return append0(null, parser);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,250,        checkPrinter(printer);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,251,        checkParser(parser);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,252,"        return append0(printer, parser);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,273,        if (printer != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,274,            checkPrinter(printer);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,276,        if (parsers == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,277,"            throw new IllegalArgumentException(""No parsers supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,279,        int length = parsers.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,280,        if (length == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,281,            if (parsers[0] == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,282,"                throw new IllegalArgumentException(""No parser supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,284,"            return append0(printer, parsers[0]);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,287,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,289,        for (i = 0; i < length - 1; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,290,            if ((copyOfParsers[i] = parsers[i]) == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,291,"                throw new IllegalArgumentException(""Incomplete parser array"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,294,        copyOfParsers[i] = parsers[i];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,296,"        return append0(printer, new MatchingParser(copyOfParsers));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,307,        checkParser(parser);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,309,"        return append0(null, new MatchingParser(parsers));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,319,        if (parser == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,320,"            throw new IllegalArgumentException(""No parser supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,322,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,330,        if (printer == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,331,"            throw new IllegalArgumentException(""No printer supplied"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,333,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,370,        if (text == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,371,"            throw new IllegalArgumentException(""Literal must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,373,        switch (text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,375,                return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,377,                return append0(new CharacterLiteral(text.charAt(0)));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,379,                return append0(new StringLiteral(text));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,397,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,400,            maxDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,403,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,426,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,427,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,429,        if (numDigits <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,430,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,432,"        return append0(new FixedNumber(fieldType, numDigits, false));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,449,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,452,            maxDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,455,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,458,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,478,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,479,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,481,        if (numDigits <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,482,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,484,"        return append0(new FixedNumber(fieldType, numDigits, true));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,496,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,497,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,499,"        return append0(new TextField(fieldType, false));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,512,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,532,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,533,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,535,        if (maxDigits < minDigits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,536,            maxDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,538,        if (minDigits < 0 || maxDigits <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,539,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,576,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,593,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,610,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,627,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,637,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,657,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,677,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,697,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,707,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,717,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,747,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,813,"        return appendTwoDigitYear(pivot, false);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,831,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,853,"        return appendTwoDigitWeekyear(pivot, false);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,871,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,883,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,895,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,907,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,917,        return appendText(DateTimeFieldType.halfdayOfDay());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,927,        return appendText(DateTimeFieldType.dayOfWeek());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,949,        return appendText(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,959,        return appendShortText(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,969,        return appendText(DateTimeFieldType.era());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,980,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME), null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,991,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME), null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1001,"        return append0(new TimeZoneName(TimeZoneName.ID), null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1051,        return append0(new TimeZoneOffset,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1065,"        DateTimeFormat.appendPatternTo(this, pattern);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1066,        return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1083,                    f = parser;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1104,        return false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1114,        return false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1118,        return (isPrinter(f) || isParser(f));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1122,        for (int i = len; --i >= 0;) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1123,            buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1125,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1128,        for (int i = len; --i >= 0;) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1129,            out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1131,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,87,"        this(instantLocal, chrono, locale, null, 2000);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,88,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,103,"        this(instantLocal, chrono, locale, pivotYear, 2000);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,104,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,133,        return iChrono;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,143,        return iLocale;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,181,        iSavedState = null;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,182,        iOffset = offset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,183,        iZone = null;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,184,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,200,        return iPivotYear;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,213,        iPivotYear = pivotYear;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,214,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,224,"        saveField(new SavedField(field, value));",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,225,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,245,"        saveField(new SavedField(fieldType.getField(iChrono), text, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,246,    },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,254,            SavedField[] newArray = new SavedField,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,256,"            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,257,            iSavedFields = savedFields = newArray;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,258,            iSavedFieldsShared = false;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,274,        if (iSavedState == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,275,            iSavedState = new SavedState();,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,277,        return iSavedState;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,289,        if (savedState instanceof SavedState) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,290,            if (((SavedState) savedState).restoreState(this)) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,291,                iSavedState = savedState;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,292,                return true;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,295,        return false;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,306,"        return computeMillis(false, null);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,318,"        return computeMillis(resetFields, null);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,335,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,336,            iSavedFieldsShared = false;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,345,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,346,"                return computeMillis(resetFields, text);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,355,        } catch (IllegalFieldValueException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,356,            if (text != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,357,"                e.prependMessage(""Cannot parse \"""" + text + '""');",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,359,            throw e;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,365,            int offset = iZone.getOffsetFromLocal(millis);,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,366,            millis -= offset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,367,            if (offset != iZone.getOffset(millis)) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,368,                String message =,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,370,                if (text != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,371,"                    message = ""Cannot parse \"""" + text + ""\"": "" + message;",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,373,                throw new IllegalArgumentException(message);,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,400,"            Arrays.sort(array, 0, high);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,404,                    SavedField t = array[j];,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,405,                    array[j] = array[j-1];,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,406,                    array[j-1] = t;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,496,                return 0;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,501,            return 1;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,55,public class DateTimeParserBucket {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2059,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2062,                minFields = 4;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2063,                maxFields = 4;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2075,                est = iZeroOffsetPrintText.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2083,            if (displayZone == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2084,                return;  // no zone,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2086,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2087,                buf.append(iZeroOffsetPrintText);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2088,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2090,            if (displayOffset >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2091,                buf.append('+');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2093,                buf.append('-');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2094,                displayOffset = -displayOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2097,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2098,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2099,            if (iMaxFields == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2100,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2102,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2103,            if (displayOffset == 0 && iMinFields <= 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2104,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2107,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2108,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2109,                buf.append(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2111,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2112,            if (iMaxFields == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2113,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2115,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2116,            if (displayOffset == 0 && iMinFields <= 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2117,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2120,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2121,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2122,                buf.append(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2124,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2125,            if (iMaxFields == 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2126,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2128,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2129,            if (displayOffset == 0 && iMinFields <= 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2130,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2133,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2134,                buf.append('.');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2136,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2137,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2142,            if (displayZone == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2143,                return;  // no zone,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2145,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2146,                out.write(iZeroOffsetPrintText);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2147,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2149,            if (displayOffset >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2150,                out.write('+');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2152,                out.write('-');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2153,                displayOffset = -displayOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2156,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2157,"            FormatUtils.writePaddedInteger(out, hours, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2158,            if (iMaxFields == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2159,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2161,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2162,            if (displayOffset == 0 && iMinFields == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2163,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2166,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2167,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2168,                out.write(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2170,"            FormatUtils.writePaddedInteger(out, minutes, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2171,            if (iMaxFields == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2172,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2174,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2175,            if (displayOffset == 0 && iMinFields == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2176,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2179,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2180,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2181,                out.write(':');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2183,"            FormatUtils.writePaddedInteger(out, seconds, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2184,            if (iMaxFields == 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2185,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2187,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2188,            if (displayOffset == 0 && iMinFields == 3) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2189,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2192,            if (iShowSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2193,                out.write('.');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2195,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2196,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2200,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2204,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2211,            int limit = text.length() - position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2214,            if (iZeroOffsetParseText != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2215,                if (iZeroOffsetParseText.length() == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2217,                    if (limit > 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2218,                        char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2219,                        if (c == '-' || c == '+') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2220,                            break zeroOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2223,                    bucket.setOffset(0);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2224,                    return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2226,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2227,                    bucket.setOffset(0);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2228,                    return position + iZeroOffsetParseText.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2234,            if (limit <= 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2235,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2239,            char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2240,            if (c == '-') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2241,                negative = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2242,            } else if (c == '+') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2243,                negative = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2245,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2248,            limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2249,            position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2263,"            if (digitCount(text, position, 2) < 2) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2265,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2270,"            int hours = FormatUtils.parseTwoDigits(text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2271,            if (hours > 23) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2272,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2274,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2275,            limit -= 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2276,            position += 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2282,                if (limit <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2283,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2287,                c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2288,                if (c == ':') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2289,                    expectSeparators = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2290,                    limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2291,                    position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2292,                } else if (c >= '0' && c <= '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2293,                    expectSeparators = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2300,"                int count = digitCount(text, position, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2301,                if (count == 0 && !expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2302,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2303,                } else if (count < 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2305,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2308,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2309,                if (minutes > 59) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2310,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2312,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2313,                limit -= 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2314,                position += 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2318,                if (limit <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2319,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2322,                if (expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2323,                    if (text.charAt(position) != ':') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2324,                        break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2326,                    limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2327,                    position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2330,"                count = digitCount(text, position, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2331,                if (count == 0 && !expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2332,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2333,                } else if (count < 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2335,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2338,"                int seconds = FormatUtils.parseTwoDigits(text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2339,                if (seconds > 59) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2340,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2342,                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2343,                limit -= 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2344,                position += 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2348,                if (limit <= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2349,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2352,                if (expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2353,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2354,                        break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2356,                    limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2357,                    position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2360,"                count = digitCount(text, position, 3);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2361,                if (count == 0 && !expectSeparators) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2362,                    break parse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2363,                } else if (count < 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2365,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2368,                offset += (text.charAt(position++) - '0') * 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2369,                if (count > 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2370,                    offset += (text.charAt(position++) - '0') * 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2371,                    if (count > 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2372,                        offset += text.charAt(position++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2377,            bucket.setOffset(negative ? -offset : offset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2378,            return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2386,"            int limit = Math.min(text.length() - position, amount);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2387,            amount = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2388,            for (; limit > 0; limit--) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2389,                char c = text.charAt(position + amount);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2390,                if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2391,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2393,                amount++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2395,            return amount;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2473,                iPrinters = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2474,                iPrintedLengthEstimate = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2488,                iParsers = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2489,                iParsedLengthEstimate = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2510,            DateTimePrinter[] elements = iPrinters;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2511,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2512,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2515,            if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2517,                locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2520,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2521,            for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2522,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2524,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2529,            DateTimePrinter[] elements = iPrinters;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2530,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2531,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2534,            if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2536,                locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2539,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2540,            for (int i = 0; i < len; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2541,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2543,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2548,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2563,            DateTimePrinter[] elements = iPrinters;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2564,            if (elements == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2565,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2568,            if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2570,                locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2573,            int len = elements.length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2574,            for (int i=0; i<len; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2575,"                elements[i].printTo(out, partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2577,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2580,            return iParsedLengthEstimate;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2586,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2410,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2411,            iType = type;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2412,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2415,            return (iType == SHORT_NAME ? 4 : 20);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2421,"            buf.append(print(instant - displayOffset, displayZone, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2422,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2427,"            out.write(print(instant - displayOffset, displayZone, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2428,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2431,            if (displayZone == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2432,"                return """";  // no zone",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2434,            switch (iType) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2436,"                    return displayZone.getName(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2438,"                    return displayZone.getShortName(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2440,                    return displayZone.getID();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2442,"            return """";",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2447,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2451,        },0.0,0,-1,0
org/joda/time/DateTimeZone,24,690,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,145,                        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,149,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,-1,0
org/joda/time/DateTimeZone,24,151,                    } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,155,                        temp = UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,-1,0
org/joda/time/DateTimeZone,24,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,205,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,208,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,24,215,            int offset = parseOffset(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,216,            if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,217,                return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,219,                id = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,220,"                return fixedOffsetZone(id, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,254,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,255,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,257,        if (minutesOffset < 0 || minutesOffset > 59) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,260,        int offset = 0;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,263,            if (hoursInMinutes < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,271,        },0.0,0,-1,0
org/joda/time/DateTimeZone,24,269,        } catch (ArithmeticException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,270,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,272,        return forOffsetMillis(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,302,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,303,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,305,        final String id = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,306,"        if (id.equals(""UTC"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,24,307,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,311,        DateTimeZone dtz = null;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,312,        String convId = getConvertedId(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,313,        if (convId != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,314,            dtz = cProvider.getZone(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,316,        if (dtz == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,317,            dtz = cProvider.getZone(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,319,        if (dtz != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,320,            return dtz;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,324,        if (convId == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,325,            convId = zone.getDisplayName();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,24,327,                convId = convId.substring(3);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,328,                int offset = parseOffset(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,329,                if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,330,                    return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,332,                    convId = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,333,"                    return fixedOffsetZone(convId, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,352,        if (iFixedOffsetCache == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,-1,0
org/joda/time/DateTimeZone,24,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,357,        if (ref != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,358,            zone = ref.get();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,359,            if (zone != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,360,                return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,-1,0
org/joda/time/DateTimeZone,24,365,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,374,        return cAvailableIDs;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,387,        return cProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,401,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,402,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,24,405,        setProvider0(provider);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,406,    },0.0,0,-1,0
org/joda/time/DateTimeZone,24,420,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/DateTimeZone,24,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,450,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,454,                },0.0,0,-1,0
org/joda/time/DateTimeZone,24,451,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,452,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,456,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,463,            } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,464,                Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,465,"                thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,470,            provider = new UTCProvider();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,486,        return cNameProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,500,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,501,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,24,504,        setNameProvider0(nameProvider);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,505,    },0.0,0,-1,0
org/joda/time/DateTimeZone,24,534,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,538,                },0.0,0,-1,0
org/joda/time/DateTimeZone,24,535,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,536,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,540,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,559,"        Map<String, String> map = cZoneIdConversion;",0.0,0,-1,0
org/joda/time/DateTimeZone,24,560,        if (map == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,562,"            map = new HashMap<String, String>();",0.0,0,-1,0
org/joda/time/DateTimeZone,24,563,"            map.put(""GMT"", ""UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,564,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,565,"            map.put(""HST"", ""Pacific/Honolulu"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,566,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,567,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,568,"            map.put(""MST"", ""America/Denver"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,569,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,570,"            map.put(""CST"", ""America/Chicago"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,571,"            map.put(""EST"", ""America/New_York"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,572,"            map.put(""IET"", ""America/Indianapolis"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,573,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,574,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,575,"            map.put(""AGT"", ""America/Buenos_Aires"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,576,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,577,"            map.put(""WET"", ""Europe/London"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,578,"            map.put(""ECT"", ""Europe/Paris"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,579,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,580,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,581,"            map.put(""EET"", ""Europe/Bucharest"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,582,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,583,"            map.put(""MET"", ""Asia/Tehran"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,584,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,585,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,586,"            map.put(""IST"", ""Asia/Calcutta"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,587,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,588,"            map.put(""VST"", ""Asia/Saigon"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,589,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,590,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,591,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,592,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,593,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,594,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,595,            cZoneIdConversion = map;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,597,        return map.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,603,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,617,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,634,            buf.append('-');,0.0,0,-1,0
org/joda/time/DateTimeZone,24,635,            offset = -offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,650,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,651,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,24,652,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,653,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,654,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,655,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,658,        buf.append('.');,0.0,0,-1,0
org/joda/time/DateTimeZone,24,659,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,660,        return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,669,        if (cOffsetFormatter == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,670,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/DateTimeZone,24,674,        return cOffsetFormatter;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,728,"        return getShortName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,743,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,744,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,746,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,747,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,748,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,750,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,751,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,752,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,754,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,24,768,"        return getName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,783,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,784,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,786,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,787,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,788,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,790,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,791,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,792,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,794,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,24,812,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,813,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,24,815,        return getOffset(instant.getMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,24,843,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,881,        final int offsetLocal = getOffset(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,883,        final long instantAdjusted = instantLocal - offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,884,        final int offsetAdjusted = getOffset(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,886,        if (offsetLocal != offsetAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,889,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,893,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,894,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,895,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,896,                    return offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,898,            },0.0,0,-1,0
org/joda/time/DateTimeZone,24,899,        } else if (offsetLocal > 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,900,            long prev = previousTransition(instantAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,901,            if (prev < instantAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,902,                int offsetPrev = getOffset(prev);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,903,                int diff = offsetPrev - offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,904,                if (instantAdjusted - prev <= diff) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,905,                    return offsetPrev;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,909,        return offsetAdjusted;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,927,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,981,            if (strict || offsetLocal < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,983,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,984,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,985,                    nextLocal = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,987,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,988,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,989,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,991,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,993,                    if (strict) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,995,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +",0.0,0,-1,0
org/joda/time/DateTimeZone,24,1002,                        offset = offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1011,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,1028,            newZone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1033,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1034,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,-1,0
org/joda/time/DateTimeZone,24,1144,        if (isFixed()) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1145,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1148,            localDateTime.toDateTime(this);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1149,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1150,        } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1151,            return true;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1192,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1217,        return getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1227,        return new Stub(iID);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,144,        return (iPrinter != null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,162,        return (iParser != null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,187,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,188,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,190,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,201,        return iLocale;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,220,        if (iOffsetParsed == true) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,221,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,223,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,234,        return iOffsetParsed;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,256,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,268,        return iChrono;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,278,        return iChrono;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,298,        return withZone(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,318,        if (iZone == zone) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,319,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,321,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,331,        return iZone;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,365,        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,366,            return this;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,368,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,402,        return withPivotYear(new Integer(pivotYear));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,412,      return iPivotYear;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,435,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,446,      return iDefaultYear;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,457,        long millis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,458,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,459,"        printTo(buf, millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,460,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,469,        long millis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,470,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,471,"        printTo(out, millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,472,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,482,        appendable.append(print(instant));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,483,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,494,"        printTo(buf, instant, null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,495,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,505,"        printTo(out, instant, null);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,506,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,517,        appendable.append(print(instant));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,518,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,533,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,548,        DateTimePrinter printer = requirePrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,549,        if (partial == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,550,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,552,"        printer.printTo(out, partial, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,553,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,566,        appendable.append(print(partial));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,567,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,580,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,581,"        printTo(buf, instant);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,582,        return buf.toString();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,595,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,596,"        printTo(buf, instant);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,597,        return buf.toString();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,616,        DateTimePrinter printer = requirePrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,617,        chrono = selectChronology(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,620,        DateTimeZone zone = chrono.getZone();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,621,        int offset = zone.getOffset(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,622,        long adjustedInstant = instant + offset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,623,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,625,            zone = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,626,            offset = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,627,            adjustedInstant = instant;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,629,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,630,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,633,        DateTimePrinter printer = requirePrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,634,        chrono = selectChronology(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,637,        DateTimeZone zone = chrono.getZone();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,638,        int offset = zone.getOffset(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,639,        long adjustedInstant = instant + offset;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,640,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,642,            zone = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,643,            offset = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,644,            adjustedInstant = instant;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,646,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,647,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,657,"            throw new UnsupportedOperationException(""Printing not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,693,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,694,        if (instant == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,695,"            throw new IllegalArgumentException(""Instant must not be null"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,698,        long instantMillis = instant.getMillis();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,699,        Chronology chrono = instant.getChronology();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,700,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,701,        chrono = selectChronology(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,703,        DateTimeParserBucket bucket = new DateTimeParserBucket(,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,705,"        int newPos = parser.parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,706,"        instant.setMillis(bucket.computeMillis(false, text));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,707,        if (iOffsetParsed && bucket.getZone() == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,708,            int parsedOffset = bucket.getOffset();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,709,            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,710,            chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,712,        instant.setChronology(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,713,        return newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,729,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,731,        Chronology chrono = selectChronology(iChrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,732,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,733,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,734,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,735,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,736,"                return bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,739,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,741,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,777,        return parseLocalDateTime(text).toLocalTime();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,811,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,813,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,834,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,836,        Chronology chrono = selectChronology(null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,837,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,838,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,839,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,840,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,841,"                long millis = bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,842,                if (iOffsetParsed && bucket.getZone() == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,843,                    int parsedOffset = bucket.getOffset();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,844,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,845,                    chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,847,"                return new DateTime(millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,850,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,852,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,873,        DateTimeParser parser = requireParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,875,        Chronology chrono = selectChronology(null);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,876,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,877,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,878,        if (newPos >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,879,            if (newPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,880,"                long millis = bucket.computeMillis(true, text);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,881,                if (iOffsetParsed && bucket.getZone() == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,882,                    int parsedOffset = bucket.getOffset();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,883,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,884,                    chrono = chrono.withZone(parsedZone);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,886,"                return new MutableDateTime(millis, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,889,            newPos = ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,891,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,902,"            throw new UnsupportedOperationException(""Parsing not supported"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatter,24,920,            chrono = chrono.withZone(iZone);,0.0,0,-1,0
org/joda/time/LocalDate,24,214,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDate,24,215,    },0.0,0,-1,0
org/joda/time/LocalDate,24,227,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDate,24,228,    },0.0,0,-1,0
org/joda/time/LocalDate,24,240,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/LocalDate,24,241,    },0.0,0,-1,0
org/joda/time/LocalDate,24,253,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDate,24,254,    },0.0,0,-1,0
org/joda/time/LocalDate,24,267,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDate,24,268,    },0.0,0,-1,0
org/joda/time/LocalDate,24,308,"        this(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/LocalDate,24,309,    },0.0,0,-1,0
org/joda/time/LocalDate,24,329,"    public LocalDate(Object instant, DateTimeZone zone) {",0.0,0,-1,0
org/joda/time/LocalDate,24,330,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,331,"        Chronology chronology = converter.getChronology(instant, zone);",0.0,0,-1,0
org/joda/time/LocalDate,24,332,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,24,333,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDate,24,334,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,24,335,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);",0.0,0,-1,0
org/joda/time/LocalDate,24,336,    },0.0,0,-1,0
org/joda/time/LocalDate,24,355,"    public LocalDate(Object instant, Chronology chronology) {",0.0,0,-1,0
org/joda/time/LocalDate,24,356,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,357,"        chronology = converter.getChronology(instant, chronology);",0.0,0,-1,0
org/joda/time/LocalDate,24,358,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDate,24,359,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDate,24,360,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,24,361,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);",0.0,0,-1,0
org/joda/time/LocalDate,24,362,    },0.0,0,-1,0
org/joda/time/LocalDate,24,377,"        this(year, monthOfYear, dayOfMonth, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/LocalDate,24,378,    },0.0,0,-1,0
org/joda/time/LocalDate,24,125,"        return parse(str, ISODateTimeFormat.localDateParser());",0.0,0,-1,0
org/joda/time/LocalDate,24,136,        return formatter.parseLocalDate(str);,0.0,0,-1,0
org/joda/time/LocalDate,24,164,        if (calendar == null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,165,"            throw new IllegalArgumentException(""The calendar must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,24,167,        return new LocalDate(,0.0,0,-1,0
org/joda/time/LocalDate,24,196,        if (date == null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,197,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,24,199,        return new LocalDate(,0.0,0,-1,0
org/joda/time/LocalDate,24,408,        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,24,409,"            return new LocalDate(iLocalMillis, iChronology.withUTC());",0.0,0,-1,0
org/joda/time/LocalDate,24,411,        return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,424,        return 3;,0.0,0,-1,0
org/joda/time/LocalDate,24,437,        switch (index) {,0.0,0,-1,0
org/joda/time/LocalDate,24,439,                return chrono.year();,0.0,0,-1,0
org/joda/time/LocalDate,24,441,                return chrono.monthOfYear();,0.0,0,-1,0
org/joda/time/LocalDate,24,443,                return chrono.dayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDate,24,445,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDate,24,462,        switch (index) {,0.0,0,-1,0
org/joda/time/LocalDate,24,464,                return getChronology().year().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,466,                return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,468,                return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,470,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDate,24,491,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,24,494,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,24,509,            return false;,0.0,0,-1,0
org/joda/time/LocalDate,24,517,        return false;,0.0,0,-1,0
org/joda/time/LocalDate,24,528,        if (type == null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,529,            return false;,0.0,0,-1,0
org/joda/time/LocalDate,24,531,        DurationField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/LocalDate,24,532,        if (DATE_DURATION_TYPES.contains(type) ||,0.0,0,-1,0
org/joda/time/LocalDate,24,534,            return field.isSupported();,0.0,0,-1,0
org/joda/time/LocalDate,24,536,        return false;,0.0,0,-1,0
org/joda/time/LocalDate,24,571,            return true;,0.0,0,-1,0
org/joda/time/LocalDate,24,579,        return super.equals(partial);,0.0,0,-1,0
org/joda/time/LocalDate,24,589,        int hash = iHash;,0.0,0,-1,0
org/joda/time/LocalDate,24,590,        if (hash == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,591,            hash = iHash = super.hashCode();,0.0,0,-1,0
org/joda/time/LocalDate,24,593,        return hash;,0.0,0,-1,0
org/joda/time/LocalDate,24,622,        if (this == partial) {,0.0,0,-1,0
org/joda/time/LocalDate,24,623,            return 0;,0.0,0,-1,0
org/joda/time/LocalDate,24,625,        if (partial instanceof LocalDate) {,0.0,0,-1,0
org/joda/time/LocalDate,24,626,            LocalDate other = (LocalDate) partial;,0.0,0,-1,0
org/joda/time/LocalDate,24,627,            if (iChronology.equals(other.iChronology)) {,0.0,0,-1,0
org/joda/time/LocalDate,24,628,                return (iLocalMillis < other.iLocalMillis ? -1 :,0.0,0,-1,0
org/joda/time/LocalDate,24,633,        return super.compareTo(partial);,0.0,0,-1,0
org/joda/time/LocalDate,24,652,        return toDateTimeAtStartOfDay(null);,0.0,0,-1,0
org/joda/time/LocalDate,24,674,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,675,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,676,        long localMillis = getLocalMillis() + 6L * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/LocalDate,24,677,"        long instant = zone.convertLocalToUTC(localMillis, false);",0.0,0,-1,0
org/joda/time/LocalDate,24,678,        instant = chrono.dayOfMonth().roundFloor(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,679,"        return new DateTime(instant, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,24,699,        return toDateTimeAtMidnight(null);,0.0,0,-1,0
org/joda/time/LocalDate,24,722,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,723,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,724,"        return new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), 0, 0, 0, 0, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,24,741,        return toDateTimeAtCurrentTime(null);,0.0,0,-1,0
org/joda/time/LocalDate,24,761,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,762,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,763,        long instantMillis = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/LocalDate,24,764,"        long resolved = chrono.set(this, instantMillis);",0.0,0,-1,0
org/joda/time/LocalDate,24,765,"        return new DateTime(resolved, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,24,786,        return toDateMidnight(null);,0.0,0,-1,0
org/joda/time/LocalDate,24,807,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,808,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,809,"        return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);",0.0,0,-1,0
org/joda/time/LocalDate,24,830,        if (time == null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,831,"            throw new IllegalArgumentException(""The time must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,24,833,        if (getChronology() != time.getChronology()) {,0.0,0,-1,0
org/joda/time/LocalDate,24,834,"            throw new IllegalArgumentException(""The chronology of the time does not match"");",0.0,0,-1,0
org/joda/time/LocalDate,24,836,        long localMillis = getLocalMillis() + time.getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,24,837,"        return new LocalDateTime(localMillis, getChronology());",0.0,0,-1,0
org/joda/time/LocalDate,24,859,"        return toDateTime(time, null);",0.0,0,-1,0
org/joda/time/LocalDate,24,881,        if (time != null && getChronology() != time.getChronology()) {,0.0,0,-1,0
org/joda/time/LocalDate,24,882,"            throw new IllegalArgumentException(""The chronology of the time does not match"");",0.0,0,-1,0
org/joda/time/LocalDate,24,884,        Chronology chrono = getChronology().withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,885,        long instant = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/LocalDate,24,886,"        instant = chrono.set(this, instant);",0.0,0,-1,0
org/joda/time/LocalDate,24,887,        if (time != null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,888,"            instant = chrono.set(time, instant);",0.0,0,-1,0
org/joda/time/LocalDate,24,890,"        return new DateTime(instant, chrono);",0.0,0,-1,0
org/joda/time/LocalDate,24,906,        return toInterval(null);,0.0,0,-1,0
org/joda/time/LocalDate,24,921,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,922,        DateTime start = toDateTimeAtStartOfDay(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,923,        DateTime end = plusDays(1).toDateTimeAtStartOfDay(zone);,0.0,0,-1,0
org/joda/time/LocalDate,24,924,"        return new Interval(start, end);",0.0,0,-1,0
org/joda/time/LocalDate,24,945,        int dom = getDayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDate,24,946,"        Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom);",0.0,0,-1,0
org/joda/time/LocalDate,24,947,        LocalDate check = LocalDate.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDate,24,948,        if (check.isBefore(this)) {,0.0,0,-1,0
org/joda/time/LocalDate,24,951,            while (check.equals(this) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,24,952,                date.setTime(date.getTime() + 3600000);,0.0,0,-1,0
org/joda/time/LocalDate,24,953,                check = LocalDate.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDate,24,956,            while (date.getDate() == dom) {,0.0,0,-1,0
org/joda/time/LocalDate,24,957,                date.setTime(date.getTime() - 1000);,0.0,0,-1,0
org/joda/time/LocalDate,24,960,            date.setTime(date.getTime() + 1000);,0.0,0,-1,0
org/joda/time/LocalDate,24,961,        } else if (check.equals(this)) {,0.0,0,-1,0
org/joda/time/LocalDate,24,963,            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());,0.0,0,-1,0
org/joda/time/LocalDate,24,964,            if (earlier.getDate() == dom) {,0.0,0,-1,0
org/joda/time/LocalDate,24,965,                date = earlier;,0.0,0,-1,0
org/joda/time/LocalDate,24,968,        return date;,0.0,0,-1,0
org/joda/time/LocalDate,24,983,        newMillis = iChronology.dayOfMonth().roundFloor(newMillis);,0.0,0,-1,0
org/joda/time/LocalDate,24,984,"        return (newMillis == getLocalMillis() ? this : new LocalDate(newMillis, getChronology()));",0.0,0,-1,0
org/joda/time/LocalDate,24,1002,        if (partial == null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1003,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1005,"        return withLocalMillis(getChronology().set(partial, getLocalMillis()));",0.0,0,-1,0
org/joda/time/LocalDate,24,1027,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1028,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,24,1030,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1031,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,24,1033,"        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);",0.0,0,-1,0
org/joda/time/LocalDate,24,1034,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1056,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1057,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,24,1059,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1060,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,24,1062,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1063,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1065,"        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);",0.0,0,-1,0
org/joda/time/LocalDate,24,1066,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1089,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1090,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1092,        long instant = getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,24,1093,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/LocalDate,24,1094,        for (int i = 0; i < period.size(); i++) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1095,"            long value = FieldUtils.safeMultiply(period.getValue(i), scalar);",0.0,0,-1,0
org/joda/time/LocalDate,24,1096,            DurationFieldType type = period.getFieldType(i);,0.0,0,-1,0
org/joda/time/LocalDate,24,1097,            if (isSupported(type)) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1098,"                instant = type.getField(chrono).add(instant, value);",0.0,0,-1,0
org/joda/time/LocalDate,24,1101,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1122,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/LocalDate,24,1142,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1143,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1145,"        long instant = getChronology().years().add(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDate,24,1146,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1165,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1166,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1168,"        long instant = getChronology().months().add(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDate,24,1169,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1188,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1189,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1191,"        long instant = getChronology().weeks().add(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDate,24,1192,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1211,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1212,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1214,"        long instant = getChronology().days().add(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDate,24,1215,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1236,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/LocalDate,24,1256,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1257,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1259,"        long instant = getChronology().years().subtract(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDate,24,1260,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1279,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1280,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1282,"        long instant = getChronology().months().subtract(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDate,24,1283,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1302,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1303,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1305,"        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDate,24,1306,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1325,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1326,            return this;,0.0,0,-1,0
org/joda/time/LocalDate,24,1328,"        long instant = getChronology().days().subtract(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDate,24,1329,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1342,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1343,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDate,24,1345,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1346,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDate,24,1348,"        return new Property(this, fieldType.getField(getChronology()));",0.0,0,-1,0
org/joda/time/LocalDate,24,1358,        return getChronology().era().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1367,        return getChronology().centuryOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1376,        return getChronology().yearOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1385,        return getChronology().yearOfCentury().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1394,        return getChronology().year().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1409,        return getChronology().weekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1418,        return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1427,        return getChronology().weekOfWeekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1436,        return getChronology().dayOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1447,        return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1458,        return getChronology().dayOfWeek().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDate,24,1474,"        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));",0.0,0,-1,0
org/joda/time/LocalDate,24,1489,"        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/LocalDate,24,1504,"        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/LocalDate,24,1519,"        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/LocalDate,24,1534,"        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));",0.0,0,-1,0
org/joda/time/LocalDate,24,1549,"        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));",0.0,0,-1,0
org/joda/time/LocalDate,24,1564,"        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/LocalDate,24,1579,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/LocalDate,24,1594,"        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/LocalDate,24,1609,"        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/LocalDate,24,1624,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/LocalDate,24,1634,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/LocalDate,24,1643,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/LocalDate,24,1652,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/LocalDate,24,1661,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/LocalDate,24,1670,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/LocalDate,24,1679,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/LocalDate,24,1688,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/LocalDate,24,1697,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/LocalDate,24,1706,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/LocalDate,24,1715,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/LocalDate,24,1724,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/LocalDate,24,1745,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1746,            return toString();,0.0,0,-1,0
org/joda/time/LocalDate,24,1748,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/LocalDate,24,1759,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDate,24,1760,            return toString();,0.0,0,-1,0
org/joda/time/LocalDate,24,1762,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/LocalDate,24,81,public final class LocalDate,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,79,"        return getField(index, getChronology()).getType();",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,90,        DateTimeFieldType[] result = new DateTimeFieldType[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,91,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,92,            result[i] = getFieldType(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,94,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,105,"        return getField(index, getChronology());",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,116,        DateTimeField[] result = new DateTimeField[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,117,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,118,            result[i] = getField(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,120,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,132,        int[] result = new int[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,133,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,134,            result[i] = getValue(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,136,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,150,        return getValue(indexOfSupported(type));,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,160,        return (indexOf(type) != -1);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,170,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,171,            if (getFieldType(i) == type) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,172,                return i;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,175,        return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,187,        int index = indexOf(type);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,188,        if (index == -1) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,189,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,191,        return index;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,202,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,203,            if (getFieldType(i).getDurationType() == type) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,204,                return i;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,207,        return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,219,        int index = indexOf(type);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,220,        if (index == -1) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,221,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,223,        return index;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,240,        Chronology chrono = DateTimeUtils.getInstantChronology(baseInstant);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,241,        long instantMillis = DateTimeUtils.getInstantMillis(baseInstant);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,242,"        long resolved = chrono.set(this, instantMillis);",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,243,"        return new DateTime(resolved, chrono);",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,255,        if (this == partial) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,256,            return true;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,258,        if (partial instanceof ReadablePartial == false) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,259,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,261,        ReadablePartial other = (ReadablePartial) partial;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,262,        if (size() != other.size()) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,265,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,266,            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,267,                return false;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,270,"        return FieldUtils.equals(getChronology(), other.getChronology());",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,280,        int total = 157;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,281,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,282,            total = 23 * total + getValue(i);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,283,            total = 23 * total + getFieldType(i).hashCode();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,285,        total += getChronology().hashCode();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,286,        return total;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,316,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,317,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,319,        if (size() != other.size()) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,320,"            throw new ClassCastException(""ReadablePartial objects must have matching field types"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,322,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,323,            if (getFieldType(i) != other.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,324,"                throw new ClassCastException(""ReadablePartial objects must have matching field types"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,328,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,329,            if (getValue(i) > other.getValue(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,330,                return 1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,332,            if (getValue(i) < other.getValue(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,333,                return -1;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,336,        return 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,355,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,356,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,358,        return compareTo(partial) > 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,377,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,378,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,380,        return compareTo(partial) < 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,399,        if (partial == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,400,"            throw new IllegalArgumentException(""Partial cannot be null"");",0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,402,        return compareTo(partial) == 0;,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,414,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,415,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,417,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractPartial,24,46,public abstract class AbstractPartial,0.0,0,-1,0
org/joda/time/LocalDateTime,24,208,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,209,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,221,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,222,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,234,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,235,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,247,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,248,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,261,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,262,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,300,"        this(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,301,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,321,"    public LocalDateTime(Object instant, DateTimeZone zone) {",0.0,0,-1,0
org/joda/time/LocalDateTime,24,322,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,323,"        Chronology chronology = converter.getChronology(instant, zone);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,324,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,325,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,326,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,327,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,328,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,347,"    public LocalDateTime(Object instant, Chronology chronology) {",0.0,0,-1,0
org/joda/time/LocalDateTime,24,348,        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,349,"        chronology = converter.getChronology(instant, chronology);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,350,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,351,        iChronology = chronology.withUTC();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,352,"        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,353,"        iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,354,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,373,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/LocalDateTime,24,375,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,395,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/LocalDateTime,24,397,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,419,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/LocalDateTime,24,421,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,447,        super();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,448,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,449,"        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/LocalDateTime,24,451,        iChronology = chronology;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,452,        iLocalMillis = instant;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,453,    },0.0,0,-1,0
org/joda/time/LocalDateTime,24,111,"        return parse(str, ISODateTimeFormat.localDateOptionalTimeParser());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,122,        return formatter.parseLocalDateTime(str);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,150,        if (calendar == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,151,"            throw new IllegalArgumentException(""The calendar must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,24,153,        return new LocalDateTime(,0.0,0,-1,0
org/joda/time/LocalDateTime,24,186,        if (date == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,187,"            throw new IllegalArgumentException(""The date must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,24,189,        return new LocalDateTime(,0.0,0,-1,0
org/joda/time/LocalDateTime,24,460,        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,461,"            return new LocalDateTime(iLocalMillis, iChronology.withUTC());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,463,        return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,474,        return 4;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,487,        switch (index) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,489,                return chrono.year();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,491,                return chrono.monthOfYear();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,493,                return chrono.dayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,495,                return chrono.millisOfDay();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,497,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,512,        switch (index) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,514,                return getChronology().year().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,516,                return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,518,                return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,520,                return getChronology().millisOfDay().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,522,"                throw new IndexOutOfBoundsException(""Invalid index: "" + index);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,542,        if (type == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,543,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,24,545,        return type.getField(getChronology()).get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,557,        if (type == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,558,            return false;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,560,        return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,571,        if (type == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,572,            return false;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,574,        return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,608,        if (this == partial) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,609,            return true;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,611,        if (partial instanceof LocalDateTime) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,612,            LocalDateTime other = (LocalDateTime) partial;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,613,            if (iChronology.equals(other.iChronology)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,614,                return iLocalMillis == other.iLocalMillis;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,617,        return super.equals(partial);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,646,        if (this == partial) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,647,            return 0;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,649,        if (partial instanceof LocalDateTime) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,650,            LocalDateTime other = (LocalDateTime) partial;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,651,            if (iChronology.equals(other.iChronology)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,652,                return (iLocalMillis < other.iLocalMillis ? -1 :,0.0,0,-1,0
org/joda/time/LocalDateTime,24,657,        return super.compareTo(partial);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,670,        return toDateTime((DateTimeZone) null);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,683,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,684,        Chronology chrono = iChronology.withZone(zone);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,685,        return new DateTime(,0.0,0,-1,0
org/joda/time/LocalDateTime,24,707,"        return new LocalTime(getLocalMillis(), getChronology());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,730,        int dom = getDayOfMonth();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,731,"        Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom,",0.0,0,-1,0
org/joda/time/LocalDateTime,24,733,        date.setTime(date.getTime() + getMillisOfSecond());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,734,        LocalDateTime check = LocalDateTime.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,735,        if (check.isBefore(this)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,738,            while (check.isBefore(this)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,739,                date.setTime(date.getTime() + 60000);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,740,                check = LocalDateTime.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,743,            while (check.isBefore(this) == false) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,744,                date.setTime(date.getTime() - 1000);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,745,                check = LocalDateTime.fromDateFields(date);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,747,            date.setTime(date.getTime() + 1000);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,748,        } else if (check.equals(this)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,750,            Date earlier = new Date(date.getTime() - TimeZone.getDefault().getDSTSavings());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,751,            check = LocalDateTime.fromDateFields(earlier);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,752,            if (check.equals(this)) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,753,                date = earlier;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,756,        return date;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,771,"        return (newMillis == getLocalMillis() ? this : new LocalDateTime(newMillis, getChronology()));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,793,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,794,        long instant = getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,795,"        instant = chrono.year().set(instant, year);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,796,"        instant = chrono.monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,797,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,798,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,820,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,821,        long instant = getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,822,"        instant = chrono.hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,823,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,824,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,825,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,826,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,843,        if (partial == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,844,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,846,"        return withLocalMillis(getChronology().set(partial, getLocalMillis()));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,869,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,870,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,24,872,"        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,873,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,896,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,897,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,24,899,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,900,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,902,"        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,903,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,918,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,919,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,921,"        long instant = getChronology().add(getLocalMillis(), durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,922,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,941,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,942,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,944,"        long instant = getChronology().add(period, getLocalMillis(), scalar);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,945,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,959,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,976,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,996,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,997,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,999,"        long instant = getChronology().years().add(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1000,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1019,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1020,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1022,"        long instant = getChronology().months().add(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1023,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1042,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1043,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1045,"        long instant = getChronology().weeks().add(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1046,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1065,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1066,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1068,"        long instant = getChronology().days().add(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1069,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1089,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1090,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1092,"        long instant = getChronology().hours().add(getLocalMillis(), hours);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1093,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1112,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1113,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1115,"        long instant = getChronology().minutes().add(getLocalMillis(), minutes);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1116,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1135,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1136,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1138,"        long instant = getChronology().seconds().add(getLocalMillis(), seconds);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1139,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1158,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1159,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1161,"        long instant = getChronology().millis().add(getLocalMillis(), millis);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1162,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1176,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1193,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1213,        if (years == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1214,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1216,"        long instant = getChronology().years().subtract(getLocalMillis(), years);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1217,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1236,        if (months == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1237,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1239,"        long instant = getChronology().months().subtract(getLocalMillis(), months);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1240,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1259,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1260,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1262,"        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1263,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1282,        if (days == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1283,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1285,"        long instant = getChronology().days().subtract(getLocalMillis(), days);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1286,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1306,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1307,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1309,"        long instant = getChronology().hours().subtract(getLocalMillis(), hours);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1310,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1329,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1330,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1332,"        long instant = getChronology().minutes().subtract(getLocalMillis(), minutes);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1333,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1352,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1353,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1355,"        long instant = getChronology().seconds().subtract(getLocalMillis(), seconds);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1356,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1375,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1376,            return this;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1378,"        long instant = getChronology().millis().subtract(getLocalMillis(), millis);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1379,        return withLocalMillis(instant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1392,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1393,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1395,        if (isSupported(fieldType) == false) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1396,"            throw new IllegalArgumentException(""Field '"" + fieldType + ""' is not supported"");",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1398,"        return new Property(this, fieldType.getField(getChronology()));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1408,        return getChronology().era().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1417,        return getChronology().centuryOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1426,        return getChronology().yearOfEra().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1435,        return getChronology().yearOfCentury().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1444,        return getChronology().year().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1459,        return getChronology().weekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1468,        return getChronology().monthOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1477,        return getChronology().weekOfWeekyear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1486,        return getChronology().dayOfYear().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1497,        return getChronology().dayOfMonth().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1508,        return getChronology().dayOfWeek().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1518,        return getChronology().hourOfDay().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1527,        return getChronology().minuteOfHour().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1536,        return getChronology().secondOfMinute().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1545,        return getChronology().millisOfSecond().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1554,        return getChronology().millisOfDay().get(getLocalMillis());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1570,"        return withLocalMillis(getChronology().era().set(getLocalMillis(), era));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1585,"        return withLocalMillis(getChronology().centuryOfEra().set(getLocalMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1600,"        return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1615,"        return withLocalMillis(getChronology().yearOfCentury().set(getLocalMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1630,"        return withLocalMillis(getChronology().year().set(getLocalMillis(), year));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1645,"        return withLocalMillis(getChronology().weekyear().set(getLocalMillis(), weekyear));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1660,"        return withLocalMillis(getChronology().monthOfYear().set(getLocalMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1675,"        return withLocalMillis(getChronology().weekOfWeekyear().set(getLocalMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1690,"        return withLocalMillis(getChronology().dayOfYear().set(getLocalMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1705,"        return withLocalMillis(getChronology().dayOfMonth().set(getLocalMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1720,"        return withLocalMillis(getChronology().dayOfWeek().set(getLocalMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1736,"        return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(), hour));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1751,"        return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(), minute));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1766,"        return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(), second));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1781,"        return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1796,"        return withLocalMillis(getChronology().millisOfDay().set(getLocalMillis(), millis));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1806,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1815,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1824,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1833,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1842,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1851,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1860,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1869,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1878,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1887,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1896,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1906,"        return new Property(this, getChronology().hourOfDay());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1915,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1924,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1933,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1942,"        return new Property(this, getChronology().millisOfDay());",0.0,0,-1,0
org/joda/time/LocalDateTime,24,1953,        return ISODateTimeFormat.dateTime().print(this);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1963,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1964,            return toString();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1966,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1977,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1978,            return toString();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,1980,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,79,public final class LocalDateTime,0.0,0,-1,0
org/joda/time/DateTime,24,111,        super();,0.0,0,-1,0
org/joda/time/DateTime,24,112,    },0.0,0,-1,0
org/joda/time/DateTime,24,123,        super(zone);,0.0,0,-1,0
org/joda/time/DateTime,24,124,    },0.0,0,-1,0
org/joda/time/DateTime,24,136,        super(chronology);,0.0,0,-1,0
org/joda/time/DateTime,24,137,    },0.0,0,-1,0
org/joda/time/DateTime,24,147,        super(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,148,    },0.0,0,-1,0
org/joda/time/DateTime,24,160,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateTime,24,161,    },0.0,0,-1,0
org/joda/time/DateTime,24,174,"        super(instant, chronology);",0.0,0,-1,0
org/joda/time/DateTime,24,175,    },0.0,0,-1,0
org/joda/time/DateTime,24,195,"        super(instant, (Chronology) null);",0.0,0,-1,0
org/joda/time/DateTime,24,196,    },0.0,0,-1,0
org/joda/time/DateTime,24,219,"        super(instant, zone);",0.0,0,-1,0
org/joda/time/DateTime,24,220,    },0.0,0,-1,0
org/joda/time/DateTime,24,240,"        super(instant, DateTimeUtils.getChronology(chronology));",0.0,0,-1,0
org/joda/time/DateTime,24,241,    },0.0,0,-1,0
org/joda/time/DateTime,24,261,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);",0.0,0,-1,0
org/joda/time/DateTime,24,262,    },0.0,0,-1,0
org/joda/time/DateTime,24,285,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,24,287,    },0.0,0,-1,0
org/joda/time/DateTime,24,311,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,24,313,    },0.0,0,-1,0
org/joda/time/DateTime,24,335,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);",0.0,0,-1,0
org/joda/time/DateTime,24,336,    },0.0,0,-1,0
org/joda/time/DateTime,24,361,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,24,363,    },0.0,0,-1,0
org/joda/time/DateTime,24,389,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,24,391,    },0.0,0,-1,0
org/joda/time/DateTime,24,414,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",0.0,0,-1,0
org/joda/time/DateTime,24,415,    },0.0,0,-1,0
org/joda/time/DateTime,24,441,"        super(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/DateTime,24,443,    },0.0,0,-1,0
org/joda/time/DateTime,24,91,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0.0,0,-1,0
org/joda/time/DateTime,24,102,        return formatter.parseDateTime(str);,0.0,0,-1,0
org/joda/time/DateTime,24,491,        if (getChronology() == ISOChronology.getInstance()) {,0.0,0,-1,0
org/joda/time/DateTime,24,492,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,494,        return super.toDateTimeISO();,0.0,0,-1,0
org/joda/time/DateTime,24,504,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/DateTime,24,505,        if (getZone() == zone) {,0.0,0,-1,0
org/joda/time/DateTime,24,506,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,508,        return super.toDateTime(zone);,0.0,0,-1,0
org/joda/time/DateTime,24,518,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DateTime,24,519,        if (getChronology() == chronology) {,0.0,0,-1,0
org/joda/time/DateTime,24,520,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,522,        return super.toDateTime(chronology);,0.0,0,-1,0
org/joda/time/DateTime,24,536,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0.0,0,-1,0
org/joda/time/DateTime,24,549,        newChronology = DateTimeUtils.getChronology(newChronology);,0.0,0,-1,0
org/joda/time/DateTime,24,550,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));",0.0,0,-1,0
org/joda/time/DateTime,24,572,        return withChronology(getChronology().withZone(newZone));,0.0,0,-1,0
org/joda/time/DateTime,24,593,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,-1,0
org/joda/time/DateTime,24,594,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,0.0,0,-1,0
org/joda/time/DateTime,24,595,        if (newZone == originalZone) {,0.0,0,-1,0
org/joda/time/DateTime,24,596,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,599,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",0.0,0,-1,0
org/joda/time/DateTime,24,600,"        return new DateTime(millis, getChronology().withZone(newZone));",0.0,0,-1,0
org/joda/time/DateTime,24,621,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateTime,24,622,        long instant = getMillis();,0.0,0,-1,0
org/joda/time/DateTime,24,623,"        instant = chrono.year().set(instant, year);",0.0,0,-1,0
org/joda/time/DateTime,24,624,"        instant = chrono.monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/DateTime,24,625,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/DateTime,24,626,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,647,        Chronology chrono = getChronology();,0.0,0,-1,0
org/joda/time/DateTime,24,648,        long instant = getMillis();,0.0,0,-1,0
org/joda/time/DateTime,24,649,"        instant = chrono.hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/DateTime,24,650,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/DateTime,24,651,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/DateTime,24,652,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/DateTime,24,653,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,670,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTime,24,671,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,673,"        return withMillis(getChronology().set(partial, getMillis()));",0.0,0,-1,0
org/joda/time/DateTime,24,696,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateTime,24,697,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,24,699,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);",0.0,0,-1,0
org/joda/time/DateTime,24,700,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,722,        if (fieldType == null) {,0.0,0,-1,0
org/joda/time/DateTime,24,723,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,24,725,        if (amount == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,726,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,728,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);",0.0,0,-1,0
org/joda/time/DateTime,24,729,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,744,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,745,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,747,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/DateTime,24,748,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,762,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,763,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,765,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateTime,24,784,        if (period == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,785,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,787,"        long instant = getChronology().add(period, getMillis(), scalar);",0.0,0,-1,0
org/joda/time/DateTime,24,788,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,803,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateTime,24,817,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/DateTime,24,843,"        return withPeriodAdded(period, 1);",0.0,0,-1,0
org/joda/time/DateTime,24,870,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,871,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,873,"        long instant = getChronology().years().add(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateTime,24,874,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,900,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,901,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,903,"        long instant = getChronology().months().add(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateTime,24,904,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,926,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,927,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,929,"        long instant = getChronology().weeks().add(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateTime,24,930,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,961,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,962,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,964,"        long instant = getChronology().days().add(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateTime,24,965,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,992,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,993,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,995,"        long instant = getChronology().hours().add(getMillis(), hours);",0.0,0,-1,0
org/joda/time/DateTime,24,996,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1019,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1020,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1022,"        long instant = getChronology().minutes().add(getMillis(), minutes);",0.0,0,-1,0
org/joda/time/DateTime,24,1023,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1046,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1047,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1049,"        long instant = getChronology().seconds().add(getMillis(), seconds);",0.0,0,-1,0
org/joda/time/DateTime,24,1050,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1072,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1073,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1075,"        long instant = getChronology().millis().add(getMillis(), millis);",0.0,0,-1,0
org/joda/time/DateTime,24,1076,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1091,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateTime,24,1105,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/DateTime,24,1132,"        return withPeriodAdded(period, -1);",0.0,0,-1,0
org/joda/time/DateTime,24,1159,        if (years == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1160,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1162,"        long instant = getChronology().years().subtract(getMillis(), years);",0.0,0,-1,0
org/joda/time/DateTime,24,1163,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1189,        if (months == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1190,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1192,"        long instant = getChronology().months().subtract(getMillis(), months);",0.0,0,-1,0
org/joda/time/DateTime,24,1193,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1215,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1216,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1218,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);",0.0,0,-1,0
org/joda/time/DateTime,24,1219,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1250,        if (days == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1251,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1253,"        long instant = getChronology().days().subtract(getMillis(), days);",0.0,0,-1,0
org/joda/time/DateTime,24,1254,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1282,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1283,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1285,"        long instant = getChronology().hours().subtract(getMillis(), hours);",0.0,0,-1,0
org/joda/time/DateTime,24,1286,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1309,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1310,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1312,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);",0.0,0,-1,0
org/joda/time/DateTime,24,1313,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1336,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1337,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1339,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);",0.0,0,-1,0
org/joda/time/DateTime,24,1340,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1363,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/DateTime,24,1364,            return this;,0.0,0,-1,0
org/joda/time/DateTime,24,1366,"        long instant = getChronology().millis().subtract(getMillis(), millis);",0.0,0,-1,0
org/joda/time/DateTime,24,1367,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/DateTime,24,1379,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTime,24,1380,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/DateTime,24,1382,        DateTimeField field = type.getField(getChronology());,0.0,0,-1,0
org/joda/time/DateTime,24,1383,        if (field.isSupported() == false) {,0.0,0,-1,0
org/joda/time/DateTime,24,1384,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,-1,0
org/joda/time/DateTime,24,1386,"        return new Property(this, field);",0.0,0,-1,0
org/joda/time/DateTime,24,1397,"        return new DateMidnight(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,24,1408,"        return new YearMonthDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,24,1419,"        return new TimeOfDay(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,24,1430,"        return new LocalDateTime(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,24,1441,"        return new LocalDate(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,24,1452,"        return new LocalTime(getMillis(), getChronology());",0.0,0,-1,0
org/joda/time/DateTime,24,1469,"        return withMillis(getChronology().era().set(getMillis(), era));",0.0,0,-1,0
org/joda/time/DateTime,24,1485,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));",0.0,0,-1,0
org/joda/time/DateTime,24,1501,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));",0.0,0,-1,0
org/joda/time/DateTime,24,1517,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));",0.0,0,-1,0
org/joda/time/DateTime,24,1533,"        return withMillis(getChronology().year().set(getMillis(), year));",0.0,0,-1,0
org/joda/time/DateTime,24,1549,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));",0.0,0,-1,0
org/joda/time/DateTime,24,1565,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0.0,0,-1,0
org/joda/time/DateTime,24,1581,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0.0,0,-1,0
org/joda/time/DateTime,24,1597,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0.0,0,-1,0
org/joda/time/DateTime,24,1613,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0.0,0,-1,0
org/joda/time/DateTime,24,1629,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0.0,0,-1,0
org/joda/time/DateTime,24,1646,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",0.0,0,-1,0
org/joda/time/DateTime,24,1662,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0.0,0,-1,0
org/joda/time/DateTime,24,1678,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));",0.0,0,-1,0
org/joda/time/DateTime,24,1694,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0.0,0,-1,0
org/joda/time/DateTime,24,1710,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));",0.0,0,-1,0
org/joda/time/DateTime,24,1721,"        return new Property(this, getChronology().era());",0.0,0,-1,0
org/joda/time/DateTime,24,1730,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,-1,0
org/joda/time/DateTime,24,1739,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,-1,0
org/joda/time/DateTime,24,1748,"        return new Property(this, getChronology().yearOfEra());",0.0,0,-1,0
org/joda/time/DateTime,24,1757,"        return new Property(this, getChronology().year());",0.0,0,-1,0
org/joda/time/DateTime,24,1766,"        return new Property(this, getChronology().weekyear());",0.0,0,-1,0
org/joda/time/DateTime,24,1775,"        return new Property(this, getChronology().monthOfYear());",0.0,0,-1,0
org/joda/time/DateTime,24,1784,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,-1,0
org/joda/time/DateTime,24,1793,"        return new Property(this, getChronology().dayOfYear());",0.0,0,-1,0
org/joda/time/DateTime,24,1802,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,-1,0
org/joda/time/DateTime,24,1811,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,-1,0
org/joda/time/DateTime,24,1822,"        return new Property(this, getChronology().hourOfDay());",0.0,0,-1,0
org/joda/time/DateTime,24,1831,"        return new Property(this, getChronology().minuteOfDay());",0.0,0,-1,0
org/joda/time/DateTime,24,1840,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,-1,0
org/joda/time/DateTime,24,1849,"        return new Property(this, getChronology().secondOfDay());",0.0,0,-1,0
org/joda/time/DateTime,24,1858,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,-1,0
org/joda/time/DateTime,24,1867,"        return new Property(this, getChronology().millisOfDay());",0.0,0,-1,0
org/joda/time/DateTime,24,1876,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,62,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,74,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,87,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,97,"        this(instant, ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,98,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,110,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,111,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,124,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,125,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,126,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,127,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,146,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,149,        iChronology = chrono;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,151,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,168,        super();,0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,169,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,172,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,197,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,225,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,295,        return iMillis;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,304,        return iChronology;,0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,317,"        iMillis = checkInstant(instant, iChronology);",0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,318,    },0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,329,        iChronology = checkChronology(chronology);,0.0,0,-1,0
org/joda/time/base/BaseDateTime,24,330,    },0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,66,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,69,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,79,        return getChronology().era().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,88,        return getChronology().centuryOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,97,        return getChronology().yearOfEra().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,106,        return getChronology().yearOfCentury().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,115,        return getChronology().year().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,124,        return getChronology().weekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,133,        return getChronology().monthOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,142,        return getChronology().weekOfWeekyear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,151,        return getChronology().dayOfYear().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,162,        return getChronology().dayOfMonth().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,173,        return getChronology().dayOfWeek().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,183,        return getChronology().hourOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,192,        return getChronology().minuteOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,201,        return getChronology().minuteOfHour().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,210,        return getChronology().secondOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,219,        return getChronology().secondOfMinute().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,228,        return getChronology().millisOfDay().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,237,        return getChronology().millisOfSecond().get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,259,        if (locale == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,260,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,262,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,263,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);",0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,264,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,265,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,283,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,284,        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,285,        cal.setTime(toDate());,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,286,        return cal;,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,297,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,298,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,300,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,311,        if (pattern == null) {,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,312,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractDateTime,24,314,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,71,        return getChronology().getZone();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,89,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,92,        return type.getField(getChronology()).get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,103,        if (type == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,104,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,106,        return type.getField(getChronology()).isSupported();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,124,        if (field == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");",0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,127,        return field.get(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,137,        return new Instant(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,146,"        return new DateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,165,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,166,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,167,"        return new DateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,177,"        return new DateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,191,"        return new MutableDateTime(getMillis(), getZone());",0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,210,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,211,        chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,212,"        return new MutableDateTime(getMillis(), chrono);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,222,"        return new MutableDateTime(getMillis(), chronology);",0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,235,        return new Date(getMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,262,        if (readableInstant instanceof ReadableInstant == false) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,263,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,266,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,278,        return,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,296,        if (this == other) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,297,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,300,        long otherMillis = other.getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,301,        long thisMillis = getMillis();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,304,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,305,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,307,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,308,            return -1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,310,            return 1;,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,323,        return (getMillis() > instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,333,        return isAfter(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,344,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,345,        return isAfter(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,357,        return (getMillis() < instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,367,        return isBefore(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,378,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,379,        return isBefore(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,391,        return (getMillis() == instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,401,        return isEqual(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,412,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,413,        return isEqual(instantMillis);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,424,        return ISODateTimeFormat.dateTime().print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,436,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,437,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,439,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/base/AbstractInstant,24,55,public abstract class AbstractInstant implements ReadableInstant {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,457,"        SavedField(DateTimeField field, String text, Locale locale) {",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,458,            iField = field;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,459,            iValue = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,460,            iText = text;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,461,            iLocale = locale;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,462,        },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,468,"                millis = iField.set(millis, iText, iLocale);",0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,444,    static class SavedField implements Comparable<SavedField> {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1828,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1829,            iFieldType = fieldType;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1831,            if (maxDigits > 18) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1832,                maxDigits = 18;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1834,            iMinDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1835,            iMaxDigits = maxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1836,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1839,            return iMaxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1846,"                printTo(buf, null, instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1849,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1847,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1850,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1855,"            printTo(null, out, instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1856,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1861,"            long millis = partial.getChronology().set(partial, 0L);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1863,"                printTo(buf, null, millis, partial.getChronology());",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1866,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1864,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1867,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1872,"            long millis = partial.getChronology().set(partial, 0L);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1873,"            printTo(null, out, millis, partial.getChronology());",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1874,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1879,            DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1880,            int minDigits = iMinDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1884,                fraction = field.remainder(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1892,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1885,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1886,                if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1887,"                    appendUnknownString(buf, minDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1889,"                    printUnknownString(out, minDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1891,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1894,            if (fraction == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1895,                if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1896,                    while (--minDigits >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1897,                        buf.append('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1900,                    while (--minDigits >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1901,                        out.write('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1904,                return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1908,"            long[] fractionData = getFractionData(fraction, field);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1909,            long scaled = fractionData[0];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1910,            int maxDigits = (int) fractionData[1];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1912,            if ((scaled & 0x7fffffff) == scaled) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1913,                str = Integer.toString((int) scaled);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1915,                str = Long.toString(scaled);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1918,            int length = str.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1919,            int digits = maxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1920,            while (length < digits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1921,                if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1922,                    buf.append('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1924,                    out.write('0');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1926,                minDigits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1927,                digits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1930,            if (minDigits < digits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1932,                while (minDigits < digits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1933,                    if (length <= 1 || str.charAt(length - 1) != '0') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1934,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1936,                    digits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1937,                    length--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1939,                if (length < str.length()) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1940,                    if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1941,                        for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1942,                            buf.append(str.charAt(i));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1945,                        for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1946,                            out.write(str.charAt(i));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1949,                    return;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1953,            if (buf != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1954,                buf.append(str);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1956,                out.write(str);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1958,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1961,            long rangeMillis = field.getDurationField().getUnitMillis();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1963,            int maxDigits = iMaxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1965,                switch (maxDigits) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1966,                default: scalar = 1L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1967,                case 1:  scalar = 10L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1968,                case 2:  scalar = 100L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1969,                case 3:  scalar = 1000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1970,                case 4:  scalar = 10000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1971,                case 5:  scalar = 100000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1972,                case 6:  scalar = 1000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1973,                case 7:  scalar = 10000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1974,                case 8:  scalar = 100000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1975,                case 9:  scalar = 1000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1976,                case 10: scalar = 10000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1977,                case 11: scalar = 100000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1978,                case 12: scalar = 1000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1979,                case 13: scalar = 10000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1980,                case 14: scalar = 100000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1981,                case 15: scalar = 1000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1982,                case 16: scalar = 10000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1983,                case 17: scalar = 100000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1984,                case 18: scalar = 1000000000000000000L; break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1986,                if (((rangeMillis * scalar) / scalar) == rangeMillis) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1987,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1990,                maxDigits--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1993,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1997,            return iMaxDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2001,            DateTimeField field = iFieldType.getField(bucket.getChronology());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2003,"            int limit = Math.min(iMaxDigits, text.length() - position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2005,            long value = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2006,            long n = field.getDurationField().getUnitMillis() * 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2007,            int length = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2008,            while (length < limit) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2009,                char c = text.charAt(position + length);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2010,                if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2011,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2013,                length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2014,                long nn = n / 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2015,                value += (c - '0') * nn;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2016,                n = nn;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2017,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2019,            value /= 10;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2021,            if (length == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2022,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2025,            if (value > Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2026,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2029,            DateTimeField parseField = new PreciseDateTimeField(,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2034,"            bucket.saveField(parseField, (int) value);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,2036,            return position + length;,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,80,            return (int) ((instant / getUnitMillis()) % iRange);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,95,        int thisValue = get(instant);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,96,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,24,143,        return iRange;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,66,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,109,        if (instant > 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,110,            instant -= 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,111,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,113,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,126,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,127,            return instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,24,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,62,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,94,"        return getAsText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,106,"        return getAsText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,121,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,153,        return Integer.toString(fieldValue);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,168,"        return getAsShortText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,180,"        return getAsShortText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,195,"        return getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,227,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,253,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,267,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,298,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,299,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,304,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,306,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,307,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,309,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,310,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,311,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,313,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,314,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,326,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,327,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,328,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,330,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,331,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,332,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,334,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,335,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,346,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,379,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,380,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,385,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,387,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,388,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,390,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,391,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,392,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,394,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,395,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,398,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,409,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,410,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,411,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,413,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,414,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,415,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,417,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,418,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,421,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,431,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,461,        int current = get(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,464,"        return set(instant, wrapped);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,495,        int current = values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,586,        values[fieldIndex] = newValue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,590,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,598,        return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,618,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,619,"        return set(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,635,"        return set(instant, text, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,654,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,655,"        return set(instant, fieldIndex, values, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,668,            return Integer.parseInt(text);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,669,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,704,        return false;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,716,        return 0;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,746,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,758,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,772,        return getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,804,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,818,        return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,829,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,830,        if (max >= 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,831,            if (max < 10) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,832,                return 1;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,833,            } else if (max < 100) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,834,                return 2;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,835,            } else if (max < 1000) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,836,                return 3;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,839,        return Integer.toString(max).length();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,850,        return getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,903,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,904,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,906,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,907,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,911,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,913,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,927,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,928,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,930,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,931,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,935,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,937,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,955,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,956,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,958,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,959,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,963,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,966,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,971,                return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,973,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,994,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,24,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,378,        return iName;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,410,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,419,        return getName();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,41,public abstract class DateTimeFieldType implements Serializable {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1334,"            super(fieldType, maxParsedDigits, signed);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1335,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1338,            return iMaxParsedDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1345,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1346,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1349,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1347,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1348,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1350,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1356,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1357,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1360,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1358,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1359,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1361,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1364,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1366,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1369,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1367,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1368,                    buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1371,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1373,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1376,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1378,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1381,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1379,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1380,                    out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1383,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1385,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1270,                    negative = c == '-';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1273,                    if (length + 1 >= limit || ,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1276,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1279,                    if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1280,                        length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1283,                        position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1286,"                    limit = Math.min(limit + 1, text.length() - position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1287,                    continue;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1290,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1296,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1303,"                value = Integer.parseInt(text.substring(position, position += length));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1307,                    i++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1311,                } catch (StringIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1312,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1319,                    value = -value;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1700,"                buf.append(print(instant, chrono, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1703,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1701,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1702,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1704,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1710,"                out.write(print(instant, chrono, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1713,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1711,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1712,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1714,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1718,"                buf.append(print(partial, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1721,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1719,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1720,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1722,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1726,"                out.write(print(partial, locale));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1729,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1727,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1728,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1730,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1733,            DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1734,            if (iShort) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1735,"                return field.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1737,"                return field.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1742,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1743,                DateTimeField field = iFieldType.getField(partial.getChronology());,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1744,                if (iShort) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1745,"                    return field.getAsShortText(partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1747,"                    return field.getAsText(partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1750,"                return ""\ufffd"";",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1760,            Locale locale = bucket.getLocale();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1763,            Set<String> validValues = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1764,            int maxLength = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1765,            synchronized (cParseCache) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1766,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1767,                if (innerMap == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1768,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1769,"                    cParseCache.put(locale, innerMap);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1771,                Object[] array = innerMap.get(iFieldType);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1772,                if (array == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1773,                    validValues = new HashSet<String>(32);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1774,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1775,                    Property property = dt.property(iFieldType);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1776,                    int min = property.getMinimumValueOverall();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1777,                    int max = property.getMaximumValueOverall();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1778,                    if (max - min > 32) {  // protect against invalid fields,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1779,                        return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1781,                    maxLength = property.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1782,                    for (int i = min; i <= max; i++) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1783,                        property.set(i);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1784,                        validValues.add(property.getAsShortText(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1785,                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1786,                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1787,                        validValues.add(property.getAsText(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1788,                        validValues.add(property.getAsText(locale).toLowerCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1789,                        validValues.add(property.getAsText(locale).toUpperCase(locale));,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1791,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1793,"                        validValues.add(""BCE"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1794,"                        validValues.add(""bce"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1795,"                        validValues.add(""CE"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1796,"                        validValues.add(""ce"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1797,                        maxLength = 3;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1799,"                    array = new Object[] {validValues, new Integer(maxLength)};",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1800,"                    innerMap.put(iFieldType, array);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1801,                } else {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1802,                    validValues = (Set<String>) array[0];,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1803,                    maxLength = ((Integer) array[1]).intValue();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1805,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1807,"            int limit = Math.min(text.length(), position + maxLength);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1808,            for (int i = limit; i > position; i--) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1809,"                String match = text.substring(position, i);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1810,                if (validValues.contains(match)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1811,"                    bucket.saveField(iFieldType, match, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1812,                    return i;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1815,            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1494,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1495,            iType = type;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1496,            iPivot = pivot;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1497,            iLenientParse = lenientParse;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1498,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1501,            return iLenientParse ? 4 : 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1505,            int limit = text.length() - position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1507,            if (!iLenientParse) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1508,"                limit = Math.min(2, limit);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1509,                if (limit < 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1510,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1513,                boolean hasSignChar = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1514,                boolean negative = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1515,                int length = 0;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1516,                while (length < limit) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1517,                    char c = text.charAt(position + length);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1518,                    if (length == 0 && (c == '-' || c == '+')) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1519,                        hasSignChar = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1520,                        negative = c == '-';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1521,                        if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1522,                            length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1525,                            position++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1526,                            limit--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1528,                        continue;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1530,                    if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1531,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1533,                    length++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1534,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1536,                if (length == 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1537,                    return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1540,                if (hasSignChar || length != 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1542,                    if (length >= 9) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1545,"                        value = Integer.parseInt(text.substring(position, position += length));",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1547,                        int i = position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1548,                        if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1549,                            i++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1552,                            value = text.charAt(i++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1555,                        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1553,                        } catch (StringIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1554,                            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1556,                        position += length;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1557,                        while (i < position) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1558,                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1560,                        if (negative) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1561,                            value = -value;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1565,"                    bucket.saveField(iType, value);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1566,                    return position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1571,            char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1572,            if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1573,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1575,            year = c - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1576,            c = text.charAt(position + 1);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1577,            if (c < '0' || c > '9') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1578,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1580,            year = ((year << 3) + (year << 1)) + c - '0';,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1582,            int pivot = iPivot;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1584,            if (bucket.getPivotYear() != null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1585,                pivot = bucket.getPivotYear().intValue();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1588,            int low = pivot - 50;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1591,            if (low >= 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1592,                t = low % 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1594,                t = 99 + ((low + 1) % 100);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1597,            year += low + ((year < t) ? 100 : 0) - t;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1599,"            bucket.saveField(iType, year);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1600,            return position + 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1604,            return 2;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1610,"            int year = getTwoDigitYear(instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1611,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1612,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1613,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1615,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1617,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1622,"            int year = getTwoDigitYear(instant, chrono);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1623,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1624,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1625,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1627,"                FormatUtils.writePaddedInteger(out, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1629,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1633,                int year = iType.getField(chrono).get(instant);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1634,                if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1635,                    year = -year;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1637,                return year % 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1638,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1639,                return -1;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1644,            int year = getTwoDigitYear(partial);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1645,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1646,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1647,                buf.append('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1649,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1651,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1654,            int year = getTwoDigitYear(partial);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1655,            if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1656,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1657,                out.write('\ufffd');,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1659,"                FormatUtils.writePaddedInteger(out, year, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1661,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1664,            if (partial.isSupported(iType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1666,                    int year = partial.get(iType);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1667,                    if (year < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1668,                        year = -year;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1670,                    return year % 100;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1671,                } catch (RuntimeException e) {},0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1673,            return -1;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1455,"            super(fieldType, numDigits, signed, numDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1456,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1459,"            int newPos = super.parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1460,            if (newPos < 0) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1461,                return newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1463,            int expectedPos = position + iMaxParsedDigits;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1464,            if (newPos != expectedPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1465,                if (iSigned) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1466,                    char c = text.charAt(position);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1467,                    if (c == '-' || c == '+') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1468,                        expectedPos++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1471,                if (newPos > expectedPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1473,                    return ~(expectedPos + 1);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1474,                } else if (newPos < expectedPos) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1476,                    return ~newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1479,            return newPos;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1408,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1409,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1412,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1410,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1411,"                appendUnknownString(buf, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1413,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1419,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1420,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1423,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1421,            } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1422,"                printUnknownString(out, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1424,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1430,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1431,"                    appendUnknownString(buf, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1434,"                appendUnknownString(buf, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1439,            if (partial.isSupported(iFieldType)) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1441,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1444,                },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1442,                } catch (RuntimeException e) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1443,"                    printUnknownString(out, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1446,"                printUnknownString(out, iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1448,        },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,145,        super();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,146,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,230,        if (fields == null || fields.size() == 0) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,231,"            throw new IllegalArgumentException(""The fields must not be null or empty"");",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,233,        Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,234,        int inputSize = workingFields.size();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,235,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,236,        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,238,        if (workingFields.contains(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,240,        } else if (workingFields.contains(DateTimeFieldType.dayOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,241,"            reducedPrec = dateByOrdinal(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,242,        } else if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,243,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,244,        } else if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,245,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,246,        } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,247,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,248,        } else if (workingFields.remove(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,249,            bld.append(yearElement());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,250,            reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,251,        } else if (workingFields.remove(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,252,            bld.append(weekyearElement());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,253,            reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,255,        boolean datePresent = (workingFields.size() < inputSize);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,258,"        time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,261,        if (bld.canBuildFormatter() == false) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,262,"            throw new IllegalArgumentException(""No valid format for fields: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,268,            fields.retainAll(workingFields);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,271,        },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,269,        } catch (UnsupportedOperationException ex) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,272,        return bld.toFormatter();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,293,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,294,        if (fields.remove(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,295,            bld.append(yearElement());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,296,            if (fields.remove(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,297,                if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,299,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,300,                    bld.appendMonthOfYear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,301,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,302,                    bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,305,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,306,                    bld.appendMonthOfYear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,307,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,310,                if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,312,"                    checkNotStrictISO(fields, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,313,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,314,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,315,                    bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,318,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,322,        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,323,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,324,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,325,            bld.appendMonthOfYear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,326,            if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,328,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,329,                bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,332,                reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,334,        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,336,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,337,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,338,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,339,            bld.appendDayOfMonth(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,341,        return reducedPrec;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,361,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,362,        if (fields.remove(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,363,            bld.append(yearElement());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,364,            if (fields.remove(DateTimeFieldType.dayOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,366,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,367,                bld.appendDayOfYear(3);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,370,                reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,373,        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,375,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,376,            bld.appendDayOfYear(3);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,378,        return reducedPrec;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,398,        boolean reducedPrec = false;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,399,        if (fields.remove(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,400,            bld.append(weekyearElement());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,401,            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,402,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,403,                bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,404,                bld.appendWeekOfWeekyear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,405,                if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,407,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,408,                    bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,411,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,414,                if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,416,"                    checkNotStrictISO(fields, strictISO);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,417,"                    appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,418,                    bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,419,                    bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,420,                    bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,423,                    reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,427,        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,428,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,429,            bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,430,            bld.appendWeekOfWeekyear(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,431,            if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,433,"                appendSeparator(bld, extended);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,434,                bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,437,                reducedPrec = true;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,439,        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,441,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,442,            bld.appendLiteral('W');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,443,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,444,            bld.appendDayOfWeek(1);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,446,        return reducedPrec;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,470,        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,471,        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,472,        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,473,        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,474,        if (!hour && !minute && !second && !milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,475,            return;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,477,        if (hour || minute || second || milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,478,            if (strictISO && reducedPrec) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,479,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Date was reduced precision: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,481,            if (datePresent) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,482,                bld.appendLiteral('T');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,485,        if (hour && minute && second || (hour && !second && !milli)) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,488,            if (strictISO && datePresent) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,489,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Time was truncated: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,491,            if (!hour && (minute && second || (minute && !milli) || second)) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,494,                if (strictISO) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,495,"                    throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,499,        if (hour) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,500,            bld.appendHourOfDay(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,501,        } else if (minute || second || milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,502,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,504,        if (extended && hour && minute) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,505,            bld.appendLiteral(':');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,507,        if (minute) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,508,            bld.appendMinuteOfHour(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,509,        } else if (second || milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,510,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,512,        if (extended && minute && second) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,513,            bld.appendLiteral(':');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,515,        if (second) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,516,            bld.appendSecondOfMinute(2);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,517,        } else if (milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,518,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,520,        if (milli) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,521,            bld.appendLiteral('.');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,522,            bld.appendMillisOfSecond(3);,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,524,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,535,        if (strictISO) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,536,"            throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);",0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,538,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,549,        if (extended) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,550,            bld.appendLiteral('-');,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,552,    },0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,568,        if (dp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,569,            DateTimeParser tOffset = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,572,            dp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,577,        return dp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,594,        if (ldp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,595,            ldp = dateElementParser().withZoneUTC();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,597,        return ldp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,611,        if (dpe == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,612,            dpe = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,634,        return dpe;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,650,        if (tp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,651,            tp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,657,        return tp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,675,        if (ltp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,676,            ltp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,681,        return ltp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,695,        if (tpe == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,697,            DateTimeParser decimalPoint = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,708,            tpe = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,744,        return tpe;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,766,        if (dtp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,769,            DateTimeParser time = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,774,            dtp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,778,        return dtp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,799,        if (dotp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,800,            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,805,            dotp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,810,        return dotp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,833,        if (ldotp == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,834,            DateTimeParser time = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,838,            ldotp = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,843,        return ldotp;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,866,        if (t == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,867,            t = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,872,        return t;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,901,        if (tt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,902,            tt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,907,        return tt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,936,        if (dt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,937,            dt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,942,        return dt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,970,        if (od == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,971,            od = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,976,        return od;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,988,        if (odt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,989,            odt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,994,        return odt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1006,        if (odtx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1007,            odtx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1012,        return odtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1022,        return weekyearWeekDay();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1033,        if (wdt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1034,            wdt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1039,        return wdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1050,        if (wdtx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1051,            wdtx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1056,        return wdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1067,        if (bd == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1068,            bd = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1074,        return bd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1086,        if (bt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1087,            bt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1096,        return bt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1107,        if (btx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1108,            btx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1115,        return btx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1127,        if (btt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1128,            btt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1133,        return btt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1145,        if (bttx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1146,            bttx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1151,        return bttx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1162,        if (bdt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1163,            bdt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1168,        return bdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1179,        if (bdtx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1180,            bdtx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1185,        return bdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1196,        if (bod == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1197,            bod = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1202,        return bod;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1214,        if (bodt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1215,            bodt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1220,        return bodt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1232,        if (bodtx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1233,            bodtx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1238,        return bodtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1248,        if (bwd == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1249,            bwd = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1256,        return bwd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1267,        if (bwdt == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1268,            bwdt = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1273,        return bwdt;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1284,        if (bwdtx == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1285,            bwdtx = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1290,        return bwdtx;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1300,        return yearElement();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1310,        if (ym == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1311,            ym = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1316,        return ym;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1342,        return weekyearElement();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1352,        if (ww == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1353,            ww = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1358,        return ww;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1368,        if (wwd == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1369,            wwd = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1375,        return wwd;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1384,        return hourElement();,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1394,        if (hm == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1395,            hm = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1400,        return hm;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1429,        if (hmsl == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1430,            hmsl = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1438,        return hmsl;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1450,        if (hmsf == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1451,            hmsf = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1458,        return hmsf;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1468,        if (dh == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1469,            dh = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1475,        return dh;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1485,        if (dhm == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1486,            dhm = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1492,        return dhm;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1503,        if (dhms == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1504,            dhms = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1510,        return dhms;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1522,        if (dhmsl == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1523,            dhmsl = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1529,        return dhmsl;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1541,        if (dhmsf == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1542,            dhmsf = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1548,        return dhmsf;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1582,        if (we == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1583,            we = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1587,        return we;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1591,        if (wwe == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1592,            wwe = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1597,        return wwe;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1601,        if (dwe == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1602,            dwe = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1607,        return dwe;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1611,        if (dye == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1612,            dye = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1617,        return dye;,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1659,        if (fse == null) {,0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1660,            fse = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISODateTimeFormat,24,1667,        return fse;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,36,    private FormatUtils() {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,37,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,24,51,            buf.append('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,52,            if (value != Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,53,                value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,55,                for (; size > 10; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,56,                    buf.append('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,58,"                buf.append("""" + -(long)Integer.MIN_VALUE);",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,59,                return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,69,                buf.append('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,81,                digits = 3;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,85,                digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,88,                buf.append('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,105,        int intValue = (int)value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,106,        if (intValue == value) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,107,"            appendPaddedInteger(buf, intValue, size);",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,108,        } else if (size <= 19) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,109,            buf.append(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,111,            if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,112,                buf.append('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,113,                if (value != Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,114,                    value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,116,                    for (; size > 19; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,117,                        buf.append('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,119,"                    buf.append(""9223372036854775808"");",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,120,                    return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,123,            int digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,124,            for (; size > digits; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,125,                buf.append('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,127,            buf.append(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,129,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,24,144,        if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,145,            out.write('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,146,            if (value != Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,147,                value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,149,                for (; size > 10; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,150,                    out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,152,"                out.write("""" + -(long)Integer.MIN_VALUE);",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,153,                return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,156,        if (value < 10) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,157,            for (; size > 1; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,158,                out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,160,            out.write(value + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,161,        } else if (value < 100) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,162,            for (; size > 2; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,163,                out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,168,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,169,            out.write(d + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,171,            out.write(value - (d << 3) - (d << 1) + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,172,        } else {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,174,            if (value < 1000) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,175,                digits = 3;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,176,            } else if (value < 10000) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,177,                digits = 4;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,179,                digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,181,            for (; size > digits; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,182,                out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,184,            out.write(Integer.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,186,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,24,201,        int intValue = (int)value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,202,        if (intValue == value) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,203,"            writePaddedInteger(out, intValue, size);",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,204,        } else if (size <= 19) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,205,            out.write(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,207,            if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,208,                out.write('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,209,                if (value != Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,210,                    value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,212,                    for (; size > 19; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,213,                        out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,215,"                    out.write(""9223372036854775808"");",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,216,                    return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,219,            int digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,220,            for (; size > digits; size--) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,221,                out.write('0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,223,            out.write(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,225,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,24,236,        if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,237,            buf.append('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,238,            if (value != Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,239,                value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,241,"                buf.append("""" + -(long)Integer.MIN_VALUE);",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,242,                return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,245,        if (value < 10) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,246,            buf.append((char)(value + '0'));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,247,        } else if (value < 100) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,251,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,252,            buf.append((char) (d + '0'));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,255,        } else {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,256,            buf.append(Integer.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,258,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,24,269,        int intValue = (int)value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,270,        if (intValue == value) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,271,"            appendUnpaddedInteger(buf, intValue);",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,273,            buf.append(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,275,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,24,288,        if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,289,            out.write('-');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,290,            if (value != Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,291,                value = -value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,293,"                out.write("""" + -(long)Integer.MIN_VALUE);",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,294,                return;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,297,        if (value < 10) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,298,            out.write(value + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,299,        } else if (value < 100) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,303,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,304,            out.write(d + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,306,            out.write(value - (d << 3) - (d << 1) + '0');,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,307,        } else {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,308,            out.write(Integer.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,310,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,24,323,        int intValue = (int)value;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,324,        if (intValue == value) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,325,"            writeUnpaddedInteger(out, intValue);",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,327,            out.write(Long.toString(value));,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,329,    },0.0,0,-1,0
org/joda/time/format/FormatUtils,24,336,        if (value < 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,337,            if (value != Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,338,                return calculateDigitCount(-value) + 1;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,340,                return 20;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,343,        return ,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,352,        int value = text.charAt(position) - '0';,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,357,        int sampleLen = errorPos + 32;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,359,        if (text.length() <= sampleLen + 3) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,360,            sampleText = text;,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,362,"            sampleText = text.substring(0, sampleLen).concat(""..."");",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,365,        if (errorPos <= 0) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,366,"            return ""Invalid format: \"""" + sampleText + '""';",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,369,        if (errorPos >= text.length()) {,0.0,0,-1,0
org/joda/time/format/FormatUtils,24,370,"            return ""Invalid format: \"""" + sampleText + ""\"" is too short"";",0.0,0,-1,0
org/joda/time/format/FormatUtils,24,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1151,            buf.append(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1152,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1157,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1158,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1165,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1166,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1174,                return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1181,                a = Character.toUpperCase(a);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1182,                b = Character.toUpperCase(b);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1183,                if (a != b) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1184,                    a = Character.toLowerCase(a);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1185,                    b = Character.toLowerCase(b);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1186,                    if (a != b) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1187,                        return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1203,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1204,            iValue = value;,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1205,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1208,            return iValue.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1214,            buf.append(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1215,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1220,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1221,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1224,            buf.append(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1225,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1228,            out.write(iValue);,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1229,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1232,            return iValue.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1236,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1237,                return position + iValue.length();,0.0,0,-1,0
org/joda/time/format/DateTimeFormatterBuilder,24,1239,            return ~position;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,418,        SavedState() {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,419,            this.iZone = DateTimeParserBucket.this.iZone;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,420,            this.iOffset = DateTimeParserBucket.this.iOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,421,            this.iSavedFields = DateTimeParserBucket.this.iSavedFields;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,422,            this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,423,        },0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,426,            if (enclosing != DateTimeParserBucket.this) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,427,                return false;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,429,            enclosing.iZone = this.iZone;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,430,            enclosing.iOffset = this.iOffset;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,431,            enclosing.iSavedFields = this.iSavedFields;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,432,            if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,437,                enclosing.iSavedFieldsShared = true;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,439,            enclosing.iSavedFieldsCount = this.iSavedFieldsCount;,0.0,0,-1,0
org/joda/time/format/DateTimeParserBucket,24,440,            return true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,387,        super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,388,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,194,        return createFormatterForStyle(style);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,212,        DateTimeFormatter formatter = createFormatterForStyle(style);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,213,        if (locale == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,214,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,217,        return ((StyleFormatter) formatter.getPrinter()).getPattern(locale);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,230,"        return createFormatterForStyleIndex(SHORT, NONE);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,242,"        return createFormatterForStyleIndex(NONE, SHORT);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,254,"        return createFormatterForStyleIndex(SHORT, SHORT);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,267,"        return createFormatterForStyleIndex(MEDIUM, NONE);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,279,"        return createFormatterForStyleIndex(NONE, MEDIUM);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,291,"        return createFormatterForStyleIndex(MEDIUM, MEDIUM);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,304,"        return createFormatterForStyleIndex(LONG, NONE);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,316,"        return createFormatterForStyleIndex(NONE, LONG);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,328,"        return createFormatterForStyleIndex(LONG, LONG);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,341,"        return createFormatterForStyleIndex(FULL, NONE);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,353,"        return createFormatterForStyleIndex(NONE, FULL);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,365,"        return createFormatterForStyleIndex(FULL, FULL);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,377,"        parsePatternTo(builder, pattern);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,378,    },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,410,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,416,                builder.appendEraText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,417,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,419,"                builder.appendCenturyOfEra(tokenLen, tokenLen);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,420,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,425,                    boolean lenientParse = true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,428,                    if (i + 1 < length) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,429,                        indexRef[0]++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,430,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,434,                            lenientParse = false;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,436,                        indexRef[0]--;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,440,                    switch (c) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,442,                        builder.appendTwoDigitWeekyear,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,444,                        break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,448,"                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, lenientParse);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,451,                } else {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,460,                            maxDigits = tokenLen;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,473,"                        builder.appendYearOfEra(tokenLen, maxDigits);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,480,                    if (tokenLen >= 4) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,481,                        builder.appendMonthOfYearText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,483,                        builder.appendMonthOfYearShortText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,490,                builder.appendDayOfMonth(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,491,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,493,                builder.appendHalfdayOfDayText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,494,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,496,                builder.appendClockhourOfHalfday(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,497,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,499,                builder.appendHourOfDay(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,500,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,502,                builder.appendClockhourOfDay(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,503,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,505,                builder.appendHourOfHalfday(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,506,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,508,                builder.appendMinuteOfHour(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,509,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,511,                builder.appendSecondOfMinute(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,512,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,514,"                builder.appendFractionOfSecond(tokenLen, tokenLen);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,515,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,517,                builder.appendDayOfWeek(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,518,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,520,                if (tokenLen >= 4) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,521,                    builder.appendDayOfWeekText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,523,                    builder.appendDayOfWeekShortText();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,525,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,527,                builder.appendDayOfYear(tokenLen);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,528,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,533,                if (tokenLen >= 4) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,534,                    builder.appendTimeZoneName();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,536,                    builder.appendTimeZoneShortName();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,538,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,540,                if (tokenLen == 1) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,541,"                    builder.appendTimeZoneOffset(null, ""Z"", false, 2, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,542,                } else if (tokenLen == 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,543,"                    builder.appendTimeZoneOffset(null, ""Z"", true, 2, 2);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,545,                    builder.appendTimeZoneId();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,547,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,555,                    builder.appendLiteral(new String(sub));,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,557,                break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,559,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,604,                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,606,                        i++;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,607,                        buf.append(c);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,609,                        inLiteral = !inLiteral;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,654,                return true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,656,                if (tokenLen <= 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,657,                    return true;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,675,"            throw new IllegalArgumentException(""Invalid pattern specification"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,701,        if (style == null || style.length() != 2) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,702,"            throw new IllegalArgumentException(""Invalid style specification: "" + style);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,704,        int dateStyle = selectStyle(style.charAt(0));,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,705,        int timeStyle = selectStyle(style.charAt(1));,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,706,        if (dateStyle == NONE && timeStyle == NONE) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,707,"            throw new IllegalArgumentException(""Style '--' is invalid"");",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,709,"        return createFormatterForStyleIndex(dateStyle, timeStyle);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,720,        int index = ((dateStyle << 2) + dateStyle) + timeStyle;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,721,        DateTimeFormatter f = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,722,        synchronized (cStyleCache) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,723,            f = cStyleCache[index];,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,724,            if (f == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,725,                int type = DATETIME;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,726,                if (dateStyle == NONE) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,727,                    type = TIME;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,728,                } else if (timeStyle == NONE) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,729,                    type = DATE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,731,                StyleFormatter llf = new StyleFormatter(,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,733,"                f = new DateTimeFormatter(llf, llf);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,734,                cStyleCache[index] = f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,736,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,737,        return f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,747,        switch (ch) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,749,            return SHORT;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,751,            return MEDIUM;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,753,            return LONG;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,755,            return FULL;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,757,            return NONE;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,759,"            throw new IllegalArgumentException(""Invalid style character: "" + ch);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,774,            super();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,775,            iDateStyle = dateStyle;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,776,            iTimeStyle = timeStyle;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,777,            iType = type;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,778,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,767,"        private static final Map<String, DateTimeFormatter> cCache = new HashMap<String, DateTimeFormatter>();  // manual sync",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,781,            return 40;  // guess,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,787,            DateTimePrinter p = getFormatter(locale).getPrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,788,"            p.printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,789,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,794,            DateTimePrinter p = getFormatter(locale).getPrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,795,"            p.printTo(out, instant, chrono, displayOffset, displayZone, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,796,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,799,            DateTimePrinter p = getFormatter(locale).getPrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,800,"            p.printTo(buf, partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,801,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,804,            DateTimePrinter p = getFormatter(locale).getPrinter();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,805,"            p.printTo(out, partial, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,806,        },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,809,            return 40;  // guess,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,813,            DateTimeParser p = getFormatter(bucket.getLocale()).getParser();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,814,"            return p.parseInto(bucket, text, position);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,818,            locale = (locale == null ? Locale.getDefault() : locale);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,819,            String key = Integer.toString(iType + (iDateStyle << 4) + (iTimeStyle << 8)) + locale.toString();,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,820,            DateTimeFormatter f = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,821,            synchronized (cCache) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,822,                f = cCache.get(key);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,823,                if (f == null) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,824,                    String pattern = getPattern(locale);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,825,                    f = DateTimeFormat.forPattern(pattern);,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,826,"                    cCache.put(key, f);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,828,            },0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,829,            return f;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,833,            DateFormat f = null;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,834,            switch (iType) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,836,"                    f = DateFormat.getDateInstance(iDateStyle, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,837,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,839,"                    f = DateFormat.getTimeInstance(iTimeStyle, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,840,                    break;,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,842,"                    f = DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,845,            if (f instanceof SimpleDateFormat == false) {,0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,846,"                throw new IllegalArgumentException(""No datetime pattern for locale: "" + locale);",0.0,0,-1,0
org/joda/time/format/DateTimeFormat,24,848,            return ((SimpleDateFormat) f).toPattern();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,109,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,110,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,111,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,112,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,113,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,114,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,115,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,116,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,117,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,130,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,131,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,132,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,133,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,134,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,135,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,136,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,137,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,138,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,151,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,152,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,153,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,154,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,155,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,156,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,157,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,158,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,159,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,172,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,173,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,174,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,175,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,176,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,177,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,178,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,179,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,180,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,190,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,191,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,192,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,193,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,194,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,195,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,196,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,197,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,198,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,208,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,209,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,210,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,211,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,212,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,213,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,214,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,215,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,216,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,225,"        super(createMessage(fieldName, value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,226,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,227,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,228,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,229,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,230,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,231,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,232,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,233,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,234,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,41,        StringBuffer buf = new StringBuffer(),0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,44,        if (lowerBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,45,            if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,46,"                buf.append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,50,        } else if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,53,"            buf.append(""must be in the range ["")",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,59,        if (explain != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,60,"            buf.append("": "").append(explain);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,63,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,76,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,77,"            buf.append(""null"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,79,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,80,            buf.append(value);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,81,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,86,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,243,        return iDateTimeFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,252,        return iDurationFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,261,        return iFieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,270,        return iNumberValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,279,        return iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,288,        String value = iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,289,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,290,            value = String.valueOf(iNumberValue);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,292,        return value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,301,        return iLowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,310,        return iUpperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,314,        return iMessage;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,323,        if (iMessage == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,324,            iMessage = message;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,325,        } else if (message != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,326,"            iMessage = message + "": "" + iMessage;",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,24,328,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,24,43,        super();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,44,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,24,56,        return cMillisProvider.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,97,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,98,        if (offsetMillis == 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,99,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,101,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,103,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,24,116,        if (millisProvider == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,117,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,24,119,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,120,        cMillisProvider = millisProvider;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,121,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,24,131,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeUtils,24,146,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,147,            return DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,149,        return instant.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,164,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,165,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,167,        Chronology chrono = instant.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,168,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,169,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,171,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,187,        Chronology chrono = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,188,        if (start != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,189,            chrono = start.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,190,        } else if (end != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,191,            chrono = end.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,193,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,194,            chrono = ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,196,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,211,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,212,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,214,        Chronology chrono = interval.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,215,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,216,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,218,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,234,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,235,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,236,"            interval = new Interval(now, now);",0.0,0,-1,0
org/joda/time/DateTimeUtils,24,238,        return interval;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,270,            return DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,286,        if (type == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,287,            return PeriodType.standard();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,289,        return type;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,303,        if (duration == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,304,            return 0L;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,306,        return duration.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,334,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,335,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,24,337,        DurationFieldType lastType = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,338,        for (int i = 0; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,339,            DateTimeField loopField = partial.getField(i);,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,340,            if (i > 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,341,                if (loopField.getRangeDurationField().getType() != lastType) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,342,                    return false;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,345,            lastType = loopField.getDurationField().getType();,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,347,        return true;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,365,"        	Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});        	",0.0,0,-1,0
org/joda/time/DateTimeUtils,24,366,"        	return (DateFormatSymbols) method.invoke(null, new Object[] {locale});        	",0.0,0,-1,0
org/joda/time/DateTimeUtils,24,367,        } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,368,        	return new DateFormatSymbols(locale);,0.0,0,-1,0
org/joda/time/JodaTimePermission,24,57,        super(name);,0.0,0,-1,0
org/joda/time/JodaTimePermission,24,58,    },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,97,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,102,            return chrono;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,143,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,144,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,146,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,147,            return this;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,149,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,160,"        String str = ""ISOChronology"";",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,161,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,162,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,163,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,165,        return str;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,190,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,208,        return new Stub(getZone());,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,107,        if ((base = iBase) != null) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,108,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,110,        return null;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,148,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,151,        return super.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,389,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,390,        setFields();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,391,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,102,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,183,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,184,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,185,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,186,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,187,            if (value < field.getMinimumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,188,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,192,            if (value > field.getMaximumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,193,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,199,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,200,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,201,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,203,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,208,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,213,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,223,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,224,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,225,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,228,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,242,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,255,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,256,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,257,        if (startInstant != endInstant) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,258,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,261,"                startInstant = field.add(startInstant, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,262,                values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,265,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,276,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,277,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,278,        if (duration != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,279,            long current = 0;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,280,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,282,                if (field.isPrecise()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,283,"                    int value = field.getDifference(duration, current);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,284,"                    current = field.add(current, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,285,                    values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,289,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,301,        if (scalar != 0 && period != null) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,304,                if (value != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,309,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,322,        if (duration == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,323,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,24,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,-1,0
org/joda/time/DateTimeUtils,24,399,            return System.currentTimeMillis();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2029,            super();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2030,            iInstant = instant;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2031,            iField = field;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2032,        },0.0,0,-1,0
org/joda/time/LocalDateTime,24,2038,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2039,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2040,        },0.0,0,-1,0
org/joda/time/LocalDateTime,24,2046,            iInstant = (LocalDateTime) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2047,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2048,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2049,        },0.0,0,-1,0
org/joda/time/LocalDateTime,24,2058,            return iField;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2067,            return iInstant.getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2077,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2086,            return iInstant;,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2100,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,2113,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,2128,"            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,2142,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,2156,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));",0.0,0,-1,0
org/joda/time/LocalDateTime,24,2169,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/LocalDateTime,24,2188,            return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2200,            return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2215,            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2229,            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2239,            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2249,            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDateTime,24,2260,            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/DurationFieldType,24,216,        return iName;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,234,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,243,        return getName();,0.0,0,-1,0
org/joda/time/LocalDate,24,1810,            super();,0.0,0,-1,0
org/joda/time/LocalDate,24,1811,            iInstant = instant;,0.0,0,-1,0
org/joda/time/LocalDate,24,1812,            iField = field;,0.0,0,-1,0
org/joda/time/LocalDate,24,1813,        },0.0,0,-1,0
org/joda/time/LocalDate,24,1819,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/LocalDate,24,1820,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/LocalDate,24,1821,        },0.0,0,-1,0
org/joda/time/LocalDate,24,1827,            iInstant = (LocalDate) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDate,24,1828,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/LocalDate,24,1829,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/LocalDate,24,1830,        },0.0,0,-1,0
org/joda/time/LocalDate,24,1839,            return iField;,0.0,0,-1,0
org/joda/time/LocalDate,24,1848,            return iInstant.getLocalMillis();,0.0,0,-1,0
org/joda/time/LocalDate,24,1858,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/LocalDate,24,1867,            return iInstant;,0.0,0,-1,0
org/joda/time/LocalDate,24,1881,"            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,24,1896,"            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,24,1910,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));",0.0,0,-1,0
org/joda/time/LocalDate,24,1924,"            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));",0.0,0,-1,0
org/joda/time/LocalDate,24,1937,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/LocalDate,24,1956,            return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/LocalDate,24,1968,            return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/LocalDate,24,1983,            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,24,1997,            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,24,2007,            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,24,2017,            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/LocalDate,24,2028,            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,463,            if (this == obj) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,464,                return true;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,466,            if (obj instanceof StandardDateTimeFieldType) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,469,            return false;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,475,            return iOrdinal;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,484,                    return chronology.era();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,486,                    return chronology.yearOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,488,                    return chronology.centuryOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,490,                    return chronology.yearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,494,                    return chronology.dayOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,500,                    return chronology.weekyearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,506,                    return chronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,508,                    return chronology.halfdayOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,510,                    return chronology.hourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,512,                    return chronology.clockhourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,514,                    return chronology.clockhourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,516,                    return chronology.hourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,518,                    return chronology.minuteOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,520,                    return chronology.minuteOfHour();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,522,                    return chronology.secondOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,524,                    return chronology.secondOfMinute();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,526,                    return chronology.millisOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,528,                    return chronology.millisOfSecond();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,531,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,541,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,543,                    return ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,545,                    return YEAR_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,547,                    return CENTURY_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,549,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,551,                    return YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,553,                    return DAY_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,555,                    return MONTH_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,557,                    return DAY_OF_MONTH_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,561,                    return WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,563,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,565,                    return DAY_OF_WEEK_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,567,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,569,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,573,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,575,                    return HOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,577,                    return MINUTE_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,579,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,581,                    return SECOND_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,583,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,585,                    return MILLIS_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,587,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,24,590,                    return this;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,438,        OffsetMillisProvider(long offsetMillis) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,439,            iMillis = offsetMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,440,        },0.0,0,-1,0
org/joda/time/DateTimeUtils,24,447,            return System.currentTimeMillis() + iMillis;,0.0,0,-1,0
org/joda/time/DurationField,24,209,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,24,210,"            return subtract(instant, (long) value);",0.0,0,-1,0
org/joda/time/DurationField,24,212,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DurationField,24,224,        if (value == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,24,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/DurationField,24,227,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,44,        return nameSet == null ? null : nameSet[0];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,49,        return nameSet == null ? null : nameSet[1];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,54,            return null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,58,        if (byIdCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,63,        if (byNameKeyCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,65,            String[][] zoneStrings = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,66,            for (int i=0; i<zoneStrings.length; i++) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,67,                String[] set = zoneStrings[i];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,68,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,69,"                    byNameKeyCache.put(set[2], new String[] {set[2], set[1]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,73,                    if (set[2].equals(set[4])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,74,"                        byNameKeyCache.put(set[4] + ""-Summer"", new String[] {set[4], set[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,76,"                        byNameKeyCache.put(set[4], new String[] {set[4], set[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,78,                    break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,24,83,        return (String[])byNameKeyCache.get(nameKey);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,522,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,523,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,524,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,525,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,527,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,531,"            long millis = chrono.year().set(0, year);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,536,            if (iDayOfWeek != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,541,            return millis - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,549,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,550,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,551,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,552,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,554,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,558,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,563,"            next = chrono.millisOfDay().set(next, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,565,"            next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,567,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,568,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,569,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,573,"                next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,574,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,575,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,577,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,578,"                    next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,583,            return next - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,591,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,592,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,593,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,594,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,596,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,600,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,609,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,610,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,616,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,625,            return prev - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,629,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,630,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,632,            if (obj instanceof OfYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,633,                OfYear other = (OfYear)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,634,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,642,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,659,            out.writeByte(iMode);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,660,            out.writeByte(iMonthOfYear);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,661,            out.writeByte(iDayOfMonth);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,662,            out.writeByte(iDayOfWeek);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,663,            out.writeBoolean(iAdvance);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,664,"            writeMillis(out, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,665,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,672,"                next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,682,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,673,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,676,"                        next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,680,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,683,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,701,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,692,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,699,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,702,            return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,706,            if (iDayOfMonth >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,713,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,719,            if (daysToAdd != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,720,                if (iAdvance) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,721,                    if (daysToAdd < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,722,                        daysToAdd += 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,725,                    if (daysToAdd > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,726,                        daysToAdd -= 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,731,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,817,            iRecurrence = recurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,818,            iFromYear = fromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,819,            iToYear = toYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,820,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,823,            return iFromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,827,            return iToYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,831,            return iRecurrence.getOfYear();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,835,            return iRecurrence.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,839,            return iRecurrence.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,845,            final int wallOffset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,846,            long testInstant = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,849,            if (instant == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,850,                year = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,852,                year = chrono.year().get(instant + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,855,            if (year < iFromYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,860,                testInstant -= 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,865,            if (next > instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,866,                year = chrono.year().get(next + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,867,                if (year > iToYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,869,                    next = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,873,            return next;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,45,        return iNameKey;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,49,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,53,        return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,57,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,61,        return true;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,65,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,69,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,77,        String id = getID();,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,92,            FixedDateTimeZone other = (FixedDateTimeZone)obj;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,93,            return,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,24,98,        return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,603,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,605,                return null;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,608,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,611,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,614,                return getClass().getName();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1362,                        index = in.readUnsignedShort();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1365,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1366,"                    throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1389,            int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1390,            if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1391,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1394,            long[] trans = new long[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1395,            int[] wallOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1396,            int[] standardOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1397,            String[] nameKeys = new String[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1399,            Transition last = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1400,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1401,                Transition tr = transitions.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1403,                if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1404,                    throw new IllegalArgumentException(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1407,                trans[i] = tr.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1408,                wallOffsets[i] = tr.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1409,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1410,                nameKeys[i] = tr.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1412,                last = tr;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1417,            String[] zoneNameData = new String[5];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1419,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1420,                String[] set = zoneStrings[j];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1422,                    zoneNameData = set;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1429,                String curNameKey = nameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1430,                String nextNameKey = nameKeys[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1431,                long curOffset = wallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1432,                long nextOffset = wallOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1433,                long curStdOffset = standardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1434,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1436,                if (curOffset != nextOffset &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1443,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1448,                    if (curOffset > nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1450,                    } else if (curOffset < nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1452,                        i++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1457,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1458,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1460,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1465,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1471,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1480,            return new PrecalculatedZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1509,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1510,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1511,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1512,                return iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1514,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1515,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1516,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1517,                    return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1519,"                return ""UTC"";",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1521,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1522,                return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1524,            return iTailZone.getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1531,                return iWallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1538,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1540,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1541,                return iWallOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1543,            return iTailZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1547,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1548,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1549,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1550,                return iStandardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1552,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1553,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1554,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1555,                    return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1557,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1559,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1560,                return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1562,            return iTailZone.getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1566,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1576,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1577,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1579,            long end = transitions[transitions.length - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1580,            if (instant < end) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1581,                instant = end;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1583,            return iTailZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1587,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1588,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1589,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1590,                if (instant > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1591,                    return instant - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1593,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1595,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1596,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1597,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1598,                    long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1599,                    if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1600,                        return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1603,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1605,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1606,                long prev = iTailZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1607,                if (prev < instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1608,                    return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1611,            long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1612,            if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1613,                return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1615,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1619,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1620,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1622,            if (obj instanceof PrecalculatedZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1624,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1634,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1638,            int size = iTransitions.length;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1641,            Set<String> poolSet = new HashSet<String>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1642,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1643,                poolSet.add(iNameKeys[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1646,            int poolSize = poolSet.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1647,            if (poolSize > 65535) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1650,            String[] pool = new String[poolSize];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1651,            Iterator<String> it = poolSet.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1652,            for (int i=0; it.hasNext(); i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1653,                pool[i] = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1657,            out.writeShort(poolSize);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1658,            for (int i=0; i<poolSize; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1659,                out.writeUTF(pool[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1662,            out.writeInt(size);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1664,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1665,"                writeMillis(out, iTransitions[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1666,"                writeMillis(out, iWallOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1667,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1670,                String nameKey = iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1671,                for (int j=0; j<poolSize; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1672,                    if (pool[j].equals(nameKey)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1673,                        if (poolSize < 256) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1674,                            out.writeByte(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1676,                            out.writeShort(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1678,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1683,            out.writeBoolean(iTailZone != null);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1684,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1685,                iTailZone.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1687,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1690,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1691,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1693,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1694,            if (transitions.length <= 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1695,                return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1700,            double distances = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1701,            int count = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1703,            for (int i=1; i<transitions.length; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1704,                long diff = transitions[i] - transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1706,                    distances += (double)diff;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1707,                    count++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1711,            if (count > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1712,                double avg = distances / count;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1713,                avg /= 24 * 60 * 60 * 1000;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1714,                if (avg >= 25) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1721,                    return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1725,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1183,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1191,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1195,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1199,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1200,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1201,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1206,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1208,                if (instant > 0 && start < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1210,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1218,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1212,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1214,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1215,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1217,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1221,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1223,                if (instant > 0 && end < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1225,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1233,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1227,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1229,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1230,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1232,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1235,            return (start > end) ? end : start;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1241,            instant++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1243,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1244,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1245,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1250,                start = startRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1252,                if (instant < 0 && start > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1254,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1262,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1256,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1258,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1259,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1261,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1265,                end = endRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1267,                if (instant < 0 && end > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1269,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1277,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1271,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1273,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1274,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1276,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1279,            return ((start > end) ? start : end) - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1283,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1284,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1286,            if (obj instanceof DSTZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1287,                DSTZone other = (DSTZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1288,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1294,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1298,"            writeMillis(out, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1299,            iStartRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1300,            iEndRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1301,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1304,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1305,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1306,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1311,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1319,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1313,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1315,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1316,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1318,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1322,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1330,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1324,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1326,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1327,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1329,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1332,            return (start > end) ? startRecurrence : endRecurrence;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,194,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,195,                if (iNameKey == null) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,196,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,198,                return iNameKey;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,200,            return iNextInfo.getNameKey(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,210,            return iNextInfo.getOffset(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,215,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,218,                return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,220,            return iNextInfo.getStandardOffset(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,225,    public DateTimeZoneBuilder() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,227,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,96,"            return readFrom((DataInput)in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,115,                fixed = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,117,            return fixed;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,123,"            throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,142,            long units = millis / (30 * 60000L);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,145,                out.writeByte((int)(units & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,146,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,150,        if (millis % 60000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,152,            long minutes = millis / 60000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,156,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,160,        if (millis % 1000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,162,            long seconds = millis / 1000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,167,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,176,        out.writeLong(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,177,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,217,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,252,        OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,254,        if (iRuleSets.size() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,258,        iRuleSets.add(new RuleSet());,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,259,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,269,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,277,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,309,        if (fromYear <= toYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,310,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,314,            getLastRuleSet().addRule(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,316,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,320,        if (iRuleSets.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,333,        if (id == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,334,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,343,        DSTZone tailZone = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,345,        long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,346,        int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,348,        int ruleSetCount = iRuleSets.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,351,            Transition next = rs.firstTransition(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,352,            if (next == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,353,                continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,355,"            addTransition(transitions, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,356,            millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,357,            saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,360,            rs = new RuleSet(rs);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,363,"                if (addTransition(transitions, next)) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,364,                    if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,366,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,369,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,370,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,372,                    tailZone = rs.buildTailZone(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,383,        if (transitions.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,384,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,386,                return tailZone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,391,            Transition tr = transitions.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,397,        if (zone.isCachable()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,400,        return zone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,404,        int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,405,        if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,406,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,407,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,410,        Transition last = transitions.get(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,412,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,417,        int offsetForLast = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,418,        if (size >= 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,421,        int offsetForNew = last.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,426,        if (newLocal != lastLocal) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,427,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,428,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,431,        transitions.remove(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,432,"        return addTransition(transitions, tr);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,443,        if (out instanceof DataOutput) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,448,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,475,    },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,40,        } catch (SecurityException e) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,41,            i = null;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,50,            cacheSize = i.intValue();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,52,            cacheSize--;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,53,            int shift = 0;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,54,            while (cacheSize > 0) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,55,                shift++;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,56,                cacheSize >>= 1;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,58,            cacheSize = 1 << shift;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,69,            return (CachedDateTimeZone)zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,95,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,96,        iInfoCache = new Info[cInfoCacheMask + 1];,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,97,    },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,103,        return iZone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,107,        return getInfo(instant).getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,115,        return getInfo(instant).getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,119,        return iZone.isFixed();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,123,        return iZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,127,        return iZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,135,        if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,136,            return true;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,138,        if (obj instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,139,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,141,        return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,170,            periodStart = next;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,24,172,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,963,        RuleSet() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,964,            iRules = new ArrayList<Rule>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,965,            iUpperYear = Integer.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,966,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,971,        RuleSet(RuleSet rs) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,972,            iStandardOffset = rs.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,973,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,974,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,976,            iUpperYear = rs.iUpperYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,977,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,978,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,948,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,950,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,981,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,985,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,986,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,989,            iInitialNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,990,            iInitialSaveMillis = saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,991,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,994,            if (!iRules.contains(rule)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,995,                iRules.add(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,997,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1000,            iUpperYear = year;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1001,            iUpperOfYear = ofYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1002,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1011,            if (iInitialNameKey != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1013,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1024,            long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1025,            int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1026,            Transition first = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1030,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1032,                if (millis == firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1033,"                    first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1034,                    break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1037,                if (millis > firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1038,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1042,                        for (Rule rule : copy) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1043,                            if (rule.getSaveMillis() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1045,                                break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1047,                        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1049,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1061,"                first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1063,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1066,            iRules = copy;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1067,            return first;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1085,            Rule nextRule = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1086,            long nextMillis = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1088,            Iterator<Rule> it = iRules.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1089,            while (it.hasNext()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1090,                Rule rule = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1092,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1093,                    it.remove();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1094,                    continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1098,                if (next <= nextMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1100,                    nextRule = rule;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1101,                    nextMillis = next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1103,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1105,            if (nextRule == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1106,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1111,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1115,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1116,                long upperMillis =,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1118,                if (nextMillis >= upperMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1120,                    return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1131,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1132,                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1141,            if (iRules.size() == 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1142,                Rule startRule = iRules.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1143,                Rule endRule = iRules.get(1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1154,"                    return new DSTZone(id, iStandardOffset,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,1158,            return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,883,"        Transition(long millis, Transition tr) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,884,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,885,            iNameKey = tr.iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,886,            iWallOffset = tr.iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,887,            iStandardOffset = tr.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,888,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,890,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,891,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,892,            iNameKey = rule.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,893,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,894,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,895,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,898,"                   int wallOffset, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,899,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,900,            iNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,901,            iWallOffset = wallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,902,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,903,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,906,            return iMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,910,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,914,            return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,918,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,922,            return iWallOffset - iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,929,            if (other == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,930,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,932,            return iMillis > other.iMillis &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,754,            return iOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,772,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,776,            return iSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,780,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,781,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,783,            if (obj instanceof Recurrence) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,784,                Recurrence other = (Recurrence)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,785,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,790,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,794,            iOfYear.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,795,            out.writeUTF(iNameKey);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,796,"            writeMillis(out, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,797,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,24,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,57,        if (fileDir == null) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,60,        if (!fileDir.exists()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,63,        if (!fileDir.isDirectory()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,67,        iFileDir = fileDir;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,68,        iResourcePath = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,69,        iLoader = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,72,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,96,"        this(resourcePath, loader, true);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,97,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,137,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,142,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,158,            return loadZoneData(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,162,        return getZone((String)obj);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,183,        Thread t = Thread.currentThread();,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,184,"        t.getThreadGroup().uncaughtException(t, ex);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,185,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,197,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,203,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,206,                StringBuffer buf = new StringBuffer(40),0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,211,                throw new IOException(buf.toString());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,239,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,230,        } catch (IOException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,231,            uncaughtException(e);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,232,            iZoneInfoMap.remove(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,233,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,235,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,259,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,261,        },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,257,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,285,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,24,286,"                throw new IOException(""Corrupt zone info map"");",0.0,0,-1,0
org/joda/time/DateTimeZone,24,1243,        Stub(String id) {,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1244,            iID = id;,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1245,        },0.0,0,-1,0
org/joda/time/DateTimeZone,24,1248,            out.writeUTF(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1249,        },0.0,0,-1,0
org/joda/time/DateTimeZone,24,1252,            iID = in.readUTF();,0.0,0,-1,0
org/joda/time/DateTimeZone,24,1253,        },0.0,0,-1,0
org/joda/time/DateTimeZone,24,1256,            return forID(iID);,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,36,        super();,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,37,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,24,49,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,24,52,        return -value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,64,        int sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,67,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,70,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,82,        long sum = val1 + val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,85,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,88,        return sum;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,100,        long diff = val1 - val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,103,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,106,        return diff;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,119,        long total = (long) val1 * (long) val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,121,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,124,        return (int) total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,137,        switch (scalar) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,139,            return -val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,141,            return 0L;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,143,            return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,145,        long total = val1 * scalar;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,146,        if (total / scalar != val1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,147,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,150,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,162,        if (val2 == 1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,163,            return val1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,165,        if (val2 == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,166,            return 0;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,168,        long total = val1 * val2;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,169,        if (total / val2 != val1) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,170,            throw new ArithmeticException,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,173,        return total;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,185,            return (int) value;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,187,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,-1,0
org/joda/time/field/FieldUtils,24,199,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,-1,0
org/joda/time/field/FieldUtils,24,200,        return FieldUtils.safeToInt(val);,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,215,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,233,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,249,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,250,            throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,254,    },0.0,0,-1,0
org/joda/time/field/FieldUtils,24,273,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,-1,0
org/joda/time/field/FieldUtils,24,289,        if (minValue >= maxValue) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,290,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,-1,0
org/joda/time/field/FieldUtils,24,293,        int wrapRange = maxValue - minValue + 1;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,294,        value -= minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,296,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,297,            return (value % wrapRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,300,        int remByRange = (-value) % wrapRange;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,302,        if (remByRange == 0) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,303,            return 0 + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,305,        return (wrapRange - remByRange) + minValue;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,318,        if (object1 == object2) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,319,            return true;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,321,        if (object1 == null || object2 == null) {,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,322,            return false;,0.0,0,-1,0
org/joda/time/field/FieldUtils,24,324,        return object1.equals(object2);,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,76,        return duration / iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,88,        return value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,104,        long addition = value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,105,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,115,        return difference / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,128,            return true;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,24,133,        return false;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,24,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDurationField,24,59,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,24,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,-1,0
org/joda/time/field/BaseDurationField,24,91,        return duration / getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,24,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,24,123,        return value * getUnitMillis();  // safe,0.0,0,-1,0
org/joda/time/field/BaseDurationField,24,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,-1,0
org/joda/time/field/BaseDurationField,24,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,24,153,            return -1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,24,165,"        return ""DurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,118,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,125,                difference++;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,127,            difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,130,                difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,133,        return difference;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,145,        return iUnitMillis;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,53,"        return ""millis"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,85,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,89,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,93,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,97,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,101,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,105,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,109,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,113,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,117,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,135,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,137,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,138,            return 0;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,140,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,141,            return -1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,143,            return 1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,153,"        return ""DurationField[millis]"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,160,        return INSTANCE;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,24,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,52,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,53,        if (value == 0) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,54,            value = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,56,        return value;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,60,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,64,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,68,"        return getWrappedField().addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,84,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,86,        if (value == max) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,87,            value = 0;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,89,"        return getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,93,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,97,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,110,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,119,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,128,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,137,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,147,        return getWrappedField().getMaximumValue() + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,157,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,167,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,181,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,185,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,189,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,193,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,197,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,24,201,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,56,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,59,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,74,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,78,        return iField.get(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,94,        return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,98,        return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,24,102,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,24,70,        } else if (min == skip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,24,71,            iMinValue = skip + 1;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,24,73,            iMinValue = min;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,24,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,24,89,        if (value <= iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,24,90,            if (value == iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,24,91,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,24,94,            value++;,0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,24,96,"        return super.set(millis, value);",0.0,0,-1,0
org/joda/time/field/SkipDateTimeField,24,104,        return getType().getField(iChronology);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,64,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,76,        return iField;,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,84,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,92,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,100,"        return iField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,104,        return iField.getAsText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,108,"        return iField.getAsText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,112,"        return iField.getAsText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,116,"        return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,120,"        return iField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,124,        return iField.getAsShortText(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,128,"        return iField.getAsShortText(partial, fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,132,"        return iField.getAsShortText(partial, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,136,"        return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,140,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,144,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,148,"        return iField.add(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,152,"        return iField.addWrapPartial(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,156,"        return iField.addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,160,"        return iField.addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,164,"        return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,168,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,176,"        return iField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,180,"        return iField.set(instant, text);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,184,"        return iField.set(instant, fieldIndex, values, newValue);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,188,"        return iField.set(instant, fieldIndex, values, text, locale);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,200,        return iField.isLeap(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,204,        return iField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,216,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,220,        return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,224,"        return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,232,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,236,        return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,240,"        return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,244,        return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,248,        return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,252,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,256,        return iField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,260,        return iField.roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,264,        return iField.roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,268,        return iField.roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,272,        return iField.remainder(instant);,0.0,0,-1,0
org/joda/time/field/DelegatedDateTimeField,24,276,"        return (""DateTimeField["" + getName() + ']');",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,84,            iMin = minValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,89,            iMax = maxValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,100,        return super.get(instant) + iOffset;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,112,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,114,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,126,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,128,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,157,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,161,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,187,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,191,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,195,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,199,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,203,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,207,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,24,216,        return iOffset;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,156,            return false;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,164,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,169,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,182,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,186,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,190,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,24,195,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,79,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,83,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,101,        return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,110,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,119,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,128,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,137,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,146,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,155,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,164,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,173,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,182,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,191,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,200,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,209,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,227,        return 0;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,238,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,239,            return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,242,            if (other.getName() == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,243,                return (getName() == null);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,245,            return (other.getName().equals(getName()));,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,247,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,256,        return getName().hashCode();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,272,        return getInstance(iType);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,24,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,83,        if (type == null || durationField == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,84,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,86,        iType = type;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,87,        iDurationField = durationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,88,    },0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,55,        if (cCache == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,57,            field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,59,            field = cCache.get(type);,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,61,                field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,64,        if (field == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,66,"            cCache.put(type, field);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,68,        return field;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,95,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,99,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,108,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,117,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,126,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,135,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,144,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,153,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,162,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,171,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,180,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,189,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,198,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,207,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,216,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,225,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,234,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,243,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,252,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,261,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,270,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,297,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,306,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,315,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,324,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,333,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,343,        return iDurationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,352,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,361,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,370,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,379,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,388,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,397,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,406,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,415,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,424,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,433,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,442,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,451,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,460,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,469,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,478,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,487,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,496,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,505,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,514,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,523,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,533,"        return ""UnsupportedDateTimeField"";",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,540,"        return getInstance(iType, iDurationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,24,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,60,            iRangeField = null;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,100,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,101,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,102,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,131,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,162,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,166,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,170,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,174,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,178,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,182,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,191,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,195,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,196,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,24,198,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,72,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,77,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,92,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,97,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,119,        return iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,130,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,131,            return true;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,24,138,        return false;,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,24,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,24,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,24,73,        return iField.isPrecise();,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,24,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,24,81,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,24,85,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,24,89,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,24,93,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,24,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,64,            iDurationField = null;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,90,"        super(remainderField.getWrappedField(), type);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,91,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,92,        iDurationField = remainderField.iRangeField;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,94,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,95,        int i = field.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,98,        int j = field.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,101,        iMin = min;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,102,        iMax = max;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,103,    },0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,112,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,113,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,114,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,116,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,129,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,141,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,174,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,191,        return iMin;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,200,        return iMax;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,204,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,218,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,222,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,223,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,24,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,69,        } else if (min == skip + 1) {,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,70,            iMinValue = skip;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,72,            iMinValue = min;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,79,        int value = super.get(millis);,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,80,        if (value < iSkip) {,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,81,            value++;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,83,        return value;,0.0,0,-1,0
org/joda/time/field/SkipUndoDateTimeField,24,99,        return getType().getField(iChronology);,0.0,0,-1,0
org/joda/time/DateTimeUtils,24,423,            return iMillis;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,51,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,60,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,61,            return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,63,            return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,82,        int oldEra = get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,83,        if (oldEra != era) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,84,            int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,85,"            return iChronology.setYear(instant, -year);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,87,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,96,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,97,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,99,            return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,104,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,105,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,107,            return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,113,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,118,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,123,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,135,        return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,139,        return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,24,150,        return iChronology.era();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,134,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,144,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,167,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,196,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,206,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,217,        StringBuffer sb = new StringBuffer(60);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,218,        String name = getClass().getName();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,219,        int index = name.lastIndexOf('.');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,220,        if (index >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,221,            name = name.substring(index + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,223,        sb.append(name);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,224,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,225,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,226,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,227,            sb.append(zone.getID());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,229,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,230,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,231,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,233,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,234,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,307,        return 366;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,317,        return isLeapYear(year) ? 366 : 365;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,410,            year--;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,477,"        return getDayOfYear(instant, getYear(instant));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,500,            return year;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,522,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,565,        return 31;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,575,        int thisYear = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,577,"        return getDaysInYearMonth(thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,590,        return getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,84,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,93,        return getInstance(DateTimeZone.getDefault());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,105,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,135,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,136,        return base == null ? getInstanceUTC() : getInstance(base.getZone());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,147,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,157,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,158,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,160,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,161,            return this;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,163,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,174,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,184,"        return ""Buddhist"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,195,"        String str = ""BuddhistChronology"";",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,196,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,197,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,198,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,24,200,        return str;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,95,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,96,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,97,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,98,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,99,        return newInstant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,139,"        return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,155,"        return getInstance(zone, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,247,        if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,248,            cutoverInstant = null;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,250,            cutoverInstant = new Instant(gregorianCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,252,"        return getInstance(zone, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,288,"        return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,294,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,318,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,323,"        return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,332,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,340,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,342,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,344,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,356,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,357,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,363,        long instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,366,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,368,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,371,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,373,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,376,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,414,"        return ""GJ"".hashCode() * 11 + iJulianChronology.hashCode() +",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,426,        StringBuffer sb = new StringBuffer(60);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,427,"        sb.append(""GJChronology"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,428,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,429,        sb.append(getZone().getID());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,431,        if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,432,"            sb.append("",cutover="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,434,            if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,435,                printer = ISODateTimeFormat.date();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,437,                printer = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,439,"            printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,442,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,443,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,444,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,446,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,448,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,468,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,570,"        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,574,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,68,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,75,            if (!lowerLimit.isBefore(upperLimit)) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,76,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,111,        return iLowerLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,120,        return iUpperLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,129,        return withZone(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,138,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,139,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,141,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,142,            return this;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,145,        if (zone == DateTimeZone.UTC && iWithUTC != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,146,            return iWithUTC;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,149,        DateTime lowerLimit = iLowerLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,150,        if (lowerLimit != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,151,            MutableDateTime mdt = lowerLimit.toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,152,            mdt.setZoneRetainFields(zone);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,153,            lowerLimit = mdt.toDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,156,        DateTime upperLimit = iUpperLimit;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,157,        if (upperLimit != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,158,            MutableDateTime mdt = upperLimit.toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,159,            mdt.setZoneRetainFields(zone);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,160,            upperLimit = mdt.toDateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,163,        LimitChronology chrono = getInstance,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,166,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,167,            iWithUTC = chrono;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,170,        return chrono;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,177,"        long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,178,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,179,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,187,        long instant = getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,190,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,191,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,199,"        checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,200,        instant = getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,202,"        checkLimits(instant, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,203,        return instant;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,269,            return field;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,272,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,285,        if ((limit = iLowerLimit) != null && instant < limit.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,286,"            throw new LimitException(desc, true);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,288,        if ((limit = iUpperLimit) != null && instant >= limit.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,289,"            throw new LimitException(desc, false);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,291,    },0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,303,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,304,            return true;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,306,        if (obj instanceof LimitChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,307,            return false;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,309,        LimitChronology chrono = (LimitChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,310,        return,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,323,        int hash = 317351877;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,324,        hash += (getLowerLimit() != null ? getLowerLimit().hashCode() : 0);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,325,        hash += (getUpperLimit() != null ? getUpperLimit().hashCode() : 0);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,326,        hash += getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,327,        return hash;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,336,"        return ""LimitChronology["" + getBase().toString() + "", "" +",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,57,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,62,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,67,"        FieldUtils.verifyValueBounds(this, era, ERA_VALUE, ERA_VALUE);",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,68,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,73,"        if (iEraText.equals(text) == false && ""1"".equals(text) == false) {",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,74,"            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);",0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,76,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,81,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,86,        return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,91,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,96,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,101,        return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,116,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,121,        return ERA_VALUE;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,126,        return iEraText;,0.0,0,-1,0
org/joda/time/chrono/BasicSingleEraDateTimeField,24,131,        return iEraText.length();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,24,479,                    eras = f;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,57,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,90,        return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,94,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,95,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,97,        if (zone == getParam()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,98,            return this;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,100,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,101,            return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,103,"        return new ZonedChronology(getBase(), zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,110,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,119,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,129,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,139,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,140,        int offset = zone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,141,        instant -= offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,142,        if (offset != zone.getOffset(instant)) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,143,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,147,        return instant;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,213,            return field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,216,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,237,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,238,            return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,240,        if (obj instanceof ZonedChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,241,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,243,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,244,        return,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,256,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,391,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,402,            return iField.isLenient();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,411,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,412,"            return iField.getAsText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,416,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,417,"            return iField.getAsShortText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,421,"            return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,425,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,429,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,430,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,431,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,432,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,434,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,435,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,441,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,442,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,443,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,444,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,446,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,447,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,453,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,454,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,455,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,456,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,458,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,459,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,469,"                throw new IllegalFieldValueException(iField.getType(), new Integer(value),",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,479,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,480,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,485,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,486,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,492,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,493,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,507,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,508,            return iField.isLeap(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,512,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,513,            return iField.getLeapAmount(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,521,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,522,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,523,                instant = iField.roundFloor(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,524,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,526,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,527,                localInstant = iField.roundFloor(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,533,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,534,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,535,                instant = iField.roundCeiling(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,536,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,538,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,539,                localInstant = iField.roundCeiling(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,545,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,546,            return iField.remainder(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,554,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,555,            return iField.getMinimumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,559,            return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,563,"            return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,571,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,572,            return iField.getMaximumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,576,            return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,580,"            return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,584,            return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,588,            return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,592,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,593,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,595,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,598,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,286,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,302,"            return iField.getValue(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,306,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,310,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,314,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,318,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,319,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,324,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,325,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,326,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,330,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,331,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,337,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,338,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,344,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,345,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,350,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,354,            int offset = this.iZone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,355,            long diff = instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,360,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,24,364,            return iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,148,        int minuendYear = getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,156,        if (subtrahendRem >= FEB_29) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,158,                if (!isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,166,        int difference = minuendYear - subtrahendYear;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,167,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,168,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,170,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,180,            if (isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,182,                if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,184,                    dayOfYear--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,188,                if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,24,190,                    dayOfYear++;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,59,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,92,        if (months == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,93,            return instant; // the easy case,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,98,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,103,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,112,        int monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,113,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,114,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,115,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,118,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,119,            int remMonthToUse = monthToUse % iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,121,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,122,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,124,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,126,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,127,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,138,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,139,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,144,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,146,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,151,        int i_months = (int)months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,152,        if (i_months == months) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,153,"            return add(instant, i_months);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,158,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,160,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,164,        long monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,165,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,166,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,167,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,170,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,171,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,172,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,173,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,175,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,176,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,177,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,181,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,184,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,188,        int i_yearToUse = (int)yearToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,189,        int i_monthToUse = (int)monthToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,193,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,194,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,197,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,199,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,206,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,207,            return values;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,209,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,210,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,211,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,212,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,214,"            instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,215,"            return iChronology.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,217,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,232,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,237,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,238,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,241,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,242,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,243,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,244,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,246,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,250,        int minuendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,252,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,254,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,256,            if (subtrahendDom > minuendDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,260,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,265,        long minuendRem = minuendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,267,        long subtrahendRem = subtrahendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,270,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,271,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,274,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,300,            thisDom = maxDom;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,314,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,315,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,316,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,318,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,323,        return isLeap(instant) ? 1 : 0;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,333,        return MIN;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,338,        return iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,350,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,24,358,        return iChronology.monthOfYear();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,112,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,124,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,132,                    chrono = new GregorianChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,155,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,158,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,171,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,181,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,182,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,184,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,185,            return this;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,24,187,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,216,        Stub(DateTimeZone zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,217,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,218,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,221,            return ISOChronology.getInstance(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,225,            out.writeObject(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,226,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,231,            iZone = (DateTimeZone)in.readObject();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,24,232,        },0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,80,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,95,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,104,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,126,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,137,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,138,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,146,                    chrono = new JulianChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,169,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,170,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,171,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,172,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,185,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,195,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,196,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,198,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,199,            return this;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,201,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,226,            leapYears = relativeYear >> 2;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,228,            if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,24,229,                leapYears++;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,627,            return false;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,639,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,640,"                return iGregorianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,642,"                return iJulianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,647,"            return iGregorianField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,651,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,652,"                return iGregorianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,654,"                return iJulianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,659,"            return iGregorianField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,663,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,667,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,673,            if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,674,                return values;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,676,            if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,677,                long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,678,"                for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,679,"                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,681,"                instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,682,"                return GJChronology.this.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,684,"                return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,689,"            return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,693,"            return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,706,                        throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,714,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,715,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,718,                    if (get(instant) != value) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,719,                       throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,728,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,729,"                instant = iGregorianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,730,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,732,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,733,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,738,"                instant = iJulianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,739,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,741,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,742,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,747,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,759,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,760,                return iGregorianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,762,                return iJulianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,767,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,768,                return iGregorianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,770,                return iJulianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,786,            return iJulianField.getMinimumValue(partial);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,790,"            return iJulianField.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,794,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,795,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,798,            int min = iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,802,"            instant = iGregorianField.set(instant, min);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,803,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,804,                min = iGregorianField.get(iCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,807,            return min;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,817,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,818,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,821,            int max = iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,825,"            instant = iJulianField.set(instant, max);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,826,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,827,"                max = iJulianField.get(iJulianField.add(iCutover, -1));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,830,            return max;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,834,"            long instant = GJChronology.getInstanceUTC().set(partial, 0L);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,835,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,839,            Chronology chrono = GJChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,840,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,841,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,842,                DateTimeField field = partial.getFieldType(i).getField(chrono);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,843,                if (values[i] <= field.getMaximumValue(instant)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,844,"                    instant = field.set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,847,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,855,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,856,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,860,                instant = iJulianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,866,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,867,                instant = iGregorianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,869,                instant = iJulianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,870,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,872,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,873,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,877,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,881,"            return Math.max(iJulianField.getMaximumTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,886,"            return Math.max(iJulianField.getMaximumShortTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,891,            if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,892,                return julianToGregorianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,894,                return julianToGregorianByYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,900,                return gregorianToJulianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,952,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,953,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,954,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,956,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,957,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,961,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,962,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,964,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,965,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,969,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,973,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,974,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,975,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,977,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,978,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,982,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,983,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,985,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,986,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,990,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,994,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,995,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,996,"                    return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1000,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1001,"                return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1003,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1004,"                    return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1008,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1009,"                return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1014,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1015,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1016,"                    return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1020,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1021,"                return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1023,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1024,"                    return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1028,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1029,"                return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1044,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1045,                return iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1047,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1052,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1053,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1055,                return iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/Instant,24,95,        super();,0.0,0,-1,0
org/joda/time/Instant,24,96,        iMillis = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/Instant,24,97,    },0.0,0,-1,0
org/joda/time/Instant,24,119,        super();,0.0,0,-1,0
org/joda/time/Instant,24,120,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,-1,0
org/joda/time/Instant,24,121,"        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/Instant,24,122,    },0.0,0,-1,0
org/joda/time/Instant,24,76,"        return parse(str, ISODateTimeFormat.dateTimeParser());",0.0,0,-1,0
org/joda/time/Instant,24,87,        return formatter.parseDateTime(str).toInstant();,0.0,0,-1,0
org/joda/time/Instant,24,144,        return (newMillis == iMillis ? this : new Instant(newMillis));,0.0,0,-1,0
org/joda/time/Instant,24,158,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,24,159,            return this;,0.0,0,-1,0
org/joda/time/Instant,24,161,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,-1,0
org/joda/time/Instant,24,162,        return withMillis(instant);,0.0,0,-1,0
org/joda/time/Instant,24,176,        if (durationToAdd == null || scalar == 0) {,0.0,0,-1,0
org/joda/time/Instant,24,177,            return this;,0.0,0,-1,0
org/joda/time/Instant,24,179,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,-1,0
org/joda/time/Instant,24,193,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,24,206,"        return withDurationAdded(duration, 1);",0.0,0,-1,0
org/joda/time/Instant,24,220,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,24,233,"        return withDurationAdded(duration, -1);",0.0,0,-1,0
org/joda/time/Instant,24,255,        return ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/Instant,24,275,"        return new DateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,24,301,        return toDateTime();,0.0,0,-1,0
org/joda/time/Instant,24,320,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance());",0.0,0,-1,0
org/joda/time/Instant,24,346,        return toMutableDateTime();,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,50,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,51,        return year < 0 ? -year : year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,55,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,59,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,63,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,80,        if (getWrappedField().get(instant) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,81,            year = -year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,83,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,95,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,99,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,103,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,24,110,        return INSTANCE;,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,24,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,24,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,24,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,24,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,24,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,24,139,        return iChronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,351,"        LimitException(String desc, boolean isLow) {",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,352,            super(desc);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,353,            iIsLow = isLow;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,354,        },0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,357,            StringBuffer buf = new StringBuffer(85);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,358,"            buf.append(""The"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,359,            String desc = super.getMessage();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,360,            if (desc != null) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,361,                buf.append(' ');,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,362,                buf.append(desc);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,364,"            buf.append("" instant is "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,366,            DateTimeFormatter p = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,367,            p = p.withChronology(getBase());,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,368,            if (iIsLow) {,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,369,"                buf.append(""below the supported minimum of "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,370,"                p.printTo(buf, getLowerLimit().getMillis());",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,372,"                buf.append(""above the supported maximum of "");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,373,"                p.printTo(buf, getUpperLimit().getMillis());",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,376,"            buf.append("" ("");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,377,            buf.append(getBase());,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,378,            buf.append(')');,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,380,            return buf.toString();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,384,"            return ""IllegalArgumentException: "" + getMessage();",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1075,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1079,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1083,"            return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,24,1087,"            return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,49,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,73,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,79,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,92,"        return add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,96,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,100,        int minuendWeekyear = get(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,101,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,103,        long minuendRem = remainder(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,104,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,111,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,112,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,113,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,115,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,135,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,156,            setToWeek = maxOutWeeks;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,243,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,24,250,        return iChronology.weekyear();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,59,        return iChronology.getDaysInMonthMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,63,        return iChronology.getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,70,                int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,71,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,73,            return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,75,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,79,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,80,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,82,                int month = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,83,                for (int j = 0; j < size; j++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,85,                        int year = values[j];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,86,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,89,                return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,92,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,24,103,        return iChronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,45,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,46,        if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,47,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,49,        return year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,53,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,57,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,61,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,86,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,87,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,89,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,101,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,105,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,109,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,24,116,        return iChronology.yearOfEra();,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,50,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,58,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,59,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,61,        int thisYear = get(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,63,"        return set(instant, newYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,67,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,71,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,72,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,75,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,76,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,78,"        return set(instant, wrappedYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,88,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,99,        return iChronology.isLeapYear(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,103,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,104,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,106,            return 0;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,137,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,24,144,        return iChronology.year();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,52,        return iChronology.getDayOfYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,60,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,64,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,68,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,69,        return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,74,            int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,75,            return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,77,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,81,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,82,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,84,                int year = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,85,                return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,88,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,24,100,        return iChronology.dayOfYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,83,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,87,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,88,        return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,94,            return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,96,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,100,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,101,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,103,                int weekyear = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,104,                return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,107,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,24,118,        return iChronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,461,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,462,            return getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,466,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,467,"            return getWrappedField().getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,471,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,472,"            return getWrappedField().getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,476,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,477,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,478,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,479,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,483,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,484,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,485,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,486,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,490,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,491,"            long result = getWrappedField().addWrapField(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,492,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,493,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,497,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,498,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,499,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,503,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,504,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,505,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,509,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,510,"            long result = getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,511,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,512,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,516,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,517,"            long result = getWrappedField().set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,518,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,519,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,523,            return iDurationField;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,527,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,531,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,532,            return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,536,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,537,            return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,541,            return iLeapDurationField;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,545,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,546,            long result = getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,547,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,548,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,552,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,553,            long result = getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,554,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,555,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,559,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,560,            long result = getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,561,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,562,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,566,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,567,            long result = getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,568,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,569,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,573,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,574,            long result = getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,575,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,576,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,580,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,581,            long result = getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,582,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,583,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,587,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,588,            return getWrappedField().getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,592,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,593,            return getWrappedField().getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,597,            return getWrappedField().getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,601,            return getWrappedField().getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,396,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,397,"            return getWrappedField().getValue(duration, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,401,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,402,"            return getWrappedField().getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,406,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,407,"            return getWrappedField().getMillis(value, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,411,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,412,"            return getWrappedField().getMillis(value, instant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,416,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,417,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,418,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,419,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,423,"            checkLimits(instant, null);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,424,"            long result = getWrappedField().add(instant, amount);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,425,"            checkLimits(result, ""resulting"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,426,            return result;,0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,430,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,431,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,432,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,436,"            checkLimits(minuendInstant, ""minuend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,437,"            checkLimits(subtrahendInstant, ""subtrahend"");",0.0,0,-1,0
org/joda/time/chrono/LimitChronology,24,438,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,754,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,24,762,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,-1,0
org/joda/time/DateTime,24,1926,            super();,0.0,0,-1,0
org/joda/time/DateTime,24,1927,            iInstant = instant;,0.0,0,-1,0
org/joda/time/DateTime,24,1928,            iField = field;,0.0,0,-1,0
org/joda/time/DateTime,24,1929,        },0.0,0,-1,0
org/joda/time/DateTime,24,1935,            oos.writeObject(iInstant);,0.0,0,-1,0
org/joda/time/DateTime,24,1936,            oos.writeObject(iField.getType());,0.0,0,-1,0
org/joda/time/DateTime,24,1937,        },0.0,0,-1,0
org/joda/time/DateTime,24,1943,            iInstant = (DateTime) oos.readObject();,0.0,0,-1,0
org/joda/time/DateTime,24,1944,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,-1,0
org/joda/time/DateTime,24,1945,            iField = type.getField(iInstant.getChronology());,0.0,0,-1,0
org/joda/time/DateTime,24,1946,        },0.0,0,-1,0
org/joda/time/DateTime,24,1955,            return iField;,0.0,0,-1,0
org/joda/time/DateTime,24,1964,            return iInstant.getMillis();,0.0,0,-1,0
org/joda/time/DateTime,24,1974,            return iInstant.getChronology();,0.0,0,-1,0
org/joda/time/DateTime,24,1983,            return iInstant;,0.0,0,-1,0
org/joda/time/DateTime,24,2000,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,24,2016,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,24,2034,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,24,2051,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));",0.0,0,-1,0
org/joda/time/DateTime,24,2068,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));",0.0,0,-1,0
org/joda/time/DateTime,24,2084,"            return setCopy(text, null);",0.0,0,-1,0
org/joda/time/DateTime,24,2104,            return setCopy(getMaximumValue());,0.0,0,-1,0
org/joda/time/DateTime,24,2117,            return setCopy(getMinimumValue());,0.0,0,-1,0
org/joda/time/DateTime,24,2127,            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,24,2136,            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,24,2146,            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,24,2156,            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DateTime,24,2167,            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));,0.0,0,-1,0
org/joda/time/DurationFieldType,24,268,                    return chronology.eras();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,270,                    return chronology.centuries();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,272,                    return chronology.weekyears();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,274,                    return chronology.years();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,278,                    return chronology.weeks();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,282,                    return chronology.halfdays();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,284,                    return chronology.hours();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,286,                    return chronology.minutes();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,288,                    return chronology.seconds();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,290,                    return chronology.millis();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,293,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DurationFieldType,24,303,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,24,305,                    return ERAS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,307,                    return CENTURIES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,309,                    return WEEKYEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,311,                    return YEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,313,                    return MONTHS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,315,                    return WEEKS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,317,                    return DAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,319,                    return HALFDAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,321,                    return HOURS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,323,                    return MINUTES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,325,                    return SECONDS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,327,                    return MILLIS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,24,330,                    return this;,0.0,0,-1,0
