project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/joda/time/format/PeriodFormatterBuilder,27,192,        if (formatter == null) {,1.0,0,1,0
org/joda/time/format/PeriodFormatterBuilder,27,195,        clearPrefix();,1.0,0,1,0
org/joda/time/format/PeriodFormatterBuilder,27,196,"        append0(formatter.getPrinter(), formatter.getParser());",1.0,0,1,0
org/joda/time/format/PeriodFormatterBuilder,27,197,        return this;,1.0,0,0,0
org/joda/time/format/PeriodFormatterBuilder,27,818,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",1.0,1,0,1
org/joda/time/format/PeriodFormatter,27,324,            newPos = ~newPos;,0.16667,0,-1,0
org/joda/time/format/PeriodFormatter,27,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.14286,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1304,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0.14286,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1305,"                setFieldValue(period, MILLIS, 0);",0.14286,0,-1,0
org/joda/time/MutablePeriod,27,925,"        super.setField(DurationFieldType.seconds(), seconds);",0.04545,0,-1,0
org/joda/time/MutablePeriod,27,926,    },0.04545,0,-1,0
org/joda/time/MutablePeriod,27,947,"        super.setField(DurationFieldType.millis(), millis);",0.04545,0,-1,0
org/joda/time/MutablePeriod,27,948,    },0.04545,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1303,            } else if (fractPos < 0) {,0.04545,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1520,                period.setSeconds(value);,0.04545,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1521,                break;,0.04545,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1523,                period.setMillis(value);,0.04545,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,898,                    break search;,0.03226,1,-1,1
org/joda/time/format/PeriodFormatterBuilder,27,901,            return ~position;,0.03226,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1720,                        position += parsedForm.length();,0.02941,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1721,                        found = true;,0.02941,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1722,                        break;,0.02941,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,896,                    break;,0.02439,0,-1,0
org/joda/time/base/AbstractPeriod,27,124,        return new Period(this);,0.02381,0,-1,0
org/joda/time/format/PeriodFormatter,27,321,                return period;,0.02381,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,874,            String text = iText;,0.02381,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,875,            int textLength = text.length();,0.02381,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,876,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {",0.02381,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,877,                return position + textLength;,0.02381,0,-1,0
org/joda/time/format/PeriodFormatter,27,320,            if (newPos >= text.length()) {,0.02326,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1218,                    if (!mustParse) {,0.02326,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1222,                        return ~suffixPos;,0.02326,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,889,                    return pos;,0.02326,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,883,            String text = iText;,0.02273,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,884,            int textLength = text.length();,0.02273,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,885,            int sourceLength = periodStr.length();,0.02273,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,887,            for (int pos = position; pos < sourceLength; pos++) {,0.02273,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,888,"                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {",0.02273,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,892,                switch (periodStr.charAt(pos)) {,0.02273,0,-1,0
org/joda/time/format/PeriodFormatter,27,304,        return parseMutablePeriod(text).toPeriod();,0.02222,0,-1,0
org/joda/time/format/PeriodFormatter,27,302,        checkParser();,0.02174,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1565,"            if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {",0.02174,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1566,                return position + iText.length();,0.02174,0,-1,0
org/joda/time/Period,27,594,"        super(period, null, null);",0.02128,0,-1,0
org/joda/time/Period,27,595,    },0.02128,0,-1,0
org/joda/time/format/PeriodFormatter,27,315,        checkParser();,0.02128,0,-1,0
org/joda/time/format/PeriodFormatter,27,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);",0.02128,0,-1,0
org/joda/time/format/PeriodFormatter,27,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);",0.02128,0,-1,0
org/joda/time/format/PeriodFormatter,27,319,        if (newPos >= 0) {,0.02128,0,-1,0
org/joda/time/convert/ReadablePeriodConverter,27,70,        ReadablePeriod period = (ReadablePeriod) object;,0.02,0,-1,0
org/joda/time/convert/ReadablePeriodConverter,27,71,        return period.getPeriodType();,0.02,0,-1,0
org/joda/time/MutablePeriod,27,172,"        super(duration, type, null);",0.01961,0,-1,0
org/joda/time/MutablePeriod,27,173,    },0.01961,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1744,            return position;,0.01887,0,-1,0
org/joda/time/base/BasePeriod,27,418,        iValues = newValues;,0.01852,0,-1,0
org/joda/time/base/BasePeriod,27,419,    },0.01852,0,-1,0
org/joda/time/convert/ReadablePeriodConverter,27,59,    },0.01852,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1734,            if (found && position == oldPos) {,0.01852,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1739,            if (position > oldPos && !found && !iUseBefore) {,0.01852,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1336,"                position = iSuffix.parse(text, position);",0.01852,0,-1,0
org/joda/time/base/BasePeriod,27,404,            setPeriodInternal(period);,0.01818,0,-1,0
org/joda/time/base/BasePeriod,27,412,        int[] newValues = new int[size()];,0.01818,0,-1,0
org/joda/time/base/BasePeriod,27,413,"        for (int i = 0, isize = period.size(); i < isize; i++) {",0.01818,0,-1,0
org/joda/time/base/BasePeriod,27,414,            DurationFieldType type = period.getFieldType(i);,0.01818,0,-1,0
org/joda/time/base/BasePeriod,27,415,            int value = period.getValue(i);,0.01818,0,-1,0
org/joda/time/base/BasePeriod,27,416,"            checkAndUpdate(type, newValues, value);",0.01818,0,-1,0
org/joda/time/convert/ReadablePeriodConverter,27,58,        duration.setPeriod((ReadablePeriod) object);,0.01818,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1215,                    mustParse = true;,0.01818,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1236,"                limit = Math.min(iMaxParsedDigits, suffixPos - position);",0.01818,0,-1,0
org/joda/time/base/BasePeriod,27,465,"        setFieldInto(iValues, field, value);",0.01786,0,-1,0
org/joda/time/base/BasePeriod,27,466,    },0.01786,0,-1,0
org/joda/time/MutablePeriod,27,399,    },0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1702,            int oldPos = position;,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1703,"            position = iBeforeParser.parseInto(period, periodStr, position, locale);",0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1705,            if (position < 0) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1709,            boolean found = false;,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1710,            if (position > oldPos) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1712,                String[] parsedForms = iParsedForms;,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1713,                int length = parsedForms.length;,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1714,                for (int i=0; i < length; i++) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1715,                    String parsedForm = parsedForms[i];,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1716,                    if ((parsedForm == null || parsedForm.length() == 0) ||,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1727,            oldPos = position;,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1728,"            position = iAfterParser.parseInto(period, periodStr, position, locale);",0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1730,            if (position < 0) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1212,"                suffixPos = iSuffix.scan(text, position);",0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1213,                if (suffixPos >= 0) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1246,                char c = text.charAt(position + length);,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1248,                if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1269,                if (c >= '0' && c <= '9') {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1270,                    hasDigits = true;,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1285,                length++;,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1286,            },0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1292,            if (suffixPos >= 0 && position + length != suffixPos) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1300,            if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1333,            position += length;,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1335,            if (position >= 0 && iSuffix != null) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1339,            return position;,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1349,            if (length >= 10) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1498,            switch (field) {,0.01786,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1526,        },0.01786,0,-1,0
org/joda/time/base/BasePeriod,27,252,"            iValues = new MutablePeriod(period, type, chrono).getValues();",0.01754,0,-1,0
org/joda/time/base/BasePeriod,27,484,            values[index] = value;,0.01754,0,-1,0
org/joda/time/MutablePeriod,27,398,"        super(period, type, chrono);",0.01754,0,-1,0
org/joda/time/base/BasePeriod,27,406,    },0.01724,0,-1,0
org/joda/time/base/BasePeriod,27,486,    },0.01724,0,-1,0
org/joda/time/MutablePeriod,27,441,    },0.01724,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1228,"            if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {",0.01724,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1235,            if (suffixPos > 0) {,0.01724,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1242,            int length = 0;,0.01724,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1243,            int fractPos = -1;,0.01724,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1244,            boolean hasDigits = false;,0.01724,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1245,            while (length < limit) {,0.01724,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1288,            if (!hasDigits) {,0.01724,0,-1,0
org/joda/time/base/BasePeriod,27,401,        if (period == null) {,0.01695,0,-1,0
org/joda/time/base/BasePeriod,27,477,        int index = indexOf(field);,0.01695,0,-1,0
org/joda/time/base/BasePeriod,27,478,        if (index == -1) {,0.01695,0,-1,0
org/joda/time/convert/ConverterSet,27,56,            if (e.iType == type) {,0.01695,0,-1,0
org/joda/time/convert/ConverterSet,27,57,                return e.iConverter;,0.01695,0,-1,0
org/joda/time/MutablePeriod,27,440,        super.setPeriod(period);,0.01695,0,-1,0
org/joda/time/format/PeriodFormatter,27,338,    },0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1822,            PeriodParser[] parsers = iParsers;,0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1823,            if (parsers == null) {,0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1827,            int len = parsers.length;,0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1828,            for (int i=0; i<len && position >= 0; i++) {,0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1829,"                position = parsers[i].parseInto(period, periodStr, position, locale);",0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1831,            return position;,0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1184,            boolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);,0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1187,            if (position >= text.length()) {,0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1191,            if (iPrefix != null) {,0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1208,            int suffixPos = -1;,0.01695,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1209,            if (iSuffix != null && !mustParse) {,0.01695,0,-1,0
org/joda/time/format/PeriodFormatter,27,335,        if (iParser == null) {,0.01667,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,88,        return ReadableDuration.class;,0.01639,0,-1,0
org/joda/time/convert/ReadablePeriodConverter,27,81,        return ReadablePeriod.class;,0.01639,0,-1,0
org/joda/time/base/BasePeriod,27,254,    },0.01471,0,-1,0
org/joda/time/base/BasePeriod,27,242,        super();,0.01449,0,-1,0
org/joda/time/base/BasePeriod,27,243,        PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);,0.01449,0,-1,0
org/joda/time/base/BasePeriod,27,244,        type = (type == null ? converter.getPeriodType(period) : type);,0.01449,0,-1,0
org/joda/time/base/BasePeriod,27,245,        type = checkPeriodType(type);,0.01449,0,-1,0
org/joda/time/base/BasePeriod,27,246,        iType = type;,0.01449,0,-1,0
org/joda/time/base/BasePeriod,27,247,        if (this instanceof ReadWritablePeriod) {,0.01449,0,-1,0
org/joda/time/base/BasePeriod,27,248,            iValues = new int[size()];,0.01449,0,-1,0
org/joda/time/base/BasePeriod,27,249,            chrono = DateTimeUtils.getChronology(chrono);,0.01449,0,-1,0
org/joda/time/base/BasePeriod,27,250,"            converter.setInto((ReadWritablePeriod) this, period, chrono);",0.01449,0,-1,0
org/joda/time/convert/ConverterManager,27,421,        PeriodConverter converter =,0.01449,0,-1,0
org/joda/time/convert/ConverterManager,27,423,        if (converter != null) {,0.01449,0,-1,0
org/joda/time/convert/ConverterManager,27,424,            return converter;,0.01449,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,113,        return ReadableInterval.class;,0.01333,0,-1,0
org/joda/time/convert/ConverterSet,27,266,        if (type == null || length == 0) {,0.01266,0,-1,0
org/joda/time/convert/ConverterSet,27,269,        if (length == 1) {,0.01266,0,-1,0
org/joda/time/convert/ConverterSet,27,271,            return converters[0];,0.01266,0,-1,0
org/joda/time/base/AbstractPeriod,27,72,        int[] result = new int[size()];,0.0119,0,-1,0
org/joda/time/base/AbstractPeriod,27,73,        for (int i = 0; i < result.length; i++) {,0.0119,0,-1,0
org/joda/time/base/AbstractPeriod,27,74,            result[i] = getValue(i);,0.0119,0,-1,0
org/joda/time/base/AbstractPeriod,27,76,        return result;,0.0119,0,-1,0
org/joda/time/PeriodType,27,251,        PeriodType type = cYDTime;,0.01176,0,-1,0
org/joda/time/PeriodType,27,252,        if (type == null) {,0.01176,0,-1,0
org/joda/time/PeriodType,27,253,            type = new PeriodType(,0.01176,0,-1,0
org/joda/time/PeriodType,27,262,            cYDTime = type;,0.01176,0,-1,0
org/joda/time/PeriodType,27,264,        return type;,0.01176,0,-1,0
org/joda/time/convert/ConverterSet,27,216,        Converter[] converters = iConverters;,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,217,        int length = converters.length;,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,218,        if (index >= length) {,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,222,        if (removed != null) {,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,226,        Converter[] copy = new Converter[length - 1];,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,228,        int j = 0;,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,229,        for (int i=0; i<length; i++) {,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,230,            if (i != index) {,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,231,                copy[j++] = converters[i];,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,235,        return new ConverterSet(copy);,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,256,            if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,258,"                set = set.remove(i, null);",0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,259,                converters = set.iConverters;,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,260,                length = converters.length;,0.01064,0,-1,0
org/joda/time/convert/ConverterSet,27,262,        },0.01064,0,-1,0
org/joda/time/convert/StringConverter,27,241,        return String.class;,0.01042,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,42,        super();,0.0102,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,43,    },0.0102,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,36,    static final ReadableIntervalConverter INSTANCE = new ReadableIntervalConverter();,0.0102,0,-1,0
org/joda/time/convert/ConverterManager,27,105,        super();,0.0102,0,-1,0
org/joda/time/convert/ConverterManager,27,107,        iInstantConverters = new ConverterSet(new Converter[] {,0.0102,0,-1,0
org/joda/time/convert/ConverterManager,27,116,        iPartialConverters = new ConverterSet(new Converter[] {,0.0102,0,-1,0
org/joda/time/convert/ConverterManager,27,126,        iDurationConverters = new ConverterSet(new Converter[] {,0.0102,0,-1,0
org/joda/time/convert/ConverterManager,27,134,        iPeriodConverters = new ConverterSet(new Converter[] {,0.0102,0,-1,0
org/joda/time/convert/ConverterManager,27,142,        iIntervalConverters = new ConverterSet(new Converter[] {,0.0102,0,-1,0
org/joda/time/convert/ConverterManager,27,147,    },0.0102,0,-1,0
org/joda/time/convert/ConverterManager,27,89,        if (INSTANCE == null) {,0.0102,0,-1,0
org/joda/time/convert/ConverterManager,27,90,            INSTANCE = new ConverterManager();,0.0102,0,-1,0
org/joda/time/convert/ConverterManager,27,92,        return INSTANCE;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,32,    ConverterSet(Converter[] converters) {,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,35,        iConverters = converters;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,36,        iSelectEntries = new Entry[1 << 4]; // 16,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,37,    },0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,49,        Entry[] entries = iSelectEntries;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,50,        int length = entries.length;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,51,        int index = type == null ? 0 : type.hashCode() & (length - 1);,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,55,        while ((e = entries[index]) != null) {,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,66,"        Converter converter = selectSlow(this, type);",0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,67,"        e = new Entry(type, converter);",0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,79,        entries = (Entry[])entries.clone();,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,82,        entries[index] = e;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,85,        for (int i=0; i<length; i++) {,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,86,            if (entries[i] == null) {,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,88,                iSelectEntries = entries;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,89,                return converter;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,243,        Converter[] converters = set.iConverters;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,244,        int length = converters.length;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,247,        for (int i=length; --i>=0; ) {,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,248,            converter = converters[i];,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,249,            Class<?> supportedType = converter.getSupportedType();,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,251,            if (supportedType == type) {,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,322,"        Entry(Class<?> type, Converter converter) {",0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,323,            iType = type;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,324,            iConverter = converter;,0.0102,0,-1,0
org/joda/time/convert/ConverterSet,27,325,        },0.0102,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,42,        super();,0.0102,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,43,    },0.0102,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,36,    static final ReadableDurationConverter INSTANCE = new ReadableDurationConverter();,0.0102,0,-1,0
org/joda/time/convert/NullConverter,27,45,        super();,0.0102,0,-1,0
org/joda/time/convert/NullConverter,27,46,    },0.0102,0,-1,0
org/joda/time/convert/NullConverter,27,39,    static final NullConverter INSTANCE = new NullConverter();,0.0102,0,-1,0
org/joda/time/convert/NullConverter,27,95,        return null;,0.0102,0,-1,0
org/joda/time/convert/CalendarConverter,27,49,        super();,0.0102,0,-1,0
org/joda/time/convert/CalendarConverter,27,50,    },0.0102,0,-1,0
org/joda/time/convert/CalendarConverter,27,43,    static final CalendarConverter INSTANCE = new CalendarConverter();,0.0102,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,41,        super();,0.0102,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,42,    },0.0102,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,35,    static final ReadablePartialConverter INSTANCE = new ReadablePartialConverter();,0.0102,0,-1,0
org/joda/time/convert/DateConverter,27,41,        super();,0.0102,0,-1,0
org/joda/time/convert/DateConverter,27,42,    },0.0102,0,-1,0
org/joda/time/convert/DateConverter,27,35,    static final DateConverter INSTANCE = new DateConverter();,0.0102,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,42,        super();,0.0102,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,43,    },0.0102,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,36,    static final ReadableInstantConverter INSTANCE = new ReadableInstantConverter();,0.0102,0,-1,0
org/joda/time/convert/LongConverter,27,40,        super();,0.0102,0,-1,0
org/joda/time/convert/LongConverter,27,41,    },0.0102,0,-1,0
org/joda/time/convert/LongConverter,27,34,    static final LongConverter INSTANCE = new LongConverter();,0.0102,0,-1,0
org/joda/time/convert/ReadablePeriodConverter,27,42,        super();,0.0102,0,-1,0
org/joda/time/convert/ReadablePeriodConverter,27,43,    },0.0102,0,-1,0
org/joda/time/convert/ReadablePeriodConverter,27,36,    static final ReadablePeriodConverter INSTANCE = new ReadablePeriodConverter();,0.0102,0,-1,0
org/joda/time/base/BasePeriod,27,384,            if (newValue != 0) {,0.00926,0,-1,0
org/joda/time/Period,27,326,    },0.00877,0,-1,0
org/joda/time/PeriodType,27,653,        return -1;,0.0087,0,-1,0
org/joda/time/Period,27,325,"        super(years, months, weeks, days, hours, minutes, seconds, millis, type);",0.0087,0,-1,0
org/joda/time/convert/AbstractConverter,27,38,        super();,0.00787,0,-1,0
org/joda/time/convert/AbstractConverter,27,39,    },0.00787,0,-1,0
org/joda/time/convert/StringConverter,27,50,        super();,0.00787,0,-1,0
org/joda/time/convert/StringConverter,27,51,    },0.00787,0,-1,0
org/joda/time/convert/StringConverter,27,44,    static final StringConverter INSTANCE = new StringConverter();,0.00787,0,-1,0
org/joda/time/Period,27,302,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",0.00694,0,-1,0
org/joda/time/Period,27,303,    },0.00694,0,-1,0
org/joda/time/base/BasePeriod,27,84,    },0.00541,0,-1,0
org/joda/time/base/BasePeriod,27,446,"        checkAndUpdate(DurationFieldType.months(), newValues, months);",0.00541,0,-1,0
org/joda/time/base/BasePeriod,27,447,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",0.00541,0,-1,0
org/joda/time/base/BasePeriod,27,448,"        checkAndUpdate(DurationFieldType.days(), newValues, days);",0.00541,0,-1,0
org/joda/time/base/BasePeriod,27,449,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);",0.00541,0,-1,0
org/joda/time/base/BasePeriod,27,450,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",0.00541,0,-1,0
org/joda/time/base/BasePeriod,27,451,"        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",0.00541,0,-1,0
org/joda/time/base/BasePeriod,27,452,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);",0.00541,0,-1,0
org/joda/time/base/BasePeriod,27,453,        iValues = newValues;,0.00541,0,-1,0
org/joda/time/base/BasePeriod,27,454,    },0.00541,0,-1,0
org/joda/time/base/BasePeriod,27,80,        super();,0.00535,0,-1,0
org/joda/time/base/BasePeriod,27,81,        type = checkPeriodType(type);,0.00535,0,-1,0
org/joda/time/base/BasePeriod,27,82,        iType = type;,0.00535,0,-1,0
org/joda/time/base/BasePeriod,27,83,"        setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",0.00535,0,-1,0
org/joda/time/base/BasePeriod,27,444,        int[] newValues = new int[size()];,0.00535,0,-1,0
org/joda/time/base/BasePeriod,27,445,"        checkAndUpdate(DurationFieldType.years(), newValues, years);",0.00535,0,-1,0
org/joda/time/base/BasePeriod,27,310,        return iType.getFieldType(index);,0.00469,0,-1,0
org/joda/time/PeriodType,27,628,        return iTypes[index];,0.00469,0,-1,0
org/joda/time/base/BasePeriod,27,389,            values[index] = newValue;,0.00467,0,-1,0
org/joda/time/base/BasePeriod,27,391,    },0.00467,0,-1,0
org/joda/time/base/BasePeriod,27,382,        int index = indexOf(type);,0.00463,0,-1,0
org/joda/time/base/BasePeriod,27,383,        if (index == -1) {,0.00463,0,-1,0
org/joda/time/PeriodType,27,650,                return i;,0.00422,0,-1,0
org/joda/time/base/AbstractPeriod,27,114,        return getPeriodType().indexOf(type);,0.00418,0,-1,0
org/joda/time/PeriodType,27,648,"        for (int i = 0, isize = size(); i < isize; i++) {",0.00418,0,-1,0
org/joda/time/PeriodType,27,649,            if (iTypes[i] == type) {,0.00418,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,65,        if (cStandard == null) {,0.00397,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,66,            cStandard = new PeriodFormatterBuilder(),0.00397,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,85,        return cStandard;,0.00397,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,500,        appendField(SECONDS_OPTIONAL_MILLIS);,0.00389,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,501,        return this;,0.00389,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,555,        return appendSuffix(new SimpleAffix(text));,0.00389,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,652,"        return appendSeparator(text, text, null, false, true);",0.00389,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,552,        if (text == null) {,0.00388,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1600,                iParsedForms = new String[] {text};,0.00386,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,857,        SimpleAffix(String text) {,0.00383,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,858,            iText = text;,0.00383,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,859,        },0.00383,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,228,        if (text == null) {,0.00372,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,231,        clearPrefix();,0.00372,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,232,        Literal literal = new Literal(text);,0.00372,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,233,"        append0(literal, literal);",0.00372,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,234,        return this;,0.00372,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1542,        Literal(String text) {,0.0037,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1543,            iText = text;,0.0037,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1544,        },0.0037,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1539,"        static final Literal EMPTY = new Literal("""");",0.0037,0,-1,0
org/joda/time/DateTimeUtils,27,289,        return type;,0.00369,0,-1,0
org/joda/time/chrono/ISOChronology,27,102,            return chrono;,0.00361,0,-1,0
org/joda/time/chrono/AssembledChronology,27,107,        if ((base = iBase) != null) {,0.00347,0,-1,0
org/joda/time/chrono/AssembledChronology,27,108,            return base.getZone();,0.00347,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,592,            originalPrinter = iElementPairs.get(iElementPairs.size() - 2);,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,593,            originalParser = iElementPairs.get(iElementPairs.size() - 1);,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,605,        clearPrefix();,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,606,"        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);",0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,607,"        iElementPairs.set(iElementPairs.size() - 2, newField);",0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,608,"        iElementPairs.set(iElementPairs.size() - 1, newField);",0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,609,        iFieldFormatters[newField.getFieldType()] = newField;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,611,        return this;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1062,"        FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {",0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1063,            iMinPrintedDigits = field.iMinPrintedDigits;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1064,            iPrintZeroSetting = field.iPrintZeroSetting;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1065,            iMaxParsedDigits = field.iMaxParsedDigits;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1066,            iRejectSignedValues = field.iRejectSignedValues;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1067,            iFieldType = field.iFieldType;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1068,            iFieldFormatters = field.iFieldFormatters;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1069,            iPrefix = field.iPrefix;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1070,            if (field.iSuffix != null) {,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1073,            iSuffix = suffix;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1074,        },0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1529,            return iFieldType;,0.00339,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,463,        appendField(MINUTES);,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,464,        return this;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,591,        if (iElementPairs.size() > 0) {,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,599,        if (originalPrinter == null || originalParser == null ||,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,730,        if (text == null || finalText == null) {,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,734,        clearPrefix();,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,737,        List<Object> pairs = iElementPairs;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,738,        if (pairs.size() == 0) {,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,750,        Separator lastSeparator = null;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,751,        for (i=pairs.size(); --i>=0; ) {,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,752,            if (pairs.get(i) instanceof Separator) {,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,757,            i--;  // element pairs,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,761,        if (lastSeparator != null && pairs.size() == 0) {,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,764,            Object[] comp = createComposite(pairs);,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,765,            pairs.clear();,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,766,            Separator separator = new Separator(,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,770,            pairs.add(separator);,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,771,            pairs.add(separator);,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,774,        return this;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,800,            Separator sep = (Separator) elementPairs.get(0);,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,801,"                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);",0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,802,"                sep = sep.finish(f.getPrinter(), f.getParser());",0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,803,"                return new PeriodFormatter(sep, sep);",0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1593,"                boolean useBefore, boolean useAfter) {",0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1594,            iText = text;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1595,            iFinalText = finalText;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1597,            if ((finalText == null || text.equals(finalText)) &&,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1616,            iBeforePrinter = beforePrinter;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1617,            iBeforeParser = beforeParser;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1618,            iUseBefore = useBefore;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1619,            iUseAfter = useAfter;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1620,        },0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1748,            iAfterPrinter = afterPrinter;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1749,            iAfterParser = afterParser;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1750,            return this;,0.00337,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,437,        appendField(DAYS);,0.00332,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,438,        return this;,0.00332,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,411,        appendField(MONTHS);,0.0033,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,412,        return this;,0.0033,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,424,        appendField(WEEKS);,0.0033,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,425,        return this;,0.0033,0,-1,0
org/joda/time/format/PeriodFormatter,27,146,        return iParser;,0.00329,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,450,        appendField(HOURS);,0.00329,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,451,        return this;,0.00329,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,779,        if (iPrefix != null) {,0.00316,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,782,        iPrefix = null;,0.00316,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,783,    },0.00316,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,398,        appendField(YEARS);,0.00315,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,399,        return this;,0.00315,0,-1,0
org/joda/time/Period,27,271,"        super(0L, null, null);",0.00302,0,-1,0
org/joda/time/Period,27,272,    },0.00302,0,-1,0
org/joda/time/Period,27,63,    public static final Period ZERO = new Period();,0.00302,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,530,"        appendField(type, iMinPrintedDigits);",0.00296,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,531,    },0.00296,0,-1,0
org/joda/time/format/PeriodFormatter,27,128,        return iPrinter;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,534,"        FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,",0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,536,"        append0(field, field);",0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,537,        iFieldFormatters[type] = field;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,538,        iPrefix = null;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,539,    },0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1051,"                       PeriodFieldAffix prefix, PeriodFieldAffix suffix) {",0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1052,            iMinPrintedDigits = minPrintedDigits;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1053,            iPrintZeroSetting = printZeroSetting;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1054,            iMaxParsedDigits = maxParsedDigits;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1055,            iRejectSignedValues = rejectSignedValues;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1056,            iFieldType = fieldType;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1057,            iFieldFormatters = fieldFormatters;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1058,            iPrefix = prefix;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1059,            iSuffix = suffix;,0.00295,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1060,        },0.00295,0,-1,0
org/joda/time/format/PeriodFormatter,27,87,        super();,0.00294,0,-1,0
org/joda/time/format/PeriodFormatter,27,88,        iPrinter = printer;,0.00294,0,-1,0
org/joda/time/format/PeriodFormatter,27,89,        iParser = parser;,0.00294,0,-1,0
org/joda/time/format/PeriodFormatter,27,90,        iLocale = null;,0.00294,0,-1,0
org/joda/time/format/PeriodFormatter,27,91,        iParseType = null;,0.00294,0,-1,0
org/joda/time/format/PeriodFormatter,27,92,    },0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,123,"        PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);",0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,124,        iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,125,        return formatter;,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,786,        iElementPairs.add(printer);,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,787,        iElementPairs.add(parser);,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,788,        iNotPrinter |= (printer == null);,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,789,        iNotParser |= (parser == null);,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,790,        return this;,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,795,        if (notPrinter && notParser) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,798,        int size = elementPairs.size();,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,799,        if (size >= 2 && elementPairs.get(0) instanceof Separator) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,805,        Object[] comp = createComposite(elementPairs);,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,806,        if (notPrinter) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,808,        } else if (notParser) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,811,"            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);",0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,816,        switch (elementPairs.size()) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,822,                Composite comp = new Composite(elementPairs);,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,823,"                return new Object[] {comp, comp};",0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1764,        Composite(List<Object> elementPairs) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1765,            List<Object> printerList = new ArrayList<Object>();,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1766,            List<Object> parserList = new ArrayList<Object>();,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1768,"            decompose(elementPairs, printerList, parserList);",0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1770,            if (printerList.size() <= 0) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1773,                iPrinters = printerList.toArray(,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1777,            if (parserList.size() <= 0) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1780,                iParsers = parserList.toArray(,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1783,        },0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1835,            int size = elementPairs.size();,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1836,            for (int i=0; i<size; i+=2) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1837,                Object element = elementPairs.get(i);,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1838,                if (element instanceof PeriodPrinter) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1839,                    if (element instanceof Composite) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1842,                        printerList.add(element);,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1846,                element = elementPairs.get(i + 1);,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1847,                if (element instanceof PeriodParser) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1848,                    if (element instanceof Composite) {,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1851,                        parserList.add(element);,0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1855,        },0.00294,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,101,    public PeriodFormatterBuilder() {,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,102,        clear();,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,103,    },0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,171,        iMinPrintedDigits = 1;,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,172,        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,173,        iMaxParsedDigits = 10;,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,174,        iRejectSignedValues = false;,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,175,        iPrefix = null;,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,176,        if (iElementPairs == null) {,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,177,            iElementPairs = new ArrayList<Object>();,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,181,        iNotPrinter = false;,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,182,        iNotParser = false;,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,183,        iFieldFormatters = new FieldFormatter[10];,0.00288,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,184,    },0.00288,0,-1,0
org/joda/time/base/BasePeriod,27,321,        return iValues[index];,0.00282,0,-1,0
org/joda/time/base/BasePeriod,27,289,        return iType;,0.00275,0,-1,0
org/joda/time/base/BasePeriod,27,225,        super();,0.00273,0,-1,0
org/joda/time/base/BasePeriod,27,226,        type = checkPeriodType(type);,0.00273,0,-1,0
org/joda/time/base/BasePeriod,27,227,        chrono = DateTimeUtils.getChronology(chrono);,0.00273,0,-1,0
org/joda/time/base/BasePeriod,27,228,        iType = type;,0.00273,0,-1,0
org/joda/time/base/BasePeriod,27,229,"        iValues = chrono.get(this, duration);",0.00273,0,-1,0
org/joda/time/base/BasePeriod,27,230,    },0.00273,0,-1,0
org/joda/time/chrono/BaseChronology,27,276,        int size = period.size();,0.00272,0,-1,0
org/joda/time/chrono/BaseChronology,27,277,        int[] values = new int[size];,0.00272,0,-1,0
org/joda/time/chrono/BaseChronology,27,278,        if (duration != 0) {,0.00272,0,-1,0
org/joda/time/chrono/BaseChronology,27,289,        return values;,0.00272,0,-1,0
org/joda/time/DateTimeUtils,27,287,            return PeriodType.standard();,0.0027,0,-1,0
org/joda/time/PeriodType,27,102,        PeriodType type = cStandard;,0.0026,0,-1,0
org/joda/time/PeriodType,27,103,        if (type == null) {,0.0026,0,-1,0
org/joda/time/PeriodType,27,104,            type = new PeriodType(,0.0026,0,-1,0
org/joda/time/PeriodType,27,114,            cStandard = type;,0.0026,0,-1,0
org/joda/time/PeriodType,27,116,        return type;,0.0026,0,-1,0
org/joda/time/DateTimeUtils,27,286,        if (type == null) {,0.00249,0,-1,0
org/joda/time/base/BasePeriod,27,279,        return DateTimeUtils.getPeriodType(type);,0.00249,0,-1,0
org/joda/time/base/BasePeriod,27,299,        return iType.size();,0.00249,0,-1,0
org/joda/time/base/AbstractPeriod,27,44,        super();,0.00249,0,-1,0
org/joda/time/base/AbstractPeriod,27,45,    },0.00249,0,-1,0
org/joda/time/PeriodType,27,617,        return iTypes.length;,0.00249,0,-1,0
org/joda/time/DateTimeUtils,27,253,            return ISOChronology.getInstance();,0.00244,0,-1,0
org/joda/time/DateTimeUtils,27,68,        checkPermission();,0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,70,    },0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,82,        checkPermission();,0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,84,    },0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,129,        SecurityManager sm = System.getSecurityManager();,0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,130,        if (sm != null) {,0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,133,    },0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,414,        FixedMillisProvider(long fixedMillis) {,0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,415,            iMillis = fixedMillis;,0.00213,0,-1,0
org/joda/time/DateTimeUtils,27,416,        },0.00213,0,-1,0
org/joda/time/chrono/ISOChronology,27,86,        return getInstance(DateTimeZone.getDefault());,0.00199,0,-1,0
org/joda/time/DateTimeUtils,27,252,        if (chrono == null) {,0.00195,0,-1,0
org/joda/time/DateTimeZone,27,172,        SecurityManager sm = System.getSecurityManager();,0.00195,0,-1,0
org/joda/time/DateTimeZone,27,173,        if (sm != null) {,0.00195,0,-1,0
org/joda/time/DateTimeZone,27,176,        if (zone == null) {,0.00195,0,-1,0
org/joda/time/DateTimeZone,27,179,        synchronized(DateTimeZone.class) {,0.00195,0,-1,0
org/joda/time/DateTimeZone,27,180,            cDefault = zone;,0.00195,0,-1,0
org/joda/time/DateTimeZone,27,181,        },0.00195,0,-1,0
org/joda/time/DateTimeZone,27,182,    },0.00195,0,-1,0
org/joda/time/chrono/ISOChronology,27,96,        if (zone == null) {,0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,100,        ISOChronology chrono = cFastCache[index];,0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,101,        if (chrono != null && chrono.getZone() == zone) {,0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,104,        synchronized (cCache) {,0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,105,            chrono = cCache.get(zone);,0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,106,            if (chrono == null) {,0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,108,"                cCache.put(zone, chrono);",0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,110,        },0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,111,        cFastCache[index] = chrono;,0.00192,0,-1,0
org/joda/time/chrono/ISOChronology,27,112,        return chrono;,0.00192,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00192,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,131,        return null;,0.00192,0,-1,0
org/joda/time/field/BaseDurationField,27,55,        return iType;,0.00191,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,90,        return iField.getRangeDurationField();,0.00191,0,-1,0
org/joda/time/field/BaseDateTimeField,27,726,        return null;,0.00191,0,-1,0
org/joda/time/field/MillisDurationField,27,49,        return DurationFieldType.millis();,0.00191,0,-1,0
org/joda/time/field/ScaledDurationField,27,109,        return getWrappedField().getUnitMillis() * iScalar;,0.00191,0,-1,0
org/joda/time/field/ScaledDurationField,27,147,        long scalar = iScalar;,0.00191,0,-1,0
org/joda/time/field/ScaledDurationField,27,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.00191,0,-1,0
org/joda/time/field/ScaledDurationField,27,149,        hash += getType().hashCode();,0.00191,0,-1,0
org/joda/time/field/ScaledDurationField,27,150,        hash += getWrappedField().hashCode();,0.00191,0,-1,0
org/joda/time/field/ScaledDurationField,27,151,        return hash;,0.00191,0,-1,0
org/joda/time/field/DecoratedDurationField,27,69,        return iField;,0.00191,0,-1,0
org/joda/time/field/PreciseDurationField,27,142,        long millis = iUnitMillis;,0.00191,0,-1,0
org/joda/time/field/PreciseDurationField,27,143,        int hash = (int) (millis ^ (millis >>> 32));,0.00191,0,-1,0
org/joda/time/field/PreciseDurationField,27,144,        hash += getType().hashCode();,0.00191,0,-1,0
org/joda/time/field/PreciseDurationField,27,145,        return hash;,0.00191,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,141,        return iUnitField;,0.00191,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,139,        return iRangeField;,0.00191,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,122,        return iRangeField;,0.00191,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,218,        return 0;,0.00191,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,160,            return iUnitMillis;,0.00191,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,101,        return getWrappedField().getLeapDurationField();,0.00191,0,-1,0
org/joda/time/chrono/AssembledChronology,27,315,        return iParam;,0.00191,0,-1,0
org/joda/time/DateTimeZone,27,1165,        return 57 + getID().hashCode();,0.00191,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,131,        return iZone.hashCode();,0.00191,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,58,        return iChronology.weekyears();,0.00191,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,95,        return null;,0.00191,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,111,        return iChronology.days();,0.00191,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,94,        return iChronology.weeks();,0.00191,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,51,        return iChronology.months();,0.00191,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,56,        return iChronology.years();,0.00191,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,309,        return iChronology.years();,0.00191,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,328,        return iChronology.days();,0.00191,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,208,        return null;,0.00191,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,220,        return iChronology.weeks();,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,82,"        super(base, zone);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,83,    },0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,56,        if (base == null) {,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,59,        base = base.withUTC();,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,60,        if (base == null) {,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,63,        if (zone == null) {,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,66,"        return new ZonedChronology(base, zone);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,86,        return (DateTimeZone)getParam();,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,157,"        fields.eras = convertField(fields.eras, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,158,"        fields.centuries = convertField(fields.centuries, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,159,"        fields.years = convertField(fields.years, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,160,"        fields.months = convertField(fields.months, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,161,"        fields.weekyears = convertField(fields.weekyears, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,162,"        fields.weeks = convertField(fields.weeks, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,163,"        fields.days = convertField(fields.days, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,165,"        fields.halfdays = convertField(fields.halfdays, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,166,"        fields.hours = convertField(fields.hours, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,167,"        fields.minutes = convertField(fields.minutes, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,168,"        fields.seconds = convertField(fields.seconds, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,169,"        fields.millis = convertField(fields.millis, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,173,"        fields.year = convertField(fields.year, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,177,"        fields.era = convertField(fields.era, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,183,"        fields.weekyear = convertField(fields.weekyear, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,197,    },0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,200,        if (field == null || !field.isSupported()) {,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,201,            return field;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,203,        if (converted.containsKey(field)) {,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,204,            return (DurationField)converted.get(field);,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,207,"        converted.put(field, zonedField);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,208,        return zonedField;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,212,        if (field == null || !field.isSupported()) {,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,215,        if (converted.containsKey(field)) {,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,218,        ZonedDateTimeField zonedField =,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,223,"        converted.put(field, zonedField);",0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,224,        return zonedField;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,284,            super(field.getType());,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,285,            if (!field.isSupported()) {,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,288,            iField = field;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,289,            iTimeField = useTimeArithmetic(field);,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,290,            iZone = zone;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,291,        },0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,298,            return iField.getUnitMillis();,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,389,            super(field.getType());,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,390,            if (!field.isSupported()) {,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,393,            iField = field;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,394,            iZone = zone;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,395,            iDurationField = durationField;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,396,            iTimeField = useTimeArithmetic(durationField);,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,397,            iRangeDurationField = rangeDurationField;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,398,            iLeapDurationField = leapDurationField;,0.00191,0,-1,0
org/joda/time/chrono/ZonedChronology,27,399,        },0.00191,0,-1,0
org/joda/time/chrono/ISOChronology,27,133,        return INSTANCE_UTC;,0.00188,0,-1,0
org/joda/time/field/BaseDurationField,27,47,        super();,0.00186,0,-1,0
org/joda/time/field/BaseDurationField,27,48,        if (type == null) {,0.00186,0,-1,0
org/joda/time/field/BaseDurationField,27,51,        iType = type;,0.00186,0,-1,0
org/joda/time/field/BaseDurationField,27,52,    },0.00186,0,-1,0
org/joda/time/field/BaseDurationField,27,66,        return true;,0.00186,0,-1,0
org/joda/time/DurationField,27,30,public abstract class DurationField implements Comparable<DurationField> {,0.00186,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,54,        super(type);,0.00186,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,55,        if (field == null) {,0.00186,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,58,        if (!field.isSupported()) {,0.00186,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,61,        iField = field;,0.00186,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,62,    },0.00186,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,70,        return iField;,0.00186,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,86,        return iField.getDurationField();,0.00186,0,-1,0
org/joda/time/field/BaseDateTimeField,27,50,        super();,0.00186,0,-1,0
org/joda/time/field/BaseDateTimeField,27,51,        if (type == null) {,0.00186,0,-1,0
org/joda/time/field/BaseDateTimeField,27,54,        iType = type;,0.00186,0,-1,0
org/joda/time/field/BaseDateTimeField,27,55,    },0.00186,0,-1,0
org/joda/time/field/BaseDateTimeField,27,58,        return iType;,0.00186,0,-1,0
org/joda/time/field/BaseDateTimeField,27,69,        return true;,0.00186,0,-1,0
org/joda/time/DateTimeField,27,33,public abstract class DateTimeField {,0.00186,0,-1,0
org/joda/time/field/MillisDurationField,27,44,        super();,0.00186,0,-1,0
org/joda/time/field/MillisDurationField,27,45,    },0.00186,0,-1,0
org/joda/time/field/MillisDurationField,27,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.00186,0,-1,0
org/joda/time/field/MillisDurationField,27,62,        return true;,0.00186,0,-1,0
org/joda/time/field/MillisDurationField,27,71,        return true;,0.00186,0,-1,0
org/joda/time/field/MillisDurationField,27,80,        return 1;,0.00186,0,-1,0
org/joda/time/DurationFieldType,27,141,        return HALFDAYS_TYPE;,0.00186,0,-1,0
org/joda/time/DurationFieldType,27,169,        return WEEKYEARS_TYPE;,0.00186,0,-1,0
org/joda/time/DurationFieldType,27,196,        return CENTURIES_TYPE;,0.00186,0,-1,0
org/joda/time/DurationFieldType,27,205,        return ERAS_TYPE;,0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,47,    },0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,59,    },0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,73,"        super(field, type);",0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,75,        if (offset == 0) {,0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,79,        iOffset = offset;,0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,81,        if (minValue < (field.getMinimumValue() + offset)) {,0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,82,            iMin = field.getMinimumValue() + offset;,0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,86,        if (maxValue > (field.getMaximumValue() + offset)) {,0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,87,            iMax = field.getMaximumValue() + offset;,0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,91,    },0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,174,        return iMin;,0.00186,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,183,        return iMax;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,152,        super();,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,153,        iName = name;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,154,    },0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,72,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,75,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,78,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,81,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,84,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,87,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,90,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,93,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,96,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,99,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,102,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,105,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,109,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,112,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,115,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,118,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,121,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,124,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,127,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,130,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,133,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,136,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,139,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,163,        return MILLIS_OF_SECOND_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,172,        return MILLIS_OF_DAY_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,181,        return SECOND_OF_MINUTE_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,190,        return SECOND_OF_DAY_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,199,        return MINUTE_OF_HOUR_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,208,        return MINUTE_OF_DAY_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,217,        return HOUR_OF_DAY_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,226,        return CLOCKHOUR_OF_DAY_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,235,        return HOUR_OF_HALFDAY_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,244,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,253,        return HALFDAY_OF_DAY_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,263,        return DAY_OF_WEEK_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,272,        return DAY_OF_MONTH_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,281,        return DAY_OF_YEAR_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,290,        return WEEK_OF_WEEKYEAR_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,299,        return WEEKYEAR_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,308,        return WEEKYEAR_OF_CENTURY_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,317,        return MONTH_OF_YEAR_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,326,        return YEAR_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,335,        return YEAR_OF_ERA_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,344,        return YEAR_OF_CENTURY_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,353,        return CENTURY_OF_ERA_TYPE;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,362,        return ERA_TYPE;,0.00186,0,-1,0
org/joda/time/field/ScaledDurationField,27,47,"        super(field, type);",0.00186,0,-1,0
org/joda/time/field/ScaledDurationField,27,48,        if (scalar == 0 || scalar == 1) {,0.00186,0,-1,0
org/joda/time/field/ScaledDurationField,27,51,        iScalar = scalar;,0.00186,0,-1,0
org/joda/time/field/ScaledDurationField,27,52,    },0.00186,0,-1,0
org/joda/time/field/DecoratedDurationField,27,52,        super(type);,0.00186,0,-1,0
org/joda/time/field/DecoratedDurationField,27,53,        if (field == null) {,0.00186,0,-1,0
org/joda/time/field/DecoratedDurationField,27,56,        if (!field.isSupported()) {,0.00186,0,-1,0
org/joda/time/field/DecoratedDurationField,27,59,        iField = field;,0.00186,0,-1,0
org/joda/time/field/DecoratedDurationField,27,60,    },0.00186,0,-1,0
org/joda/time/field/PreciseDurationField,27,43,        super(type);,0.00186,0,-1,0
org/joda/time/field/PreciseDurationField,27,44,        iUnitMillis = unitMillis;,0.00186,0,-1,0
org/joda/time/field/PreciseDurationField,27,45,    },0.00186,0,-1,0
org/joda/time/field/PreciseDurationField,27,54,        return true;,0.00186,0,-1,0
org/joda/time/field/PreciseDurationField,27,63,        return iUnitMillis;,0.00186,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,48,        super(type);,0.00186,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,50,        if (!unit.isPrecise()) {,0.00186,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,54,        iUnitMillis = unit.getUnitMillis();,0.00186,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,55,        if (iUnitMillis < 1) {,0.00186,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,59,        iUnitField = unit;,0.00186,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,60,    },0.00186,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,150,        return 0;,0.00186,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,154,        return iUnitMillis;,0.00186,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,55,        super(type);,0.00186,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,56,        iUnitMillis = unitMillis;,0.00186,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,57,        iDurationField = new LinkedDurationField(type.getDurationType());,0.00186,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,58,    },0.00186,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,137,        return iDurationField;,0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,52,"        super(field, type);",0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,54,        if (divisor < 2) {,0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,58,        DurationField rangeField = field.getDurationField();,0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,59,        if (rangeField == null) {,0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,62,            iRangeField = new ScaledDurationField(,0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,66,        iDivisor = divisor;,0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,67,    },0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,76,"        this(dividedField, dividedField.getType());",0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,77,    },0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,87,"        super(dividedField.getWrappedField(), type);",0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,88,        iDivisor = dividedField.iDivisor;,0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,89,        iRangeField = dividedField.iDurationField;,0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,90,    },0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,148,        return 0;,0.00186,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,158,        return iDivisor - 1;,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,56,"        super(field, type);",0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,58,        if (divisor < 2) {,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,62,        DurationField unitField = field.getDurationField();,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,63,        if (unitField == null) {,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,66,            iDurationField = new ScaledDurationField(,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,70,        iDivisor = divisor;,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,72,        int i = field.getMinimumValue();,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,75,        int j = field.getMaximumValue();,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,78,        iMin = min;,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,79,        iMax = max;,0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,80,    },0.00186,0,-1,0
org/joda/time/field/DividedDateTimeField,27,182,        return iDurationField;,0.00186,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,57,"        super(type, unit);",0.00186,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,59,        if (!range.isPrecise()) {,0.00186,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,63,        long rangeMillis = range.getUnitMillis();,0.00186,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,64,        iRange = (int)(rangeMillis / getUnitMillis());,0.00186,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,65,        if (iRange < 2) {,0.00186,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,69,        iRangeField = range;,0.00186,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,70,    },0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,70,    private UnsupportedDurationField(DurationFieldType type) {,0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,71,        iType = type;,0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,72,    },0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,49,        if (cCache == null) {,0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,51,            field = null;,0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,53,            field = cCache.get(type);,0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,55,        if (field == null) {,0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,56,            field = new UnsupportedDurationField(type);,0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,57,"            cCache.put(type, field);",0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,59,        return field;,0.00186,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,92,        return false;,0.00186,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,151,        LinkedDurationField(DurationFieldType type) {,0.00186,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,152,            super(type);,0.00186,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,153,        },0.00186,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,45,"        super(field, type);",0.00186,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,46,        if (field.getMinimumValue() != 0) {,0.00186,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,49,    },0.00186,0,-1,0
org/joda/time/Chronology,27,63,public abstract class Chronology {,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,443,            super(name);,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,444,            iOrdinal = ordinal;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,445,            iUnitType = unitType;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,446,            iRangeType = rangeType;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,447,        },0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,451,            return iUnitType;,0.00186,0,-1,0
org/joda/time/DateTimeFieldType,27,456,            return iRangeType;,0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,122,"        super(base, null);",0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,123,    },0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,68,    },0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,171,            fields.centuryOfEra = new DividedDateTimeField(,0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,173,            fields.yearOfCentury = new RemainderDateTimeField(,0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0.00186,0,-1,0
org/joda/time/chrono/ISOChronology,27,180,    },0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,99,"    protected AssembledChronology(Chronology base, Object param) {",0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,100,        iBase = base;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,101,        iParam = param;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,102,        setFields();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,103,    },0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,156,        return iMillis;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,160,        return iMillisOfSecond;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,164,        return iMillisOfDay;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,168,        return iSeconds;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,172,        return iSecondOfMinute;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,176,        return iSecondOfDay;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,180,        return iMinutes;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,184,        return iMinuteOfHour;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,188,        return iMinuteOfDay;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,192,        return iHours;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,196,        return iHourOfDay;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,200,        return iClockhourOfDay;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,204,        return iHalfdays;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,208,        return iHourOfHalfday;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,212,        return iClockhourOfHalfday;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,216,        return iHalfdayOfDay;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,220,        return iDays;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,224,        return iDayOfWeek;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,228,        return iDayOfMonth;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,232,        return iDayOfYear;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,236,        return iWeeks;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,240,        return iWeekOfWeekyear;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,244,        return iWeekyears;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,248,        return iWeekyear;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,252,        return iWeekyearOfCentury;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,256,        return iMonths;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,260,        return iMonthOfYear;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,264,        return iYears;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,268,        return iYear;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,272,        return iYearOfEra;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,276,        return iYearOfCentury;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,280,        return iCenturies;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,284,        return iCenturyOfEra;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,288,        return iEras;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,292,        return iEra;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,308,        return iBase;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,319,        Fields fields = new Fields();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,320,        if (iBase != null) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,321,            fields.copyFieldsFrom(iBase);,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,323,        assemble(fields);,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,369,        if (iBase == null) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,370,            flags = 0;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,372,            flags = ,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,385,        iBaseFlags = flags;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,386,    },0.00186,0,-1,0
org/joda/time/chrono/BaseChronology,27,54,        super();,0.00186,0,-1,0
org/joda/time/chrono/BaseChronology,27,55,    },0.00186,0,-1,0
org/joda/time/chrono/BaseChronology,27,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,148,"        super(base, param, minDaysInFirstWeek);",0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,149,    },0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,72,    },0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,81,        return INSTANCE_UTC;,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,100,"        return getInstance(zone, 4);",0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,111,        if (zone == null) {,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,115,        synchronized (cCache) {,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,116,            GregorianChronology[] chronos = cCache.get(zone);,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,117,            if (chronos == null) {,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,118,                chronos = new GregorianChronology[7];,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,119,"                cCache.put(zone, chronos);",0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,126,            },0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,127,            if (chrono == null) {,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,128,                if (zone == DateTimeZone.UTC) {,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,137,        },0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,138,        return chrono;,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,191,        if (getBase() == null) {,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,192,            super.assemble(fields);,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,194,    },0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,225,        return MAX_YEAR;,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,229,        return MILLIS_PER_YEAR;,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,237,        return MILLIS_PER_MONTH;,0.00186,0,-1,0
org/joda/time/chrono/GregorianChronology,27,45,public final class GregorianChronology extends BasicGJChronology {,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,75,"        super(base, param, minDaysInFirstWeek);",0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,76,    },0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,56,        long minSum = 0;,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,57,        long maxSum = 0;,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,58,        for (int i = 0; i < 11; i++) {,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,61,            minSum += millis;,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,66,            maxSum += millis;,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.00186,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,69,    },0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,131,"        super(base, param);",0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,139,    },0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,76,        cMillisField = MillisDurationField.INSTANCE;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,77,        cSecondsField = new PreciseDurationField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,79,        cMinutesField = new PreciseDurationField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,81,        cHoursField = new PreciseDurationField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,83,        cHalfdaysField = new PreciseDurationField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,85,        cDaysField = new PreciseDurationField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,87,        cWeeksField = new PreciseDurationField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,90,        cMillisOfSecondField = new PreciseDateTimeField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,93,        cMillisOfDayField = new PreciseDateTimeField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,99,        cSecondOfDayField = new PreciseDateTimeField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,102,        cMinuteOfHourField = new PreciseDateTimeField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,105,        cMinuteOfDayField = new PreciseDateTimeField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,108,        cHourOfDayField = new PreciseDateTimeField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,120,        cHalfdayOfDayField = new HalfdayField();,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,121,    },0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,143,        if ((base = getBase()) != null) {,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,146,        return DateTimeZone.UTC;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,241,        fields.millis = cMillisField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,242,        fields.seconds = cSecondsField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,243,        fields.minutes = cMinutesField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,244,        fields.hours = cHoursField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,245,        fields.halfdays = cHalfdaysField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,246,        fields.days = cDaysField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,247,        fields.weeks = cWeeksField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,249,        fields.millisOfSecond = cMillisOfSecondField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,250,        fields.millisOfDay = cMillisOfDayField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,251,        fields.secondOfMinute = cSecondOfMinuteField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,252,        fields.secondOfDay = cSecondOfDayField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,253,        fields.minuteOfHour = cMinuteOfHourField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,254,        fields.minuteOfDay = cMinuteOfDayField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,255,        fields.hourOfDay = cHourOfDayField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,256,        fields.hourOfHalfday = cHourOfHalfdayField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,257,        fields.clockhourOfDay = cClockhourOfDayField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,258,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,259,        fields.halfdayOfDay = cHalfdayOfDayField;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,264,        fields.year = new BasicYearDateTimeField(this);,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,268,        DateTimeField field = new OffsetDateTimeField(,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,270,        fields.centuryOfEra = new DividedDateTimeField(,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,273,        field = new RemainderDateTimeField(,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,275,        fields.yearOfCentury = new OffsetDateTimeField(,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,278,        fields.era = new GJEraDateTimeField(this);,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,282,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,283,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,286,        field = new RemainderDateTimeField(,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,288,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,294,        fields.years = fields.year.getDurationField();,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,295,        fields.centuries = fields.centuryOfEra.getDurationField();,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,296,        fields.months = fields.monthOfYear.getDurationField();,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,297,        fields.weekyears = fields.weekyear.getDurationField();,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,298,    },0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,691,        return 12;,0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,50,abstract class BasicChronology extends AssembledChronology {,0.00186,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.00186,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.00186,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,43,        iChronology = chronology;,0.00186,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,44,    },0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.00186,0,-1,0
org/joda/time/chrono/BasicChronology,27,751,        },0.00186,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.00186,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,46,        iChronology = chronology;,0.00186,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,47,    },0.00186,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,119,        return iChronology.getMaxYear();,0.00186,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,40,"        super(yearField, DateTimeFieldType.yearOfEra());",0.00186,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,41,        iChronology = chronology;,0.00186,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,42,    },0.00186,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,93,        return 1;,0.00186,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,97,        return getWrappedField().getMaximumValue();,0.00186,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,46,        super(DateTimeFieldType.era());,0.00186,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,47,        iChronology = chronology;,0.00186,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,48,    },0.00186,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,45,"        super(DateTimeFieldType.dayOfWeek(), days);",0.00186,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,46,        iChronology = chronology;,0.00186,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,47,    },0.00186,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,41,"        super(DateTimeFieldType.dayOfMonth(), days);",0.00186,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,42,        iChronology = chronology;,0.00186,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,43,    },0.00186,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,41,"        super(DateTimeFieldType.dayOfYear(), days);",0.00186,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,42,        iChronology = chronology;,0.00186,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,43,    },0.00186,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,27,37,"        super(chronology, 2);",0.00186,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,27,38,    },0.00186,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.00186,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,52,        iChronology = chronology;,0.00186,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,53,        iMax = iChronology.getMaxMonth();,0.00186,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,54,        iLeapMonth = leapMonth;,0.00186,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,55,    },0.00186,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.00186,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,45,        iChronology = chronology;,0.00186,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,46,    },0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,436,        Fields() {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,437,        },0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,445,                if (isSupported(f = chrono.millis())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,446,                    millis = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,448,                if (isSupported(f = chrono.seconds())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,449,                    seconds = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,451,                if (isSupported(f = chrono.minutes())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,452,                    minutes = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,454,                if (isSupported(f = chrono.hours())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,455,                    hours = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,457,                if (isSupported(f = chrono.halfdays())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,458,                    halfdays = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,460,                if (isSupported(f = chrono.days())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,461,                    days = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,463,                if (isSupported(f = chrono.weeks())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,464,                    weeks = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,466,                if (isSupported(f = chrono.weekyears())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,467,                    weekyears = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,469,                if (isSupported(f = chrono.months())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,470,                    months = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,472,                if (isSupported(f = chrono.years())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,473,                    years = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,475,                if (isSupported(f = chrono.centuries())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,476,                    centuries = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,478,                if (isSupported(f = chrono.eras())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,486,                    millisOfSecond = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,488,                if (isSupported(f = chrono.millisOfDay())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,489,                    millisOfDay = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,492,                    secondOfMinute = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,494,                if (isSupported(f = chrono.secondOfDay())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,495,                    secondOfDay = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,498,                    minuteOfHour = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,501,                    minuteOfDay = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,503,                if (isSupported(f = chrono.hourOfDay())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,504,                    hourOfDay = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,507,                    clockhourOfDay = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,510,                    hourOfHalfday = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,513,                    clockhourOfHalfday = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,516,                    halfdayOfDay = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,519,                    dayOfWeek = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,522,                    dayOfMonth = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,524,                if (isSupported(f = chrono.dayOfYear())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,525,                    dayOfYear = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,528,                    weekOfWeekyear = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,530,                if (isSupported(f = chrono.weekyear())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,531,                    weekyear = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,534,                    weekyearOfCentury = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,536,                if (isSupported(f = chrono.monthOfYear())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,537,                    monthOfYear = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,539,                if (isSupported(f = chrono.year())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,540,                    year = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,542,                if (isSupported(f = chrono.yearOfEra())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,543,                    yearOfEra = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,546,                    yearOfCentury = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,549,                    centuryOfEra = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,551,                if (isSupported(f = chrono.era())) {,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,552,                    era = f;,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,555,        },0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,558,            return field == null ? false : field.isSupported();,0.00186,0,-1,0
org/joda/time/chrono/AssembledChronology,27,562,            return field == null ? false : field.isSupported();,0.00186,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0.00186,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,47,    },0.00186,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0.00186,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,87,        return 0;,0.00186,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,91,        return getWrappedField().getMaximumValue();,0.00186,0,-1,0
org/joda/time/DurationFieldType,27,105,        return MILLIS_TYPE;,0.00183,0,-1,0
org/joda/time/DurationFieldType,27,178,        return MONTHS_TYPE;,0.00178,0,-1,0
org/joda/time/DurationFieldType,27,187,        return YEARS_TYPE;,0.00178,0,-1,0
org/joda/time/DateTimeZone,27,145,                        },0.00177,0,-1,0
org/joda/time/DateTimeZone,27,131,        DateTimeZone zone = cDefault;,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,132,        if (zone == null) {,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,133,            synchronized(DateTimeZone.class) {,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,134,                zone = cDefault;,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,135,                if (zone == null) {,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,136,                    DateTimeZone temp = null;,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,139,"                            String id = System.getProperty(""user.timezone"");",0.00177,0,-1,0
org/joda/time/DateTimeZone,27,140,                            if (id != null) {  // null check avoids stack overflow,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,141,                                temp = forID(id);,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,146,                        if (temp == null) {,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,151,                    },0.00177,0,-1,0
org/joda/time/DateTimeZone,27,152,                    if (temp == null) {,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,155,                    cDefault = zone = temp;,0.00177,0,-1,0
org/joda/time/DateTimeZone,27,157,            },0.00177,0,-1,0
org/joda/time/DateTimeZone,27,159,        return zone;,0.00177,0,-1,0
org/joda/time/DurationFieldType,27,160,        return WEEKS_TYPE;,0.00175,0,-1,0
org/joda/time/PeriodType,27,595,        super();,0.00175,0,-1,0
org/joda/time/PeriodType,27,596,        iName = name;,0.00175,0,-1,0
org/joda/time/PeriodType,27,597,        iTypes = types;,0.00175,0,-1,0
org/joda/time/PeriodType,27,598,        iIndices = indices;,0.00175,0,-1,0
org/joda/time/PeriodType,27,599,    },0.00175,0,-1,0
org/joda/time/PeriodType,27,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",0.00175,0,-1,0
org/joda/time/PeriodType,27,58,    static int YEAR_INDEX = 0;,0.00175,0,-1,0
org/joda/time/PeriodType,27,59,    static int MONTH_INDEX = 1;,0.00175,0,-1,0
org/joda/time/PeriodType,27,60,    static int WEEK_INDEX = 2;,0.00175,0,-1,0
org/joda/time/PeriodType,27,61,    static int DAY_INDEX = 3;,0.00175,0,-1,0
org/joda/time/PeriodType,27,62,    static int HOUR_INDEX = 4;,0.00175,0,-1,0
org/joda/time/PeriodType,27,63,    static int MINUTE_INDEX = 5;,0.00175,0,-1,0
org/joda/time/PeriodType,27,64,    static int SECOND_INDEX = 6;,0.00175,0,-1,0
org/joda/time/PeriodType,27,65,    static int MILLI_INDEX = 7;,0.00175,0,-1,0
org/joda/time/DurationFieldType,27,114,        return SECONDS_TYPE;,0.00175,0,-1,0
org/joda/time/DurationFieldType,27,123,        return MINUTES_TYPE;,0.00175,0,-1,0
org/joda/time/DurationFieldType,27,132,        return HOURS_TYPE;,0.00175,0,-1,0
org/joda/time/DurationFieldType,27,151,        return DAYS_TYPE;,0.00174,0,-1,0
org/joda/time/DateTimeUtils,27,393,    static class SystemMillisProvider implements MillisProvider {,0.00172,0,-1,0
org/joda/time/DateTimeUtils,27,35,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.00172,0,-1,0
org/joda/time/DateTimeUtils,27,37,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.00172,0,-1,0
org/joda/time/DurationFieldType,27,94,        super();,0.00145,0,-1,0
org/joda/time/DurationFieldType,27,95,        iName = name;,0.00145,0,-1,0
org/joda/time/DurationFieldType,27,96,    },0.00145,0,-1,0
org/joda/time/DurationFieldType,27,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.00145,0,-1,0
org/joda/time/DurationFieldType,27,259,            super(name);,0.00145,0,-1,0
org/joda/time/DurationFieldType,27,260,            iOrdinal = ordinal;,0.00145,0,-1,0
org/joda/time/DurationFieldType,27,261,        },0.00145,0,-1,0
org/joda/time/DateTimeZone,27,685,    protected DateTimeZone(String id) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,686,        if (id == null) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,689,        iID = id;,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,690,    },0.00137,0,-1,0
org/joda/time/DateTimeZone,27,93,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.00137,0,-1,0
org/joda/time/DateTimeZone,27,113,        setProvider0(null);,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,114,        setNameProvider0(null);,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,115,    },0.00137,0,-1,0
org/joda/time/DateTimeZone,27,201,        if (id == null) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,204,"        if (id.equals(""UTC"")) {",0.00137,0,-1,0
org/joda/time/DateTimeZone,27,207,        DateTimeZone zone = cProvider.getZone(id);,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,208,        if (zone != null) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,209,            return zone;,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,412,        if (provider == null) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,413,            provider = getDefaultProvider();,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,415,        Set<String> ids = provider.getAvailableIDs();,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,416,        if (ids == null || ids.size() == 0) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,420,"        if (!ids.contains(""UTC"")) {",0.00137,0,-1,0
org/joda/time/DateTimeZone,27,423,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.00137,0,-1,0
org/joda/time/DateTimeZone,27,426,        cProvider = provider;,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,427,        cAvailableIDs = ids;,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,428,    },0.00137,0,-1,0
org/joda/time/DateTimeZone,27,440,        Provider provider = null;,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,443,            String providerClass =,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,445,            if (providerClass != null) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,455,        },0.00137,0,-1,0
org/joda/time/DateTimeZone,27,457,        if (provider == null) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,459,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.00137,0,-1,0
org/joda/time/DateTimeZone,27,463,            },0.00137,0,-1,0
org/joda/time/DateTimeZone,27,466,        if (provider == null) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,470,        return provider;,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,511,        if (nameProvider == null) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,512,            nameProvider = getDefaultNameProvider();,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,514,        cNameProvider = nameProvider;,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,515,    },0.00137,0,-1,0
org/joda/time/DateTimeZone,27,526,        NameProvider nameProvider = null;,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,528,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.00137,0,-1,0
org/joda/time/DateTimeZone,27,529,            if (providerClass != null) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,539,        },0.00137,0,-1,0
org/joda/time/DateTimeZone,27,541,        if (nameProvider == null) {,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,542,            nameProvider = new DefaultNameProvider();,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,545,        return nameProvider;,0.00137,0,-1,0
org/joda/time/DateTimeZone,27,701,        return iID;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1176,            super(id);,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1177,            iStandardOffset = standardOffset;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1178,            iStartRecurrence = startRecurrence;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1179,            iEndRecurrence = endRecurrence;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1180,        },0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1166,"            return new DSTZone(id, (int)readMillis(in), ",0.00137,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,38,        super(id);,0.00137,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,39,        iNameKey = nameKey;,0.00137,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,40,        iWallOffset = wallOffset;,0.00137,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,41,        iStandardOffset = standardOffset;,0.00137,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,42,    },0.00137,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,88,        if (this == obj) {,0.00137,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,89,            return true;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,504,        {,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,509,            iMode = mode;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,510,            iMonthOfYear = monthOfYear;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,511,            iDayOfMonth = dayOfMonth;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,512,            iDayOfWeek = dayOfWeek;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,513,            iAdvance = advanceDayOfWeek;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,514,            iMillisOfDay = millisOfDay;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,515,        },0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,482,"            return new OfYear((char)in.readUnsignedByte(),",0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,95,        if (in instanceof DataInput) {,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,110,        switch (in.readUnsignedByte()) {,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,183,        int v = in.readUnsignedByte();,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,184,        switch (v >> 6) {,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,187,            v = (v << (32 - 6)) >> (32 - 6);,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,188,            return v * (30 * 60000L);,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,192,            v = (v << (32 - 6)) >> (32 - 30);,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,193,            v |= (in.readUnsignedByte()) << 16;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,194,            v |= (in.readUnsignedByte()) << 8;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,195,            v |= (in.readUnsignedByte());,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,196,            return v * 60000L;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,201,            w |= (in.readUnsignedByte()) << 24;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,202,            w |= (in.readUnsignedByte()) << 16;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,203,            w |= (in.readUnsignedByte()) << 8;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,204,            w |= (in.readUnsignedByte());,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,205,            return w * 1000L;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,209,            return in.readLong();,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1500,            super(id);,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1501,            iTransitions = transitions;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1502,            iWallOffsets = wallOffsets;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1503,            iStandardOffsets = standardOffsets;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1504,            iNameKeys = nameKeys;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1505,            iTailZone = tailZone;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1506,        },0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1341,            int poolSize = in.readUnsignedShort();,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1342,            String[] pool = new String[poolSize];,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1343,            for (int i=0; i<poolSize; i++) {,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1344,                pool[i] = in.readUTF();,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1347,            int size = in.readInt();,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1348,            long[] transitions = new long[size];,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1349,            int[] wallOffsets = new int[size];,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1350,            int[] standardOffsets = new int[size];,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1351,            String[] nameKeys = new String[size];,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1353,            for (int i=0; i<size; i++) {,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1354,                transitions[i] = readMillis(in);,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1355,                wallOffsets[i] = (int)readMillis(in);,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1356,                standardOffsets[i] = (int)readMillis(in);,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1359,                    if (poolSize < 256) {,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1360,                        index = in.readUnsignedByte();,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1364,                    nameKeys[i] = pool[index];,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1367,                },0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1370,            DSTZone tailZone = null;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1371,            if (in.readBoolean()) {,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1372,"                tailZone = DSTZone.readFrom(in, id);",0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1375,            return new PrecalculatedZone,0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,87,        super(zone.getID());,0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,88,        iZone = zone;,0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,89,        iInfoCache = new Info[cInfoCacheMask + 1];,0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,90,    },0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,42,        },0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,45,        if (i == null) {,0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,48,            cacheSize = 512; // (1 << 9),0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,61,        cInfoCacheMask = cacheSize - 1;,0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,62,    },0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,68,        if (zone instanceof CachedDateTimeZone) {,0.00137,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,71,        return new CachedDateTimeZone(zone);,0.00137,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,39,    public DefaultNameProvider() {,0.00137,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.00137,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,40,    },0.00137,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,87,        return new HashMap(7);,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,748,            iOfYear = ofYear;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,749,            iNameKey = nameKey;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,750,            iSaveMillis = saveMillis;,0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,751,        },0.00137,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,82,"        this(resourcePath, null, false);",0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,83,    },0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,106,    {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,107,        if (resourcePath == null) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,110,"        if (!resourcePath.endsWith(""/"")) {",0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,111,            resourcePath += '/';,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,114,        iFileDir = null;,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,115,        iResourcePath = resourcePath;,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,117,        if (loader == null && !favorSystemLoader) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,118,            loader = getClass().getClassLoader();,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,121,        iLoader = loader;,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,124,    },0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,136,        if (id == null) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,140,        Object obj = iZoneInfoMap.get(id);,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,141,        if (obj == null) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,145,        if (id.equals(obj)) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,147,            return loadZoneData(id);,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,150,        if (obj instanceof SoftReference<?>) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,153,            DateTimeZone tz = ref.get();,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,154,            if (tz != null) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,155,                return tz;,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,196,        if (iFileDir != null) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,199,            String path = iResourcePath.concat(name);,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,200,            if (iLoader != null) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,201,                in = iLoader.getResourceAsStream(path);,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,205,            if (in == null) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,214,        return in;,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,224,        InputStream in = null;,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,226,            in = openResource(id);,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,229,            return tz;,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,236,                if (in != null) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,237,                    in.close();,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,240,            },0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,253,        DataInputStream din = new DataInputStream(in);,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,255,"            readZoneInfoMap(din, map);",0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,258,                din.close();,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,260,            },0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,263,        return map;,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,274,        int size = din.readUnsignedShort();,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,275,        String[] pool = new String[size];,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,276,        for (int i=0; i<size; i++) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,277,            pool[i] = din.readUTF().intern();,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,281,        size = din.readUnsignedShort();,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,282,        for (int i=0; i<size; i++) {,0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,287,            },0.00137,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,289,    },0.00137,0,-1,0
org/joda/time/field/BaseDurationField,27,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,59,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,91,        return duration / getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,123,        return value * getUnitMillis();  // safe,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,146,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,147,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,149,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,150,            return 0;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,152,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,153,            return -1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,155,            return 1;,0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,165,"        return ""DurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/BaseDurationField,27,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/DurationField,27,209,        if (value == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,27,210,"            return subtract(instant, (long) value);",0.0,0,-1,0
org/joda/time/DurationField,27,212,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/DurationField,27,224,        if (value == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/DurationField,27,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,-1,0
org/joda/time/DurationField,27,227,"        return add(instant, -value);",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,56,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,59,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,74,        return iField.isLenient();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,78,        return iField.get(instant);,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,82,"        return iField.set(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,94,        return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,98,        return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DecoratedDateTimeField,27,102,        return iField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,62,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,94,"        return getAsText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,106,"        return getAsText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,121,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,153,        return Integer.toString(fieldValue);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,168,"        return getAsShortText(get(instant), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,180,"        return getAsShortText(instant, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,195,"        return getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,227,"        return getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,253,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,267,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,298,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,299,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,304,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,306,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,307,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,309,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,310,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,311,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,313,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,314,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,326,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,327,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,328,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,330,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,331,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,332,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,334,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,335,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,346,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,379,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,380,            return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,385,        DateTimeField nextField = null;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,387,        while (valueToAdd > 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,388,"            int max = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,390,            if (proposed <= max) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,391,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,392,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,394,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,395,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,398,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,409,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,410,        while (valueToAdd < 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,411,"            int min = getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,413,            if (proposed >= min) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,414,                values[fieldIndex] = (int) proposed;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,415,                break;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,417,            if (nextField == null) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,418,                if (fieldIndex == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,421,                    continue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,431,        },0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,461,        int current = get(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,464,"        return set(instant, wrapped);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,495,        int current = values[fieldIndex];,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,586,        values[fieldIndex] = newValue;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,590,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,598,        return values;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,618,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,619,"        return set(instant, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,635,"        return set(instant, text, null);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,654,"        int value = convertText(text, locale);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,655,"        return set(instant, fieldIndex, values, value);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,668,            return Integer.parseInt(text);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,669,        } catch (NumberFormatException ex) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,704,        return false;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,716,        return 0;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,746,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,758,        return getMinimumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,772,        return getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,792,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,804,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,818,        return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,829,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,830,        if (max >= 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,831,            if (max < 10) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,832,                return 1;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,833,            } else if (max < 100) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,834,                return 2;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,835,            } else if (max < 1000) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,836,                return 3;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,839,        return Integer.toString(max).length();,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,850,        return getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,886,        long newInstant = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,887,        if (newInstant != instant) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,888,"            instant = add(newInstant, 1);",0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,890,        return instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,903,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,904,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,906,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,907,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,911,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,913,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,927,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,928,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,930,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,931,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,935,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,937,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,955,        long floor = roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,956,        long ceiling = roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,958,        long diffFromFloor = instant - floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,959,        long diffToCeiling = ceiling - instant;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,963,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,966,            return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,971,                return ceiling;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,973,            return floor;,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,994,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/BaseDateTimeField,27,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,53,"        return ""millis"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,85,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,89,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,93,        return FieldUtils.safeToInt(duration);,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,97,        return duration;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,101,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,105,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,109,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,113,        return value;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,117,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,135,        long thisMillis = getUnitMillis();,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,137,        if (thisMillis == otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,138,            return 0;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,140,        if (thisMillis < otherMillis) {,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,141,            return -1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,143,            return 1;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,153,"        return ""DurationField[millis]"";",0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,160,        return INSTANCE;,0.0,0,-1,0
org/joda/time/field/MillisDurationField,27,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/DurationFieldType,27,216,        return iName;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,234,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,243,        return getName();,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,84,            iMin = minValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,89,            iMax = maxValue;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,100,        return super.get(instant) + iOffset;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,112,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,114,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,126,"        instant = super.add(instant, amount);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,128,        return instant;,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,153,"        return super.set(instant, value - iOffset);",0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,157,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,161,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,165,        return getWrappedField().getLeapDurationField();,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,187,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,191,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,195,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,199,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,203,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,207,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/OffsetDateTimeField,27,216,        return iOffset;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,109,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,110,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,111,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,112,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,113,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,114,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,115,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,116,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,117,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,130,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,131,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,132,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,133,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,134,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,135,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,136,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,137,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,138,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,151,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,152,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,153,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,154,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,155,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,156,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,157,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,158,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,159,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,172,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,173,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,174,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,175,        iNumberValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,176,        iStringValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,177,        iLowerBound = lowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,178,        iUpperBound = upperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,179,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,180,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,190,        iDateTimeFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,191,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,192,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,193,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,194,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,195,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,196,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,197,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,198,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,208,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,209,        iDurationFieldType = fieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,210,        iFieldName = fieldType.getName();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,211,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,212,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,213,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,214,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,215,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,216,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,225,"        super(createMessage(fieldName, value));",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,226,        iDateTimeFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,227,        iDurationFieldType = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,228,        iFieldName = fieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,229,        iStringValue = value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,230,        iNumberValue = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,231,        iLowerBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,232,        iUpperBound = null;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,233,        iMessage = super.getMessage();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,234,    },0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,41,        StringBuffer buf = new StringBuffer(),0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,44,        if (lowerBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,45,            if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,46,"                buf.append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,50,        } else if (upperBound == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,53,"            buf.append(""must be in the range ["")",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,59,        if (explain != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,60,"            buf.append("": "").append(explain);",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,63,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,76,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,77,"            buf.append(""null"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,79,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,80,            buf.append(value);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,81,"            buf.append('""');",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,86,        return buf.toString();,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,243,        return iDateTimeFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,252,        return iDurationFieldType;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,261,        return iFieldName;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,270,        return iNumberValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,279,        return iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,288,        String value = iStringValue;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,289,        if (value == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,290,            value = String.valueOf(iNumberValue);,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,292,        return value;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,301,        return iLowerBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,310,        return iUpperBound;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,314,        return iMessage;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,323,        if (iMessage == null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,324,            iMessage = message;,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,325,        } else if (message != null) {,0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,326,"            iMessage = message + "": "" + iMessage;",0.0,0,-1,0
org/joda/time/IllegalFieldValueException,27,328,    },0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,377,        return iName;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,409,        return getField(chronology).isSupported();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,418,        return getName();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,40,public abstract class DateTimeFieldType implements Serializable {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,72,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,77,        return getWrappedField().getMillis(scaled);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,92,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,97,"        return getWrappedField().add(instant, scaled);",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,119,        return iScalar;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,130,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,131,            return true;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,-1,0
org/joda/time/field/ScaledDurationField,27,138,        return false;,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,27,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,27,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,27,73,        return iField.isPrecise();,0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,27,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,27,81,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,27,85,"        return iField.getMillis(value, instant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,27,89,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,27,93,"        return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,27,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/DecoratedDurationField,27,101,        return iField.getUnitMillis();,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,76,        return duration / iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,88,        return value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,104,        long addition = value * iUnitMillis;  // safe,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,105,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,115,        return difference / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,127,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,128,            return true;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,-1,0
org/joda/time/field/PreciseDurationField,27,133,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,66,        return false;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,80,        return instant + (value - get(instant)) * iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,92,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,93,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,95,            instant += 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,96,            return instant - instant % iUnitMillis - iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,109,        if (instant > 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,110,            instant -= 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,111,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,113,            return instant - instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,126,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,127,            return instant % iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,0.0,0,-1,0
org/joda/time/field/PreciseDurationDateTimeField,27,163,        return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,83,        if (type == null || durationField == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,84,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,86,        iType = type;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,87,        iDurationField = durationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,88,    },0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,55,        if (cCache == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,57,            field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,59,            field = cCache.get(type);,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,61,                field = null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,64,        if (field == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,66,"            cCache.put(type, field);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,68,        return field;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,95,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,99,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,108,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,117,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,126,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,135,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,144,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,153,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,162,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,171,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,180,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,189,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,198,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,207,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,216,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,225,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,234,"        return getDurationField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,243,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,252,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,261,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,270,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,297,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,306,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,315,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,324,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,333,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,343,        return iDurationField;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,352,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,361,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,370,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,379,        return null;,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,388,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,397,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,406,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,415,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,424,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,433,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,442,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,451,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,460,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,469,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,478,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,487,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,496,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,505,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,514,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,523,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,533,"        return ""UnsupportedDateTimeField"";",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,540,"        return getInstance(iType, iDurationField);",0.0,0,-1,0
org/joda/time/field/UnsupportedDateTimeField,27,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,118,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,125,                difference++;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,127,            difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,130,                difference--;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,133,        return difference;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,145,        return iUnitMillis;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,60,            iRangeField = null;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,100,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,101,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,102,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,131,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,162,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,166,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,170,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,174,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,178,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,182,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,191,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,195,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,196,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/RemainderDateTimeField,27,198,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,64,            iDurationField = null;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,90,"        super(remainderField.getWrappedField(), type);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,91,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,92,        iDurationField = remainderField.iRangeField;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,94,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,95,        int i = field.getMinimumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,98,        int j = field.getMaximumValue();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,101,        iMin = min;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,102,        iMax = max;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,103,    },0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,112,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,113,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,114,            return value / iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,116,            return ((value + 1) / iDivisor) - 1;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,129,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,141,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,174,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,191,        return iMin;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,200,        return iMax;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,204,        DateTimeField field = getWrappedField();,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,218,        return iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,222,        if (value >= 0) {,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,223,            return value % iDivisor;,0.0,0,-1,0
org/joda/time/field/DividedDateTimeField,27,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,79,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,80,            return (int) ((instant / getUnitMillis()) % iRange);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,95,        int thisValue = get(instant);,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,96,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,112,        return instant + (value - get(instant)) * iUnitMillis;,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,131,        return iRange - 1;,0.0,0,-1,0
org/joda/time/field/PreciseDateTimeField,27,143,        return iRange;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,79,        return iType;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,83,        return iType.getName();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,101,        return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,110,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,119,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,128,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,137,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,146,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,155,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,164,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,173,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,182,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,191,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,200,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,209,        throw unsupported();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,227,        return 0;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,238,        if (this == obj) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,239,            return true;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,242,            if (other.getName() == null) {,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,243,                return (getName() == null);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,245,            return (other.getName().equals(getName()));,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,247,        return false;,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,256,        return getName().hashCode();,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,272,        return getInstance(iType);,0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,-1,0
org/joda/time/field/UnsupportedDurationField,27,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,156,            return false;,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,164,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,169,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,182,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,186,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,190,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ImpreciseDateTimeField,27,195,            return ImpreciseDateTimeField.this,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,52,        int value = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,53,        if (value == 0) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,54,            value = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,56,        return value;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,60,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,64,"        return getWrappedField().add(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,68,"        return getWrappedField().addWrapField(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,84,        int max = getMaximumValue();,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,86,        if (value == max) {,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,87,            value = 0;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,89,"        return getWrappedField().set(instant, value);",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,93,        return getWrappedField().isLeap(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,97,        return getWrappedField().getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,110,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,119,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,128,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,137,        return 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,147,        return getWrappedField().getMaximumValue() + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,157,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,167,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,181,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,185,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,189,        return getWrappedField().roundHalfFloor(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,193,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,197,        return getWrappedField().roundHalfEven(instant);,0.0,0,-1,0
org/joda/time/field/ZeroIsMaxDateTimeField,27,201,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,399,            return System.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,43,        super();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,44,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,27,56,        return cMillisProvider.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,97,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,98,        if (offsetMillis == 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,99,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,101,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,103,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,27,116,        if (millisProvider == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,117,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,27,119,        checkPermission();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,120,        cMillisProvider = millisProvider;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,121,    },0.0,0,-1,0
org/joda/time/DateTimeUtils,27,131,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeUtils,27,146,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,147,            return DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,149,        return instant.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,164,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,165,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,167,        Chronology chrono = instant.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,168,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,169,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,171,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,187,        Chronology chrono = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,188,        if (start != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,189,            chrono = start.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,190,        } else if (end != null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,191,            chrono = end.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,193,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,194,            chrono = ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,196,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,211,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,212,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,214,        Chronology chrono = interval.getChronology();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,215,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,216,            return ISOChronology.getInstance();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,218,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,234,        if (interval == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,235,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,236,"            interval = new Interval(now, now);",0.0,0,-1,0
org/joda/time/DateTimeUtils,27,238,        return interval;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,255,        return chrono;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,269,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,270,            return DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,272,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,303,        if (duration == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,304,            return 0L;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,306,        return duration.getMillis();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,334,        if (partial == null) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,335,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeUtils,27,337,        DurationFieldType lastType = null;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,338,        for (int i = 0; i < partial.size(); i++) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,339,            DateTimeField loopField = partial.getField(i);,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,340,            if (i > 0) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,341,                if (loopField.getRangeDurationField().getType() != lastType) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,342,                    return false;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,345,            lastType = loopField.getDurationField().getType();,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,347,        return true;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,365,"        	Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});        	",0.0,0,-1,0
org/joda/time/DateTimeUtils,27,366,"        	return (DateFormatSymbols) method.invoke(null, new Object[] {locale});        	",0.0,0,-1,0
org/joda/time/DateTimeUtils,27,367,        } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,368,        	return new DateFormatSymbols(locale);,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,438,        OffsetMillisProvider(long offsetMillis) {,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,439,            iMillis = offsetMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,440,        },0.0,0,-1,0
org/joda/time/DateTimeUtils,27,447,            return System.currentTimeMillis() + iMillis;,0.0,0,-1,0
org/joda/time/DateTimeUtils,27,423,            return iMillis;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,461,            chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,463,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,465,                    return chronology.era();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,467,                    return chronology.yearOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,469,                    return chronology.centuryOfEra();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,471,                    return chronology.yearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,473,                    return chronology.year();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,475,                    return chronology.dayOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,477,                    return chronology.monthOfYear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,479,                    return chronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,481,                    return chronology.weekyearOfCentury();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,483,                    return chronology.weekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,485,                    return chronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,487,                    return chronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,489,                    return chronology.halfdayOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,491,                    return chronology.hourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,493,                    return chronology.clockhourOfHalfday();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,495,                    return chronology.clockhourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,497,                    return chronology.hourOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,499,                    return chronology.minuteOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,501,                    return chronology.minuteOfHour();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,503,                    return chronology.secondOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,505,                    return chronology.secondOfMinute();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,507,                    return chronology.millisOfDay();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,509,                    return chronology.millisOfSecond();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,512,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,522,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,524,                    return ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,526,                    return YEAR_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,528,                    return CENTURY_OF_ERA_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,530,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,532,                    return YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,534,                    return DAY_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,536,                    return MONTH_OF_YEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,538,                    return DAY_OF_MONTH_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,540,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,542,                    return WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,544,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,546,                    return DAY_OF_WEEK_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,548,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,550,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,552,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,554,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,556,                    return HOUR_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,558,                    return MINUTE_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,560,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,562,                    return SECOND_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,564,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,566,                    return MILLIS_OF_DAY_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,568,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,-1,0
org/joda/time/DateTimeFieldType,27,571,                    return this;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,96,        super();,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,97,        type = checkPeriodType(type);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,98,        chrono = DateTimeUtils.getChronology(chrono);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,99,        iType = type;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,100,"        iValues = chrono.get(this, startInstant, endInstant);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,101,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,112,        super();,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,113,        type = checkPeriodType(type);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,114,        if (startInstant == null && endInstant == null) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,115,            iType = type;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,116,            iValues = new int[size()];,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,118,            long startMillis = DateTimeUtils.getInstantMillis(startInstant);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,119,            long endMillis = DateTimeUtils.getInstantMillis(endInstant);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,120,"            Chronology chrono = DateTimeUtils.getIntervalChronology(startInstant, endInstant);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,121,            iType = type;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,122,"            iValues = chrono.get(this, startMillis, endMillis);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,124,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,145,        super();,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,146,        if (start == null || end == null) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,147,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,149,        if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass()) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,151,            type = checkPeriodType(type);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,152,            long startMillis = ((BaseLocal) start).getLocalMillis();,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,153,            long endMillis = ((BaseLocal) end).getLocalMillis();,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,154,            Chronology chrono = start.getChronology();,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,155,            chrono = DateTimeUtils.getChronology(chrono);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,156,            iType = type;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,157,"            iValues = chrono.get(this, startMillis, endMillis);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,158,        } else {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,159,            if (start.size() != end.size()) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,160,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,162,"            for (int i = 0, isize = start.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,163,                if (start.getFieldType(i) != end.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,164,"                    throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,167,            if (DateTimeUtils.isContiguous(start) == false) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,168,"                throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,170,            iType = checkPeriodType(type);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,171,            Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,172,"            iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,174,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,184,        super();,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,185,        type = checkPeriodType(type);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,186,        long startMillis = DateTimeUtils.getInstantMillis(startInstant);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,187,        long durationMillis = DateTimeUtils.getDurationMillis(duration);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,188,"        long endMillis = FieldUtils.safeAdd(startMillis, durationMillis);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,189,        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,190,        iType = type;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,191,"        iValues = chrono.get(this, startMillis, endMillis);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,192,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,202,        super();,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,203,        type = checkPeriodType(type);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,204,        long durationMillis = DateTimeUtils.getDurationMillis(duration);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,205,        long endMillis = DateTimeUtils.getInstantMillis(endInstant);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,206,"        long startMillis = FieldUtils.safeSubtract(endMillis, durationMillis);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,207,        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,208,        iType = type;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,209,"        iValues = chrono.get(this, startMillis, endMillis);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,210,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,264,        super();,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,265,        iType = type;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,266,        iValues = values;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,267,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,342,        long startMillis = DateTimeUtils.getInstantMillis(startInstant);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,343,        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,344,"        long endMillis = chrono.add(this, startMillis, 1);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,345,"        return new Duration(startMillis, endMillis);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,366,        long endMillis = DateTimeUtils.getInstantMillis(endInstant);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,367,        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,368,"        long startMillis = chrono.add(this, endMillis, -1);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,369,"        return new Duration(startMillis, endMillis);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,385,                throw new IllegalArgumentException(,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,402,            setValues(new int[size()]);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,436,"        setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,437,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,479,            if (value != 0 || field == null) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,480,                throw new IllegalArgumentException(,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,496,"        addFieldInto(iValues, field, value);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,497,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,508,        int index = indexOf(field);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,509,        if (index == -1) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,510,            if (value != 0 || field == null) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,511,                throw new IllegalArgumentException(,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,515,"            values[index] = FieldUtils.safeAdd(values[index], value);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,517,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,526,        if (period != null) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,527,"            iValues = mergePeriodInto(getValues(), period);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,529,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,540,"         for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,541,             DurationFieldType type = period.getFieldType(i);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,542,             int value = period.getValue(i);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,543,"             checkAndUpdate(type, values, value);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,545,         return values;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,555,        if (period != null) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,556,"            iValues = addPeriodInto(getValues(), period);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,558,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,569,"         for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,570,             DurationFieldType type = period.getFieldType(i);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,571,             int value = period.getValue(i);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,572,             if (value != 0) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,573,                 int index = indexOf(type);,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,574,                 if (index == -1) {,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,575,                     throw new IllegalArgumentException(,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,578,"                     values[index] = FieldUtils.safeAdd(getValue(index), value);",0.0,0,-1,0
org/joda/time/base/BasePeriod,27,582,         return values;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,594,        iValues[index] = value;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,595,    },0.0,0,-1,0
org/joda/time/base/BasePeriod,27,603,        iValues = values;,0.0,0,-1,0
org/joda/time/base/BasePeriod,27,604,    },0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,56,        DurationFieldType[] result = new DurationFieldType[size()];,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,57,        for (int i = 0; i < result.length; i++) {,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,58,            result[i] = getFieldType(i);,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,60,        return result;,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,90,        int index = indexOf(type);,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,91,        if (index == -1) {,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,92,            return 0;,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,94,        return getValue(index);,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,104,        return getPeriodType().isSupported(type);,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,135,        return new MutablePeriod(this);,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,160,        if (this == period) {,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,161,            return true;,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,163,        if (period instanceof ReadablePeriod == false) {,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,164,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,166,        ReadablePeriod other = (ReadablePeriod) period;,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,167,        if (size() != other.size()) {,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,168,            return false;,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,170,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,171,            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,172,                return false;,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,175,        return true;,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,184,        int total = 17;,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,185,"        for (int i = 0, isize = size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,186,            total = 27 * total + getValue(i);,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,187,            total = 27 * total + getFieldType(i).hashCode();,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,189,        return total;,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,204,        return ISOPeriodFormat.standard().print(this);,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,216,        if (formatter == null) {,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,217,            return toString();,0.0,0,-1,0
org/joda/time/base/AbstractPeriod,27,219,        return formatter.print(this);,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,52,        return (((ReadableInterval) object)).toDurationMillis();,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,64,        ReadableInterval interval = (ReadableInterval) object;,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,65,        chrono = (chrono != null ? chrono : DateTimeUtils.getIntervalChronology(interval));,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,66,        long start = interval.getStartMillis();,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,67,        long end = interval.getEndMillis();,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,68,"        int[] values = chrono.get(writablePeriod, start, end);",0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,69,        for (int i = 0; i < values.length; i++) {,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,70,"            writablePeriod.setValue(i, values[i]);",0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,72,    },0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,86,        return true;,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,99,        ReadableInterval input = (ReadableInterval) object;,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,100,        writableInterval.setInterval(input);,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,101,        if (chrono != null) {,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,102,            writableInterval.setChronology(chrono);,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,104,            writableInterval.setChronology(input.getChronology());,0.0,0,-1,0
org/joda/time/convert/ReadableIntervalConverter,27,106,    },0.0,0,-1,0
org/joda/time/convert/AbstractConverter,27,52,        return DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/convert/AbstractConverter,27,67,        return ISOChronology.getInstance(zone);,0.0,0,-1,0
org/joda/time/convert/AbstractConverter,27,82,        return DateTimeUtils.getChronology(chrono);,0.0,0,-1,0
org/joda/time/convert/AbstractConverter,27,101,"        long instant = getInstantMillis(object, chrono);",0.0,0,-1,0
org/joda/time/convert/AbstractConverter,27,102,"        return chrono.get(fieldSource, instant);",0.0,0,-1,0
org/joda/time/convert/AbstractConverter,27,123,"        return getPartialValues(fieldSource, object, chrono);",0.0,0,-1,0
org/joda/time/convert/AbstractConverter,27,134,        return PeriodType.standard();,0.0,0,-1,0
org/joda/time/convert/AbstractConverter,27,148,        return false;,0.0,0,-1,0
org/joda/time/convert/AbstractConverter,27,158,"        return ""Converter["" + (getSupportedType() == null ? ""null"" : getSupportedType().getName()) + ""]"";",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,77,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,97,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,143,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,144,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,146,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,147,            return this;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,149,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,160,"        String str = ""ISOChronology"";",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,161,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,162,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,163,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,165,        return str;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,190,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,208,        return new Stub(getZone());,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,110,        return null;,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,148,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,151,        return super.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,389,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,390,        setFields();,0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,391,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,102,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,132,"        long instant = year().set(0, year);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,183,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,184,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,185,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,186,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,187,            if (value < field.getMinimumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,188,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,192,            if (value > field.getMaximumValue()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,193,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,199,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,200,            int value = values[i];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,201,            DateTimeField field = partial.getField(i);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,203,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,208,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,213,    },0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,223,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,224,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,225,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,228,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,242,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,255,        int size = period.size();,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,256,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,257,        if (startInstant != endInstant) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,258,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,261,"                startInstant = field.add(startInstant, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,262,                values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,265,        return values;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,279,            long current = 0;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,280,            for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,282,                if (field.isPrecise()) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,283,"                    int value = field.getDifference(duration, current);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,284,"                    current = field.add(current, value);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,285,                    values[i] = value;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,301,        if (scalar != 0 && period != null) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,304,                if (value != 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,309,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,322,        if (duration == 0 || scalar == 0) {,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,323,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,-1,0
org/joda/time/chrono/BaseChronology,27,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,-1,0
org/joda/time/DateTimeZone,27,687,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,143,                        } catch (RuntimeException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,147,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,-1,0
org/joda/time/DateTimeZone,27,149,                    } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,153,                        temp = UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,174,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,-1,0
org/joda/time/DateTimeZone,27,177,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,202,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,205,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,211,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,27,212,            int offset = parseOffset(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,213,            if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,214,                return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,216,                id = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,217,"                return fixedOffsetZone(id, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,220,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,234,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,251,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,252,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,254,        if (minutesOffset < 0 || minutesOffset > 59) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,255,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,257,        int offset = 0;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,259,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,260,            if (hoursInMinutes < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,261,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,263,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,265,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,268,        },0.0,0,-1,0
org/joda/time/DateTimeZone,27,266,        } catch (ArithmeticException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,267,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,269,        return forOffsetMillis(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,279,        String id = printOffset(millisOffset);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,280,"        return fixedOffsetZone(id, millisOffset);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,299,        if (zone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,300,            return getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,302,        final String id = zone.getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,303,"        if (id.equals(""UTC"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,27,304,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,308,        DateTimeZone dtz = null;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,309,        String convId = getConvertedId(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,310,        if (convId != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,311,            dtz = cProvider.getZone(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,313,        if (dtz == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,314,            dtz = cProvider.getZone(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,316,        if (dtz != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,317,            return dtz;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,321,        if (convId == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,322,            convId = zone.getDisplayName();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,323,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,-1,0
org/joda/time/DateTimeZone,27,324,                convId = convId.substring(3);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,325,                int offset = parseOffset(convId);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,326,                if (offset == 0L) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,327,                    return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,329,                    convId = printOffset(offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,330,"                    return fixedOffsetZone(convId, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,334,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,346,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,347,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,349,        if (iFixedOffsetCache == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,350,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,-1,0
org/joda/time/DateTimeZone,27,353,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,354,        if (ref != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,355,            zone = ref.get();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,356,            if (zone != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,357,                return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,360,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,361,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,-1,0
org/joda/time/DateTimeZone,27,362,        return zone;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,371,        return cAvailableIDs;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,384,        return cProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,398,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,399,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,400,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,27,402,        setProvider0(provider);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,403,    },0.0,0,-1,0
org/joda/time/DateTimeZone,27,417,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/DateTimeZone,27,421,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,424,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,447,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,451,                },0.0,0,-1,0
org/joda/time/DateTimeZone,27,448,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,449,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,450,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,453,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,460,            } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,461,                Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,462,"                thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,467,            provider = new UTCProvider();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,483,        return cNameProvider;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,497,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,498,        if (sm != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,499,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,-1,0
org/joda/time/DateTimeZone,27,501,        setNameProvider0(nameProvider);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,502,    },0.0,0,-1,0
org/joda/time/DateTimeZone,27,531,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,535,                },0.0,0,-1,0
org/joda/time/DateTimeZone,27,532,                } catch (Exception ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,533,                    Thread thread = Thread.currentThread();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,534,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,537,        } catch (SecurityException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,556,"        Map<String, String> map = cZoneIdConversion;",0.0,0,-1,0
org/joda/time/DateTimeZone,27,557,        if (map == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,559,"            map = new HashMap<String, String>();",0.0,0,-1,0
org/joda/time/DateTimeZone,27,560,"            map.put(""GMT"", ""UTC"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,561,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,562,"            map.put(""HST"", ""Pacific/Honolulu"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,563,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,564,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,565,"            map.put(""MST"", ""America/Denver"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,566,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,567,"            map.put(""CST"", ""America/Chicago"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,568,"            map.put(""EST"", ""America/New_York"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,569,"            map.put(""IET"", ""America/Indianapolis"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,570,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,571,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,572,"            map.put(""AGT"", ""America/Buenos_Aires"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,573,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,574,"            map.put(""WET"", ""Europe/London"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,575,"            map.put(""ECT"", ""Europe/Paris"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,576,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,577,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,578,"            map.put(""EET"", ""Europe/Bucharest"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,579,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,580,"            map.put(""MET"", ""Asia/Tehran"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,581,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,582,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,583,"            map.put(""IST"", ""Asia/Calcutta"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,584,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,585,"            map.put(""VST"", ""Asia/Saigon"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,586,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,587,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,588,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,589,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,590,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,591,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,592,            cZoneIdConversion = map;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,594,        return map.get(id);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,600,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,614,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,627,        StringBuffer buf = new StringBuffer();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,628,        if (offset >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,629,            buf.append('+');,0.0,0,-1,0
org/joda/time/DateTimeZone,27,631,            buf.append('-');,0.0,0,-1,0
org/joda/time/DateTimeZone,27,632,            offset = -offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,635,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,636,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,637,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,639,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,640,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,27,641,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,642,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,643,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,644,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,647,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,648,        buf.append(':');,0.0,0,-1,0
org/joda/time/DateTimeZone,27,649,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,650,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,651,        if (offset == 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,652,            return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,655,        buf.append('.');,0.0,0,-1,0
org/joda/time/DateTimeZone,27,656,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,657,        return buf.toString();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,666,        if (cOffsetFormatter == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,667,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,-1,0
org/joda/time/DateTimeZone,27,671,        return cOffsetFormatter;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,724,"        return getShortName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,739,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,740,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,742,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,743,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,744,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,746,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,747,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,748,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,750,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,27,764,"        return getName(instant, null);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,779,        if (locale == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,780,            locale = Locale.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,782,        String nameKey = getNameKey(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,783,        if (nameKey == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,784,            return iID;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,786,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,-1,0
org/joda/time/DateTimeZone,27,787,        if (name != null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,788,            return name;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,790,        return printOffset(getOffset(instant));,0.0,0,-1,0
org/joda/time/DateTimeZone,27,808,        if (instant == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,809,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,27,811,        return getOffset(instant.getMillis());,0.0,0,-1,0
org/joda/time/DateTimeZone,27,839,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,874,        int offsetLocal = getOffset(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,876,        int offsetAdjusted = getOffset(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,878,        if (offsetLocal != offsetAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,881,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,885,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,886,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,887,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,888,                    return offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,892,        return offsetAdjusted;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,906,        int offset = getOffset(instantUTC);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,907,        long instantLocal = instantUTC + offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,909,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,910,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,912,        return instantLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,929,        int offsetLocal = getOffset(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,931,        int offset = getOffset(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,933,        if (offsetLocal != offset) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,937,            if (strict || offsetLocal < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,939,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,940,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,941,                    nextLocal = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,943,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,944,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,945,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,947,                if (nextLocal != nextAdjusted) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,949,                    if (strict) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,951,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +",0.0,0,-1,0
org/joda/time/DateTimeZone,27,958,                        offset = offsetLocal;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,964,        long instantUTC = instantLocal - offset;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,966,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,967,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,969,        return instantUTC;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,983,        if (newZone == null) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,984,            newZone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,986,        if (newZone == this) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,987,            return oldInstant;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,989,        long instantLocal = oldInstant + getOffset(oldInstant);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,990,        return instantLocal - newZone.getOffsetFromLocal(instantLocal);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1100,        if (isFixed()) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1101,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1104,            localDateTime.toDateTime(this);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1105,            return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1106,        } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1107,            return true;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1148,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1173,        return getID();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1183,        return new Stub(iID);,0.0,0,-1,0
org/joda/time/PeriodType,27,134,        PeriodType type = cYMDTime;,0.0,0,-1,0
org/joda/time/PeriodType,27,135,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,136,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,146,            cYMDTime = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,148,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,163,        PeriodType type = cYMD;,0.0,0,-1,0
org/joda/time/PeriodType,27,164,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,165,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,173,            cYMD = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,175,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,193,        PeriodType type = cYWDTime;,0.0,0,-1,0
org/joda/time/PeriodType,27,194,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,195,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,205,            cYWDTime = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,207,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,222,        PeriodType type = cYWD;,0.0,0,-1,0
org/joda/time/PeriodType,27,223,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,224,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,232,            cYWD = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,234,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,278,        PeriodType type = cYD;,0.0,0,-1,0
org/joda/time/PeriodType,27,279,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,280,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,287,            cYD = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,289,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,305,        PeriodType type = cDTime;,0.0,0,-1,0
org/joda/time/PeriodType,27,306,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,307,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,316,            cDTime = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,318,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,333,        PeriodType type = cTime;,0.0,0,-1,0
org/joda/time/PeriodType,27,334,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,335,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,343,            cTime = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,345,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,354,        PeriodType type = cYears;,0.0,0,-1,0
org/joda/time/PeriodType,27,355,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,356,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,361,            cYears = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,363,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,372,        PeriodType type = cMonths;,0.0,0,-1,0
org/joda/time/PeriodType,27,373,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,374,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,379,            cMonths = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,381,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,390,        PeriodType type = cWeeks;,0.0,0,-1,0
org/joda/time/PeriodType,27,391,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,392,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,397,            cWeeks = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,399,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,408,        PeriodType type = cDays;,0.0,0,-1,0
org/joda/time/PeriodType,27,409,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,410,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,415,            cDays = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,417,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,426,        PeriodType type = cHours;,0.0,0,-1,0
org/joda/time/PeriodType,27,427,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,428,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,433,            cHours = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,435,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,444,        PeriodType type = cMinutes;,0.0,0,-1,0
org/joda/time/PeriodType,27,445,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,446,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,451,            cMinutes = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,453,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,462,        PeriodType type = cSeconds;,0.0,0,-1,0
org/joda/time/PeriodType,27,463,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,464,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,469,            cSeconds = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,471,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,480,        PeriodType type = cMillis;,0.0,0,-1,0
org/joda/time/PeriodType,27,481,        if (type == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,482,            type = new PeriodType(,0.0,0,-1,0
org/joda/time/PeriodType,27,487,            cMillis = type;,0.0,0,-1,0
org/joda/time/PeriodType,27,489,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,502,        if (types == null || types.length == 0) {,0.0,0,-1,0
org/joda/time/PeriodType,27,503,"            throw new IllegalArgumentException(""Types array must not be null or empty"");",0.0,0,-1,0
org/joda/time/PeriodType,27,505,        for (int i = 0; i < types.length; i++) {,0.0,0,-1,0
org/joda/time/PeriodType,27,506,            if (types[i] == null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,507,"                throw new IllegalArgumentException(""Types array must not contain null"");",0.0,0,-1,0
org/joda/time/PeriodType,27,510,"        Map<PeriodType, Object> cache = cTypes;",0.0,0,-1,0
org/joda/time/PeriodType,27,511,        if (cache.isEmpty()) {,0.0,0,-1,0
org/joda/time/PeriodType,27,512,"            cache.put(standard(), standard());",0.0,0,-1,0
org/joda/time/PeriodType,27,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());",0.0,0,-1,0
org/joda/time/PeriodType,27,514,"            cache.put(yearMonthDay(), yearMonthDay());",0.0,0,-1,0
org/joda/time/PeriodType,27,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());",0.0,0,-1,0
org/joda/time/PeriodType,27,516,"            cache.put(yearWeekDay(), yearWeekDay());",0.0,0,-1,0
org/joda/time/PeriodType,27,517,"            cache.put(yearDayTime(), yearDayTime());",0.0,0,-1,0
org/joda/time/PeriodType,27,518,"            cache.put(yearDay(), yearDay());",0.0,0,-1,0
org/joda/time/PeriodType,27,519,"            cache.put(dayTime(), dayTime());",0.0,0,-1,0
org/joda/time/PeriodType,27,520,"            cache.put(time(), time());",0.0,0,-1,0
org/joda/time/PeriodType,27,521,"            cache.put(years(), years());",0.0,0,-1,0
org/joda/time/PeriodType,27,522,"            cache.put(months(), months());",0.0,0,-1,0
org/joda/time/PeriodType,27,523,"            cache.put(weeks(), weeks());",0.0,0,-1,0
org/joda/time/PeriodType,27,524,"            cache.put(days(), days());",0.0,0,-1,0
org/joda/time/PeriodType,27,525,"            cache.put(hours(), hours());",0.0,0,-1,0
org/joda/time/PeriodType,27,526,"            cache.put(minutes(), minutes());",0.0,0,-1,0
org/joda/time/PeriodType,27,527,"            cache.put(seconds(), seconds());",0.0,0,-1,0
org/joda/time/PeriodType,27,528,"            cache.put(millis(), millis());",0.0,0,-1,0
org/joda/time/PeriodType,27,530,"        PeriodType inPartType = new PeriodType(null, types, null);",0.0,0,-1,0
org/joda/time/PeriodType,27,531,        Object cached = cache.get(inPartType);,0.0,0,-1,0
org/joda/time/PeriodType,27,532,        if (cached instanceof PeriodType) {,0.0,0,-1,0
org/joda/time/PeriodType,27,533,            return (PeriodType) cached;,0.0,0,-1,0
org/joda/time/PeriodType,27,535,        if (cached != null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,536,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + cached);",0.0,0,-1,0
org/joda/time/PeriodType,27,538,        PeriodType type = standard();,0.0,0,-1,0
org/joda/time/PeriodType,27,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,0.0,0,-1,0
org/joda/time/PeriodType,27,540,        if (list.remove(DurationFieldType.years()) == false) {,0.0,0,-1,0
org/joda/time/PeriodType,27,541,            type = type.withYearsRemoved();,0.0,0,-1,0
org/joda/time/PeriodType,27,543,        if (list.remove(DurationFieldType.months()) == false) {,0.0,0,-1,0
org/joda/time/PeriodType,27,544,            type = type.withMonthsRemoved();,0.0,0,-1,0
org/joda/time/PeriodType,27,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0.0,0,-1,0
org/joda/time/PeriodType,27,547,            type = type.withWeeksRemoved();,0.0,0,-1,0
org/joda/time/PeriodType,27,549,        if (list.remove(DurationFieldType.days()) == false) {,0.0,0,-1,0
org/joda/time/PeriodType,27,550,            type = type.withDaysRemoved();,0.0,0,-1,0
org/joda/time/PeriodType,27,552,        if (list.remove(DurationFieldType.hours()) == false) {,0.0,0,-1,0
org/joda/time/PeriodType,27,553,            type = type.withHoursRemoved();,0.0,0,-1,0
org/joda/time/PeriodType,27,555,        if (list.remove(DurationFieldType.minutes()) == false) {,0.0,0,-1,0
org/joda/time/PeriodType,27,556,            type = type.withMinutesRemoved();,0.0,0,-1,0
org/joda/time/PeriodType,27,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0.0,0,-1,0
org/joda/time/PeriodType,27,559,            type = type.withSecondsRemoved();,0.0,0,-1,0
org/joda/time/PeriodType,27,561,        if (list.remove(DurationFieldType.millis()) == false) {,0.0,0,-1,0
org/joda/time/PeriodType,27,562,            type = type.withMillisRemoved();,0.0,0,-1,0
org/joda/time/PeriodType,27,564,        if (list.size() > 0) {,0.0,0,-1,0
org/joda/time/PeriodType,27,565,"            cache.put(inPartType, list);",0.0,0,-1,0
org/joda/time/PeriodType,27,566,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + list);",0.0,0,-1,0
org/joda/time/PeriodType,27,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);",0.0,0,-1,0
org/joda/time/PeriodType,27,570,        PeriodType checkedType = (PeriodType) cache.get(checkPartType);,0.0,0,-1,0
org/joda/time/PeriodType,27,571,        if (checkedType != null) {,0.0,0,-1,0
org/joda/time/PeriodType,27,572,"            cache.put(inPartType, checkedType);",0.0,0,-1,0
org/joda/time/PeriodType,27,573,            return checkedType;,0.0,0,-1,0
org/joda/time/PeriodType,27,575,"        cache.put(inPartType, type);",0.0,0,-1,0
org/joda/time/PeriodType,27,576,        return type;,0.0,0,-1,0
org/joda/time/PeriodType,27,608,        return iName;,0.0,0,-1,0
org/joda/time/PeriodType,27,638,        return (indexOf(type) >= 0);,0.0,0,-1,0
org/joda/time/PeriodType,27,662,"        return ""PeriodType["" + getName() + ""]"";",0.0,0,-1,0
org/joda/time/PeriodType,27,674,        int realIndex = iIndices[index];,0.0,0,-1,0
org/joda/time/PeriodType,27,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,0.0,0,-1,0
org/joda/time/PeriodType,27,688,        int realIndex = iIndices[index];,0.0,0,-1,0
org/joda/time/PeriodType,27,689,        if (realIndex == -1) {,0.0,0,-1,0
org/joda/time/PeriodType,27,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0.0,0,-1,0
org/joda/time/PeriodType,27,692,        values[realIndex] = newValue;,0.0,0,-1,0
org/joda/time/PeriodType,27,693,        return true;,0.0,0,-1,0
org/joda/time/PeriodType,27,707,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/PeriodType,27,708,            return false;,0.0,0,-1,0
org/joda/time/PeriodType,27,710,        int realIndex = iIndices[index];,0.0,0,-1,0
org/joda/time/PeriodType,27,711,        if (realIndex == -1) {,0.0,0,-1,0
org/joda/time/PeriodType,27,712,"            throw new UnsupportedOperationException(""Field is not supported"");",0.0,0,-1,0
org/joda/time/PeriodType,27,714,"        values[realIndex] = FieldUtils.safeAdd(values[realIndex], valueToAdd);",0.0,0,-1,0
org/joda/time/PeriodType,27,715,        return true;,0.0,0,-1,0
org/joda/time/PeriodType,27,725,"        return withFieldRemoved(0, ""NoYears"");",0.0,0,-1,0
org/joda/time/PeriodType,27,734,"        return withFieldRemoved(1, ""NoMonths"");",0.0,0,-1,0
org/joda/time/PeriodType,27,743,"        return withFieldRemoved(2, ""NoWeeks"");",0.0,0,-1,0
org/joda/time/PeriodType,27,752,"        return withFieldRemoved(3, ""NoDays"");",0.0,0,-1,0
org/joda/time/PeriodType,27,761,"        return withFieldRemoved(4, ""NoHours"");",0.0,0,-1,0
org/joda/time/PeriodType,27,770,"        return withFieldRemoved(5, ""NoMinutes"");",0.0,0,-1,0
org/joda/time/PeriodType,27,779,"        return withFieldRemoved(6, ""NoSeconds"");",0.0,0,-1,0
org/joda/time/PeriodType,27,788,"        return withFieldRemoved(7, ""NoMillis"");",0.0,0,-1,0
org/joda/time/PeriodType,27,799,        int fieldIndex = iIndices[indicesIndex];,0.0,0,-1,0
org/joda/time/PeriodType,27,800,        if (fieldIndex == -1) {,0.0,0,-1,0
org/joda/time/PeriodType,27,801,            return this;,0.0,0,-1,0
org/joda/time/PeriodType,27,804,        DurationFieldType[] types = new DurationFieldType[size() - 1];,0.0,0,-1,0
org/joda/time/PeriodType,27,805,        for (int i = 0; i < iTypes.length; i++) {,0.0,0,-1,0
org/joda/time/PeriodType,27,806,            if (i < fieldIndex) {,0.0,0,-1,0
org/joda/time/PeriodType,27,807,                types[i] = iTypes[i];,0.0,0,-1,0
org/joda/time/PeriodType,27,808,            } else if (i > fieldIndex) {,0.0,0,-1,0
org/joda/time/PeriodType,27,809,                types[i - 1] = iTypes[i];,0.0,0,-1,0
org/joda/time/PeriodType,27,813,        int[] indices = new int[8];,0.0,0,-1,0
org/joda/time/PeriodType,27,814,        for (int i = 0; i < indices.length; i++) {,0.0,0,-1,0
org/joda/time/PeriodType,27,815,            if (i < indicesIndex) {,0.0,0,-1,0
org/joda/time/PeriodType,27,816,                indices[i] = iIndices[i];,0.0,0,-1,0
org/joda/time/PeriodType,27,817,            } else if (i > indicesIndex) {,0.0,0,-1,0
org/joda/time/PeriodType,27,818,                indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);,0.0,0,-1,0
org/joda/time/PeriodType,27,820,                indices[i] = -1;,0.0,0,-1,0
org/joda/time/PeriodType,27,823,"        return new PeriodType(getName() + name, types, indices);",0.0,0,-1,0
org/joda/time/PeriodType,27,835,        if (this == obj) {,0.0,0,-1,0
org/joda/time/PeriodType,27,836,            return true;,0.0,0,-1,0
org/joda/time/PeriodType,27,838,        if (obj instanceof PeriodType == false) {,0.0,0,-1,0
org/joda/time/PeriodType,27,839,            return false;,0.0,0,-1,0
org/joda/time/PeriodType,27,841,        PeriodType other = (PeriodType) obj;,0.0,0,-1,0
org/joda/time/PeriodType,27,842,"        return (Arrays.equals(iTypes, other.iTypes));",0.0,0,-1,0
org/joda/time/PeriodType,27,851,        int hash = 0;,0.0,0,-1,0
org/joda/time/PeriodType,27,852,        for (int i = 0; i < iTypes.length; i++) {,0.0,0,-1,0
org/joda/time/PeriodType,27,853,            hash += iTypes[i].hashCode();,0.0,0,-1,0
org/joda/time/PeriodType,27,855,        return hash;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,160,        InstantConverter converter =,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,162,        if (converter != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,163,            return converter;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,165,"        throw new IllegalArgumentException(""No instant converter found for type: "" +",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,176,        ConverterSet set = iInstantConverters;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,177,        InstantConverter[] converters = new InstantConverter[set.size()];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,178,        set.copyInto(converters);,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,179,        return converters;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,196,        checkAlterInstantConverters();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,197,        if (converter == null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,198,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,200,        InstantConverter[] removed = new InstantConverter[1];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,201,"        iInstantConverters = iInstantConverters.add(converter, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,202,        return removed[0];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,215,        checkAlterInstantConverters();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,216,        if (converter == null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,217,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,219,        InstantConverter[] removed = new InstantConverter[1];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,220,"        iInstantConverters = iInstantConverters.remove(converter, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,221,        return removed[0];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,230,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,231,        if (sm != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,232,"            sm.checkPermission(new JodaTimePermission(""ConverterManager.alterInstantConverters""));",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,234,    },0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,247,        PartialConverter converter =,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,249,        if (converter != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,250,            return converter;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,252,"        throw new IllegalArgumentException(""No partial converter found for type: "" +",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,263,        ConverterSet set = iPartialConverters;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,264,        PartialConverter[] converters = new PartialConverter[set.size()];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,265,        set.copyInto(converters);,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,266,        return converters;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,283,        checkAlterPartialConverters();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,284,        if (converter == null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,285,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,287,        PartialConverter[] removed = new PartialConverter[1];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,288,"        iPartialConverters = iPartialConverters.add(converter, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,289,        return removed[0];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,302,        checkAlterPartialConverters();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,303,        if (converter == null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,304,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,306,        PartialConverter[] removed = new PartialConverter[1];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,307,"        iPartialConverters = iPartialConverters.remove(converter, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,308,        return removed[0];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,317,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,318,        if (sm != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,319,"            sm.checkPermission(new JodaTimePermission(""ConverterManager.alterPartialConverters""));",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,321,    },0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,334,        DurationConverter converter =,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,336,        if (converter != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,337,            return converter;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,339,"        throw new IllegalArgumentException(""No duration converter found for type: "" +",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,350,        ConverterSet set = iDurationConverters;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,351,        DurationConverter[] converters = new DurationConverter[set.size()];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,352,        set.copyInto(converters);,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,353,        return converters;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,370,        checkAlterDurationConverters();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,371,        if (converter == null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,372,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,374,        DurationConverter[] removed = new DurationConverter[1];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,375,"        iDurationConverters = iDurationConverters.add(converter, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,376,        return removed[0];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,389,        checkAlterDurationConverters();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,390,        if (converter == null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,391,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,393,        DurationConverter[] removed = new DurationConverter[1];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,394,"        iDurationConverters = iDurationConverters.remove(converter, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,395,        return removed[0];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,404,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,405,        if (sm != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,406,"            sm.checkPermission(new JodaTimePermission(""ConverterManager.alterDurationConverters""));",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,408,    },0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,426,"        throw new IllegalArgumentException(""No period converter found for type: "" +",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,437,        ConverterSet set = iPeriodConverters;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,438,        PeriodConverter[] converters = new PeriodConverter[set.size()];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,439,        set.copyInto(converters);,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,440,        return converters;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,457,        checkAlterPeriodConverters();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,458,        if (converter == null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,459,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,461,        PeriodConverter[] removed = new PeriodConverter[1];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,462,"        iPeriodConverters = iPeriodConverters.add(converter, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,463,        return removed[0];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,476,        checkAlterPeriodConverters();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,477,        if (converter == null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,478,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,480,        PeriodConverter[] removed = new PeriodConverter[1];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,481,"        iPeriodConverters = iPeriodConverters.remove(converter, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,482,        return removed[0];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,491,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,492,        if (sm != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,493,"            sm.checkPermission(new JodaTimePermission(""ConverterManager.alterPeriodConverters""));",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,495,    },0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,508,        IntervalConverter converter =,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,510,        if (converter != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,511,            return converter;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,513,"        throw new IllegalArgumentException(""No interval converter found for type: "" +",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,524,        ConverterSet set = iIntervalConverters;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,525,        IntervalConverter[] converters = new IntervalConverter[set.size()];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,526,        set.copyInto(converters);,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,527,        return converters;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,544,        checkAlterIntervalConverters();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,545,        if (converter == null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,546,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,548,        IntervalConverter[] removed = new IntervalConverter[1];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,549,"        iIntervalConverters = iIntervalConverters.add(converter, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,550,        return removed[0];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,563,        checkAlterIntervalConverters();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,564,        if (converter == null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,565,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,567,        IntervalConverter[] removed = new IntervalConverter[1];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,568,"        iIntervalConverters = iIntervalConverters.remove(converter, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,569,        return removed[0];,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,578,        SecurityManager sm = System.getSecurityManager();,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,579,        if (sm != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,580,"            sm.checkPermission(new JodaTimePermission(""ConverterManager.alterIntervalConverters""));",0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,582,    },0.0,0,-1,0
org/joda/time/convert/ConverterManager,27,589,"        return ""ConverterManager["" +",0.0,0,-1,0
org/joda/time/JodaTimePermission,27,57,        super(name);,0.0,0,-1,0
org/joda/time/JodaTimePermission,27,58,    },0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,59,            if (++index >= length) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,60,                index = 0;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,95,        int newLength = length << 1;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,96,        Entry[] newEntries = new Entry[newLength];,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,97,        for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,98,            e = entries[i];,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,99,            type = e.iType;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,100,            index = type == null ? 0 : type.hashCode() & (newLength - 1);,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,101,            while (newEntries[index] != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,102,                if (++index >= newLength) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,103,                    index = 0;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,106,            newEntries[index] = e;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,110,        iSelectEntries = newEntries;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,111,        return converter;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,118,        return iConverters.length;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,125,"        System.arraycopy(iConverters, 0, converters, 0, iConverters.length);",0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,126,    },0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,139,        Converter[] converters = iConverters;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,140,        int length = converters.length;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,142,        for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,143,            Converter existing = converters[i];,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,144,            if (converter.equals(existing)) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,146,                if (removed != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,147,                    removed[0] = null;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,149,                return this;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,152,            if (converter.getSupportedType() == existing.getSupportedType()) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,154,                Converter[] copy = new Converter[length];,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,156,                for (int j=0; j<length; j++) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,157,                    if (j != i) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,158,                        copy[j] = converters[j];,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,160,                        copy[j] = converter;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,164,                if (removed != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,165,                    removed[0] = existing;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,167,                return new ConverterSet(copy);,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,172,        Converter[] copy = new Converter[length + 1];,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,173,"        System.arraycopy(converters, 0, copy, 0, length);",0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,174,        copy[length] = converter;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,176,        if (removed != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,177,            removed[0] = null;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,179,        return new ConverterSet(copy);,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,191,        Converter[] converters = iConverters;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,192,        int length = converters.length;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,194,        for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,195,            if (converter.equals(converters[i])) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,196,"                return remove(i, removed);",0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,201,        if (removed != null) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,202,            removed[0] = null;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,204,        return this;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,219,            throw new IndexOutOfBoundsException();,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,223,            removed[0] = converters[index];,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,253,                return converter;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,267,            return null;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,277,        for (int i=length; --i>=0; ) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,278,            converter = converters[i];,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,279,            Class<?> supportedType = converter.getSupportedType();,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,280,            for (int j=length; --j>=0; ) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,281,                if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,283,"                    set = set.remove(j, null);",0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,284,                    converters = set.iConverters;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,285,                    length = converters.length;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,286,                    i = length - 1;,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,289,        }        ,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,293,        if (length == 1) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,295,            return converters[0];,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,301,        StringBuffer msg = new StringBuffer();,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,302,"        msg.append(""Unable to find best converter for type \"""");",0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,303,        msg.append(type.getName());,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,304,"        msg.append(""\"" from remaining set: "");",0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,305,        for (int i=0; i<length; i++) {,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,306,            converter = converters[i];,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,307,            Class<?> supportedType = converter.getSupportedType();,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,309,            msg.append(converter.getClass().getName());,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,310,            msg.append('[');,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,311,            msg.append(supportedType == null ? null : supportedType.getName());,0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,312,"            msg.append(""], "");",0.0,0,-1,0
org/joda/time/convert/ConverterSet,27,315,        throw new IllegalStateException(msg.toString());,0.0,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,56,        return ((ReadableDuration) object).getMillis();,0.0,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,72,        ReadableDuration dur = (ReadableDuration) object;,0.0,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,73,        chrono = DateTimeUtils.getChronology(chrono);,0.0,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,74,        long duration = dur.getMillis();,0.0,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,75,"        int[] values = chrono.get(writablePeriod, duration);",0.0,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,76,        for (int i = 0; i < values.length; i++) {,0.0,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,77,"            writablePeriod.setValue(i, values[i]);",0.0,0,-1,0
org/joda/time/convert/ReadableDurationConverter,27,79,    },0.0,0,-1,0
org/joda/time/convert/NullConverter,27,56,        return 0L;,0.0,0,-1,0
org/joda/time/convert/NullConverter,27,69,        duration.setPeriod((Period) null);,0.0,0,-1,0
org/joda/time/convert/NullConverter,27,70,    },0.0,0,-1,0
org/joda/time/convert/NullConverter,27,83,        writableInterval.setChronology(chrono);,0.0,0,-1,0
org/joda/time/convert/NullConverter,27,84,        long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/convert/NullConverter,27,85,"        writableInterval.setInterval(now, now);",0.0,0,-1,0
org/joda/time/convert/NullConverter,27,86,    },0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,68,        if (chrono != null) {,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,69,            return chrono;,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,71,        Calendar cal = (Calendar) object;,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,72,        DateTimeZone zone = null;,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,74,            zone = DateTimeZone.forTimeZone(cal.getTimeZone());,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,78,        },0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,76,        } catch (IllegalArgumentException ex) {,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,77,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,79,"        return getChronology(cal, zone);",0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,94,"        if (object.getClass().getName().endsWith("".BuddhistCalendar"")) {",0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,95,            return BuddhistChronology.getInstance(zone);,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,96,        } else if (object instanceof GregorianCalendar) {,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,97,            GregorianCalendar gc = (GregorianCalendar) object;,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,98,            long cutover = gc.getGregorianChange().getTime();,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,99,            if (cutover == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,100,                return GregorianChronology.getInstance(zone);,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,101,            } else if (cutover == Long.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,102,                return JulianChronology.getInstance(zone);,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,104,"                return GJChronology.getInstance(zone, cutover, 4);",0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,107,            return ISOChronology.getInstance(zone);,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,121,        Calendar calendar = (Calendar) object;,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,122,        return calendar.getTime().getTime();,0.0,0,-1,0
org/joda/time/convert/CalendarConverter,27,132,        return Calendar.class;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,128,"        super(base, param);",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,129,    },0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,84,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,93,        return getInstance(DateTimeZone.getDefault());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,104,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,105,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,107,        BuddhistChronology chrono = cCache.get(zone);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,108,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,114,"            cCache.put(zone, chrono);",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,116,        return chrono;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,135,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,136,        return base == null ? getInstanceUTC() : getInstance(base.getZone());,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,147,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,157,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,158,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,160,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,161,            return this;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,163,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,174,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,184,"        return ""Buddhist"".hashCode() * 11 + getZone().hashCode();",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,195,"        String str = ""BuddhistChronology"";",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,196,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,197,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,198,            str = str + '[' + zone.getID() + ']';,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,200,        return str;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,204,        if (getParam() == null) {,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,206,            DateTimeField field = fields.year;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,207,            fields.year = new OffsetDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,211,            field = fields.yearOfEra;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,212,            fields.yearOfEra = new DelegatedDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,216,            field = fields.weekyear;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,217,            fields.weekyear = new OffsetDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,221,            fields.centuryOfEra = new DividedDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,224,            field = new RemainderDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,226,            fields.yearOfCentury = new OffsetDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,229,            field = new RemainderDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,234,            fields.era = ERA_FIELD;,0.0,0,-1,0
org/joda/time/chrono/BuddhistChronology,27,236,    },0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,112,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,124,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,132,                    chrono = new GregorianChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,155,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,158,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,171,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,181,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,182,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,184,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,185,            return this;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,187,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,202,        int leapYears = year / 100;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,203,        if (year < 0) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,212,            if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,213,                leapYears--;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,221,        return MIN_YEAR;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,233,        return MILLIS_PER_YEAR / 2;,0.0,0,-1,0
org/joda/time/chrono/GregorianChronology,27,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,93,        return,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,120,        if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,139,        if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,148,        int minuendYear = getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,156,        if (subtrahendRem >= FEB_29) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,158,                if (!isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,166,        int difference = minuendYear - subtrahendYear;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,167,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,168,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,170,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,175,        int thisYear = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,177,        int millisOfDay = getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,180,            if (isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,182,                if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,184,                    dayOfYear--;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,188,                if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,190,                    dayOfYear++;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,196,        instant += millisOfDay;,0.0,0,-1,0
org/joda/time/chrono/BasicGJChronology,27,198,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,134,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,144,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,153,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,157,        FieldUtils.verifyValueBounds,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,167,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,185,        return iMinDaysInFirstWeek;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,196,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,206,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,217,        StringBuffer sb = new StringBuffer(60);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,218,        String name = getClass().getName();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,219,        int index = name.lastIndexOf('.');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,220,        if (index >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,221,            name = name.substring(index + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,223,        sb.append(name);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,224,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,225,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,226,        if (zone != null) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,227,            sb.append(zone.getID());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,229,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,230,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,231,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,233,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,234,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,307,        return 366;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,317,        return isLeapYear(year) ? 366 : 365;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,339,        long jan1millis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,344,            return jan1millis + (8 - jan1dayOfWeek),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,348,            return jan1millis - (jan1dayOfWeek - 1),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,360,        return getYearInfo(year).iFirstDayMillis;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,371,        long millis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,372,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,373,        return millis;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,385,        long millis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,386,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,401,        if (i2 < 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,402,            i2 = i2 - unitMillis + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,404,        int year = (int) (i2 / unitMillis);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,406,        long yearStart = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,407,        long diff = instant - yearStart;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,409,        if (diff < 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,410,            year--;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,414,            if (isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,420,            yearStart += oneYear;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,422,            if (yearStart <= instant) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,424,                year++;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,428,        return year;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,435,"        return getMonthOfYear(millis, getYear(millis));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,448,        int year = getYear(millis);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,449,"        int month = getMonthOfYear(millis, year);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,450,"        return getDayOfMonth(millis, year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,458,"        int month = getMonthOfYear(millis, year);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,459,"        return getDayOfMonth(millis, year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,468,        long dateMillis = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,477,"        return getDayOfYear(instant, getYear(instant));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,485,        long yearStart = getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,493,        int year = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,494,"        int week = getWeekOfWeekyear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,495,        if (week == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,497,        } else if (week > 51) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,500,            return year;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,517,        if (instant < firstWeekMillis1) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,518,            return getWeeksInYear(year - 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,521,        if (instant >= firstWeekMillis2) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,522,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,534,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,539,            if (daysSince19700101 < -3) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,551,        if (instant >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,565,        return 31;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,575,        int thisYear = getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,577,"        return getDaysInYearMonth(thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,590,        return getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,682,        return getMaxMonth();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,739,        if (info == null || info.iYear != year) {,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,741,            iYearInfoCache[year & CACHE_MASK] = info;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,743,        return info;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,162,"        super(base, param, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,163,    },0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,75,    },0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,78,        if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,79,            if (year == 0) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,80,                throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,83,            year++;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,85,        return year;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,95,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,104,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,114,"        return getInstance(zone, 4);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,125,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,126,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,129,        synchronized (cCache) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,130,            JulianChronology[] chronos = cCache.get(zone);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,131,            if (chronos == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,132,                chronos = new JulianChronology[7];,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,133,"                cCache.put(zone, chronos);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,136,                chrono = chronos[minDaysInFirstWeek - 1];,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,140,            },0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,137,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,138,                throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,141,            if (chrono == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,142,                if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,146,                    chrono = new JulianChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,149,                chronos[minDaysInFirstWeek - 1] = chrono;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,151,        },0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,152,        return chrono;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,169,        Chronology base = getBase();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,170,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,171,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,172,        return base == null ?,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,185,        return INSTANCE_UTC;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,195,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,196,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,198,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,199,            return this;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,201,        return getInstance(zone);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,211,        return (year & 3) == 0;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,219,        int relativeYear = year - 1968;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,221,        if (relativeYear <= 0) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,224,            leapYears = (relativeYear + 3) >> 2;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,226,            leapYears = relativeYear >> 2;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,228,            if (!isLeapYear(year)) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,229,                leapYears++;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,241,        return MIN_YEAR;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,245,        return MAX_YEAR;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,249,        return MILLIS_PER_YEAR;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,253,        return MILLIS_PER_YEAR / 2;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,257,        return MILLIS_PER_MONTH;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,265,        if (getBase() == null) {,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,266,            super.assemble(fields);,0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,268,"            fields.year = new SkipDateTimeField(this, fields.year);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,271,    },0.0,0,-1,0
org/joda/time/chrono/JulianChronology,27,50,public final class JulianChronology extends BasicGJChronology {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,272,    },0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,282,    },0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,83,        return to.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,95,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,96,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,97,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,98,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,99,        return newInstant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,139,"        return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,155,"        return getInstance(zone, DEFAULT_CUTOVER, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,173,"        return getInstance(zone, gregorianCutover, 4);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,189,        zone = DateTimeUtils.getZone(zone);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,191,        if (gregorianCutover == null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,192,            cutoverInstant = DEFAULT_CUTOVER;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,194,            cutoverInstant = gregorianCutover.toInstant();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,200,        if (chronos == null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,201,            chronos = new ArrayList<GJChronology>(2);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,202,"            cCache.put(zone, chronos);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,204,            for (int i=chronos.size(); --i>=0; ) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,205,                chrono = chronos.get(i);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,209,                    return chrono;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,214,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,215,            chrono = new GJChronology,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,221,            chrono = new GJChronology,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,228,        chronos.add(chrono);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,230,        return chrono;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,247,        if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,248,            cutoverInstant = null;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,250,            cutoverInstant = new Instant(gregorianCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,252,"        return getInstance(zone, cutoverInstant, minDaysInFirstWeek);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,288,"        return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,293,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,294,            return base.getZone();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,296,        return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,307,        return withZone(DateTimeZone.UTC);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,317,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,318,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,320,        if (zone == getZone()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,321,            return this;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,323,"        return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,331,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,332,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,336,        long instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,338,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,340,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,342,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,344,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,347,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,356,        if ((base = getBase()) != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,357,            return base.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,363,        long instant = iGregorianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,366,        if (instant < iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,368,            instant = iJulianChronology.getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,371,            if (instant >= iCutoverMillis) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,373,"                throw new IllegalArgumentException(""Specified date does not exist"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,376,        return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,384,        return iCutoverInstant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,393,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,404,        return super.equals(obj);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,414,"        return ""GJ"".hashCode() * 11 + iJulianChronology.hashCode() +",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,426,        StringBuffer sb = new StringBuffer(60);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,427,"        sb.append(""GJChronology"");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,428,        sb.append('[');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,429,        sb.append(getZone().getID());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,431,        if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,432,"            sb.append("",cutover="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,434,            if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,435,                printer = ISODateTimeFormat.date();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,437,                printer = ISODateTimeFormat.dateTime();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,439,"            printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,442,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,443,"            sb.append("",mdfw="");",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,444,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,446,        sb.append(']');,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,448,        return sb.toString();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,452,        Object[] params = (Object[])getParam();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,454,        JulianChronology julian = (JulianChronology)params[0];,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,455,        GregorianChronology gregorian = (GregorianChronology)params[1];,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,456,        Instant cutoverInstant = (Instant)params[2];,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,457,        iCutoverMillis = cutoverInstant.getMillis();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,459,        iJulianChronology = julian;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,460,        iGregorianChronology = gregorian;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,461,        iCutoverInstant = cutoverInstant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,463,        if (getBase() != null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,464,            return;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,467,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,468,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,472,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,478,        fields.copyFieldsFrom(gregorian);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,484,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,488,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,489,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,490,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,491,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,492,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,493,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,494,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,495,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,496,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,497,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,499,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,504,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,513,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,514,            fields.dayOfYear = new CutoverField(,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,519,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,520,            fields.weekOfWeekyear = new CutoverField(,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,528,            fields.year = new ImpreciseCutoverField(,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,530,            fields.years = fields.year.getDurationField();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,531,            fields.yearOfEra = new ImpreciseCutoverField(,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,533,            fields.yearOfCentury = new ImpreciseCutoverField(,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,536,            fields.centuryOfEra = new ImpreciseCutoverField(,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,538,            fields.centuries = fields.centuryOfEra.getDurationField();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,540,            fields.monthOfYear = new ImpreciseCutoverField(,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,542,            fields.months = fields.monthOfYear.getDurationField();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,544,            fields.weekyear = new ImpreciseCutoverField(,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,546,            fields.weekyearOfCentury = new ImpreciseCutoverField(,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,548,            fields.weekyears = fields.weekyear.getDurationField();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,554,            CutoverField cf = new CutoverField,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,556,            cf.iRangeDurationField = fields.months;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,557,            fields.dayOfMonth = cf;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,559,    },0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,562,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,566,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,570,"        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,574,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,74,public final class GJChronology extends AssembledChronology {,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,53,"        return getChronology(object, (Chronology) null).withZone(zone);",0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,67,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,68,            chrono = ((ReadablePartial) object).getChronology();,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,69,            chrono = DateTimeUtils.getChronology(chrono);,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,71,        return chrono;,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,87,        ReadablePartial input = (ReadablePartial) object;,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,88,        int size = fieldSource.size();,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,89,        int[] values = new int[size];,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,90,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,91,            values[i] = input.get(fieldSource.getFieldType(i));,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,93,"        chrono.validate(fieldSource, values);",0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,94,        return values;,0.0,0,-1,0
org/joda/time/convert/ReadablePartialConverter,27,104,        return ReadablePartial.class;,0.0,0,-1,0
org/joda/time/convert/DateConverter,27,55,        Date date = (Date) object;,0.0,0,-1,0
org/joda/time/convert/DateConverter,27,56,        return date.getTime();,0.0,0,-1,0
org/joda/time/convert/DateConverter,27,66,        return Date.class;,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,58,        Chronology chrono = ((ReadableInstant) object).getChronology();,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,59,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,60,            return ISOChronology.getInstance(zone);,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,62,        DateTimeZone chronoZone = chrono.getZone();,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,63,        if (chronoZone != zone) {,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,64,            chrono = chrono.withZone(zone);,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,65,            if (chrono == null) {,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,66,                return ISOChronology.getInstance(zone);,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,69,        return chrono;,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,83,        if (chrono == null) {,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,84,            chrono = ((ReadableInstant) object).getChronology();,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,85,            chrono = DateTimeUtils.getChronology(chrono);,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,87,        return chrono;,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,100,        return ((ReadableInstant) object).getMillis();,0.0,0,-1,0
org/joda/time/convert/ReadableInstantConverter,27,110,        return ReadableInstant.class;,0.0,0,-1,0
org/joda/time/convert/LongConverter,27,54,        return ((Long) object).longValue();,0.0,0,-1,0
org/joda/time/convert/LongConverter,27,67,        return ((Long) object).longValue();,0.0,0,-1,0
org/joda/time/convert/LongConverter,27,77,        return Long.class;,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,63,        String str = (String) object;,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,64,        DateTimeFormatter p = ISODateTimeFormat.dateTimeParser();,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,65,        return p.withChronology(chrono).parseMillis(str);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,84,        if (parser.getZone() != null) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,85,            chrono = chrono.withZone(parser.getZone());,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,87,        long millis = parser.withChronology(chrono).parseMillis((String) object);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,88,"        return chrono.get(fieldSource, millis);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,102,        String original = (String) object;,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,103,        String str = original;,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,104,        int len = str.length();,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,105,        if (len >= 4 &&,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,111,"            throw new IllegalArgumentException(""Invalid format: \"""" + original + '""');",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,113,"        str = str.substring(2, len - 1);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,114,        int dot = -1;,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,115,        for (int i = 0; i < str.length(); i++) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,116,            if ((str.charAt(i) >= '0' && str.charAt(i) <= '9') ||,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,119,            } else if (i > 0 && str.charAt(i) == '.' && dot == -1) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,121,                dot = i;,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,123,"                throw new IllegalArgumentException(""Invalid format: \"""" + original + '""');",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,126,"        long millis = 0, seconds = 0;",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,127,        if (dot > 0) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,128,"            seconds = Long.parseLong(str.substring(0, dot));",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,129,            str = str.substring(dot + 1);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,130,            if (str.length() != 3) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,131,"                str = (str + ""000"").substring(0, 3);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,133,            millis = Integer.parseInt(str);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,135,            seconds = Long.parseLong(str);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,137,        if (seconds < 0) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,138,"            return FieldUtils.safeAdd(FieldUtils.safeMultiply(seconds, 1000), -millis);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,140,"            return FieldUtils.safeAdd(FieldUtils.safeMultiply(seconds, 1000), millis);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,156,        String str = (String) object;,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,157,        PeriodFormatter parser = ISOPeriodFormat.standard();,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,158,        period.clear();,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,159,"        int pos = parser.parseInto(period, str, 0);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,160,        if (pos < str.length()) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,161,            if (pos < 0) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,163,                parser.withParseType(period.getPeriodType()).parseMutablePeriod(str);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,165,"            throw new IllegalArgumentException(""Invalid format: \"""" + str + '""');",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,167,    },0.0,0,-1,0
org/joda/time/convert/StringConverter,27,178,        String str = (String) object;,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,180,        int separator = str.indexOf('/');,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,181,        if (separator < 0) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,182,"            throw new IllegalArgumentException(""Format requires a '/' separator: "" + str);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,185,"        String leftStr = str.substring(0, separator);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,186,        if (leftStr.length() <= 0) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,187,"            throw new IllegalArgumentException(""Format invalid: "" + str);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,189,        String rightStr = str.substring(separator + 1);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,190,        if (rightStr.length() <= 0) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,191,"            throw new IllegalArgumentException(""Format invalid: "" + str);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,194,        DateTimeFormatter dateTimeParser = ISODateTimeFormat.dateTimeParser();,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,195,        dateTimeParser = dateTimeParser.withChronology(chrono);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,196,        PeriodFormatter periodParser = ISOPeriodFormat.standard();,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,197,"        long startInstant = 0, endInstant = 0;",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,198,        Period period = null;,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,199,        Chronology parsedChrono = null;,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,202,        char c = leftStr.charAt(0);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,203,        if (c == 'P' || c == 'p') {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,204,            period = periodParser.withParseType(getPeriodType(leftStr)).parsePeriod(leftStr);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,206,            DateTime start = dateTimeParser.parseDateTime(leftStr);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,207,            startInstant = start.getMillis();,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,208,            parsedChrono = start.getChronology();,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,212,        c = rightStr.charAt(0);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,213,        if (c == 'P' || c == 'p') {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,214,            if (period != null) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,215,"                throw new IllegalArgumentException(""Interval composed of two durations: "" + str);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,217,            period = periodParser.withParseType(getPeriodType(rightStr)).parsePeriod(rightStr);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,218,            chrono = (chrono != null ? chrono : parsedChrono);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,219,"            endInstant = chrono.add(period, startInstant, 1);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,221,            DateTime end = dateTimeParser.parseDateTime(rightStr);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,222,            endInstant = end.getMillis();,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,223,            parsedChrono = (parsedChrono != null ? parsedChrono : end.getChronology());,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,224,            chrono = (chrono != null ? chrono : parsedChrono);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,225,            if (period != null) {,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,226,"                startInstant = chrono.add(period, endInstant, -1);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,230,"        writableInterval.setInterval(startInstant, endInstant);",0.0,0,-1,0
org/joda/time/convert/StringConverter,27,231,        writableInterval.setChronology(chrono);,0.0,0,-1,0
org/joda/time/convert/StringConverter,27,232,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1183,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1191,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1195,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1199,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1200,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1201,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1206,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1208,                if (instant > 0 && start < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1210,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1218,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1212,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1214,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1215,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1217,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1221,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1223,                if (instant > 0 && end < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1225,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1233,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1227,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1229,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1230,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1232,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1235,            return (start > end) ? end : start;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1241,            instant++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1243,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1244,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1245,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1250,                start = startRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1252,                if (instant < 0 && start > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1254,                    start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1262,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1256,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1258,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1259,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1261,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1265,                end = endRecurrence.previous,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1267,                if (instant < 0 && end > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1269,                    end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1277,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1271,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1273,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1274,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1276,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1279,            return ((start > end) ? start : end) - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1283,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1284,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1286,            if (obj instanceof DSTZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1287,                DSTZone other = (DSTZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1288,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1294,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1298,"            writeMillis(out, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1299,            iStartRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1300,            iEndRecurrence.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1301,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1304,            int standardOffset = iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1305,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1306,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1311,                start = startRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1319,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1313,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1315,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1316,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1318,                start = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1322,                end = endRecurrence.next,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1330,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1324,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1326,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1327,            } catch (ArithmeticException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1329,                end = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1332,            return (start > end) ? startRecurrence : endRecurrence;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,45,        return iNameKey;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,49,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,53,        return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,57,        return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,61,        return true;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,65,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,69,        return instant;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,77,        String id = getID();,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,92,            FixedDateTimeZone other = (FixedDateTimeZone)obj;,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,93,            return,0.0,0,-1,0
org/joda/time/tz/FixedDateTimeZone,27,98,        return false;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,600,        Chronology chrono = new BaseChronology() {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,602,                return null;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,605,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,608,                return this;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,611,                return getClass().getName();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,963,        RuleSet() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,964,            iRules = new ArrayList<Rule>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,965,            iUpperYear = Integer.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,966,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,971,        RuleSet(RuleSet rs) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,972,            iStandardOffset = rs.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,973,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,974,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,976,            iUpperYear = rs.iUpperYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,977,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,978,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,948,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,950,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,981,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,985,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,986,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,989,            iInitialNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,990,            iInitialSaveMillis = saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,991,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,994,            if (!iRules.contains(rule)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,995,                iRules.add(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,997,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1000,            iUpperYear = year;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1001,            iUpperOfYear = ofYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1002,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1011,            if (iInitialNameKey != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1013,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1024,            long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1025,            int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1026,            Transition first = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1030,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1032,                if (millis == firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1033,"                    first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1034,                    break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1037,                if (millis > firstMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1038,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1042,                        for (Rule rule : copy) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1043,                            if (rule.getSaveMillis() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1045,                                break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1047,                        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1049,                    if (first == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1061,"                first = new Transition(firstMillis, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1063,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1066,            iRules = copy;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1067,            return first;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1085,            Rule nextRule = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1086,            long nextMillis = Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1088,            Iterator<Rule> it = iRules.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1089,            while (it.hasNext()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1090,                Rule rule = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1092,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1093,                    it.remove();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1094,                    continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1098,                if (next <= nextMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1100,                    nextRule = rule;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1101,                    nextMillis = next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1103,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1105,            if (nextRule == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1106,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1111,                return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1115,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1116,                long upperMillis =,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1118,                if (nextMillis >= upperMillis) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1120,                    return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1131,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1132,                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1141,            if (iRules.size() == 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1142,                Rule startRule = iRules.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1143,                Rule endRule = iRules.get(1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1154,"                    return new DSTZone(id, iStandardOffset,",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1158,            return null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,883,"        Transition(long millis, Transition tr) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,884,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,885,            iNameKey = tr.iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,886,            iWallOffset = tr.iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,887,            iStandardOffset = tr.iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,888,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,890,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,891,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,892,            iNameKey = rule.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,893,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,894,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,895,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,898,"                   int wallOffset, int standardOffset) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,899,            iMillis = millis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,900,            iNameKey = nameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,901,            iWallOffset = wallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,902,            iStandardOffset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,903,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,906,            return iMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,910,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,914,            return iWallOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,918,            return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,922,            return iWallOffset - iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,929,            if (other == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,930,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,932,            return iMillis > other.iMillis &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,817,            iRecurrence = recurrence;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,818,            iFromYear = fromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,819,            iToYear = toYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,820,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,823,            return iFromYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,827,            return iToYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,831,            return iRecurrence.getOfYear();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,835,            return iRecurrence.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,839,            return iRecurrence.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,845,            final int wallOffset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,846,            long testInstant = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,849,            if (instant == Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,850,                year = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,852,                year = chrono.year().get(instant + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,855,            if (year < iFromYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,860,                testInstant -= 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,865,            if (next > instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,866,                year = chrono.year().get(next + wallOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,867,                if (year > iToYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,869,                    next = instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,873,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,522,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,523,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,524,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,525,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,527,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,531,"            long millis = chrono.year().set(0, year);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,536,            if (iDayOfWeek != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,541,            return millis - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,549,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,550,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,551,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,552,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,554,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,558,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,563,"            next = chrono.millisOfDay().set(next, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,565,"            next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,567,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,568,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,569,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,573,"                next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,574,                if (next <= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,575,"                    next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,577,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,578,"                    next = setDayOfWeek(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,583,            return next - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,591,            if (iMode == 'w') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,592,                offset = standardOffset + saveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,593,            } else if (iMode == 's') {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,594,                offset = standardOffset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,596,                offset = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,600,            instant += offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,609,            if (iDayOfWeek == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,610,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,616,                if (prev >= instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,625,            return prev - offset;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,629,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,630,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,632,            if (obj instanceof OfYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,633,                OfYear other = (OfYear)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,634,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,642,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,659,            out.writeByte(iMode);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,660,            out.writeByte(iMonthOfYear);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,661,            out.writeByte(iDayOfMonth);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,662,            out.writeByte(iDayOfWeek);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,663,            out.writeBoolean(iAdvance);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,664,"            writeMillis(out, iMillisOfDay);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,665,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,672,"                next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,682,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,673,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,676,"                        next = chrono.year().add(next, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,680,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,683,            return next;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,701,            },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,692,            } catch (IllegalArgumentException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,699,                    throw e;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,702,            return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,706,            if (iDayOfMonth >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,713,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,719,            if (daysToAdd != 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,720,                if (iAdvance) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,721,                    if (daysToAdd < 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,722,                        daysToAdd += 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,725,                    if (daysToAdd > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,726,                        daysToAdd -= 7;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,731,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,225,    public DateTimeZoneBuilder() {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,227,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,96,"            return readFrom((DataInput)in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,115,                fixed = DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,117,            return fixed;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,123,"            throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,142,            long units = millis / (30 * 60000L);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,145,                out.writeByte((int)(units & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,146,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,150,        if (millis % 60000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,152,            long minutes = millis / 60000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,156,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,160,        if (millis % 1000L == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,162,            long seconds = millis / 1000L;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,167,                return;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,176,        out.writeLong(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,177,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,217,            return DateTimeZone.UTC;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,252,        OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,254,        if (iRuleSets.size() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,258,        iRuleSets.add(new RuleSet());,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,259,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,269,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,277,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,309,        if (fromYear <= toYear) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,310,            OfYear ofYear = new OfYear,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,314,            getLastRuleSet().addRule(rule);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,316,        return this;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,320,        if (iRuleSets.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,333,        if (id == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,334,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,343,        DSTZone tailZone = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,345,        long millis = Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,346,        int saveMillis = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,348,        int ruleSetCount = iRuleSets.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,351,            Transition next = rs.firstTransition(millis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,352,            if (next == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,353,                continue;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,355,"            addTransition(transitions, next);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,356,            millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,357,            saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,360,            rs = new RuleSet(rs);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,363,"                if (addTransition(transitions, next)) {",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,364,                    if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,366,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,369,                millis = next.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,370,                saveMillis = next.getSaveMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,372,                    tailZone = rs.buildTailZone(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,383,        if (transitions.size() == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,384,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,386,                return tailZone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,391,            Transition tr = transitions.get(0);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,397,        if (zone.isCachable()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,400,        return zone;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,404,        int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,405,        if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,406,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,407,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,410,        Transition last = transitions.get(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,412,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,417,        int offsetForLast = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,418,        if (size >= 2) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,421,        int offsetForNew = last.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,426,        if (newLocal != lastLocal) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,427,            transitions.add(tr);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,428,            return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,431,        transitions.remove(size - 1);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,432,"        return addTransition(transitions, tr);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,443,        if (out instanceof DataOutput) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,448,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,475,    },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1362,                        index = in.readUnsignedShort();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1365,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1366,"                    throw new IOException(""Invalid encoding"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1389,            int size = transitions.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1390,            if (size == 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1391,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1394,            long[] trans = new long[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1395,            int[] wallOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1396,            int[] standardOffsets = new int[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1397,            String[] nameKeys = new String[size];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1399,            Transition last = null;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1400,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1401,                Transition tr = transitions.get(i);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1403,                if (!tr.isTransitionFrom(last)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1404,                    throw new IllegalArgumentException(id);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1407,                trans[i] = tr.getMillis();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1408,                wallOffsets[i] = tr.getWallOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1409,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1410,                nameKeys[i] = tr.getNameKey();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1412,                last = tr;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1417,            String[] zoneNameData = new String[5];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1419,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1420,                String[] set = zoneStrings[j];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1422,                    zoneNameData = set;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1429,                String curNameKey = nameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1430,                String nextNameKey = nameKeys[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1431,                long curOffset = wallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1432,                long nextOffset = wallOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1433,                long curStdOffset = standardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1434,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1436,                if (curOffset != nextOffset &&,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1443,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1448,                    if (curOffset > nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1450,                    } else if (curOffset < nextOffset) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1452,                        i++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1457,            if (tailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1458,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1460,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1465,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1471,                        tailZone = new DSTZone(,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1480,            return new PrecalculatedZone,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1509,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1510,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1511,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1512,                return iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1514,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1515,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1516,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1517,                    return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1519,"                return ""UTC"";",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1521,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1522,                return iNameKeys[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1524,            return iTailZone.getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1528,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1529,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1530,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1531,                return iWallOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1533,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1534,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1535,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1536,                    return iWallOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1538,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1540,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1541,                return iWallOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1543,            return iTailZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1547,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1548,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1549,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1550,                return iStandardOffsets[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1552,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1553,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1554,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1555,                    return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1557,                return 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1559,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1560,                return iStandardOffsets[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1562,            return iTailZone.getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1566,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1570,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1571,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1572,            i = (i >= 0) ? (i + 1) : ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1573,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1574,                return transitions[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1576,            if (iTailZone == null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1577,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1579,            long end = transitions[transitions.length - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1580,            if (instant < end) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1581,                instant = end;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1583,            return iTailZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1587,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1588,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1589,            if (i >= 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1590,                if (instant > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1591,                    return instant - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1593,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1595,            i = ~i;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1596,            if (i < transitions.length) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1597,                if (i > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1598,                    long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1599,                    if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1600,                        return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1603,                return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1605,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1606,                long prev = iTailZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1607,                if (prev < instant) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1608,                    return prev;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1611,            long prev = transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1612,            if (prev > Long.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1613,                return prev - 1;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1615,            return instant;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1619,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1620,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1622,            if (obj instanceof PrecalculatedZone) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1624,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1634,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1638,            int size = iTransitions.length;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1641,            Set<String> poolSet = new HashSet<String>();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1642,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1643,                poolSet.add(iNameKeys[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1646,            int poolSize = poolSet.size();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1647,            if (poolSize > 65535) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1650,            String[] pool = new String[poolSize];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1651,            Iterator<String> it = poolSet.iterator();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1652,            for (int i=0; it.hasNext(); i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1653,                pool[i] = it.next();,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1657,            out.writeShort(poolSize);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1658,            for (int i=0; i<poolSize; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1659,                out.writeUTF(pool[i]);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1662,            out.writeInt(size);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1664,            for (int i=0; i<size; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1665,"                writeMillis(out, iTransitions[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1666,"                writeMillis(out, iWallOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1667,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1670,                String nameKey = iNameKeys[i];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1671,                for (int j=0; j<poolSize; j++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1672,                    if (pool[j].equals(nameKey)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1673,                        if (poolSize < 256) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1674,                            out.writeByte(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1676,                            out.writeShort(j);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1678,                        break;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1683,            out.writeBoolean(iTailZone != null);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1684,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1685,                iTailZone.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1687,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1690,            if (iTailZone != null) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1691,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1693,            long[] transitions = iTransitions;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1694,            if (transitions.length <= 1) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1695,                return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1700,            double distances = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1701,            int count = 0;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1703,            for (int i=1; i<transitions.length; i++) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1704,                long diff = transitions[i] - transitions[i - 1];,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1706,                    distances += (double)diff;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1707,                    count++;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1711,            if (count > 0) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1712,                double avg = distances / count;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1713,                avg /= 24 * 60 * 60 * 1000;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1714,                if (avg >= 25) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1721,                    return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,1725,            return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,40,        } catch (SecurityException e) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,41,            i = null;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,50,            cacheSize = i.intValue();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,52,            cacheSize--;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,53,            int shift = 0;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,54,            while (cacheSize > 0) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,55,                shift++;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,56,                cacheSize >>= 1;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,58,            cacheSize = 1 << shift;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,69,            return (CachedDateTimeZone)zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,95,        in.defaultReadObject();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,96,        iInfoCache = new Info[cInfoCacheMask + 1];,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,97,    },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,103,        return iZone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,107,        return getInfo(instant).getNameKey(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,111,        return getInfo(instant).getOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,115,        return getInfo(instant).getStandardOffset(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,119,        return iZone.isFixed();,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,123,        return iZone.nextTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,127,        return iZone.previousTransition(instant);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,135,        if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,136,            return true;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,138,        if (obj instanceof CachedDateTimeZone) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,139,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,141,        return false;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,148,        int period = (int)(millis >> 32);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,149,        Info[] cache = iInfoCache;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,150,        int index = period & cInfoCacheMask;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,151,        Info info = cache[index];,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,152,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,153,            info = createInfo(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,154,            cache[index] = info;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,156,        return info;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,160,        long periodStart = millis & (0xffffffffL << 32);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,161,"        Info info = new Info(iZone, periodStart);",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,163,        long end = periodStart | 0xffffffffL;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,164,        Info chain = info;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,166,            long next = iZone.nextTransition(periodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,167,            if (next == periodStart || next > end) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,168,                break;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,170,            periodStart = next;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,172,        },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,174,        return info;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,188,"        Info(DateTimeZone zone, long periodStart) {",0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,185,        private int iOffset = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,186,        private int iStandardOffset = Integer.MIN_VALUE;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,189,            iPeriodStart = periodStart;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,190,            iZoneRef = zone;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,191,        },0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,194,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,195,                if (iNameKey == null) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,196,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,198,                return iNameKey;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,200,            return iNextInfo.getNameKey(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,205,                if (iOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,208,                return iOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,210,            return iNextInfo.getOffset(millis);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,215,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,218,                return iStandardOffset;,0.0,0,-1,0
org/joda/time/tz/CachedDateTimeZone,27,220,            return iNextInfo.getStandardOffset(millis);,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,44,        return nameSet == null ? null : nameSet[0];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,49,        return nameSet == null ? null : nameSet[1];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,54,            return null;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,58,        if (byIdCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,63,        if (byNameKeyCache == null) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,65,            String[][] zoneStrings = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,66,            for (int i=0; i<zoneStrings.length; i++) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,67,                String[] set = zoneStrings[i];,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,68,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,69,"                    byNameKeyCache.put(set[2], new String[] {set[2], set[1]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,73,                    if (set[2].equals(set[4])) {,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,74,"                        byNameKeyCache.put(set[4] + ""-Summer"", new String[] {set[4], set[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,76,"                        byNameKeyCache.put(set[4], new String[] {set[4], set[3]});",0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,78,                    break;,0.0,0,-1,0
org/joda/time/tz/DefaultNameProvider,27,83,        return (String[])byNameKeyCache.get(nameKey);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,754,            return iOfYear;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,772,            return iNameKey;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,776,            return iSaveMillis;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,780,            if (this == obj) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,781,                return true;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,783,            if (obj instanceof Recurrence) {,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,784,                Recurrence other = (Recurrence)obj;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,785,                return,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,790,            return false;,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,794,            iOfYear.writeTo(out);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,795,            out.writeUTF(iNameKey);,0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,796,"            writeMillis(out, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,797,        },0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,-1,0
org/joda/time/tz/DateTimeZoneBuilder,27,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,57,        if (fileDir == null) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,60,        if (!fileDir.exists()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,63,        if (!fileDir.isDirectory()) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,67,        iFileDir = fileDir;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,68,        iResourcePath = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,69,        iLoader = null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,72,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,96,"        this(resourcePath, loader, true);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,97,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,137,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,142,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,158,            return loadZoneData(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,162,        return getZone((String)obj);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,183,        Thread t = Thread.currentThread();,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,184,"        t.getThreadGroup().uncaughtException(t, ex);",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,185,    },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,197,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,203,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,206,                StringBuffer buf = new StringBuffer(40),0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,211,                throw new IOException(buf.toString());,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,239,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,230,        } catch (IOException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,231,            uncaughtException(e);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,232,            iZoneInfoMap.remove(id);,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,233,            return null;,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,235,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,259,            } catch (IOException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,261,        },0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,257,            try {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,285,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,-1,0
org/joda/time/tz/ZoneInfoProvider,27,286,"                throw new IOException(""Corrupt zone info map"");",0.0,0,-1,0
org/joda/time/Period,27,285,"        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());",0.0,0,-1,0
org/joda/time/Period,27,286,    },0.0,0,-1,0
org/joda/time/Period,27,355,"        super(duration, null, null);",0.0,0,-1,0
org/joda/time/Period,27,356,    },0.0,0,-1,0
org/joda/time/Period,27,375,"        super(duration, type, null);",0.0,0,-1,0
org/joda/time/Period,27,376,    },0.0,0,-1,0
org/joda/time/Period,27,396,"        super(duration, null, chronology);",0.0,0,-1,0
org/joda/time/Period,27,397,    },0.0,0,-1,0
org/joda/time/Period,27,417,"        super(duration, type, chronology);",0.0,0,-1,0
org/joda/time/Period,27,418,    },0.0,0,-1,0
org/joda/time/Period,27,428,"        super(startInstant, endInstant, null, null);",0.0,0,-1,0
org/joda/time/Period,27,429,    },0.0,0,-1,0
org/joda/time/Period,27,439,"        super(startInstant, endInstant, type, null);",0.0,0,-1,0
org/joda/time/Period,27,440,    },0.0,0,-1,0
org/joda/time/Period,27,451,"        super(startInstant, endInstant, null, chrono);",0.0,0,-1,0
org/joda/time/Period,27,452,    },0.0,0,-1,0
org/joda/time/Period,27,463,"        super(startInstant, endInstant, type, chrono);",0.0,0,-1,0
org/joda/time/Period,27,464,    },0.0,0,-1,0
org/joda/time/Period,27,474,"        super(startInstant, endInstant, null);",0.0,0,-1,0
org/joda/time/Period,27,475,    },0.0,0,-1,0
org/joda/time/Period,27,485,"        super(startInstant, endInstant, type);",0.0,0,-1,0
org/joda/time/Period,27,486,    },0.0,0,-1,0
org/joda/time/Period,27,510,"        super(start, end, null);",0.0,0,-1,0
org/joda/time/Period,27,511,    },0.0,0,-1,0
org/joda/time/Period,27,536,"        super(start, end, type);",0.0,0,-1,0
org/joda/time/Period,27,537,    },0.0,0,-1,0
org/joda/time/Period,27,546,"        super(startInstant, duration, null);",0.0,0,-1,0
org/joda/time/Period,27,547,    },0.0,0,-1,0
org/joda/time/Period,27,557,"        super(startInstant, duration, type);",0.0,0,-1,0
org/joda/time/Period,27,558,    },0.0,0,-1,0
org/joda/time/Period,27,567,"        super(duration, endInstant, null);",0.0,0,-1,0
org/joda/time/Period,27,568,    },0.0,0,-1,0
org/joda/time/Period,27,578,"        super(duration, endInstant, type);",0.0,0,-1,0
org/joda/time/Period,27,579,    },0.0,0,-1,0
org/joda/time/Period,27,611,"        super(period, type, null);",0.0,0,-1,0
org/joda/time/Period,27,612,    },0.0,0,-1,0
org/joda/time/Period,27,628,"        super(period, null, chrono);",0.0,0,-1,0
org/joda/time/Period,27,629,    },0.0,0,-1,0
org/joda/time/Period,27,646,"        super(period, type, chrono);",0.0,0,-1,0
org/joda/time/Period,27,647,    },0.0,0,-1,0
org/joda/time/Period,27,656,"        super(values, type);",0.0,0,-1,0
org/joda/time/Period,27,657,    },0.0,0,-1,0
org/joda/time/Period,27,83,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",0.0,0,-1,0
org/joda/time/Period,27,100,"        return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",0.0,0,-1,0
org/joda/time/Period,27,117,"        return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());",0.0,0,-1,0
org/joda/time/Period,27,134,"        return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard());",0.0,0,-1,0
org/joda/time/Period,27,151,"        return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard());",0.0,0,-1,0
org/joda/time/Period,27,168,"        return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard());",0.0,0,-1,0
org/joda/time/Period,27,185,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());",0.0,0,-1,0
org/joda/time/Period,27,199,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());",0.0,0,-1,0
org/joda/time/Period,27,230,        if (start == null || end == null) {,0.0,0,-1,0
org/joda/time/Period,27,231,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");",0.0,0,-1,0
org/joda/time/Period,27,233,        if (start.size() != end.size()) {,0.0,0,-1,0
org/joda/time/Period,27,234,"            throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0.0,0,-1,0
org/joda/time/Period,27,236,        DurationFieldType[] types = new DurationFieldType[start.size()];,0.0,0,-1,0
org/joda/time/Period,27,237,        int[] values = new int[start.size()];,0.0,0,-1,0
org/joda/time/Period,27,238,"        for (int i = 0, isize = start.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/Period,27,239,            if (start.getFieldType(i) != end.getFieldType(i)) {,0.0,0,-1,0
org/joda/time/Period,27,240,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0.0,0,-1,0
org/joda/time/Period,27,242,            types[i] = start.getFieldType(i).getDurationType();,0.0,0,-1,0
org/joda/time/Period,27,243,            if (i > 0 && types[i - 1] == types[i]) {,0.0,0,-1,0
org/joda/time/Period,27,244,"                throw new IllegalArgumentException(""ReadablePartial objects must not have overlapping fields"");",0.0,0,-1,0
org/joda/time/Period,27,246,            values[i] = end.getValue(i) - start.getValue(i);,0.0,0,-1,0
org/joda/time/Period,27,248,"        return new Period(values, PeriodType.forFields(types));",0.0,0,-1,0
org/joda/time/Period,27,667,        return this;,0.0,0,-1,0
org/joda/time/Period,27,677,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",0.0,0,-1,0
org/joda/time/Period,27,686,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",0.0,0,-1,0
org/joda/time/Period,27,695,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",0.0,0,-1,0
org/joda/time/Period,27,704,"        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);",0.0,0,-1,0
org/joda/time/Period,27,714,"        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);",0.0,0,-1,0
org/joda/time/Period,27,723,"        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);",0.0,0,-1,0
org/joda/time/Period,27,732,"        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);",0.0,0,-1,0
org/joda/time/Period,27,741,"        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);",0.0,0,-1,0
org/joda/time/Period,27,756,        type = DateTimeUtils.getPeriodType(type);,0.0,0,-1,0
org/joda/time/Period,27,757,        if (type.equals(getPeriodType())) {,0.0,0,-1,0
org/joda/time/Period,27,758,            return this;,0.0,0,-1,0
org/joda/time/Period,27,760,"        return new Period(this, type);",0.0,0,-1,0
org/joda/time/Period,27,774,        if (period == null) {,0.0,0,-1,0
org/joda/time/Period,27,775,            return this;,0.0,0,-1,0
org/joda/time/Period,27,777,        int[] newValues = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,778,"        newValues = super.mergePeriodInto(newValues, period);",0.0,0,-1,0
org/joda/time/Period,27,779,"        return new Period(newValues, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,794,        if (field == null) {,0.0,0,-1,0
org/joda/time/Period,27,795,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/Period,27,797,        int[] newValues = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,798,"        super.setFieldInto(newValues, field, value);",0.0,0,-1,0
org/joda/time/Period,27,799,"        return new Period(newValues, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,813,        if (field == null) {,0.0,0,-1,0
org/joda/time/Period,27,814,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,-1,0
org/joda/time/Period,27,816,        if (value == 0) {,0.0,0,-1,0
org/joda/time/Period,27,817,            return this;,0.0,0,-1,0
org/joda/time/Period,27,819,        int[] newValues = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,820,"        super.addFieldInto(newValues, field, value);",0.0,0,-1,0
org/joda/time/Period,27,821,"        return new Period(newValues, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,835,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,836,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",0.0,0,-1,0
org/joda/time/Period,27,837,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,850,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,851,"        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);",0.0,0,-1,0
org/joda/time/Period,27,852,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,865,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,866,"        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);",0.0,0,-1,0
org/joda/time/Period,27,867,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,880,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,881,"        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);",0.0,0,-1,0
org/joda/time/Period,27,882,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,895,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,896,"        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);",0.0,0,-1,0
org/joda/time/Period,27,897,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,910,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,911,"        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);",0.0,0,-1,0
org/joda/time/Period,27,912,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,925,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,926,"        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);",0.0,0,-1,0
org/joda/time/Period,27,927,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,940,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,941,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",0.0,0,-1,0
org/joda/time/Period,27,942,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,964,        if (period == null) {,0.0,0,-1,0
org/joda/time/Period,27,965,            return this;,0.0,0,-1,0
org/joda/time/Period,27,967,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,968,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,969,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,970,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,971,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,972,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,973,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,974,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,975,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,976,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,990,        if (years == 0) {,0.0,0,-1,0
org/joda/time/Period,27,991,            return this;,0.0,0,-1,0
org/joda/time/Period,27,993,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,994,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years);",0.0,0,-1,0
org/joda/time/Period,27,995,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,1008,        if (months == 0) {,0.0,0,-1,0
org/joda/time/Period,27,1009,            return this;,0.0,0,-1,0
org/joda/time/Period,27,1011,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,1012,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months);",0.0,0,-1,0
org/joda/time/Period,27,1013,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,1026,        if (weeks == 0) {,0.0,0,-1,0
org/joda/time/Period,27,1027,            return this;,0.0,0,-1,0
org/joda/time/Period,27,1029,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,1030,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);",0.0,0,-1,0
org/joda/time/Period,27,1031,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,1044,        if (days == 0) {,0.0,0,-1,0
org/joda/time/Period,27,1045,            return this;,0.0,0,-1,0
org/joda/time/Period,27,1047,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,1048,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);",0.0,0,-1,0
org/joda/time/Period,27,1049,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,1062,        if (hours == 0) {,0.0,0,-1,0
org/joda/time/Period,27,1063,            return this;,0.0,0,-1,0
org/joda/time/Period,27,1065,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,1066,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours);",0.0,0,-1,0
org/joda/time/Period,27,1067,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,1080,        if (minutes == 0) {,0.0,0,-1,0
org/joda/time/Period,27,1081,            return this;,0.0,0,-1,0
org/joda/time/Period,27,1083,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,1084,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);",0.0,0,-1,0
org/joda/time/Period,27,1085,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,1098,        if (seconds == 0) {,0.0,0,-1,0
org/joda/time/Period,27,1099,            return this;,0.0,0,-1,0
org/joda/time/Period,27,1101,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,1102,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);",0.0,0,-1,0
org/joda/time/Period,27,1103,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,1116,        if (millis == 0) {,0.0,0,-1,0
org/joda/time/Period,27,1117,            return this;,0.0,0,-1,0
org/joda/time/Period,27,1119,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,1120,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",0.0,0,-1,0
org/joda/time/Period,27,1121,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,1143,        if (period == null) {,0.0,0,-1,0
org/joda/time/Period,27,1144,            return this;,0.0,0,-1,0
org/joda/time/Period,27,1146,        int[] values = getValues();  // cloned,0.0,0,-1,0
org/joda/time/Period,27,1147,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,1148,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,1149,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,1150,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,1151,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,1152,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,1153,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,1154,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE));",0.0,0,-1,0
org/joda/time/Period,27,1155,"        return new Period(values, getPeriodType());",0.0,0,-1,0
org/joda/time/Period,27,1169,        return plusYears(-years);,0.0,0,-1,0
org/joda/time/Period,27,1182,        return plusMonths(-months);,0.0,0,-1,0
org/joda/time/Period,27,1195,        return plusWeeks(-weeks);,0.0,0,-1,0
org/joda/time/Period,27,1208,        return plusDays(-days);,0.0,0,-1,0
org/joda/time/Period,27,1221,        return plusHours(-hours);,0.0,0,-1,0
org/joda/time/Period,27,1234,        return plusMinutes(-minutes);,0.0,0,-1,0
org/joda/time/Period,27,1247,        return plusSeconds(-seconds);,0.0,0,-1,0
org/joda/time/Period,27,1260,        return plusMillis(-millis);,0.0,0,-1,0
org/joda/time/Period,27,1284,"        checkYearsAndMonths(""Weeks"");",0.0,0,-1,0
org/joda/time/Period,27,1285,        long millis = getMillis();  // assign to a long,0.0,0,-1,0
org/joda/time/Period,27,1286,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/Period,27,1287,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/Period,27,1288,        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/Period,27,1289,        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/Period,27,1290,        long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/Period,27,1291,        return Weeks.weeks(FieldUtils.safeToInt(weeks));,0.0,0,-1,0
org/joda/time/Period,27,1314,"        checkYearsAndMonths(""Days"");",0.0,0,-1,0
org/joda/time/Period,27,1315,        long millis = getMillis();  // assign to a long,0.0,0,-1,0
org/joda/time/Period,27,1316,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/Period,27,1317,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/Period,27,1318,        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/Period,27,1319,        long days = millis / DateTimeConstants.MILLIS_PER_DAY;,0.0,0,-1,0
org/joda/time/Period,27,1320,"        days = FieldUtils.safeAdd(days, getDays());",0.0,0,-1,0
org/joda/time/Period,27,1321,"        days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));",0.0,0,-1,0
org/joda/time/Period,27,1322,        return Days.days(FieldUtils.safeToInt(days));,0.0,0,-1,0
org/joda/time/Period,27,1345,"        checkYearsAndMonths(""Hours"");",0.0,0,-1,0
org/joda/time/Period,27,1346,        long millis = getMillis();  // assign to a long,0.0,0,-1,0
org/joda/time/Period,27,1347,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/Period,27,1348,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/Period,27,1349,        long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,-1,0
org/joda/time/Period,27,1350,"        hours = FieldUtils.safeAdd(hours, getHours());",0.0,0,-1,0
org/joda/time/Period,27,1351,"        hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));",0.0,0,-1,0
org/joda/time/Period,27,1352,"        hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));",0.0,0,-1,0
org/joda/time/Period,27,1353,        return Hours.hours(FieldUtils.safeToInt(hours));,0.0,0,-1,0
org/joda/time/Period,27,1376,"        checkYearsAndMonths(""Minutes"");",0.0,0,-1,0
org/joda/time/Period,27,1377,        long millis = getMillis();  // assign to a long,0.0,0,-1,0
org/joda/time/Period,27,1378,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/Period,27,1379,        long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,-1,0
org/joda/time/Period,27,1380,"        minutes = FieldUtils.safeAdd(minutes, getMinutes());",0.0,0,-1,0
org/joda/time/Period,27,1381,"        minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));",0.0,0,-1,0
org/joda/time/Period,27,1382,"        minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));",0.0,0,-1,0
org/joda/time/Period,27,1383,"        minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));",0.0,0,-1,0
org/joda/time/Period,27,1384,        return Minutes.minutes(FieldUtils.safeToInt(minutes));,0.0,0,-1,0
org/joda/time/Period,27,1407,"        checkYearsAndMonths(""Seconds"");",0.0,0,-1,0
org/joda/time/Period,27,1408,        long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/Period,27,1409,"        seconds = FieldUtils.safeAdd(seconds, getSeconds());",0.0,0,-1,0
org/joda/time/Period,27,1410,"        seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));",0.0,0,-1,0
org/joda/time/Period,27,1411,"        seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));",0.0,0,-1,0
org/joda/time/Period,27,1412,"        seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));",0.0,0,-1,0
org/joda/time/Period,27,1413,"        seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));",0.0,0,-1,0
org/joda/time/Period,27,1414,        return Seconds.seconds(FieldUtils.safeToInt(seconds));,0.0,0,-1,0
org/joda/time/Period,27,1437,"        checkYearsAndMonths(""Duration"");",0.0,0,-1,0
org/joda/time/Period,27,1438,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",0.0,0,-1,0
org/joda/time/Period,27,1439,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0.0,0,-1,0
org/joda/time/Period,27,1440,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,0.0,0,-1,0
org/joda/time/Period,27,1441,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,0.0,0,-1,0
org/joda/time/Period,27,1442,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,0.0,0,-1,0
org/joda/time/Period,27,1443,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,-1,0
org/joda/time/Period,27,1444,        return new Duration(millis);,0.0,0,-1,0
org/joda/time/Period,27,1454,        if (getMonths() != 0) {,0.0,0,-1,0
org/joda/time/Period,27,1455,"            throw new UnsupportedOperationException(""Cannot convert to "" + destintionType + "" as this period contains months and months vary in length"");",0.0,0,-1,0
org/joda/time/Period,27,1457,        if (getYears() != 0) {,0.0,0,-1,0
org/joda/time/Period,27,1458,"            throw new UnsupportedOperationException(""Cannot convert to "" + destintionType + "" as this period contains years and years vary in length"");",0.0,0,-1,0
org/joda/time/Period,27,1460,    },0.0,0,-1,0
org/joda/time/Period,27,1489,        return normalizedStandard(PeriodType.standard());,0.0,0,-1,0
org/joda/time/Period,27,1525,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",0.0,0,-1,0
org/joda/time/Period,27,1526,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,0.0,0,-1,0
org/joda/time/Period,27,1527,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,0.0,0,-1,0
org/joda/time/Period,27,1528,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,0.0,0,-1,0
org/joda/time/Period,27,1529,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,0.0,0,-1,0
org/joda/time/Period,27,1530,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,-1,0
org/joda/time/Period,27,1531,"        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());",0.0,0,-1,0
org/joda/time/Period,27,1532,        int years = getYears();,0.0,0,-1,0
org/joda/time/Period,27,1533,        int months = getMonths();,0.0,0,-1,0
org/joda/time/Period,27,1534,        if (years != 0 || months != 0) {,0.0,0,-1,0
org/joda/time/Period,27,1535,"            years = FieldUtils.safeAdd(years, months / 12);",0.0,0,-1,0
org/joda/time/Period,27,1536,            months = months % 12;,0.0,0,-1,0
org/joda/time/Period,27,1537,            if (years != 0) {,0.0,0,-1,0
org/joda/time/Period,27,1538,                result = result.withYears(years);,0.0,0,-1,0
org/joda/time/Period,27,1540,            if (months != 0) {,0.0,0,-1,0
org/joda/time/Period,27,1541,                result = result.withMonths(months);,0.0,0,-1,0
org/joda/time/Period,27,1544,        return result;,0.0,0,-1,0
org/joda/time/MutablePeriod,27,65,"        super(0L, null, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,66,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,74,"        super(0L, type, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,75,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,86,"        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());",0.0,0,-1,0
org/joda/time/MutablePeriod,27,87,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,103,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",0.0,0,-1,0
org/joda/time/MutablePeriod,27,104,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,122,"        super(years, months, weeks, days, hours, minutes, seconds, millis, type);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,123,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,152,"        super(duration, null, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,153,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,193,"        super(duration, null, chronology);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,194,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,214,"        super(duration, type, chronology);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,215,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,225,"        super(startInstant, endInstant, null, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,226,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,236,"        super(startInstant, endInstant, type, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,237,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,248,"        super(startInstant, endInstant, null, chrono);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,249,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,260,"        super(startInstant, endInstant, type, chrono);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,261,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,274,"        super(startInstant, endInstant, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,275,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,288,"        super(startInstant, endInstant, type);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,289,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,298,"        super(startInstant, duration, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,299,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,309,"        super(startInstant, duration, type);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,310,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,319,"        super(duration, endInstant, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,320,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,330,"        super(duration, endInstant, type);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,331,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,346,"        super(period, null, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,347,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,363,"        super(period, type, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,364,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,380,"        super(period, null, chrono);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,381,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,406,        super.setValues(new int[size()]);,0.0,0,-1,0
org/joda/time/MutablePeriod,27,407,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,417,"        super.setValue(index, value);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,418,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,430,"        super.setField(field, value);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,431,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,458,"        super.setPeriod(years, months, weeks, days, hours, minutes, seconds, millis);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,459,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,469,        if (interval == null) {,0.0,0,-1,0
org/joda/time/MutablePeriod,27,470,            setPeriod(0L);,0.0,0,-1,0
org/joda/time/MutablePeriod,27,472,            Chronology chrono = DateTimeUtils.getChronology(interval.getChronology());,0.0,0,-1,0
org/joda/time/MutablePeriod,27,473,"            setPeriod(interval.getStartMillis(), interval.getEndMillis(), chrono);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,475,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,488,        if (start == end) {,0.0,0,-1,0
org/joda/time/MutablePeriod,27,489,            setPeriod(0L);,0.0,0,-1,0
org/joda/time/MutablePeriod,27,491,            long startMillis = DateTimeUtils.getInstantMillis(start);,0.0,0,-1,0
org/joda/time/MutablePeriod,27,492,            long endMillis = DateTimeUtils.getInstantMillis(end);,0.0,0,-1,0
org/joda/time/MutablePeriod,27,493,"            Chronology chrono = DateTimeUtils.getIntervalChronology(start, end);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,494,"            setPeriod(startMillis, endMillis, chrono);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,496,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,507,"        setPeriod(startInstant, endInstant, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,508,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,519,        chrono = DateTimeUtils.getChronology(chrono);,0.0,0,-1,0
org/joda/time/MutablePeriod,27,520,"        setValues(chrono.get(this, startInstant, endInstant));",0.0,0,-1,0
org/joda/time/MutablePeriod,27,521,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,535,"        setPeriod(duration, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,536,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,551,        long durationMillis = DateTimeUtils.getDurationMillis(duration);,0.0,0,-1,0
org/joda/time/MutablePeriod,27,552,"        setPeriod(durationMillis, chrono);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,553,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,567,"        setPeriod(duration, null);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,568,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,582,        chrono = DateTimeUtils.getChronology(chrono);,0.0,0,-1,0
org/joda/time/MutablePeriod,27,583,"        setValues(chrono.get(this, duration));",0.0,0,-1,0
org/joda/time/MutablePeriod,27,584,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,597,"        super.addField(field, value);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,598,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,609,        super.addPeriod(period);,0.0,0,-1,0
org/joda/time/MutablePeriod,27,610,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,629,        setPeriod(,0.0,0,-1,0
org/joda/time/MutablePeriod,27,639,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,649,        if (interval != null) {,0.0,0,-1,0
org/joda/time/MutablePeriod,27,650,            add(interval.toPeriod(getPeriodType()));,0.0,0,-1,0
org/joda/time/MutablePeriod,27,652,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,662,        if (duration != null) {,0.0,0,-1,0
org/joda/time/MutablePeriod,27,663,"            add(new Period(duration.getMillis(), getPeriodType()));",0.0,0,-1,0
org/joda/time/MutablePeriod,27,665,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,679,"        add(new Period(duration, getPeriodType()));",0.0,0,-1,0
org/joda/time/MutablePeriod,27,680,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,695,"        add(new Period(duration, getPeriodType(), chrono));",0.0,0,-1,0
org/joda/time/MutablePeriod,27,696,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,708,        super.mergePeriod(period);,0.0,0,-1,0
org/joda/time/MutablePeriod,27,709,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,718,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,727,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,736,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,745,"        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,755,"        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,764,"        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,773,"        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,782,"        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,793,"        super.setField(DurationFieldType.years(), years);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,794,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,804,"        super.addField(DurationFieldType.years(), years);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,805,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,815,"        super.setField(DurationFieldType.months(), months);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,816,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,826,"        super.addField(DurationFieldType.months(), months);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,827,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,837,"        super.setField(DurationFieldType.weeks(), weeks);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,838,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,848,"        super.addField(DurationFieldType.weeks(), weeks);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,849,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,859,"        super.setField(DurationFieldType.days(), days);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,860,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,870,"        super.addField(DurationFieldType.days(), days);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,871,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,881,"        super.setField(DurationFieldType.hours(), hours);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,882,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,892,"        super.addField(DurationFieldType.hours(), hours);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,893,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,903,"        super.setField(DurationFieldType.minutes(), minutes);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,904,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,914,"        super.addField(DurationFieldType.minutes(), minutes);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,915,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,936,"        super.addField(DurationFieldType.seconds(), seconds);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,937,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,958,"        super.addField(DurationFieldType.millis(), millis);",0.0,0,-1,0
org/joda/time/MutablePeriod,27,959,    },0.0,0,-1,0
org/joda/time/MutablePeriod,27,969,        return (MutablePeriod) clone();,0.0,0,-1,0
org/joda/time/MutablePeriod,27,979,            return super.clone();,0.0,0,-1,0
org/joda/time/MutablePeriod,27,980,        } catch (CloneNotSupportedException ex) {,0.0,0,-1,0
org/joda/time/MutablePeriod,27,981,"            throw new InternalError(""Clone error"");",0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,105,        super();,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,106,        iPrinter = printer;,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,107,        iParser = parser;,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,108,        iLocale = locale;,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,109,        iParseType = type;,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,110,    },0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,119,        return (iPrinter != null);,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,137,        return (iParser != null);,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,161,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,162,            return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,164,"        return new PeriodFormatter(iPrinter, iParser, locale, iParseType);",0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,173,        return iLocale;,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,187,        if (type == iParseType) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,188,            return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,190,"        return new PeriodFormatter(iPrinter, iParser, iLocale, type);",0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,199,        return iParseType;,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,210,        checkPrinter();,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,211,        checkPeriod(period);,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,213,"        getPrinter().printTo(buf, period, iLocale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,214,    },0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,223,        checkPrinter();,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,224,        checkPeriod(period);,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,226,"        getPrinter().printTo(out, period, iLocale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,227,    },0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,236,        checkPrinter();,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,237,        checkPeriod(period);,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,239,        PeriodPrinter printer = getPrinter();,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,240,"        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));",0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,241,"        printer.printTo(buf, period, iLocale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,242,        return buf.toString();,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,251,        if (iPrinter == null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,252,"            throw new UnsupportedOperationException(""Printing not supported"");",0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,254,    },0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,262,        if (period == null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,263,"            throw new IllegalArgumentException(""Period must not be null"");",0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,265,    },0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,288,        checkParser();,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,289,        checkPeriod(period);,0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,291,"        return getParser().parseInto(period, text, position, iLocale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatter,27,336,"            throw new UnsupportedOperationException(""Parsing not supported"");",0.0,0,-1,0
org/joda/time/DateTimeZone,27,1199,        Stub(String id) {,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1200,            iID = id;,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1201,        },0.0,0,-1,0
org/joda/time/DateTimeZone,27,1204,            out.writeUTF(iID);,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1205,        },0.0,0,-1,0
org/joda/time/DateTimeZone,27,1208,            iID = in.readUTF();,0.0,0,-1,0
org/joda/time/DateTimeZone,27,1209,        },0.0,0,-1,0
org/joda/time/DateTimeZone,27,1212,            return forID(iID);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,54,        return iChronology.getWeekOfWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,79,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,83,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,87,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,88,        return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,94,            return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,96,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,100,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,101,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,103,                int weekyear = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,104,                return iChronology.getWeeksInYear(weekyear);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,107,        return 53;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,111,        return value > 52 ? getMaximumValue(instant) : 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,27,118,        return iChronology.weekOfWeekyear();,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,754,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,762,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,50,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,54,        return iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,58,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,59,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,61,        int thisYear = get(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,63,"        return set(instant, newYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,67,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,71,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,72,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,75,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,76,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,78,"        return set(instant, wrappedYear);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,82,        FieldUtils.verifyValueBounds,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,84,"        return iChronology.setYear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,88,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,99,        return iChronology.isLeapYear(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,103,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,104,            return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,106,            return 0;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,115,        return iChronology.getMinYear();,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,123,        return iChronology.getYearMillis(get(instant));,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,127,        int year = get(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,128,        long yearStartMillis = iChronology.getYearMillis(year);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,129,        if (instant != yearStartMillis) {,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,131,            instant = iChronology.getYearMillis(year + 1);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,133,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,137,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicYearDateTimeField,27,144,        return iChronology.year();,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,45,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,46,        if (year <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,47,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,49,        return year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,53,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,57,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,61,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,86,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,87,            year = 1 - year;,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,89,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,101,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,105,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,109,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/GJYearOfEraDateTimeField,27,116,        return iChronology.yearOfEra();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,51,        return false;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,60,        if (iChronology.getYear(instant) <= 0) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,61,            return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,63,            return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,82,        int oldEra = get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,83,        if (oldEra != era) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,84,            int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,85,"            return iChronology.setYear(instant, -year);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,87,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,96,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,97,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,99,            return Long.MIN_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,104,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,105,"            return iChronology.setYear(0, 1);",0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,107,            return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,113,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,118,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,123,        return roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,135,        return DateTimeConstants.BCE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,139,        return DateTimeConstants.CE;,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJEraDateTimeField,27,150,        return iChronology.era();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,56,        return iChronology.getDayOfWeek(instant);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,103,        return DateTimeConstants.MONDAY;,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,112,        return DateTimeConstants.SUNDAY;,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,27,139,        return iChronology.dayOfWeek();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,47,        return iChronology.getDayOfMonth(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,55,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,59,        return iChronology.getDaysInMonthMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,63,        return iChronology.getDaysInMonthMax(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,70,                int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,71,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,73,            return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,75,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,79,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,80,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,82,                int month = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,83,                for (int j = 0; j < size; j++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,85,                        int year = values[j];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,86,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,89,                return iChronology.getDaysInMonthMax(month);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,92,        return getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.0,0,-1,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,27,103,        return iChronology.dayOfMonth();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,52,        return iChronology.getDayOfYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,60,        return 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,64,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,68,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,69,        return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,74,            int year = partial.get(DateTimeFieldType.year());,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,75,            return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,77,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,81,        int size = partial.size();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,82,        for (int i = 0; i < size; i++) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,84,                int year = values[i];,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,85,                return iChronology.getDaysInYear(year);,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,88,        return iChronology.getDaysInYearMax();,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,-1,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,27,100,        return iChronology.dayOfYear();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,27,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,27,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,27,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,27,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,-1,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,27,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,59,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,72,        return iChronology.getMonthOfYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,92,        if (months == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,93,            return instant; // the easy case,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,98,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,103,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,112,        int monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,113,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,114,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,115,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,118,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,119,            int remMonthToUse = monthToUse % iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,121,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,122,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,124,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,126,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,127,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,138,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,139,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,144,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,146,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,151,        int i_months = (int)months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,152,        if (i_months == months) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,153,"            return add(instant, i_months);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,158,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,160,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,164,        long monthToUse = thisMonth - 1 + months;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,165,        if (monthToUse >= 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,166,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,167,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,170,            monthToUse = Math.abs(monthToUse);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,171,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,172,            if (remMonthToUse == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,173,                remMonthToUse = iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,175,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,176,            if (monthToUse == 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,177,                yearToUse += 1;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,181,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,184,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,188,        int i_yearToUse = (int)yearToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,189,        int i_monthToUse = (int)monthToUse;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,193,        if (dayToUse > maxDay) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,194,            dayToUse = maxDay;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,197,        long datePart =,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,199,        return datePart + timePart;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,206,        if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,207,            return values;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,209,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,210,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,211,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,212,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,214,"            instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,215,"            return iChronology.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,217,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,232,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,237,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,238,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,241,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,242,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,243,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,244,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,246,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,250,        int minuendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,252,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,254,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,256,            if (subtrahendDom > minuendDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,260,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,265,        long minuendRem = minuendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,267,        long subtrahendRem = subtrahendInstant,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,270,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,271,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,274,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,294,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,298,        if (thisDom > maxDom) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,300,            thisDom = maxDom;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,314,        int thisYear = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,315,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,316,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,318,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,323,        return isLeap(instant) ? 1 : 0;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,333,        return MIN;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,338,        return iMax;,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,343,        int year = iChronology.getYear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,344,"        int month = iChronology.getMonthOfYear(instant, year);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,345,"        return iChronology.getYearMonthMillis(year, month);",0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,350,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,27,358,        return iChronology.monthOfYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,49,        return false;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,60,        return iChronology.getWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,72,        if (years == 0) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,73,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,75,"        return set(instant, get(instant) + years);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,79,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,92,"        return add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,96,        if (minuendInstant < subtrahendInstant) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,100,        int minuendWeekyear = get(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,101,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,103,        long minuendRem = remainder(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,104,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,111,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,112,        if (minuendRem < subtrahendRem) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,113,            difference--;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,115,        return difference;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,133,        int thisWeekyear = get( instant );,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,134,        if ( thisWeekyear == year ) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,135,            return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,140,        int thisDow = iChronology.getDayOfWeek(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,155,        if ( setToWeek > maxOutWeeks ) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,156,            setToWeek = maxOutWeeks;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,162,        long workInstant = instant; // Get a copy,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,168,"        workInstant = iChronology.setYear( workInstant, year );",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,173,        int workWoyYear = get( workInstant );,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,179,        if ( workWoyYear < year ) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,181,        } else if ( workWoyYear > year ) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,204,        return workInstant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,224,        return iChronology.getMinYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,228,        return iChronology.getMaxYear();,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,236,        if (wow > 1) {,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,239,        return instant;,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,243,        return instant - roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/BasicWeekyearDateTimeField,27,250,        return iChronology.weekyear();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,57,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,90,        return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,94,        if (zone == null) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,95,            zone = DateTimeZone.getDefault();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,97,        if (zone == getParam()) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,98,            return this;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,100,        if (zone == DateTimeZone.UTC) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,101,            return getBase();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,103,"        return new ZonedChronology(getBase(), zone);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,110,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,119,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,129,        return localToUTC(getBase().getDateTimeMillis,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,139,        DateTimeZone zone = getZone();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,140,        int offset = zone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,141,        instant -= offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,142,        if (offset != zone.getOffset(instant)) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,143,            throw new IllegalArgumentException,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,147,        return instant;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,213,            return field;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,216,            return (DateTimeField)converted.get(field);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,237,        if (this == obj) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,238,            return true;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,240,        if (obj instanceof ZonedChronology == false) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,241,            return false;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,243,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,244,        return,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,256,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,-1,0
org/joda/time/chrono/AssembledChronology,27,479,                    eras = f;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,770,"        YearInfo(int year, long firstDayMillis) {",0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,771,            iYear = year;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,772,            iFirstDayMillis = firstDayMillis;,0.0,0,-1,0
org/joda/time/chrono/BasicChronology,27,773,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,216,        Stub(DateTimeZone zone) {,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,217,            iZone = zone;,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,218,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,221,            return ISOChronology.getInstance(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,225,            out.writeObject(iZone);,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,226,        },0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,231,            iZone = (DateTimeZone)in.readObject();,0.0,0,-1,0
org/joda/time/chrono/ISOChronology,27,232,        },0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,286,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,302,"            return iField.getValue(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,306,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,310,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,314,"            return iField.getMillis(value, addOffset(instant));",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,318,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,319,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,324,            int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,325,"            instant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,326,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,330,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,331,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,337,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,338,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,344,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,345,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,350,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,354,            int offset = this.iZone.getOffsetFromLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,355,            long diff = instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,360,            return offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,364,            return iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,391,                throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,402,            return iField.isLenient();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,406,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,407,            return iField.get(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,411,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,412,"            return iField.getAsText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,416,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,417,"            return iField.getAsShortText(localInstant, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,421,"            return iField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,425,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,429,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,430,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,431,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,432,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,434,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,435,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,436,"               return iZone.convertLocalToUTC(localInstant, false);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,441,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,442,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,443,"                long localInstant = iField.add(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,444,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,446,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,447,"               localInstant = iField.add(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,448,"               return iZone.convertLocalToUTC(localInstant, false);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,453,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,454,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,455,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,456,                return localInstant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,458,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,459,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,460,"                return iZone.convertLocalToUTC(localInstant, false);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,465,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,466,"            localInstant = iField.set(localInstant, value);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,467,"            long result = iZone.convertLocalToUTC(localInstant, false);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,468,            if (get(result) != value) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,469,"                throw new IllegalFieldValueException(iField.getType(), new Integer(value),",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,474,            return result;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,479,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,480,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,481,"            return iZone.convertLocalToUTC(localInstant, false);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,485,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,486,            return iField.getDifference,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,492,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,493,            return iField.getDifferenceAsLong,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,499,            return iDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,503,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,507,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,508,            return iField.isLeap(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,512,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,513,            return iField.getLeapAmount(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,517,            return iLeapDurationField;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,521,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,522,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,523,                instant = iField.roundFloor(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,524,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,526,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,527,                localInstant = iField.roundFloor(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,528,"                return iZone.convertLocalToUTC(localInstant, false);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,533,            if (iTimeField) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,534,                int offset = getOffsetToAdd(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,535,                instant = iField.roundCeiling(instant + offset);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,536,                return instant - offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,538,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,539,                localInstant = iField.roundCeiling(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,540,"                return iZone.convertLocalToUTC(localInstant, false);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,545,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,546,            return iField.remainder(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,550,            return iField.getMinimumValue();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,554,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,555,            return iField.getMinimumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,559,            return iField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,563,"            return iField.getMinimumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,567,            return iField.getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,571,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,572,            return iField.getMaximumValue(localInstant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,576,            return iField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,580,"            return iField.getMaximumValue(instant, values);",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,584,            return iField.getMaximumTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,588,            return iField.getMaximumShortTextLength(locale);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,592,            int offset = this.iZone.getOffset(instant);,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,593,            long sum = instant + offset;,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,595,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,-1,0
org/joda/time/chrono/ZonedChronology,27,598,            return offset;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,599,"            this(julianField, gregorianField, cutoverMillis, false);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,600,        },0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,609,"                     long cutoverMillis, boolean convertByWeekyear) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,610,            super(gregorianField.getType());,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,611,            iJulianField = julianField;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,612,            iGregorianField = gregorianField;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,613,            iCutover = cutoverMillis;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,614,            iConvertByWeekyear = convertByWeekyear;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,617,            iDurationField = gregorianField.getDurationField();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,619,            DurationField rangeField = gregorianField.getRangeDurationField();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,620,            if (rangeField == null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,621,                rangeField = julianField.getRangeDurationField();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,623,            iRangeDurationField = rangeField;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,624,        },0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,627,            return false;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,631,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,632,                return iGregorianField.get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,634,                return iJulianField.get(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,639,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,640,"                return iGregorianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,642,"                return iJulianField.getAsText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,647,"            return iGregorianField.getAsText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,651,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,652,"                return iGregorianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,654,"                return iJulianField.getAsShortText(instant, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,659,"            return iGregorianField.getAsShortText(fieldValue, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,663,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,667,"            return iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,673,            if (valueToAdd == 0) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,674,                return values;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,676,            if (DateTimeUtils.isContiguous(partial)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,677,                long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,678,"                for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,679,"                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,681,"                instant = add(instant, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,682,"                return GJChronology.this.get(partial, instant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,684,"                return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,689,"            return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,693,"            return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,697,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,698,"                instant = iGregorianField.set(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,699,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,701,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,702,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,705,                    if (get(instant) != value) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,706,                        throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,711,"                instant = iJulianField.set(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,712,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,714,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,715,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,718,                    if (get(instant) != value) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,719,                       throw new IllegalFieldValueException,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,724,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,728,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,729,"                instant = iGregorianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,730,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,732,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,733,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,738,"                instant = iJulianField.set(instant, text, locale);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,739,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,741,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,742,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,747,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,751,            return iDurationField;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,755,            return iRangeDurationField;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,759,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,760,                return iGregorianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,762,                return iJulianField.isLeap(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,767,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,768,                return iGregorianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,770,                return iJulianField.getLeapAmount(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,775,            return iGregorianField.getLeapDurationField();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,782,            return iJulianField.getMinimumValue();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,786,            return iJulianField.getMinimumValue(partial);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,790,"            return iJulianField.getMinimumValue(partial, values);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,794,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,795,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,798,            int min = iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,802,"            instant = iGregorianField.set(instant, min);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,803,            if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,804,                min = iGregorianField.get(iCutover);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,807,            return min;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,813,            return iGregorianField.getMaximumValue();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,817,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,818,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,821,            int max = iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,825,"            instant = iJulianField.set(instant, max);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,826,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,827,"                max = iJulianField.get(iJulianField.add(iCutover, -1));",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,830,            return max;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,834,"            long instant = GJChronology.getInstanceUTC().set(partial, 0L);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,835,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,839,            Chronology chrono = GJChronology.getInstanceUTC();,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,840,            long instant = 0L;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,841,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,842,                DateTimeField field = partial.getFieldType(i).getField(chrono);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,843,                if (values[i] <= field.getMaximumValue(instant)) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,844,"                    instant = field.set(instant, values[i]);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,847,            return getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,851,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,852,                instant = iGregorianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,853,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,855,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,856,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,860,                instant = iJulianField.roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,862,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,866,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,867,                instant = iGregorianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,869,                instant = iJulianField.roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,870,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,872,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,873,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,877,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,881,"            return Math.max(iJulianField.getMaximumTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,886,"            return Math.max(iJulianField.getMaximumShortTextLength(locale),",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,891,            if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,892,                return julianToGregorianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,894,                return julianToGregorianByYear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,899,            if (iConvertByWeekyear) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,900,                return gregorianToJulianByWeekyear(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,902,                return gregorianToJulianByYear(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,50,        int year = getWrappedField().get(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,51,        return year < 0 ? -year : year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,55,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,59,"        return getWrappedField().add(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,63,"        return getWrappedField().addWrapField(instant, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,80,        if (getWrappedField().get(instant) < 0) {,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,81,            year = -year;,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,83,"        return super.set(instant, year);",0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,95,        return getWrappedField().roundFloor(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,99,        return getWrappedField().roundCeiling(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,103,        return getWrappedField().remainder(instant);,0.0,0,-1,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,27,110,        return INSTANCE;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,921,"            this(julianField, gregorianField, null, cutoverMillis, false);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,922,        },0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,932,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,933,        },0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,943,        {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,944,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,945,            if (durationField == null) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,946,"                durationField = new LinkedDurationField(iDurationField, this);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,948,            iDurationField = durationField;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,949,        },0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,952,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,953,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,954,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,956,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,957,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,961,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,962,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,964,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,965,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,969,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,973,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,974,"                instant = iGregorianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,975,                if (instant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,977,                    if (instant + iGapDuration < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,978,                        instant = gregorianToJulian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,982,"                instant = iJulianField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,983,                if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,985,                    if (instant - iGapDuration >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,986,                        instant = julianToGregorian(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,990,            return instant;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,994,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,995,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,996,"                    return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1000,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1001,"                return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1003,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1004,"                    return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1008,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1009,"                return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1014,            if (minuendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1015,                if (subtrahendInstant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1016,"                    return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1020,                minuendInstant = gregorianToJulian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1021,"                return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1023,                if (subtrahendInstant < iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1024,"                    return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1028,                minuendInstant = julianToGregorian(minuendInstant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1029,"                return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1044,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1045,                return iGregorianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1047,                return iJulianField.getMinimumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1052,            if (instant >= iCutover) {,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1053,                return iGregorianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1055,                return iJulianField.getMaximumValue(instant);,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1070,"            super(durationField, durationField.getType());",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1071,            iField = dateTimeField;,0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1072,        },0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1075,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1079,"            return iField.add(instant, value);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1083,"            return iField.getDifference(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/chrono/GJChronology,27,1087,"            return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,989,"        CompositeAffix(PeriodFieldAffix left, PeriodFieldAffix right) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,990,            iLeft = left;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,991,            iRight = right;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,992,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,995,            return iLeft.calculatePrintedLength(value),0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1000,"            iLeft.printTo(buf, value);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1001,"            iRight.printTo(buf, value);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1002,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1005,"            iLeft.printTo(out, value);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1006,"            iRight.printTo(out, value);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1007,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1010,"            position = iLeft.parse(periodStr, position);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1011,            if (position >= 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1012,"                position = iRight.parse(periodStr, position);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1014,            return position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1018,"            int pos = iLeft.scan(periodStr, position);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1019,            if (pos >= 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1020,"                return iRight.scan(periodStr, pos);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1022,            return ~position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,141,        if (iNotPrinter) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,142,            return null;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,144,        return toFormatter().getPrinter();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,160,        if (iNotParser) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,161,            return null;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,163,        return toFormatter().getParser();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,179,            iElementPairs.clear();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,193,"            throw new IllegalArgumentException(""No formatter supplied"");",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,212,        if (printer == null && parser == null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,213,"            throw new IllegalArgumentException(""No printer or parser supplied"");",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,215,        clearPrefix();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,216,"        append0(printer, parser);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,217,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,229,"            throw new IllegalArgumentException(""Literal must not be null"");",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,245,        iMinPrintedDigits = minDigits;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,246,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,256,        iMaxParsedDigits = maxDigits;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,257,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,266,        iRejectSignedValues = v;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,267,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,280,        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,281,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,292,        iPrintZeroSetting = PRINT_ZERO_RARELY_FIRST;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,293,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,303,        iPrintZeroSetting = PRINT_ZERO_IF_SUPPORTED;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,304,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,315,        iPrintZeroSetting = PRINT_ZERO_ALWAYS;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,316,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,329,        iPrintZeroSetting = PRINT_ZERO_NEVER;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,330,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,343,        if (text == null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,344,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,346,        return appendPrefix(new SimpleAffix(text));,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,363,        if (singularText == null || pluralText == null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,364,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,366,"        return appendPrefix(new PluralAffix(singularText, pluralText));",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,378,        if (prefix == null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,379,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,381,        if (iPrefix != null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,382,"            prefix = new CompositeAffix(iPrefix, prefix);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,384,        iPrefix = prefix;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,385,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,476,        appendField(SECONDS);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,477,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,488,        appendField(SECONDS_MILLIS);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,489,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,513,        appendField(MILLIS);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,514,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,525,"        appendField(7, 3);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,526,        return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,553,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,573,        if (singularText == null || pluralText == null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,574,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,576,"        return appendSuffix(new PluralAffix(singularText, pluralText));",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,595,            originalPrinter = null;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,596,            originalParser = null;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,602,"            throw new IllegalStateException(""No field to apply suffix to"");",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,632,"        return appendSeparator(text, text, null, true, true);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,672,"        return appendSeparator(text, text, null, true, false);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,697,"        return appendSeparator(text, finalText, null, true, true);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,724,"        return appendSeparator(text, finalText, variants, true, true);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,731,            throw new IllegalArgumentException();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,739,            if (useAfter && useBefore == false) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,740,                Separator separator = new Separator(,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,743,"                append0(separator, separator);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,745,            return this;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,753,                lastSeparator = (Separator) pairs.get(i);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,754,"                pairs = pairs.subList(i + 1, pairs.size());",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,755,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,762,"            throw new IllegalStateException(""Cannot have two adjacent separators"");",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,780,"            throw new IllegalStateException(""Prefix not followed by field"");",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,796,"            throw new IllegalStateException(""Builder has created neither a printer nor a parser"");",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,807,"            return new PeriodFormatter(null, (PeriodParser) comp[1]);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,809,"            return new PeriodFormatter((PeriodPrinter) comp[0], null);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,820,"                return new Object[] {elementPairs.get(0), elementPairs.get(1)};",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1771,                iPrinters = null;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1778,                iParsers = null;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1786,            int sum = 0;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1787,            PeriodPrinter[] printers = iPrinters;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1788,            for (int i=printers.length; sum < stopAt && --i>=0; ) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1789,"                sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1791,            return sum;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1795,            int sum = 0;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1796,            PeriodPrinter[] printers = iPrinters;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1797,            for (int i=printers.length; --i>=0; ) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1798,"                sum += printers[i].calculatePrintedLength(period, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1800,            return sum;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1804,            PeriodPrinter[] printers = iPrinters;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1805,            int len = printers.length;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1806,            for (int i=0; i<len; i++) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1807,"                printers[i].printTo(buf, period, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1809,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1812,            PeriodPrinter[] printers = iPrinters;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1813,            int len = printers.length;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1814,            for (int i=0; i<len; i++) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1815,"                printers[i].printTo(out, period, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1817,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1824,                throw new UnsupportedOperationException();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1840,"                        addArrayToList(printerList, ((Composite) element).iPrinters);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1849,"                        addArrayToList(parserList, ((Composite) element).iParsers);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1858,            if (array != null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1859,                for (int i=0; i<array.length; i++) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1860,                    list.add(array[i]);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1863,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1603,                TreeSet<String> parsedSet = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1604,                parsedSet.add(text);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1605,                parsedSet.add(finalText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1606,                if (variants != null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1607,                    for (int i=variants.length; --i>=0; ) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1608,                        parsedSet.add(variants[i]);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1611,                ArrayList<String> parsedList = new ArrayList<String>(parsedSet);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1612,                Collections.reverse(parsedList);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1613,                iParsedForms = parsedList.toArray(new String[parsedList.size()]);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1623,"            int sum = iBeforePrinter.countFieldsToPrint(period, stopAt, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1624,            if (sum < stopAt) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1625,"                sum += iAfterPrinter.countFieldsToPrint(period, stopAt, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1627,            return sum;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1631,            PeriodPrinter before = iBeforePrinter;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1632,            PeriodPrinter after = iAfterPrinter;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1634,"            int sum = before.calculatePrintedLength(period, locale)",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1637,            if (iUseBefore) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1638,"                if (before.countFieldsToPrint(period, 1, locale) > 0) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1639,                    if (iUseAfter) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1640,"                        int afterCount = after.countFieldsToPrint(period, 2, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1641,                        if (afterCount > 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1642,                            sum += (afterCount > 1 ? iText : iFinalText).length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1644,                    } else {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1645,                        sum += iText.length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1648,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1649,                sum += iText.length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1652,            return sum;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1656,            PeriodPrinter before = iBeforePrinter;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1657,            PeriodPrinter after = iAfterPrinter;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1659,"            before.printTo(buf, period, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1660,            if (iUseBefore) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1661,"                if (before.countFieldsToPrint(period, 1, locale) > 0) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1662,                    if (iUseAfter) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1663,"                        int afterCount = after.countFieldsToPrint(period, 2, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1664,                        if (afterCount > 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1665,                            buf.append(afterCount > 1 ? iText : iFinalText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1667,                    } else {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1668,                        buf.append(iText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1671,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1672,                buf.append(iText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1674,"            after.printTo(buf, period, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1675,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1678,            PeriodPrinter before = iBeforePrinter;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1679,            PeriodPrinter after = iAfterPrinter;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1681,"            before.printTo(out, period, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1682,            if (iUseBefore) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1683,"                if (before.countFieldsToPrint(period, 1, locale) > 0) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1684,                    if (iUseAfter) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1685,"                        int afterCount = after.countFieldsToPrint(period, 2, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1686,                        if (afterCount > 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1687,                            out.write(afterCount > 1 ? iText : iFinalText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1689,                    } else {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1690,                        out.write(iText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1693,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1694,                out.write(iText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1696,"            after.printTo(out, period, locale);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1697,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1706,                return position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1731,                return position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1736,                return ~oldPos;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1741,                return ~oldPos;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1547,            return 0;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1551,            return iText.length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1555,            buf.append(iText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1556,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1559,            out.write(iText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1560,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1568,            return ~position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1071,"                suffix = new CompositeAffix(field.iSuffix, suffix);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1077,            if (stopAt <= 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1078,                return 0;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1080,            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1081,                return 1;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1083,            return 0;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1087,            long valueLong = getFieldValue(period);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1088,            if (valueLong == Long.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1089,                return 0;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1092,"            int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1093,            if (iFieldType >= SECONDS_MILLIS) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1096,"                sum = Math.max(sum, 4);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1098,                sum++;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1099,                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1101,                    sum -= 4; // remove three digits and decimal point,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1104,                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1106,            int value = (int) valueLong;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1108,            if (iPrefix != null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1109,                sum += iPrefix.calculatePrintedLength(value);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1111,            if (iSuffix != null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1112,                sum += iSuffix.calculatePrintedLength(value);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1115,            return sum;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1119,            long valueLong = getFieldValue(period);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1120,            if (valueLong == Long.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1121,                return;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1123,            int value = (int) valueLong;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1124,            if (iFieldType >= SECONDS_MILLIS) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1125,                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1128,            if (iPrefix != null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1129,"                iPrefix.printTo(buf, value);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1131,            int minDigits = iMinPrintedDigits;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1132,            if (minDigits <= 1) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1133,"                FormatUtils.appendUnpaddedInteger(buf, value);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1135,"                FormatUtils.appendPaddedInteger(buf, value, minDigits);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1137,            if (iFieldType >= SECONDS_MILLIS) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1138,                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1139,                if (iFieldType == SECONDS_MILLIS || dp > 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1140,                    buf.append('.');,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1141,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1144,            if (iSuffix != null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1145,"                iSuffix.printTo(buf, value);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1147,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1150,            long valueLong = getFieldValue(period);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1151,            if (valueLong == Long.MAX_VALUE) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1152,                return;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1154,            int value = (int) valueLong;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1155,            if (iFieldType >= SECONDS_MILLIS) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1156,                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1159,            if (iPrefix != null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1160,"                iPrefix.printTo(out, value);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1162,            int minDigits = iMinPrintedDigits;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1163,            if (minDigits <= 1) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1164,"                FormatUtils.writeUnpaddedInteger(out, value);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1166,"                FormatUtils.writePaddedInteger(out, value, minDigits);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1168,            if (iFieldType >= SECONDS_MILLIS) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1169,                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1170,                if (iFieldType == SECONDS_MILLIS || dp > 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1171,                    out.write('.');,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1172,"                    FormatUtils.writePaddedInteger(out, dp, 3);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1175,            if (iSuffix != null) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1176,"                iSuffix.printTo(out, value);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1178,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1188,                return mustParse ? ~position : position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1192,"                position = iPrefix.parse(text, position);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1193,                if (position >= 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1195,                    mustParse = true;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1198,                    if (!mustParse) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1202,                        return ~position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1204,                    return position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1224,                    return suffixPos;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1231,                return position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1238,"                limit = Math.min(iMaxParsedDigits, text.length() - position);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1249,                    boolean negative = c == '-';,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1252,                    if (length + 1 >= limit || ,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1255,                        break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1258,                    if (negative) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1259,                        length++;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1262,                        position++;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1265,"                    limit = Math.min(limit + 1, text.length() - position);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1266,                    continue;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1272,"                    if ((c == '.' || c == ',')",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1274,                        if (fractPos >= 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1276,                            break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1278,                        fractPos = position + length + 1;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1280,"                        limit = Math.min(limit + 1, text.length() - position);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1289,                return ~position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1297,                return position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1302,"                setFieldValue(period, iFieldType, parseInt(text, position, length));",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1307,"                int wholeValue = parseInt(text, position, fractPos - position - 1);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1308,"                setFieldValue(period, SECONDS, wholeValue);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1310,                int fractLen = position + length - fractPos;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1312,                if (fractLen <= 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1313,                    fractValue = 0;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1315,                    if (fractLen >= 3) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1316,"                        fractValue = parseInt(text, fractPos, 3);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1318,"                        fractValue = parseInt(text, fractPos, fractLen);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1319,                        if (fractLen == 1) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1320,                            fractValue *= 100;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1322,                            fractValue *= 10;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1325,                    if (wholeValue < 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1326,                        fractValue = -fractValue;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1330,"                setFieldValue(period, MILLIS, fractValue);",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1351,"                return Integer.parseInt(text.substring(position, position + length));",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1353,            if (length <= 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1354,                return 0;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1356,            int value = text.charAt(position++);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1357,            length--;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1359,            if (value == '-') {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1360,                if (--length < 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1361,                    return 0;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1363,                negative = true;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1364,                value = text.charAt(position++);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1366,                negative = false;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1368,            value -= '0';,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1369,            while (length-- > 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1370,                value = ((value << 3) + (value << 1)) + text.charAt(position++) - '0';,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1372,            return negative ? -value : value;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1380,            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1381,                type = null; // Don't need to check if supported.,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1383,                type = period.getPeriodType();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1385,"            if (type != null && isSupported(type, iFieldType) == false) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1386,                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1391,            switch (iFieldType) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1393,                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1395,                value = period.get(DurationFieldType.years());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1396,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1398,                value = period.get(DurationFieldType.months());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1399,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1401,                value = period.get(DurationFieldType.weeks());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1402,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1404,                value = period.get(DurationFieldType.days());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1405,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1407,                value = period.get(DurationFieldType.hours());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1408,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1410,                value = period.get(DurationFieldType.minutes());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1411,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1413,                value = period.get(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1414,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1416,                value = period.get(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1417,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1420,                int seconds = period.get(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1421,                int millis = period.get(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1422,                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1427,            if (value == 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1428,                switch (iPrintZeroSetting) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1430,                    return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1432,                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1433,                        for (int i = iFieldType + 1; i <= MAX_FIELD; i++) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1434,"                            if (isSupported(type, i) && iFieldFormatters[i] != null) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1435,                                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1439,                        return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1443,                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1444,"                        int i = Math.min(iFieldType, 8);  // line split out for IBM JDK",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1445,                        i--;                              // see bug 1660490,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1446,                        for (; i >= 0 && i <= MAX_FIELD; i--) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1447,"                            if (isSupported(type, i) && iFieldFormatters[i] != null) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1448,                                return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1451,                    } else {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1452,                        return Long.MAX_VALUE;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1458,            return value;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1462,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1463,                if (period.getValue(i) != 0) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1464,                    return false;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1467,            return true;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1471,            switch (field) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1473,                return false;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1475,                return type.isSupported(DurationFieldType.years());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1477,                return type.isSupported(DurationFieldType.months());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1479,                return type.isSupported(DurationFieldType.weeks());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1481,                return type.isSupported(DurationFieldType.days());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1483,                return type.isSupported(DurationFieldType.hours());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1485,                return type.isSupported(DurationFieldType.minutes());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1487,                return type.isSupported(DurationFieldType.seconds());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1489,                return type.isSupported(DurationFieldType.millis());,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1492,                return type.isSupported(DurationFieldType.seconds()) ||,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1500,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1502,                period.setYears(value);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1503,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1505,                period.setMonths(value);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1506,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1508,                period.setWeeks(value);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1509,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1511,                period.setDays(value);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1512,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1514,                period.setHours(value);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1515,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1517,                period.setMinutes(value);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,1518,                break;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,862,            return iText.length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,866,            buf.append(iText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,867,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,870,            out.write(iText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,871,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,879,            return ~position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,914,"        PluralAffix(String singularText, String pluralText) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,915,            iSingularText = singularText;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,916,            iPluralText = pluralText;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,917,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,920,            return (value == 1 ? iSingularText : iPluralText).length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,924,            buf.append(value == 1 ? iSingularText : iPluralText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,925,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,928,            out.write(value == 1 ? iSingularText : iPluralText);,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,929,        },0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,932,            String text1 = iPluralText;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,933,            String text2 = iSingularText; ,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,935,            if (text1.length() < text2.length()) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,937,                String temp = text1;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,938,                text1 = text2;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,939,                text2 = temp;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,942,            if (periodStr.regionMatches,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,944,                return position + text1.length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,946,            if (periodStr.regionMatches,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,948,                return position + text2.length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,951,            return ~position;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,955,            String text1 = iPluralText;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,956,            String text2 = iSingularText; ,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,958,            if (text1.length() < text2.length()) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,960,                String temp = text1;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,961,                text1 = text2;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,962,                text2 = temp;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,965,            int textLength1 = text1.length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,966,            int textLength2 = text2.length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,968,            int sourceLength = periodStr.length();,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,969,            for (int pos = position; pos < sourceLength; pos++) {,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,970,"                if (periodStr.regionMatches(true, pos, text1, 0, textLength1)) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,971,                    return pos;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,973,"                if (periodStr.regionMatches(true, pos, text2, 0, textLength2)) {",0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,974,                    return pos;,0.0,0,-1,0
org/joda/time/format/PeriodFormatterBuilder,27,977,            return ~position;,0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,52,        super();,0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,53,    },0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,97,        if (cAlternate == null) {,0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,98,            cAlternate = new PeriodFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,112,        return cAlternate;,0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,124,        if (cAlternateExtended == null) {,0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,125,            cAlternateExtended = new PeriodFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,143,        return cAlternateExtended;,0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,155,        if (cAlternateWithWeeks == null) {,0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,156,            cAlternateWithWeeks = new PeriodFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,171,        return cAlternateWithWeeks;,0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,183,        if (cAlternateExtendedWihWeeks == null) {,0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,184,            cAlternateExtendedWihWeeks = new PeriodFormatterBuilder(),0.0,0,-1,0
org/joda/time/format/ISOPeriodFormat,27,203,        return cAlternateExtendedWihWeeks;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,264,            chronology = DateTimeUtils.getChronology(chronology);,0.0,0,-1,0
org/joda/time/DurationFieldType,27,266,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,27,268,                    return chronology.eras();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,270,                    return chronology.centuries();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,272,                    return chronology.weekyears();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,274,                    return chronology.years();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,276,                    return chronology.months();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,278,                    return chronology.weeks();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,280,                    return chronology.days();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,282,                    return chronology.halfdays();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,284,                    return chronology.hours();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,286,                    return chronology.minutes();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,288,                    return chronology.seconds();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,290,                    return chronology.millis();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,293,                    throw new InternalError();,0.0,0,-1,0
org/joda/time/DurationFieldType,27,303,            switch (iOrdinal) {,0.0,0,-1,0
org/joda/time/DurationFieldType,27,305,                    return ERAS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,307,                    return CENTURIES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,309,                    return WEEKYEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,311,                    return YEARS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,313,                    return MONTHS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,315,                    return WEEKS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,317,                    return DAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,319,                    return HALFDAYS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,321,                    return HOURS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,323,                    return MINUTES_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,325,                    return SECONDS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,327,                    return MILLIS_TYPE;,0.0,0,-1,0
org/joda/time/DurationFieldType,27,330,                    return this;,0.0,0,-1,0
